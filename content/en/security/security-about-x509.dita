<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_xmh_m4m_s5">
  <title>Rotating X.509 Certificates</title><shortdesc>Rotate a certificate when it expires or a widespread breach occurs.</shortdesc>
  
  
  
  
  <body>
     <section><title>Introduction</title>
       <p>Certificate rotation is needed when a certificate expires, if you are considering moving from an old CA authority to a new CA authority, 
         there is a change in the policy of the certificates issued by the CA, 
         or in the case of a widespread breach of security occurs in the system.</p>
       <p>You need to have a plan in place to renew the CA well before it expires. 
         X.509 certificate rotation in Couchbase is an online operation and does not require a node or cluster restart. 
         You can be reassured that the application will have continued access to Couchbase without getting hit 
         with a downtime during the rotation operation.</p>
       
       
     </section>
    <section><title>How to Rotate an X.509 Certificate in Couchbase</title>
      
 
      <ol>
        <li><b>Generate a new certificate.</b>
          <p>Before you rotate a certificate, you need to generate a new certificate.
            </p><p>Typically, your Certificate Authority (CA) will give you a self-service option to
            re-issue certificates. If this is not the case, you can manually regenerate your new
            X.509 certificate and <xref href="security-x509-setup.dita#topic_jn3_fzk_w5">configure
              it in Couchbase.</xref>
          </p><ol>
            <li>Renew the root CA certificate<p>The root certificate authority (CA) is the topmost
                CA in a CA hierarchy. Its validity period is typically longer, between 10 and 20
                years. </p><note type="note">When you renew the root CA, you have the option of
                reusing its existing private key. If you keep the same private key on your root CA,
                all certificates can continue to validate successfully against the new root; all
                that's required of you is to trust the new root. </note></li>
            <li>Generate the root CA for the first time
              <codeblock>openssl genrsa -out <b>ca.key</b> 2048
openssl req -new -x509  -days 3650 -sha256 -key <b>ca.key</b> -out <b>ca.pem</b> \
-subj '/C=UA/O=My Company/CN=My Company Root CA'</codeblock></li>
            <li>After ten years, the renewal time for the root CA comes up! <ul>
                <li>Renew the root CA using the existing <codeph>ca.key</codeph>:
                  <codeblock>openssl req -new -key <b>ca.key</b> -out <b>newcsr.csr</b> 
openssl x509 -req -days 3650 -sha256 -in <b>newcsr.csr</b> -signkey <b>newca.key</b> -out <b>newca.pem</b></codeblock></li>
                <li>Generate a completely new root CA similar to what you did the first time:
                  <codeblock>openssl genrsa -out <b>newca.key</b> 2048
openssl req -new -x509  -days 3650 -sha256 -key <b>newca.key</b> -out <b>newca.pem</b> \
-subj '/C=UA/O=My Company/CN=My Company Root CA' </codeblock></li>
              </ul></li>
            <li>Renew the intermediate certificates.<p>For the intermediate CAs, a possible strategy
                might be to renew them for a year to six months before they expire and reuse the
                existing key. </p><p>By replacing the old chain file with the new chain file (that contains the updated intermediate
                certificate), rotation of the intermediate certificate can be performed:
                <codeblock>> cat <b>pkey.pem</b> ../int/<b>newint.pem</b> &lt;possibly other intermediate CAs&gt; > <b>chain.pem</b> </codeblock></p></li>
          </ol></li>
        <li><b>Deploy the CA public key and intermediate certificates</b>
          <p>Before modifying anything on the server-side, deploy the CA public key and intermediate
            certificates in the certificate stores used by your client browser and the SDK
            language.</p><p>For example, here are steps to do that for <xref
              href="http://www.cyberciti.biz/faq/firefox-adding-trusted-ca/" format="html"
              scope="external">Firefox</xref> and <xref
              href="http://blogmines.com/blog/how-to-import-a-certificate-in-google-chrome/"
              format="html" scope="external">Chrome</xref>.</p></li>
        <li><b>Rotate certificates on the server</b>
         
          
          <ol>
            <li>Configure the new root CA certificate (<codeph>newca.pem</codeph> is the new root CA certificate). 
              <ul>
                <li>Using CLI:
                  <codeblock>couchbase-cli ssl-manage -c &lt;node-name>:8091 -u Administrator -p password \
--upload-cluster-ca=<b>newca.pem</b>  </codeblock></li>
                <li>Using REST:
                  <codeblock>curl -X POST --data-binary "@newca.pem" \
http://Administrator:password@127.0.0.1:8091/controller/uploadClusterCA</codeblock></li>
              </ul>
            </li>
            <li>Configure the new intermediate and node certificate. <p>For each node, copy over new
                  <codeph>chain.pem</codeph> file, and per node private key (new
                  <codeph>pkey.pem</codeph> file, if the node certificate is rotated) to the
                  <codeph>inbox</codeph> folder.</p><ul>
                <li>Using CLI:
                  <codeblock>couchbase-cli ssl-manage -c &lt;node-name>:8091 -u Administrator -p password \
    --set-node-certificate     </codeblock></li>
                <li>Using REST:
                  <codeblock>curl -X POST http://Administrator:password@[node-name]:8091/node/controller/reloadCertificate </codeblock></li>
              </ul></li>
          
          </ol>
        </li>  
      <li><b>Test the server CA certificate</b>
          <p>You can also use OpenSSL's <codeph>s_client</codeph> by trying to connect to a server
            that you know is using a certificate signed by the CA that you just installed:
            <codeblock>> openssl s_client -connect https://&lt;hostname&gt;:8091 -CApath &lt;root ca public key&gt; </codeblock></p></li>
        <li><b>Troubleshoot X.509 certificates</b>
          <p>During the development process these external tools might come in handy for verifying
            and debugging SSL traffic: <ul>
              <li><cmdname>openssl</cmdname>: OpenSSL command line tool</li>
              <li>wireshark: Network traffic analyzer</li>
              <li>nmap: Sophisticated security scanner </li>
            </ul></p></li>
      <li><b>Revert from the X.509 to the self-signed certificate</b>
          <p>If you configured Couchbase to use X.509 certificates, and you want to go back to the
            self-signed certificates, you can do this by regenerating the self-signed cluster
            certificate using CLI or REST.  </p><note type="warning">Moving from CA certificates to
            self-signed certificates will cause application downtime because you need to reconfigure
            the self-signed cluster certificate on the client machines after self-signed certificate
            regeneration.</note><ul>
            <li>Using CLI:
              <codeblock>couchbase-cli ssl-manage -c &lt;hostname&gt;:8091 -u Administrator -p password \
    --regenerate-cert=/tmp/test.pem            </codeblock></li>
            <li>Using REST:
              <codeblock>curl -X POST  http://Administrator:password@remoteHost:8091/controller/regenerateCertificate</codeblock></li>
          </ul>
        </li>
        
      </ol>
    </section>
  
  </body>
</topic>
