<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="security-client-ssl">
	<title>Secure Data Access</title>
	<shortdesc>Couchbase Server client libraries support client-side encryption using the Secure
		Sockets Layer (SSL) and Transport Layer Security (TLS).</shortdesc>
	
		
	<conbody>
		<note>Couchbase Server and SDKs support TLS v1.0 - 1.2 by default. Which version you use depends
			on the client and server version. Older versions might still use SSL, and should be
			upgraded to newer version of the SDK.</note>
		<p>Starting with Couchbase Server version 4.1.1, you can set the minimum version of TLS 1.2 or
			higher using the following command:
			<codeblock>curl -X POST -u Administrator:password http://127.0.0.1:8091/diag/eval -d "ns_config:set(ssl_minimum_protocol, 'tlsv1.2’)”</codeblock></p>
		<p>The TLS 1.2 setup command can be executed per cluster. The command has to be invoked using full
			administrator privileges.</p>
		<note type="note">For changes to be affective on port 18092, cluster restart is needed. 
			For changes to be affective just on port 18091, no cluster restart is needed.
		</note>
		<p>Encryption for data access is performed through client-server communication and view
			access.</p>
		

		<section><title>SSL/TLS Based Client-server Communication </title><p>Couchbase Server client
				libraries support client-side encryption using the SSL/TLS protocol by encrypting
				data in-flight between the client and the server. For Couchbase clients released
				after version 2.0, Couchbase Server provides secure client-server communication that
				does not require configuration. </p><p>When a TLS connection is established, a
				handshaking, known as the <term>TLS Handshake Protocol</term>, occurs. Within this
				handshake, a client hello (<codeph>ClientHello</codeph>) and a server hello
					(<codeph>ServerHello</codeph>) message are passed (RFC 5246). First, the client
				sends a cipher suite list, a list of the cipher suites that it supports, in order of
				preference. Then the server replies with the cipher suite that it has selected from
				the client cipher suite list. Check whether your clients support TLS. </p>
			<p>The key-exchange algorithms like RSA and Elliptic Curve Cryptography (ECC) govern the
				way the server and client will determine which symmetric keys to use during a TLS
				session. The TLS protocol supports both RSA and ECC,  however for Couchbase Server,
				it supports <i>only</i> RSA keys.</p><p>To enable SSL/TLS on the client side, you need to get a certificate from Couchbase Server and
				then follow the steps appropriate to the client you are using. </p><p>You can obtain a self-signed, server -generated certificate using the Couchbase Web Console.
				Navigate to <menucascade>
					<uicontrol>Settings</uicontrol>
					<uicontrol>Certificate</uicontrol>
					<uicontrol>Show certificate</uicontrol>
				</menucascade> and copy the certificate. </p><note type="note">If the self-signed certificate obtained via the Couchbase Web Console is
				regenerated, you must obtain a new one.</note><p>To configure CA certificates, see <xref
					href="security-x509-setup.dita#topic_jn3_fzk_w5/sslconfig">Configure X.509
					Certificates using openSSL.</xref></p></section>
			
	<section><title>SSL/TLS Support by Clients</title>		
			
			
			<p>The following clients support SSL/TLS: </p><ul>
				<li><xref href="../sdks/java-2.2/managing-connections.dita#concept2677/ssl"
						>Java</xref></li>
				<li><xref href="../sdks/dotnet-2.2/configuring-ssl.dita#concept_i4h_5pk_3p/ssl"
						>.NET</xref></li>
				<li><xref href="../sdks/node-2.0/managing-connections.dita#concept_ppz_lhq_44/ssl"
						>Node.js</xref></li>
				<li><xref href="../sdks/php-2.0/managing-connections.dita#concept_ppz_lhq_44/ssl"
						>PHP</xref></li>
				<li><xref href="../sdks/c-2.4/managing-connections.dita#concept_ppz_lhq_44/ssl"
						>C</xref></li>
				<li><xref href="../sdks/go-beta/managing-connections.dita#concept_ppz_lhq_44/ssl">Go
					</xref></li>
			</ul><note type="note">Use the Couchbase network port <codeph>11207</codeph> for data
				communication between the client and the data nodes using SSL/TLS.
					</note>
	</section>
		<section><title>SSL/TLS Based View Access</title>

		<p>A new port <codeph>18092</codeph> is established for view access:
					<codeph>https://couchbase_server:18092</codeph>
			</p></section>
		
		
		<section><title>Supported Ciphers </title><p>Couchbase Server uses the ciphers that are accepted
				by default by OpenSSL.The default is to have high-security ciphers built in with
				openSSL. For example, on the MAC OS these are: <ul>
					<li>AES256-SHA...YES</li>
					<li>AES128-SHA...YES</li>
					<li>DES-CBC3-SHA...YES </li>
				</ul></p><p>You can override this selection by setting the environment variable
				before starting Couchbase as follows:
					</p><p><codeph>COUCHBASE_SSL_CIPHER_LIST</codeph>= &lt;<varname>list of ciphers
					to accept</varname>&gt; </p><p>Set the variable to
					<codeph>COUCHBASE_SSL_CIPHER_LIST= MEDIUM, HIGH</codeph> to include only medium-
				and high-security ciphers for your installation.</p> For example, on the MAC OS
			these are: <ul>
				<li>SEED-SHA...YES</li>
				<li>AES256-SHA...YES</li>
				<li>AES128-SHA...YES</li>
				<li>DES-CBC3-SHA...YES</li>
				<li>RC4-SHA...YES</li>
				<li>RC4-MD5...YES</li>
				<li>RC4-MD5...YES </li>
			</ul></section>
		</conbody></concept>
