<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_jn3_fzk_w5">
  <title>Configuring X.509 Certificates</title> 
  <body>
    <p>This section explains how to configure X.509 certificates for TLS in Couchbase Server.</p>
    <note type="note">Choosing a root CA, the CA hierarchy, and obtaining a certificate from that CA
      chain to set up a Couchbase cluster are not within the scope of this document.</note>
    <section>
      <title>X.509 Certificate Requirements and Best Practices</title>
      <p>Here are the basic requirements for using your X.509 certificates in Couchbase: </p>
      <ul>
        <li>The certificate must be in available in the <codeph>.pem</codeph> format.</li>
        <li>The certificate must be an RSA key certificate.</li>
        <li>The current system time must fall between the times set in the certificate's properties
            <codeph>valid from</codeph> and <codeph>valid to</codeph>. </li>
        <li>Common name: This can be a certificate with a <codeph>nodename</codeph> (preferable), IP
          address, URI (<codeph>www.example.com</codeph>), or URI with a subject alternative name
          (SAN) certificate (<codeph>example.com</codeph> and <codeph>example.net</codeph>).</li>
        <li>The node certificate must be designated for server authentication set in the optional
          field of the certificate's property <codeph>enhanced key usage</codeph> as <codeph>Server
            Authentication</codeph>. </li></ul>
      
      <p>Here are a few best practices around X.509 certificates in Couchbase that you should
        consider using:</p>
          
          <ul>
            <li>To avoid man-in-the-middle attacks do not use wildcards with IP addresses in the
          certificate common name.</li>
            <li>We recommended at least RSA key-length of 2048 bits or higher. As computing
          capabilities increase, longer RSA keys provide increased security.</li>
          </ul>

      <p>The certificate chain must be valid from the node certificate up to the root certificate,
        which can be verified using the <xref
          href="https://www.openssl.org/docs/manmaster/apps/verify.html" format="html"
          scope="external">OpenSSL validate certificate test</xref>. </p>
    </section>
    <section>
      <title>Validating Server Identity </title>
      <p>The HTTPS specification mandates that HTTPS clients must be capable of verifying the
        identity of the server. This requirement can potentially affect how you generate your X.509
        certificates. The HTTPS specification defines a generic mechanism for verifying the server
        identity, known as the HTTPS URL integrity check, which is the standard mechanism used by
        Web browsers. </p>
      <sectiondiv><b>HTTPS URL integrity check</b>
        <p>The basic idea of the URL integrity check is that the server certificate's identity must
          match the server hostname. This integrity check has an important impact on how you
          generate X.509 certificates for HTTPS: the certificate identity (usually the certificate
          subject DN’s common name) must match the name of the host on which Couchbase Server is
          deployed. </p><p>The URL integrity check is designed to prevent man-in-the-middle attacks.
          </p><p>Specify the certificate identity for the URL integrity check in one of the
          following ways: </p><dl>
          <dlentry>
            <dt>Using the <codeph>commonName</codeph></dt>
            <dd>The usual way to specify the certificate identity (for the purpose of the URL
              integrity check) is through the Common Name (CN) in the subject DN of the certificate.
            </dd>
          </dlentry>
        </dl><dl>
          <dlentry>
            <dt>Using the <codeph>subjectAltName</codeph></dt>
            <dd>If you deploy a certificate on a multi-homed host, however, you might find it is
              practical to allow the certificate to be used with any of the multi-homed host names.
              In this case, it is necessary to define a certificate with multiple, alternative
              identities, and this is only possible using the <codeph>subjectAltName</codeph>
              certificate extension. </dd>
          </dlentry>
        </dl><p>The HTTPS protocol also supports in host names the wildcard character *. For
          example, you can define the <codeph>subjectAltName</codeph> as follows:
          <codeblock>subjectAltName=DNS:*.couchbase.com </codeblock></p><p>This certificate identity
          matches any three-component host name in the domain <codeph>couchbase.com</codeph>.
          </p><note type="note">As a best practice, try to avoid using the wildcard character in the
          domain name. Be sure never to do this accidentally by forgetting to type the dot (.)
          delimiter in front of the domain name.  For example, if you specified *couchbase.com, your
          certificate could be used in any domain that ends with the string
            <codeph>couchbase</codeph>. </note></sectiondiv>
    </section>  
    
    
    
    <section>
      <title>Couchbase Cluster Certificate</title>
      <p>The Couchbase cluster certificate is the root CA's public key <codeph>ca.pem</codeph>. In
        the configuration steps shown in the following sections, <codeph>ca.pem</codeph> is the CA
        public key that should be configured in Couchbase as the cluster certificate.</p>
      <p>When you load the cluster certificate into Couchbase, it is first checked to make sure it
        is a valid X.509 certificate. Next, if the per-node certificates are not signed by the
        cluster certificate, a warning is shown for each node during configuration. As the per-node
        certificates are updated, such that they are signed by the cluster certificate, the warning
        for each node goes away.</p>
    </section>
    <section>
      <title>Per Node Certificate</title>
      <p>The Couchbase cluster certificate is used to sign per-node Couchbase certificates, each
        containing the following:</p>
      <ul>
        <li>The node private key, which is named <codeph>pkey.key</codeph> as shown in the
          configuration steps below.</li>
        <li>The node public key certificate file, which is named <codeph>pkey.pem</codeph> as shown
          in the configuration steps below.</li>
        <li>The certificate chain file based on the supported CA hierarchy, This file is named
            <codeph>chain.pem</codeph> as shown in the configuration steps below.</li>
      </ul>
      <p>
        <table frame="all" rowsep="1" colsep="1" id="table_r1q_1zz_pv">
          <title>Private and public keys you need to have</title>
          <tgroup cols="3">
            <colspec colname="c1" colnum="1" colwidth="1*"/>
            <colspec colname="c2" colnum="2" colwidth="1.43*"/>
            <colspec colname="c3" colnum="3" colwidth="3.34*"/>
            <thead>
              <row>
                <entry/>
                <entry>Key name</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry morerows="4">Server-side files</entry>
                <entry><codeph>ca.pem</codeph></entry>
                <entry>Root CA public key or the cluster certificate.</entry>
              </row>
              <row>
                <entry><codeph>int.pem</codeph></entry>
                <entry>Intermediate public key. There can be one or more intermediate public keys in
                  the hierarchy.</entry>
              </row>
              <row>
                <entry><codeph>pkey.key</codeph></entry>
                <entry>Node private key per node (private key of the node). Each node in the cluster
                  must have its private key.</entry>
              </row>
              <row>
                <entry><codeph>pkey.pem</codeph></entry>
                <entry>Node public key (public key of the node). Each node in the cluster must have
                  its public key.</entry>
              </row>
              <row>
                <entry><codeph>chain.pem</codeph></entry>
                <entry>Concatenated chain file (chain file). This file contains the node public key
                  and the intermediate public keys that signed first the node key (pkey.pem) and
                  then each other. <p>This file does not contain the CA public key. </p></entry>
              </row>
              <row>
                <entry morerows="1">Client-side files</entry>
                <entry><codeph>ca.pem </codeph></entry>
                <entry>CA public key, which should be configured on the client</entry>
              </row>
              <row>
                <entry><codeph>chain.pem</codeph></entry>
                <entry>Concatenated chain file (chain file)</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </p>
    </section>
    <section>
      <title>Prepare for Configuration</title>
      <note type="note">If your CA authority supports automatic generation of certificates, you can
        skip the X.509 configuration steps.</note>
      <p>Before you start configuring X.509 certificates for your nodes, assess your needs. </p>
      <dl>
        <dlentry>
          <dt>Where will you put the configured CA, intermediate, and node keys?</dt>
          <dd>All the keys and certificates are generated in a directory named SSLCA, which can be
            located anywhere on your machine. </dd>
          <dd>The generated private node key (<codeph>pkey.key</codeph>) and chain certificate
              (<codeph>chain.pem</codeph>) must be posted in a specific place that is in the
            certificate trust path (such as <filepath>/Users/&lt;username&gt;/Library/Application\
              Support/Couchbase/var/lib/couchbase/inbox/</filepath> on MacOSX). </dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>Do you have one or more nodes in the cluster?</dt>
          <dd>
            <ul>
              <li>With one node, you will generate one node directory inside the directory SSLCA
                that will contain the private node key (<codeph>pkey.key</codeph>) and the
                certificate chain file (<codeph>chain.pem</codeph>). The node public key
                  (<codeph>pkey.pem</codeph>) is included in the chain file.</li>
              <li>With multiple nodes, you need to add an appropriate number of node directories
                with distinctive names, such as <codeph>node-sales</codeph>,
                  <codeph>node-hr,</codeph> or whatever your situation requires.</li>
            </ul>
          </dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>Do you have one or more intermediate CAs in your trust path?</dt>
          <dd>With only one CA, create one directory named <codeph>int</codeph>. If you have
            multiple intermediate CAs, be sure to name them in a way that will allow you to stack
            them properly in the chain file, such as <codeph>int1</codeph>, <codeph>int2</codeph>,
            and so on. </dd>
          <dd>This order will show that the intermediate CA closest to the node (which signed the
            node certificate) has the higher number, or in the sample below
              <codeph>int2</codeph>.<p>For example: </p><p><image href="pict/chain-pem.png"
                id="image_e5g_bcn_sv" align="left" width="500"/>
            </p></dd>
        </dlentry>
      </dl>
    </section>
    <section id="sslconfig">
      <title>Configure X.509 Certificates using openSSL</title>
      <p>Here are the steps to help you generate X.509 certificates:</p>
      <ol>
        <li>Create a top-level directory called SSLCA in your user folder and three types of
          sub-directories: <ul>
            <li>One subdirectory called <codeph>root</codeph></li>
            <li>One or more <codeph>int</codeph> subdirectories</li>
            <li>One or more <codeph>node</codeph> subdirectories</li>
          </ul></li>
        <li>Generate the root private key file (<codeph>ca.key</codeph>), and CA public key file
            (<codeph>ca.pem</codeph>).<p>Enter the following command inside the
              <codeph>root</codeph>
          subdirectory:</p><codeblock>openssl genrsa -out <b>ca.key</b> 2048</codeblock><codeblock>Generating RSA private key, 2048 bit long modulus
............................................................................................+++
....+++ 
e is 65537 (0x10001)</codeblock><codeblock>openssl req -new -x509  -days 3650 -sha256 -key <b>ca.key</b> -out <b>ca.pem</b> \
-subj '/C=UA/O=My Company/CN=My Company Root CA' </codeblock></li>
        <li>Generate the intermediate private key file (<codeph>int.key)</codeph> and the
          intermediate certificate signing request (<codeph>int.csr</codeph>) to generate the
          intermediate public key file (<codeph>int.pem</codeph>). <p>Enter the following command
            inside the <codeph>int</codeph> subdirectory:
            <codeblock>openssl genrsa -out <b>int.key</b> 2048</codeblock><codeblock>Generating RSA private key, 2048 bit long modulus
..........................................+++ 
.....+++ 
e is 65537 (0x10001 </codeblock><codeblock>openssl req -new -key <b>int.key</b> -out <b>int.csr</b> -subj '/C=UA/O=My Company/CN=My Company Intermediate CA' </codeblock></p></li>
        <li>Create the extension file (<codeph>v3_ca.ext)</codeph> to add extensions to the
          certificate and to generate the certificate signing request.<p>In the <codeph>int</codeph>
            subdirectory enter:</p><codeblock>cat &lt;&lt;EOF &gt;&gt; v3_ca.ext </codeblock><p>Then
            add the following:
            <codeblock>subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer:always
basicConstraints = CA:true
EOF</codeblock></p><p>Your
              <codeph>int</codeph> directory now contains three files: <codeph>int.csr</codeph>,  <codeph>int.key</codeph>, and 
              <codeph>v3_ca.ext</codeph>.
          </p></li>
        <li>Generate the intermediate public key file (<codeph>int.pem)</codeph> based on the
          intermediate certificate signing request (<codeph>int.csr</codeph>), and signed by the
          root public key (<codeph>ca.pem</codeph>):<p>
            <ol>
              <li>In the <codeph>int</codeph> subdirectory
                  enter:<codeblock>openssl x509 -req -in <b>int.csr</b> -CA ../root/<b>ca.pem</b> -CAkey ../root/<b>ca.key</b> -CAcreateserial \
-CAserial rootCA.srl -extfile v3_ca.ext -out <b>int.pem</b> -days 365</codeblock><p>The
                  response will be similar to the
                following:</p><codeblock>Signature ok        
subject=/C=UA/O=My Company/CN=My Company Intermediate CA       
Getting CA Private Key</codeblock></li>
              <li>Verify that <codeph>openssl</codeph> has correctly signed the intermediate
                certificate with the root certificate:<p>
                  <codeblock>openssl verify -CAfile ../root/<b>ca.pem</b> <b>int.pem</b> </codeblock>
                </p><p>The response will
                  be:<codeblock>int.pem: OK
openssl x509 -in int.pem -text</codeblock></p></li>
            </ol>
          </p></li>
        <li>Generate the node private key file (<codeph>pkey.key</codeph>) and the node certificate
          signing request (<codeph>pkey.csr</codeph>) to generate the node public key file
            (<codeph>pkey.pem</codeph>). <p>Be sure to enter another node and use the appropriate
            node name instead of the variable <b>&lt;node-name&gt;</b>, such as “sales” or “HR’.
            Each time you use another name, another set of files will be generated.</p><ol>
            <li>Inside the node subdirectory (repeated for each node in the cluster):
                <codeblock>openssl genrsa -out <b>pkey.key</b> 2048
openssl req -new -key <b>pkey.key</b> -out <b>pkey.csr</b> -subj '/C=UA/O=My Company/CN=<b>&lt;node-name></b>'
openssl x509 -req -in <b>pkey.csr</b> -CA ../int/<b>int.pem</b> -CAkey ../int/<b>int.key</b> -CAcreateserial \
-CAserial intermediateCA.srl -out <b>pkey.pem</b> -days 365  </codeblock><p>For
                example, for the <codeph>node-sales</codeph>
                directory:<codeblock>openssl genrsa -out <b>pkey.key</b> 2048
openssl req -new -key <b>pkey.key</b> -out <b>pkey.csr</b> -subj '/C=UA/O=My Company/CN=<b>sales</b>'
openssl x509 -req -in <b>pkey.csr</b> -CA ../int/<b>int.pem</b> -CAkey ../int/<b>int.key</b> -CAcreateserial \
-CAserial intermediateCA.srl -out <b>pkey.pem</b> -days 365 </codeblock></p><p>The
                response for the <codeph>node-sales</codeph> directory should be as follows:
                <codeblock>johns-MacBook-Pro-4:node-sales john$ openssl genrsa -out pkey.key 2048
Generating RSA private key, 2048 bit long modulus
....................................................................+++
.............+++
e is 65537 (0x10001)
johns-MacBook-Pro-4:<b>node-sales</b> john$ openssl req -new -key pkey.key -out pkey.csr -subj '/C=UA/O=My Company/CN=<b>sales</b>'
johns-MacBook-Pro-4:<b>node-sales</b> john$ openssl x509 -req -in pkey.csr -CA ../int/int.pem -CAkey ../int/int.key -CAcreateserial \
> -CAserial intermediateCA.srl -out pkey.pem -days 365
Signature ok
subject=/C=UA/O=My Company/CN=<b>sales</b>
Getting CA Private Key   </codeblock></p></li>
            <li>Repeat the same step in each node directory you have. Each time another set of node
              keys will be generated.
              <codeblock>johns-MacBook-Pro-4:node-hr john$ ls
intermediateCA.srl	pkey.csr		pkey.key		pkey.pem                 </codeblock></li>
          </ol></li>
        <li>Verify the node-intermediate-root chain. <ol>
            <li>Try to specify the node certificate <codeph>pkey.pem</codeph>:
                <codeblock>openssl verify -verbose <b>pkey.pem</b>  </codeblock><p>The response
                should be similar to the
                following:<codeblock>johns-MacBook-Pro-4:node-sales john$ openssl verify -verbose pkey.pem
pkey.pem: /C=UA/O=My Company/CN=sales
error 20 at 0 depth lookup:unable to get local issuer certificate </codeblock></p><p>This
                means that the certificate at <codeph>depth=0</codeph> (intermediate certificate)
                cannot be looked up. </p></li>
            <li>Next, let’s try to specify an intermediate certificate:
                <codeblock>openssl verify -untrusted ../int/<b>int.pem</b> <b>pkey.pem</b>  </codeblock><p>The
                response should be similar to the following:
                <codeblock>pkey.pem: /C=UA/O=My Company/CN=My Company Intermediate CA                   
error 20 at 1 depth lookup:unable to get local issuer certificate</codeblock></p><p>This
                means that the certificate at <codeph>depth=1</codeph> (root certificate) cannot be
                looked up. </p></li>
            <li>Next, let’s try to specify the root certificate:
                <codeblock>openssl verify -untrusted ../int/<b>int.pem</b> -CAfile ../root/<b>ca.pem</b> <b>pkey.pem</b></codeblock><p>The
                response will be: <codeblock>pkey.pem: OK  </codeblock></p><p>This means that
                certificate validation has passed.</p></li>
          </ol></li>
        <li>Generate a certificate chain file.<p>When a client application tries to verify a
            certificate signed by the intermediate CA, it must also verify the intermediate
            certificate against the root certificate. To complete the chain of trust, create a
            certificate chain to present it to the application.</p>In a chain file, the lowest
          certificate goes first, then the intermediate certificates in proper order.<note
            type="important">Do not include in your chain file the root CA’s public key certificate
            and intermediate certificates that are not in the trust path.</note><note type="note"
            >The root certificate is not included in this chain. </note><p>To create the certificate
            chain file, concatenate the intermediate and root certificates together, beginning with
            the lowest one in the chain.<ul>
              <li>If you have only one intermediate CA in your trust path, use this command:
                <codeblock>cat <b>pkey.pem</b> ../int/int.pem > <b>chain.pem</b></codeblock></li>
              <li>If you have more intermediate CAs in your trust path, keep in mind that the order
                of certificates in an SSL Certificate Chain file is important: <ul>
                  <li><codeph>pkey.pem</codeph> certificate is signed by intermediate
                      (<codeph>int3.pem</codeph>) certificate</li>
                  <li><codeph>int3.pem </codeph>is signed by intermediate
                    (<codeph>int2.pem</codeph>) </li>
                  <li><codeph>int2.pem </codeph>is signed by intermediate
                    (<codeph>int1.pem</codeph>) </li>
                </ul><p>For multiple intermediate CAs, use this command:
                </p><codeblock>cat <b>pkey.pem</b> ../int3/int.pem ../int2/int.pem ../int1/int.pem  > <b>chain.pem</b></codeblock></li>
            </ul></p></li>
        <li>Copy the node private key (<codeph>pkey.key)</codeph> and the chain file
            (<codeph>chain.pem</codeph>) manually to the <codeph>inbox</codeph> folder on each node. <p>
            <ol>
              <li>Create an <codeph>inbox</codeph> folder in the Couchbase server path:
                  <codeblock>mkdir /Users/&lt;username&gt;/Library/Application\ Support/Couchbase/var/lib/couchbase/<b>inbox</b>  </codeblock><p>For
                  example:
                  <codeblock>mkdir /Users/john/Library/Application\ Support/Couchbase/var/lib/couchbase/<b>inbox</b> </codeblock></p></li>
              <li>Now go to the directory <filepath>SSLCA/node</filepath> and copy the files
                  <codeph>chain.pem</codeph> and <codeph>pkey.key</codeph> into the created
                  <codeph>inbox</codeph> folder:
                  <codeblock>cp chain.pem /Users/<b>&lt;username&gt;</b>/Library/Application\ Support/Couchbase/var/lib/couchbase/inbox/chain.pem
cp pkey.key /Users/<b>&lt;username&gt;</b>/Library/Application\ Support/Couchbase/var/lib/couchbase/inbox/pkey.key </codeblock><p>For
                  example:
                  <codeblock>cp <b>chain.pem</b> /Users/<b>john</b>/Library/Application\ Support/Couchbase/var/lib/couchbase/inbox/<b>chain.pem</b>
cp <b>pkey.key</b> /Users/<b>john</b>/Library/Application\ Support/Couchbase/var/lib/couchbase/inbox/<b>pkey.key</b></codeblock></p><p>Check
                  if the files <codeph>chain.pem</codeph> and <codeph>pkey.key</codeph> have been
                  posted to the inbox:</p><p>
                  <codeblock>johns-MacBook-Pro-4:inbox john$ ls
chain.pem	pkey.key </codeblock>
                </p></li>
            </ol>
          </p></li>
        <li>Change permissions so that Couchbase can read <codeph>pkey.key</codeph> and
            <codeph>chain.pem:</codeph>
          <p>
            <codeblock>cd /Users/<b>&lt;username&gt;</b>/Library/Application\ Support/Couchbase/var/lib/couchbase/inbox/
chmod 777 chain.pem
chmod 777 pkey.key </codeblock>
          </p></li>
        <li>Set up the cluster certificate and then a node certificate on each of the nodes.</li></ol></section>
    <section><title>Setting up a Cluster CA Certificate</title>
          
          <dl>
            <dlentry>
              <dt>Using CLI</dt>
              <dd>
                <codeblock>couchbase-cli ssl-manage -c <b>&lt;node-name></b>:8091 -u<b>[admin]</b> -p<b>[password]</b> \
    --upload-cluster-ca=<b>&lt;path to pem-encoded root certificate></b></codeblock>
                <p>For example:
                  <codeblock>couchbase-cli ssl-manage -c <b>MyNode</b>:8091 -u <b>Administrator</b> -p <b>password</b> \
    --upload-cluster-ca=<b>./root/ca.pem </b> </codeblock></p>
              </dd>
            </dlentry>
          </dl>
          <dl>
            <dlentry>
              <dt>Using REST API</dt>
              <dd>
                <codeblock>cd ../root
    curl -X POST --data-binary "@./ca.pem" \
    http://<b>Administrator</b>:<b>password</b>@127.0.0.1:8091/controller/uploadClusterCA</codeblock>
              </dd>
            </dlentry>
          </dl>
       
  
    </section>
  
    <section>
      <title>Setting up a Per Node CA Certificate</title>
      <dl>
        <dlentry>
          <dt>Using CLI</dt>
          <dd>
            <codeblock>couchbase-cli ssl-manage -c <b>&lt;node-name></b>:8091 -u[admin] -p[password] --set-node-certificate</codeblock>
          </dd>
        </dlentry>
      </dl> <dl>
        <dlentry>
          <dt>Using REST API</dt>
          <dd>
            <codeblock>curl -X POST http://Administrator:password@<b>&lt;node-name></b>:8091/node/controller/reloadCertificate</codeblock>
          </dd>
        </dlentry>
      </dl>
     
      <dl>
        <dlentry>
          <dt>See also:</dt>
          <dd>CLI: <xref href="../cli/cbcli/ssl-manage.dita#cbcli-xdcr-ssl"/></dd>
          <dd>REST API: <xref href="../rest-api/rest-uploads-ca.dita#reference_jm5_j2x_hv"/></dd>
        </dlentry>
      </dl>
    </section>
  </body>
 
</topic>
