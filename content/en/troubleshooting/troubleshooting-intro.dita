<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_nk2_q3g_ps">
 <title>Troubleshooting</title>
 <shortdesc>Troubleshooting lists most common errors, gives general tips, and explains system logs.</shortdesc>
 <conbody>
  <p>This section describes the most commonly encountered errors when using Couchbase Server and
   what you should do when you encounter them. You will also learn some general tips to keep in mind
   when troubleshooting your cluster, the various log files you might want to look into when
   troubleshooting an issue, and how you can report an issue to the Couchbase support. </p>
  
  <section>
   <title>Reporting Issues to Couchbase</title>

     <p>When reporting issues to Couchbase, add the following information to JIRA issues:</p>
     <ul>
       <li>Provide a description of your environment (for example, package installation,
         cluster_run, build number, operating system, and so on).</li>
       <li>Show all the steps necessary to reproduce the issue (if applicable).</li>
       <li>Show the full content of all the design documents.</li>
       <li>Describe how your documents are structured (for example, if they are all same structure
         or if they have different structures).</li>
       <li>If you generated the data with a tool, identify the tool name and all the parameters
         given to it (full command line).</li>
       <li>Show the queries you were performing (include all query parameters and the full URL).
         For example, if you are using curl, use the verbose option <codeph>(-v</codeph>) and
         show the full output. <p>The following request uses curl with the <codeph>-v</codeph>
           option with test as the bucket, example as the design document, and Python (installed
           separately) as the tool used to format the output. Replace node and bucket name in
           example as appropriate:
         </p><codeblock>curl -v http://couchbase:8092/test/_design/example | python -m json.tool</codeblock></li>
       
       <li>Repeat the query with different values for the stale parameter and show the
         output</li>
       <li>Attach logs from all nodes in the cluster</li>
       <li>Try all view related operations, including creating, updating, and deleting design
         documents from the command line. The goal is to isolate UI problems from the view
         engine. </li>
       <li>If you suspect the indexer is stuck or blocked, use curl against the
         <codeph>_active_tasks</codeph> API to isolate UI issues from view-engine issues. For example:
         <codeblock>curl -s http://10.5.2.54:8092/_active_tasks</codeblock>
       </li>
     </ul>
  </section> 
 </conbody>
</concept>
