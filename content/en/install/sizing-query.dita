<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_w1w_4lg_xs">
  <title>Query Service Nodes</title> <shortdesc>A node running the Query Service executes queries for your application
    needs.</shortdesc>
  <body>
    <p>Since the Query Service doesn’t need to persist data to disk, there are very minimal resource
      requirements for disk space and disk I/O. You only need to consider CPU and memory.</p>
    <p>There are a few questions that will help size the cluster: </p>
    <ol>
      <li>What types of queries you need to run? </li>
      <li>Do you need to run <codeph>stale=ok</codeph> or <codeph>stale=false</codeph> queries?</li>
      <li>Are the queries simple or complex (requiring JOINs, for example)?</li>
      <li>What are the throughput and latency requirements for your queries? </li>
    </ol>
    <p>Different queries have different resource requirements. A simple query might return results
      within milliseconds while a complex query may require several seconds.</p>
    <p>At Couchbase, we looked at performance data and customer use cases to provide sizing
      calculations. </p>
    <p>Let’s use CPU/Memory utilization for an example for a Query Service. Assume that you have a
      user profile store, which stores user’s name, email and address. You would like to query based
      on user’s email address, and you create a secondary index on email. Now you would like to run
      a query that looks like this: </p>
    <codeblock>Select * from bucket where email = “foo@gmail.com” </codeblock>
    <p>By default, N1QL uses <codeph>stale=ok</codeph> for a consistency model. </p>
    <p>To achieve max throughput of this query, we noticed that it utilized 24 cores completely to
      achieve an 80% latency of 5ms against a bucket of 20M documents.</p>
  </body>
</topic>
