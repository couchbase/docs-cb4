<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_icx_l4k_3p">
 <title>Connecting to buckets</title>
 <shortdesc>After you create a <codeph>ClientConfiguration</codeph>, you can then connect to a
    cluster by using the <codeph>Cluster</codeph> class. </shortdesc>
 <conbody>
 	<p>To connect to a bucket, create a <codeph>Cluster</codeph> object and pass the
				<codeph>ClientConfiguration</codeph> object as a parameter, as shown in the following
			example:</p>
   <p>
    <codeblock outputclass="language-csharp">
  var config = new ClientConfiguration
  {
    Servers = new List&lt;Uri&gt;
    {
      new Uri("http://192.168.56.101:8091/pools"),
      new Uri("http://192.168.56.102:8091/pools"),
      new Uri("http://192.168.56.103:8091/pools"),
      new Uri("http://192.168.56.104:8091/pools"),
    }
  };

  using (var cluster = new Cluster(config))
  {
    //open buckets here
  }  
			</codeblock>
   </p>
   <p>The default constructor allocates a <codeph>ClientConnection</codeph> internally with the
			default settings. Creating a <codeph>ClientConfiguration</codeph> object is required only
			when you want to override the default settings.</p>
   <p>Now that we have a <codeph>Cluster</codeph> object, we can connect to a bucket by calling the
        <apiname>Cluster.OpenBucket()</apiname> method. The default <apiname>OpenBucket()</apiname>
      method connects to the default bucket. </p>
    <p>If you want to open a different bucket, use one of the overloads that take a bucket name and
      password.
      <codeblock>using (var cluster = new Cluster(config))
     {
        using (var bucket = cluster.OpenBucket("mybucketname", "mypassword"))
        {
        //use bucket here
        }
     }</codeblock></p>
    <p>It’s important to note that you do not need to provide a bucket configuration to open another
      bucket; if one doesn’t exist, the client will clone one from the default configuration.</p>
   <codeblock outputclass="language-csharp">
using (var cluster = new Cluster(config))
  {
      using (var bucket = cluster.OpenBucket())
      {
          //use bucket here
      }
  }
		</codeblock>
   <p>When you call <codeph>OpenBucket()</codeph>, internally the client is using the configuration
      provided to establish the connection between the client and the server. The references are
      maintained by the <codeph>Cluster</codeph> object; it’s the root object and should be
      long-lived and reused within your application. </p>
 </conbody>
</concept>
