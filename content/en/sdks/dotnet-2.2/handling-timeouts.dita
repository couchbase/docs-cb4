<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_g5j_djq_44">
	<title>Handling timeouts</title>
	<shortdesc>The SDK supports configuration options to control the various timeouts that you might
		want to override so you can fine-tune your applications.</shortdesc>
	<conbody>
		<p>Internally the client uses a set of heuristics and accompanying logic to determine
			whether or not to retry operations if they fail with a timeout or to return a failure
			message to the calling application. In general, an application should not provide
			additional logic in the case that a timeout error is returned; however, it’s likely an
			indication that the application configuration may be in need of tuning or that perhaps a
			broader system or network level issue might be at play.</p>
		<section>
			<title>Client timeout configuration</title>
			<p>The following timeouts are configurable either through the
					<codeph>App.Config</codeph> or <codeph>Web.Config</codeph> or through the
					<apiname>ClientConfiguration</apiname> object itself: </p>
			<p>
				<table id="table_bx3_sf2_3p">
					<tgroup cols="3">
						<colspec colnum="1" colname="col1" colwidth="1.29*"/>
						<colspec colnum="2" colname="col2" colwidth="4.88*"/>
						<colspec colnum="3" colname="col3" colwidth="1*"/>
						<thead>
							<row>
								<entry>Name</entry>
								<entry>Description</entry>
								<entry>Default</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry><codeph>DefaultOperationLifespan</codeph></entry>
								<entry>The amount of time given to a binary operation before timing
									out. This includes retries.</entry>
								<entry>2,500 ms</entry>
							</row>
							<row>
								<entry><codeph>ViewTimeout</codeph></entry>
								<entry>The amount of time to wait on a View query before timing
									out</entry>
								<entry>70,000 ms</entry>
							</row>
							<row>
								<entry><codeph>QueryTimeout</codeph></entry>
								<entry>The amount of time to wait on a N1QL query before timing
									out</entry>
								<entry>70,000 ms</entry>
							</row>
							<row>
								<entry><codeph>WaitTimeout</codeph></entry>
								<entry>The amount of time to wait for an available TCP connection
									before timing out</entry>
								<entry>2,500 ms</entry>
							</row>
							<row>
								<entry><codeph>SendTimeout</codeph></entry>
								<entry>The amount of time to wait for a pending binary operation
									before timing out.</entry>
								<entry>15,000 ms</entry>
							</row>
							<row>
								<entry><codeph>ObserveTimeout</codeph></entry>
								<entry>The amount of time to spend waiting for an Observe operation
									to meet its durability requirements before timing out</entry>
								<entry>500 ms</entry>
							</row>
							<row>
								<entry><codeph>ShutdownTimeout</codeph></entry>
								<entry>The time between when the SDK closes a TCP connection and
									when it actually shuts down</entry>
								<entry>10,000 ms</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</p>
			<p>Certain timeouts such as <codeph>ViewTimeout</codeph> and
					<codeph>QueryTimeout</codeph> can also be overridden on a per query basis.
					<note>In general, the default settings are sufficient for most applications—only
					after encountering issues should they be adjusted.</note></p>
		</section>
		<section>
			<title>Handling N1QL query timeouts</title>
			<p>N1QL queries allow for both client and server timeout. The
				ClientConfiguration.QueryRequestTimeout is the primary client-side way controlling
				timeouts with N1QL queries and the default is 70000ms.</p>
			<codeblock outputclass="language-csharp">
				var config = new ClientConfiguration
				{
				    QueryRequestTimeout = 100000
				};
				using (var bucket = _cluster.OpenBucket(config))
				{
				    var queryRequest = new QueryRequest()
				        .Statement("SELECT * FROM `beer-sample` LIMIT $1")
				        .AddPositionalParameter(10);
				
				    var result = await bucket.QueryAsync&lt;dynamic&gt;(queryRequest);
				    if (result.Success)
				    {
				        //do someting with the result
				    }
				}
			</codeblock>
			<p>You can also change the server timeout on a per-request basis:</p>
			<codeblock outputclass="language-csharp">
				using (var bucket = _cluster.OpenBucket())
				{
				    var queryRequest = new QueryRequest()
				        .Statement("SELECT * FROM `beer-sample` LIMIT $1")
				        .AddPositionalParameter(10)
				        .Timeout(new TimeSpan(0, 0, 0, 0, 5));
				
				    var result = await bucket.QueryAsync&lt;dynamic&gt;(queryRequest);
				    if (result.Success)
				    {
				        //do someting with the result
				    }
				}
			</codeblock>
			<p>This overrides the default server timeout that is zero, which is infinite unless the
				client timeout defined by ClientConfiguration.QueryRequestTimeout terminates the
				request. In most cases the ClientConfiguration.QueryRequestTimeout is the best
				choice.</p>
		</section>
		<section>
			<title>Handling K/V connection timeouts</title>
			<p>For Key/Value operations the two configuration timeouts you will want to tune are
				WaitTimeout and DefaultOperationLifespan. WaitTimeout configures the length of time
				that a thread will wait for an available connection and DefaultOperationLifespan is
				the maximum length of time that an operation will be given to run to completion. The
				defaults are generally acceptable for most scenarios, but can be increased to ensure
				larger messages are sent or when a network is particularly slow.</p>
			<p>If an operation cannot be completed with the duration defined by
				DefaultOperationLifespan, then the IOperationResult associated with the request will
				have it's Status field set to ResponseStatus.OperationTimeout. At this point the
				application may want to either retry the operation or if it is a read, use a replica
				read:</p>
			<codeblock outputclass="language-csharp">
				var result = await bucket.GetAsync&lt;dynamic&gt;("somekey");
				if (result.Status == ResponseStatus.OperationTimeout)
				{
				    result = await bucket.GetFromReplicaAsync&lt;dynamic&gt;("somekey");
				    if (result.Success)
				    {
				        //do something
				    }
				}
				</codeblock>
		</section>
		<section>
			<title>Handling View connection timeouts</title>
			<p>Like N1QL queries, Views offer both a server timeout and a client timeout. The
				ClientConfiguration.ViewRequestTimeout is the client-side way of controlling
				timeouts and is the suggested pattern. The default timeout is 70,000ms. </p>
			<codeblock outputclass="language-csharp">
				var config = new ClientConfiguration
				{
				    ViewRequestTimeout = 100000
				};
				
				using (var cluster = new Cluster(config))
				{
				    using (var bucket = _cluster.OpenBucket())
				    {
				        var query = bucket.CreateQuery("beer", "brewery_beers", true);
				        var result = await bucket.QueryAsync&lt;dynamic&gt;(query);
				        if(result.Success)
				        {
				            //do something with results
				        }
				    }
				}
			</codeblock>
			<p>Note that for high-performance applications, you do not want to create the bucket on
				every request, but instead globally on application start-up and close it when the
				application shuts down; this is purely for example.</p>
			<p>You can also set the server timeout by using the Query.ConnectionTimeout value, but
				this is done less frequently and should be equal to the value you set for
				ClientConfiguration.ViewRequestTimeout.</p>
		</section>
	</conbody>
</concept>
