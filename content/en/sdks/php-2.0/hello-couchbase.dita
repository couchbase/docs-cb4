<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="concept2677">
	<title>Hello Couchbase Example</title><shortdesc>The first code example is a “Hello Couchbase”
		app.</shortdesc>
	<conbody>
		<p>The example “Hello Couchbase” works with the <codeph>beer-sample</codeph> bucket that is provided with
			Couchbase Server. The following sections contain instructions for running the example app
			and the annotated Hello Couchbase code.</p>
		<section>
			<title>Running Hello Couchbase</title>
			<p>To run the example Hello Couchbase program:</p>
			<ol id="ol_fw2_rt5_t4">
				<li>Start Couchbase Server on your computer.</li>
				<li>Open the Couchbase administrator console.</li>
					<li>Make sure the <codeph>beer-sample</codeph>
					bucket is available by checking for it under the <uicontrol>Data Buckets</uicontrol>
					tab. If you need to install the bucket:<ol id="ol_bz2_rt5_t4">
						<li>Select <menucascade>
								<uicontrol>Settings</uicontrol>
								<uicontrol>Sample Buckets</uicontrol>
							</menucascade>.</li>
						<li>Install the <codeph>beer-sample</codeph> bucket.</li>
					</ol></li>
				<li>If you haven't already installed the Couchbase PHP extension, <xref format="dita"
						scope="local" href="download-links.dita">install the PHP SDK</xref>.</li>
				<li>Copy and paste the Hello Couchbase code into a file named
						<filepath>hello-couchbase.php</filepath>. The code is located in the next
					section.</li>
				<li>In a terminal window, change to the directory that contains the
						<filepath>hello-couchbase.php</filepath> code.</li>
				<li>Execute the following command:
					<codeblock outputclass="language-bash">$ php hello-couchbase.php</codeblock>
				</li>
			</ol>
		</section>

			<section>
			<title>Hello Couchbase code</title>
			<p>The Hello Couchbase example consists of one PHP file,
				<filepath>hello-couchbase.php</filepath>. The code opens a connection to Couchbase
				Server, retrieves a document, modifies the document, and stores the updated document
				in the database. Here's the <filepath>hello-couchbase.php</filepath> code:</p>
			<codeblock outputclass="language-php" spectitle="hello-couchbase.php">&lt;?php
// Connect to Couchbase Server

$cluster = new CouchbaseCluster('http://127.0.0.1:8091');
$bucket = $cluster->openBucket('beer-sample');

// Retrieve a document

$result = $bucket->get('aass_brewery-juleol');
$doc = $result->value;

echo $doc->name . ', ABV: ' . $doc->abv . "\n";

// Store a document

$doc->comment = 'Random beer from Norway';

$result = $bucket->replace('aass_brewery-juleol', $doc);

var_dump($result);</codeblock>

				<p>The console output should look similar to this:</p>

				<codeblock outputclass="language-bourne">Juleøl, ABV: 5.9
object(CouchbaseMetaDoc)#6 (4) {
  ["error"]=>
  NULL
  ["cas"]=>
  resourceFix (5) of type (CAS)
}</codeblock>
			<p>The following points explain each step in the example:</p>
			<ul>
				<li><i>Connecting</i>
					<p>A <codeph>Bucket</codeph> object represents a connection to a single bucket
						within the cluster.</p><p>A bucket represents a logical namespace for a key.
						All keys must be unique within a single bucket, but multiple buckets can
						have keys with the same names and they will not conflict. A new connection
						object must be created for each bucket that you want to interact with in
						your application. This example creates one connection to the
							<codeph>beer-sample</codeph> bucket.</p><p>The constructor is passed the
						bucket name, which is <codeph>beer-sample</codeph>, and a node on the
						cluster to connect to. You can pass any node that is a member of the
						cluster. This example uses the local cluster instance.</p></li>
				<li><i>Retrieving Data</i>
					<p>The <codeph>get()</codeph> method initiates an asynchronous request to retrieve
						the specified key. If the key exists, the callback is invoked with a results
						object that contains the value of the key and any additional metadata returned
						from the cluster. To get the actual value of the object, you can access the result
						object’s value property.</p><p>If the key does not exist on the server, the
						callback is invoked with an unset value property on the result object (it will not
						set the callbacks error parameter).</p></li>
				<li><i>Storing Data</i>
					<p>To store documents in the server, you can use one of the <codeph>set</codeph>
						family of methods. This example uses the <codeph>replace()</codeph> method, which
						enforces the constraint that a previous value of the document must already exist.
						This can be thought of as an update operation in terms of CRUD (create, read,
						update, delete) operations.</p><p>The storage methods also return a result object
						that contains metadata about the value that was stored.</p></li>
			</ul>
		</section>


	</conbody>
</concept>
