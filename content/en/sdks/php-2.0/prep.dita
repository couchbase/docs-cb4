<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="concept5766">
	<title>Preparations</title><shortdesc>Before you can start coding the application logic, you need to prepare both the database
		and the application.</shortdesc>
	<conbody>
		<p>To get started, you need to import the <codeph>beer-sample</codeph>
			bucket, prepare some views and make sure everything works correctly. You’ll also get the
			application skeleton set up so you are ready to code.</p>

		<section><title>Setting up Couchbase Server</title><p>If you haven’t already, download and
				install Couchbase Server 2.0. While you’re at it, make sure to install the
					<codeph>beer-sample</codeph> sample bucket on the fly. If you already have the server
				installed and the <codeph>beer-sample</codeph> bucket is not in place, head over to
					<codeph>Settings-&gt;Sample Buckets</codeph> and install it. Give it a few seconds
				until the notification box disappears. You may need to shrink the size of some of your
				existing buckets to make room for the beer-sample database.</p><p>The
					<codeph>beer-sample</codeph> bucket comes with a small set of views already
				predefined, but to make our application function correctly we need some more. This is
				also a very good chance to explore the view management possibilities inside the Web
				UI.</p><p>Since we want to list beers and breweries by name, we need to define one view
				for each. Head over to the Web UI and click on the <codeph>Views</codeph> menu. Select
					<codeph>beer-sample</codeph> from the drop-down list to switch to the correct bucket.
				Now click on <codeph>Development Views</codeph> and then <codeph>Create Development
					View</codeph> to define your first view. You need to give it the name of both the
				design document and the actual view. Insert the following names:</p><ul>
				<li><p>Design Document Name: _design/dev_beer</p></li>
				<li><p>View Name: by_name</p></li>
			</ul><p>The next step is to define the <codeph>map</codeph> and optional <codeph>reduce</codeph>
				functions. This example doesn't include a <codeph>reduce</codeph> function, but you can
				add one if you want to try it out. Insert the following JavaScript <codeph>map</codeph>
				function and click <codeph>Save</codeph>.</p><codeblock outputclass="language-javascript">function (doc, meta) {
  if(doc.type &amp;&amp; doc.type == "beer") {
    emit(doc.name, null);
  }
}</codeblock><p>Every
					<codeph>map</codeph> function takes the full document ( <codeph>doc</codeph> ) and
				(optionally) its associated metadata ( <codeph>meta</codeph> ) as the arguments. You are
				then free to inspect this data and <codeph>emit</codeph> a result when you want to have
				it in your view. Views are always sorted by key, so by emitting information, we are in
				effect creating an index. In our case we emit the name of the beer (
					<codeph>doc.name</codeph> ) when the document both has a type field and the type is
					<codeph>beer</codeph>. We don’t need to emit a value - that’s because we are using
					<codeph>null</codeph> here. It’s always advisable to keep the view entry as small as
				possible. Resist the urge to include the full document through <codeph>emit(meta.id,
					doc)</codeph>, because it will increase the size of your views. If you need to access
				the full document (or large parts), then retrieve the document via the returned id in
				the view result. Note: at this time PHP does not have a way to include docs, though some
				other Couchbase SDKs do.</p><p>Now we need to do (nearly) the same for our breweries.
				Since you already know how to do this, here is all the information you need to create
				it:</p><ul>
				<li><p>Design Document Name: _design/dev_brewery</p></li>
				<li><p>View Name: by_name</p></li>
				<li><p>Map Function:</p>
					<codeblock outputclass="language-javascript">function (doc, meta) {
  if(doc.type &amp;&amp; doc.type == "brewery") {
    emit(doc.name, null);
  }
}</codeblock></li>
			</ul><p>The final step that you need to do is to push the design documents in production. While the
				design documents are in <codeph>development</codeph>, the index is only applied to a
				subset of the data. Since we want to have the index on the whole data set, click the
					<codeph>Publish</codeph> button on both design documents (and accept any pop-up that
				warns you about overriding the old one). See the view section of the Couchbase Server
				manual for more information on how you may use this development and production workflow
				to your advantage when developing a large application.</p></section>
		<section><title>Installing the Application Dependencies</title><p>Now that Couchbase Server is
				ready to use, we need to set up the skeleton of our application. Since we’re using
				composer, all we need to get the dependencies is to create a
					<codeph>composer.json</codeph> file with the following
				content:</p><codeblock outputclass="language-json">{
  "require": {
    "silex/silex": "1.0.x-dev",
    "twig/twig": ">=1.8,&lt;2.0-dev"
  }
}</codeblock><p>Place
				that file inside the <codeph>/beersample-php</codeph> directory of your web root
				(depending on your setup, it is often located under <codeph>/var/www/</codeph> ). We
				also need to create a few more directories to keep the application
				organized.</p><p>Create directories with the following
				structure:</p><codeblock>/beersample-php
    /templates
        /beers
        /breweries
    /assets
        /css
        /js</codeblock><p>We’ll
				fill the template directories later, but the assets can be added immediately. Please
				locate and download the following JavaScript and CSS files so they are in place. We make
				use of the fabulous <xref href="http://twitter.github.com/bootstrap/" scope="external"
					format="html">Twitter Bootstrap</xref> library to make the application look good
				without much effort.</p><ul>
				<li><p><xref
							href="https://raw.github.com/couchbaselabs/beersample-php/master/assets/css/beersample.css"
							scope="external" format="html">css/beersample.css</xref></p></li>
				<li><p><xref
							href="https://raw.github.com/couchbaselabs/beersample-php/master/assets/css/bootstrap.min.css"
							scope="external" format="html">css/bootstrap.min.css (the minified twitter
							bootstrap library)</xref></p></li>
				<li><p><xref
							href="https://raw.github.com/couchbaselabs/beersample-php/master/assets/css/bootstrap-responsive.min.css"
							scope="external" format="html">css/bootstrap-responsive.min.css (the minified
							responsive layout classes from bootstrap)</xref></p></li>
				<li><p><xref
							href="https://raw.github.com/couchbaselabs/beersample-php/master/assets/js/beersample.js"
							scope="external" format="html">js/beersample.js</xref></p></li>
				<li><p><xref
							href="https://raw.github.com/couchbaselabs/beersample-php/master/assets/js/jquery.min.js"
							scope="external" format="html">js/jquery.min.js (the jQuery javascript
							library)</xref></p></li>
			</ul><p>Also, we’re using pretty URLs in our application. Here is a
					<codeph>.htaccess</codeph> file you can place inside your root directory to make it
				work properly when using Apache HTTPD. Please refer to the <xref
					href="http://silex.sensiolabs.org/doc/web_servers.html" scope="external"
					format="html">Silex documentation</xref> on how to add one for different web
				servers.</p><codeblock outputclass="language-markup">&lt;IfModule mod_rewrite.c>
    Options -MultiViews

    RewriteEngine On
    RewriteBase /beersample-php
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.php [L]
&lt;/IfModule></codeblock><p>To
				install the dependencies, we’re now able to run <codeph>php composer.phar
					install</codeph> (or <codeph>update</codeph> ). It should install all needed
				dependencies and we’re ready to go
			afterwards:</p><codeblock>Loading composer repositories with package information
Installing dependencies
  - Installing twig/twig (v1.11.1)
    Downloading: 100%
...

  - Installing silex/silex (dev-master 0e69dc2)
    Cloning 0e69dc22400293f9364f8b918d008f3f6b634a47

symfony/routing suggests installing symfony/config (2.1.*)
...
Writing lock file
Generating autoload files</codeblock></section>
	</conbody>
</concept>
