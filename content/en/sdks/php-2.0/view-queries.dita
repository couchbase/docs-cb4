<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_tvx_nhq_44">
 <title>Working with view queries</title>
 <shortdesc>You can use MapReduce views to create queryable secondary indexes in Couchbase Server. </shortdesc>
 <conbody>
  <p>The primary index for documents is the key you use when performing the standard CRUD methods. </p>
		<p>The following examples query a <codeph>by_name</codeph> view in a beer design document. This
			view checks whether a document is a beer and has a name. If it does, it emits the beer's
			name into the index. This view allows beers to be queried for by name. For example, it's
			now possible to ask the question "What beers start with A?" Here's the JavaScript code for
			the view function:</p>
   <codeblock outputclass="language-javascript">function (doc, meta) {
  if (doc.type &amp;&amp; doc.type == "beer" &amp;&amp; doc.name) {    
     emit(doc.name, null);
  }
}</codeblock>
  <p>Querying a view through the PHP client is performed through the
        <codeph>CouchbaseViewQuery</codeph> class that is available as a top-level object.</p>
   <codeblock outputclass="language-php">$query = CouchbaseViewQuery::from('beer', 'by_name');</codeblock>
  <p>A <codeph>CouchbaseViewQuery</codeph> object enables you to query the view and specify various
			available options for the query. After you have the query ready for execution, just pass it
			to the `query` method of the your Bucket instance:</p>
   <codeblock outputclass="language-php">$myBucket = $myCluster->openBucket();
$res = $myBucket->query($query);</codeblock>
  <p>You can modify your view results by specifying various options before executing the
				<codeph>query</codeph> method. Here is an example that skips the first 6 items and
			limits the results to 3 items:</p>
  <codeblock outputclass="language-php">$query = CouchbaseViewQuery::from('beer', 'by_name')->skip(6)->limit(3);
$myBucket->query($query);</codeblock>
 </conbody>
</concept>
