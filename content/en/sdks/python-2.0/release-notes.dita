<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_cn2_5ck_r4">
	<title>Release notes</title>
	<shortdesc>Release notes for the 2.0 version of the Python SDK.</shortdesc>
	<conbody>
        <section>
            <title>Version 2.0.9 (19 May 2016)</title>
            <ul id="ul_izl_hp3_1w">
                <li>Raise exception if error occurs in stats operation. Previously the error would
                    be silenced and the <apiname>Bucket.stats()</apiname> would simply return an
                    empty value. Issue <xref href="https://issues.couchbase.com/browse/PYCBC-341"
                        format="html" scope="external">PYCBC-341</xref>.</li>
                <li>Fix error when iterating over <apiname>SubdocResult</apiname>. This was due to a
                    missing import for the <codeph>izip</codeph> function, which requires an import
                    from <codeph>itertools</codeph> in Python 2.7. Issue <xref
                        href="https://issues.couchbase.com/browse/PYCBC-343" format="html"
                        scope="external">PYCBC-343</xref>.</li>
                <li>Add experimental full-text search support. This is available via the
                        <apiname>Bucket.search()</apiname> method.  Issue <xref
                        href="https://issues.couchbase.com/browse/PYCBC-321" format="html"
                        scope="external">PYCBC-321</xref>.</li>
                <li>Send Python SDK version in server-side logs. This allows the Python SDK version
                    to appear in the server-side logs, such as when using
                        <codeph>cbcollectinfo</codeph>. Issue <xref
                        href="https://issues.couchbase.com/browse/PYCBC-388" format="html"
                        scope="external">PYCBC-388</xref>.</li>
                <li>Enable users to add multiple bucket credentials. This may be used for future
                    cross-bucket access and authentication (for e.g. n1ql queries which use multiple
                    buckets). The credentials may be added via
                        <apiname>Bucket.add_bucket_creds()</apiname>. Issue <xref
                        href="https://issues.couchbase.com/browse/PYCBC-325" format="html"
                        scope="external">PYCBC-325</xref>.</li>
                <li>Add N1QL index management to the <apiname>BucketManager</apiname> class. This
                    adds the <apiname>n1ql_create_index</apiname>,
                        <apiname>n1ql_drop_index</apiname> and other methods to the
                        <apiname>BucketManager</apiname> class. The <apiname>BucketManager</apiname>
                    itself may be obtained via <apiname>Bucket.bucket_manager()</apiname>. Issue
                        <xref href="https://issues.couchbase.com/browse/PYCBC-326" format="html"
                        scope="external">PYCBC-326</xref>.</li>
                <li>Fix wrong callbacks being invoked when <apiname>GreenletExit</apiname> is caught
                    and handled. Issue <xref href="https://issues.couchbase.com/browse/PYCBC-344"
                        format="html" scope="external">PYCBC-344</xref>.</li>
            </ul>
        </section>
        <section>
            <title>Version 2.0.8 (4 April 2016)</title>
            <ul id="ul_bw5_5ps_nv">
                <li>Added sub-document API support. This is an experimental API which can be used
                    with Couchbase Server 4.5. There is a walkthrough <xref
                        href="http://blog.couchbase.com/2016/february/subdoc-explained"
                        format="html" scope="external">blog</xref> demonstrating the sub-document
                    API, though the API in this release has some minor differences. Issue <xref
                        href="https://issues.couchbase.com/browse/PYCBC-320" format="html"
                        scope="external">PYCBC-320</xref></li>
                <li>Improved and fixed sequence-number consistency for N1QL queries. Seqno-based
                    consistency is a feature in Couchbase Server 4.5 and was implemented previously
                    in the Python SDK. It has been modified in this version to reflect the latest
                    server development, notably to support multi-bucket sequence bounding. Issue
                        <xref href="https://issues.couchbase.com/browse/PYCBC-319" format="html"
                        scope="external">PYCBC-319</xref></li>
            </ul>
        </section>
        <section>
            <title>Version 2.0.7 (1 February 2016)</title>
            <p>
                <ul id="ul_f4w_kbc_w5">
                    <li>Enhanced <i>asyncio</i> support using the <codeph>acouchbase</codeph>
                            module:<ul id="ul_f53_sbc_w5">
                            <li>Ensure the <codeph>acouchbase</codeph> module is installed alongside
                                    <codeph>couchbase</codeph> (<xref
                                    href="https://issues.couchbase.com/browse/PYCBC-318"
                                    format="html" scope="external">PYCBC-318</xref>)</li>
                            <li>Add example to README for asyncio</li>
                            <li>Fix potential crash when loop is destroyed while the
                                    <codeph>Bucket</codeph> object is still in scope</li>
                            <li>Add support for <codeph>query</codeph> and
                                    <codeph>n1ql_query</codeph> in the
                                    <apiname>acouchbase.bucket.Bucket</apiname> module.</li>
                        </ul></li>
                    <li>Undocument <codeph>View.rows_returned</codeph>. This variable is slightly
                        misleading and acts as a counter for how many total rows have been buffered.
                        It is not particularly useful for outside application development. Issue
                            <xref href="https://issues.couchbase.com/browse/PYCBC-317" format="html"
                            scope="external">PYCBC-317</xref></li>
                </ul>
            </p>
        </section>
        <section>
            <title>Version 2.0.6 (8 December 2015)</title>
            <p>
                <ul id="ul_kcy_4zb_w5">
                    <li>Removed the <i>experimental</i> designation from the N1QL and Geospatial
                        views support (both are stable as of Couchbase 4.0). Issue <xref
                            href="https://issues.couchbase.com/browse/PYCBC-310" format="html"
                            scope="external">PYCBC-310</xref></li>
                    <li>Indicated that N1QL placeholder values (from
                            <codeph>couchbase.n1ql.N1QLQuery</codeph>) should contain unencoded
                        Python values rather than encoded JSON values. Issue <xref
                            href="https://issues.couchbase.com/browse/PYCBC-309" format="html"
                            scope="external">PYCBC-309</xref></li>
                    <li><codeph>N1QLRequest</codeph> (the iterator object returned via
                            <codeph>Bucket.n1ql_query()</codeph>) now has a <codeph>meta</codeph>
                        property which can be inspected at the end of querying to discover other
                        metadata sent by the server</li>
                    <li><codeph>N1QLRequest.execute()</codeph> now returns itself, allowing for
                        idioms such as <codeph>meta =
                        cb.n1ql_query(...).execute().meta</codeph></li>
                    <li>Attempting to access any metadata property of a <codeph>View</codeph> object
                        (returned from <apiname>Bucket.query</apiname>) or a
                            <codeph>N1QLRequest</codeph> object (returned from
                            <apiname>Bucket.n1ql_query</apiname>) will raise an exception if the
                        query has not been complete yet. This new functionality will prevent
                        misleading information from trickling into the application and enforce
                        correct API usage. Issue <xref
                            href="https://issues.couchbase.com/browse/PYCBC-311" format="html"
                            scope="external">PYCBC-311</xref></li>
                    <li>Allow tests to be executed by specifying their "simple" names. Internally
                        the SDK's tests' names are mangled according to the API implementation being
                        tests (synchronous, <codeph>gevent</codeph>, <codeph>asyncio</codeph>, and
                        other future possible implementations). An example of a mangled name might
                        be <codeph>couchbase.tests.test_sync.ArithmeticTest_Bucket</codeph> while
                        the actual test name may be
                            <codeph>couchbase.tests.cases.arithmetic_t.ArithmeticTest</codeph>. This
                        allows the unmangled name to be used; falling back to the sync
                        implementation and issuing a warning that the mangled name should be used in
                        the future.</li>
                    <li>Don't throw exception iterating over empty resultsets with
                            <codeph>Async</codeph> modules. Issue <xref
                            href="https://issues.couchbase.com/browse/PYCBC-308" format="html"
                            scope="external">PYCBC-308</xref></li>
                </ul>
            </p>
        </section>
        <section>
            <title>Version 2.0.5 (3 November 2015)</title>
            <ul id="ul_bzx_wty_wt">
                <li>Fix N1QL API for Twisted. The N1QL API in the Twisted
                        (<codeph>txcouchbase</codeph>) module was not functioning correctly with
                    respect to iterating over the results. This has been fixed. Issue <xref
                        href="https://issues.couchbase.com/browse/PYCBC-306" format="html"
                        scope="external">PYCBC-306</xref>.</li>
                <li>Fix common flags mask for 32-bit platforms. This fixes a bug where a negative
                    value would be exposed to Python for the format mask. This issue may have
                    affected user-defined transcoders on 32-bit platforms. Issue <xref
                        href="https://issues.couchbase.com/browse/PYCBC-296" format="html"
                        scope="external">PYCBC-296</xref>.</li>
                <li><apiname>ItemOptionsDict.add()</apiname> now validates its inputs to be of type
                        <apiname>Item</apiname>. This avoids crashes and odd behaviors later on if
                    trying to perform <codeph>Item</codeph>-based operations on objects which are
                    not <apiname>Item</apiname> instances. Issue <xref
                        href="https://issues.couchbase.com/browse/PYCBC-303" format="html"
                        scope="external">PYCBC-303</xref></li>
                <li>Add <codeph>Bucket.is_ssl</codeph> property. This property is a read-only
                    boolean which is true if the current <apiname>Bucket</apiname> object is
                    connected using SSL. Issue <xref
                        href="https://issues.couchbase.com/browse/PYCBC-305" format="html"
                        scope="external">PYCBC-305</xref></li>
                <li>Add <apiname>Bucket.n1ql_timeout</apiname> property. This property allows
                    setting the global N1QL timeout for N1QL queries. Timeouts may also be set
                        <i>lower</i> on a per-query basis using the
                        <apiname>N1QLQuery.tmeout</apiname> property. Issue <xref
                        href="https://issues.couchbase.com/browse/PYCBC-307" format="html"
                        scope="external">PYCBC-307</xref></li>
            </ul>
        </section>
        <section><title>Version 2.0.4 (1 September 2015)</title>Version 2.0.4 adds some additional
            APIs and bug fixes<ul id="ul_ukh_yxs_qt">
                <li>Fix <codeph>FMT_XXX_MASK</codeph> to the correct values. This allows them to be
                    used for user-defined transcoders. Previously this would end up being a negative
                    value. This has been fixed by forcing the value to be unsigned in the Python
                    extension code. Issue <xref href="https://issues.couchbase.com/browse/PYCBC-293"
                        format="html" scope="external">PYCBC-293</xref></li>
                <li>Free <codeph>Result</codeph>'s mutation info before freeing result itself. This
                    fixes a bug where the client would read uninitialized memory, introduced in
                    2.0.3. Issue <xref href="https://issues.couchbase.com/browse/PYCBC-294"
                        format="html" scope="external">PYCBC-294</xref>.</li>
                <li>Ignore legacy value flags (bits 1-24) if any of the newer common value flags
                    (bits 24-32) is set. This allows the Python SDK to interact better with other
                    SDKs (in this case, the .NET client), which themselves may set the lower 24 bits
                    in additional to the upper 8 bits. The lower 24 bits are not interoperable but
                    are set by SDKs for legacy purposes. The upper 8 bits are intended to be
                    interoperable and take precedence over the legacy flags. Issue <xref
                        href="https://issues.couchbase.com/browse/PYCBC-295" format="html"
                        scope="external">PYCBC-295</xref>.</li>
                <li>Allow use of N1QL's prepared (optimized, non-adhoc) queries. This can be done by
                    setting the <codeph>adhoc</codeph> property to <codeph>False</codeph> on the
                        <codeph>N1QLQuery</codeph> object. The Python SDK passes this option to the
                    C SDK, which implements the underlying mechanics for this feature.</li>
                <li>Add undocumented <i>keystats</i> feature. This feature allows retrieval of some
                    additional document metadata (such as expiration and flags) through the
                        <codeph>stats()</codeph> API. This is a private API and only intended for
                    debugging purposes. It may be used by passing the <codeph>keystats=True</codeph>
                    to the <codeph>Bucket.stats()</codeph> method. When passing this argument, any
                    of the prior keys passed to the <codeph>stats()</codeph> method are interpreted
                    to refer to document IDs, and their metadata (for each server) is returned.
                    Issue <xref href="https://issues.couchbase.com/browse/PYCBC-291" format="html"
                        scope="external">PYCBC-291</xref>.</li>
            </ul></section>
        <section><title>Version 2.0.3 (3 August 2015)</title>Version 2.0.3 fixes some additional
            bugs in the N1QL API, and enhances its integration with the underlying C SDK<ul
                id="ul_lkx_hxs_qt">
                <li>Fix crash in cases where N1QL result iterator (<codeph>N1QLRequest</codeph>) is
                    destroyed (in Python) before query is complete. This happens if the iterator is
                    destroyed or otherwise goes out of scope before all its results have been
                    returned to the user within Python. Issue <xref
                        href="https://issues.couchbase.com/browse/PYCBC-290" format="html"
                        scope="external">PYCBC-290</xref></li>
                <li>Don't throw exception on N1QL results which return no rows. This fix in Python
                    code properly handles the case where no rows are returned by the query.</li>
            </ul></section>
        <section>
            <title>Version 2.0.2 (2 June 2015)</title>
            <p>Version 2.0.2 fixes some bugs in the N1QL API, and also adds an administration
                API</p>
            <ul id="ul_msg_whv_fs">
                <li>Fix encoding bug for named parameters with N1QL queries. This fixes an issue
                    where named parameters passed to the <apiname>N1QLQuery</apiname> constructor
                    would be accepted by the library, but would not actually be properly supplied
                    during query time.</li>
                <li>Add administrative API for creating/modifying/removing buckets. This extends the
                        <codeph>couchbase.admin.Admin</codeph> class. This API is only available for
                    synchronous clients (and thus has no gevent or Twisted wrappers).</li>
            </ul>
        </section>
        <section>
            <title>Version 2.0.1 (5 May 2015)</title>
            <p>Version 2.0.1 offers a new (experimental) N1QL API.</p>
            <p><b>Changes</b><ul id="ul_s5g_th1_yr">
                    <li>The N1QL API now returns raw Python dictionaries (as parsed from within
                        Python) rather than <apiname>N1QLRow</apiname> objects. The
                            <apiname>N1QLRow</apiname> class has been removed.</li>
                    <li>N1QL API encoding is done directly in pure Python, rather than deferring to
                        the C library.</li>
                    <li>The <apiname>N1QLQuery.set_args()</apiname> and
                            <apiname>N1QLQuery.add_args</apiname> have been removed. Placeholder
                        parameters should be provided directly in the constructor in the form of
                        Python's positional and keyword arguments,
                        e.g.<codeblock outputclass="language-python">q = N1QLQuery("SELECT name, age FROM users WHERE age=$age", age=42)</codeblock></li>
                    <li>A new <codeph>N1QLQuery.consistency</codeph> property has been implemented,
                        which may accept a <varname>couchbase.n1ql.CONSISTENCY_REQUEST</varname> or
                            <varname>CONSISTENCY_NONE</varname> to indicate the consistency of the
                        dataset against which the query is executed</li>
                </ul><b>Enhancements</b><ul id="ul_lrf_g31_yr">
                    <li>Document the <apiname>Bucket.flush()</apiname> method.</li>
                    <li>Starting from this version, Windows binaries are now available for Python
                        3.4</li>
                </ul></p>
        </section>
        <section>
            <title>Version 2.0.0 (7 April 2015)</title>
            <p>Version 2.0.0 is the first general availability release of the 2.0 Python SDK.</p>
            <p>Enhancements</p>
            <ul id="ul_tg1_mzf_qr">
                <li>The client now offers integration with Python's <codeph>logging</codeph> module.
                    Simply invoke <codeph>couchbase.enable_logging()</codeph> to use Python's
                    built-in logging. This is a cleaner alternative to using
                        <codeph>LCB_LOGLEVEL</codeph> in the environment.</li>
                <li>Building on Apple's Python now works in all conditions, as
                        <codeph>/usr/local/</codeph> is now included in the library search
                    paths.</li>
                <li>A new <codeph>split_result()</codeph> method has been added to the
                        <codeph>CouchbaseError</codeph> base exception class. This method allows
                    users to more easily derive the successful and failed operations (the later of
                    which caused the exception).</li>
                <li>For <i>Windows</i> installers, libcouchbase <b>2.4.8</b> is bundled.</li>
            </ul>
        </section>
        <section>
            <title>Version 2.0.0 Beta 2 (3 March 2015)</title>
            <p>Version 2.0 Beta 2 is the second beta release of the Python SDK version 2.0. This
                release includes additional experimental support for geospatial views and N1QL
                queries.</p>
            <p>Enhancements</p>
            <ul id="ul_erf_djz_gr">
                <li>The views subsystem has been rewritten internally to take advantage of the new
                    view API inside libcouchbase. As a result, the client now depends on
                    libcouchbase version 2.4.7 or later.</li>
                <li>Geospatial support has been added via the <codeph>SpatialQuery</codeph> class.
                    This can be used like the <codeph>Query</codeph> class, but contains the
                        <codeph>start_range</codeph> and <codeph>end_range</codeph> properties.</li>
                <li>N1QL support has been added via the <codeph>N1QLQuery</codeph> class and the
                        <codeph>Bucket.n1ql_query()</codeph> method. This exposes an iterator-based
                    API similar to the view API. The N1QL API is highly experimental and likely to
                    change.</li>
            </ul>
        </section>
        <section>
            <title>Version 2.0.0 Beta 1 (20 January 2015)</title>
            <p>Version 2.0 Beta 1 is the first beta release of the Python SDK version 2.0. This
                release includes new documentation, new API reference, and a tested interface that
                represents all committed features. Various uncommitted and experimental features
                might change prior to the final release of version 2.0.0.</p>
            <p>Enhancements and behavioral changes</p>
            <ul>
                <li>New CRUD verbs have been introduced, which makes this release more compatible
                    with other 2.0 SDKs. Thus, <codeph>set</codeph> has been renamed to
                        <codeph>upsert</codeph>, <codeph>add</codeph> to <codeph>insert</codeph>,
                    and <codeph>incr</codeph> and <codeph>decr</codeph> to
                    <codeph>counter</codeph>.</li>
                <li>A new <codeph>Bucket</codeph> class has been introduced that replaces the older
                        <codeph>Connection</codeph> class. To connect to a bucket, instantiate the
                        <codeph>Bucket</codeph> object via its constructor. The constructor is
                    typically passed a <term>connection string</term> (see API documentation for
                    details). The older method for connecting, that is,
                        <codeph>Couchbase.connect</codeph> has been deprecated (but not
                    removed).</li>
                <li>Data flags have been modified to conform to the new SDK 2.0 specification
                    regarding common handling of data types across clients. This means that data
                    stored by the Python SDK (other than in <codeph>FMT_PICKLE</codeph>) will be
                    readable by all other SDKs. This does not break interoperability with older
                    versions of the Python client, but might break interoperability with older
                    versions of other SDKs.</li>
                <li>Flushing a bucket is now possible via the <codeph>Bucket.flush</codeph>
                    method.</li>
                <li><codeph>include_docs</codeph> now works in gevent. Previously this would use the
                    server-side <codeph>include_docs</codeph>, which was removed in Couchbase Server
                    3.0.</li>
                <li>An experimental implementation, <codeph>acouchbase</codeph>, has been added.
                    This is intended to integrate with the Python 3 <codeph>asyncio</codeph> (also
                    know as Tulip) event system.</li>
            </ul>
            <p>Known issues</p>
            <ul>
                <li>The N1QL interface has yet to be defined.</li>
            </ul>
        </section>
    </conbody>



</concept>
