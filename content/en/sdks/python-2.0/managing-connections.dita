<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_ppz_lhq_44">
 <title>Managing server connections </title>
 <shortdesc>Shows how to instantiate a client object to connect to a Couchbase cluster</shortdesc>
	
<conbody>
		<p>Note that many of these examples will demonstrate a <i>connection string</i>. The
			connection string is interpreted by the underlying C library. You can read more about it
			at <xref href="../c-2.4/managing-connections.dita#concept_ppz_lhq_44/concept_khq_vhq_44"
			/></p>
	
	
	<section>
		
		<title>Connecting to a bucket (synchronous API)</title>
			<p>To connect to a bucket using the synchronous API, simply create a new
					<apiname>Bucket</apiname> object by calling its constructor. You should pass a
					<i>connection string</i> to the bucket indicating the host(s) and bucket you
				want to connect to. If your bucket is protected by a password, pass the
					<varname>password</varname> keyword argument to the
				constructor.<codeblock outputclass="language-python">from couchbase.bucket import Bucket
bucket = Bucket('couchbase://10.1.1.1/default')
# With a password:
protected_bucket = Bucket('couchbase://10.1.1.1/default', password='s3cr3t')</codeblock></p>
		
		<p>The bucket connection will close once it falls out of scope and has no other objects
				referencing it. It is advised to create only a single bucket object per application
				(or thread) for each Couchbase bucket your application connects to.</p>
	</section>
		<section>
			<title>Connecting to a bucket (Twisted API)</title>
			<p>Connecting via the Twisted API is similar to the synchronous API. To connect via the Twisted
				API, create the <apiname>Bucket</apiname> object, then call the
					<apiname>connect()</apiname> method on the object. This method will return a
					<apiname>Deferred</apiname> which will have its <codeph>callback</codeph>
				invoked if the connection succeeds and its <codeph>errback</codeph> invoked on
				error.<codeblock outputclass="language-python">from twisted.internet import reactor
from txcouchbase.bucket import Bucket

bucket = Bucket('couchbase://10.1.1./default')

def on_connect_ok(*ignored_args):
  print "Client connected OK"
def on_connect_fail(err, *args):
  print "Client failed ", err
  err.raiseException()

d = bucket.connect()
d.addCallback(on_connect_ok)
d.addErrback(on_connect_fail)</codeblock></p>
		</section>
	
	
	<section id="ssl">
            <title>Configuring SSL</title>
            <note>Read more about secure SSL connections: <xref
                    href="../../developer-guide/ssl-connections.dita#concept_otn_kpv_tt"/></note>
            <p>To configure SSL, pass an SSL scheme (<codeph>couchbases://</codeph>) with your
                connection. Ensure you pass the <varname>certpath</varname> parameter which should
                point to the local path to the cluster's certificate</p>
            <codeblock outputclass="language-python">bucket = Bucket('couchbases://10.1.1.1/default?certpath=/path/to/cluster/certificate.pem')</codeblock>
        </section>
        <section><title>Performance, scalability, and concurrency</title>Creating a new
                <apiname>Bucket</apiname> object is relatively expensive, and keeping many idle
                <apiname>Bucket</apiname> objects will negatively impact server performance (if done
            at a large scale). If using an asynchronous framework (such as Gevent or Twisted), your
            application will require only one <apiname>Bucket</apiname> instance per Couchbase
            bucket. Likewise, if your Python application only contains a single thread then you need
            establish only a single <apiname>Bucket</apiname> object per Couchbase bucket. </section>
        <section>If using multiple Python threads, it may be possible to share a single
                <apiname>Bucket</apiname> object across multiple threads (using locking). The exact
            number of <apiname>Bucket</apiname> objects to be created will depend on the activity
            pattern of the application. It is recommended to start off and develop with a single
            object for all threads. If you realize that your application is suffering in performance
            because of threads waiting for the <apiname>Bucket</apiname> object's lock, you may
            implement a form of pooling or sharing so that <i>n</i> number of buckets be
                available.<p>If using multiple processes (such as with the
                    <codeph>multiprocessing</codeph> module), or using a Python module which creates
                multiple processes, ensure that the <apiname>Bucket</apiname> object is not created
                in the parent process! Your Python interpreter may crash if the same
                    <apiname>Bucket</apiname> object exists in more than a single
            process.</p></section>
	
	
</conbody>
 
</concept>
