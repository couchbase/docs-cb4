<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_iqn_nhq_44">
 <title>Atomic operations</title>
	<shortdesc>The Node.js Couchbase SDK supports several operations that allow one-step, atomic
		changes to documents. These operations include counter, prepend, and append
		functions.</shortdesc>
 <conbody>
		
		<section>
			<title>Counter operation</title>
			<p>The <codeph>counter()</codeph> method enables you to implement an atomic counter as a
				Couchbase document. These operations expect UTF-8 encoded string representations of
				the number. You can either execute this operation against a previously created
				document, or create a new document by using the <codeph>initial</codeph> property
				passed as an option.  More information about the initial property is available
				below.</p>
		<p>The following example shows how to use the <codeph>counter()</codeph> method to increment your
				counter and get the value back:</p>
		<p>
			<codeblock outputclass="language-javascript">var myBucket = myCluster.openBucket();
myBucket.insert('document_name', 10, function() {
  myBucket.counter('document_name', 1, function(err, res) {
    if (err) {
      console.log('operation failed', err);
      return;
    }

    console.log('success!', res);
  });
});</codeblock>
		</p>		
		<p>Sample output from the example:</p>
 	<codeblock>success! { cas: { '0': 3085434880, '1': 1662465098 }, value: 11 }</codeblock>
			<p>The following example shows how to use the <codeph>counter()</codeph> method to decrement your
				counter and get the value back:</p>
			<p>
				<codeblock outputclass="language-javascript">var myBucket = myCluster.openBucket();
myBucket.set('document_name', 10, function() {
  myBucket.counter('document_name', -1, function(err, res) {
    if (err) {
      console.log('operation failed', err);
      return;
    }

    console.log('success!', res);
  });
});</codeblock>
			</p>		
			<p>Sample output from the example:</p>
			<codeblock>success! { cas: { '0': 9977273, '1': 3468060 }, value: 9 }</codeblock>
			<p>You can additionally perform a counter operation with an initial value specified. In this
				case, the document will be created if it does not exist. The
					<codeph>initial</codeph> property will do nothing if the document already
				exists.<codeblock outputclass="language-javascript">var myBucket = myCluster.openBucket();
myBucket.counter('document_name', 1, {initial:10}, function(err, res) {
  if (err) {
    console.log('operation failed', err);
    return;
  }

  console.log('success!', res);
});</codeblock></p>
			<p>Sample output from the example:</p>
			<codeblock>success! { cas: { '0': 9977273, '1': 3468060 }, value: 10 }</codeblock>
			<note>If a new counter document is created by using the <codeph>initial</codeph>
				property, the counter is set to the value of <codeph>initial</codeph>, not
					<codeph>initial+offset</codeph>. </note>
		
		</section>

 	<section>
 		<title>Append and prepend operations</title>
			<p>The append and prepend operations allow you to perform a binary append or prepend to
				a Couchbase document.</p>
				
				<note> This operation is performed without any consideration
					for data type, thus appending a JSON document to a JSON document will result in
					an invalid object (for instance: <codeph>{}{}</codeph>).</note>
 		
			<p>The following is an example of how to use the append() method to add further text to
				an already existing
				document:</p><codeblock outputclass="language-javascript">var myBucket = myCluster.openBucket();
// Insert a starting document
myBucket.insert('document_name', 'Beautiful', function() {
  // Append some content to it
  myBucket.append('document_name', 'World!', function() {
    // Prepend some more text
    myBucket.prepend('document_name', 'Hello ', function() {
      // Retrieve its updated contents
      myBucket.get('document_name', function(err, res) {
        console.log(err, res);
      });
    });
  });
});</codeblock>
			<p>Sample output from the example:</p>
			<codeblock>null { cas: { '0': 7112265, '1': 69427 }, value: 'Hello Beautiful World!' }</codeblock>
 	</section>
 	
	</conbody>
</concept>
