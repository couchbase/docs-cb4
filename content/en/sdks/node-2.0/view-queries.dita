<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_tvx_nhq_44">
  <title>Working with view queries</title>
  <shortdesc>You can use MapReduce views to create queryable secondary indexes in Couchbase Server. </shortdesc>
  <conbody>
    <p>The primary index for documents is the key you use when performing the standard CRUD methods. </p>
    <p>The following example queries a <codeph>by_name</codeph> view in a beer design document. This
      view checks whether a document is a beer and has a name. If it does, it emits the beer's name
      into the index. This view allows beers to be queried for by name. For example, it's now
      possible to ask the question "What beers start with A?"</p>
    <codeblock outputclass="language-javascript">function (doc, meta) {
  if (doc.type &amp;&amp; doc.type == "beer" &amp;&amp; doc.name) {    
     emit(doc.name, null);
  }
}</codeblock>
    <p>Querying a view through the Node.js client is performed through the
        <codeph>ViewQuery</codeph> class that is available as a top-level object.</p>
    <codeblock outputclass="language-javascript">var couchbase = require('couchbase');
var ViewQuery = couchbase.ViewQuery;

var query = ViewQuery.from('beer', 'by_name');</codeblock>
    <p>A <codeph>ViewQuery</codeph> object enables you to query the view and specify various
      available options for the query. Once you have the query ready for execution, pass it to the
        <codeph>query</codeph> method of the your Bucket instance:</p>
    <codeblock outputclass="language-javascript">var myBucket = myCluster.openBucket();
myBucket.query(query, function(err, results) {
  for(i in results)
    console.log(results[i]);
});</codeblock>
    <p>You can modify your view results by specifying various options before executing the
        <codeph>query</codeph> method. Here is an example that skips the first six items and limits
      the results to three items:</p>
    <codeblock outputclass="language-javascript">var query = ViewQuery.from('beer', 'by_name').skip(6).limit(3);
myBucket.query(query, function(err, results) {
  for(i in results)
    console.log(results[i]);
});</codeblock>
    <p>If you are interested in performing a geospatial view, simply use
				<codeph>SpatialQuery</codeph> as your root rather than <codeph>ViewQuery</codeph>.</p>
    <note>Geospatial queries are supported only against Couchbase Server 3.0.1 or later and are
      currently experimental. If going as planned, the next major release will provide stable
      support. It is not expected that the client API will change, because it is very similar to
      what is provided against regular views.</note>
    <codeblock outputclass="language-javascript">var SpatialQuery = couchbase.SpatialQuery;

var query = SpatialQuery.from('designdoc', 'spatialview').limit(10);
myBucket.query(query, function(err, results) {
  for(i in results)
    console.log(results[i]);
});</codeblock>
  </conbody>
</concept>
