<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="concept4364">
	<title>Setting up the project</title><shortdesc>You need to set up your directory layout and add some
		views in the server before you can start working with the Node.js SDK and express+jade
		itself.</shortdesc>
	<conbody>

		
		<section>
			<title>Creating the project directory layout</title>
			<p>Create a project directory named <filepath>beer</filepath> and subdirectories for the
				views and other components:</p>
			<codeblock outputclass="language-bash">$ mkdir beer 
$ cd beer 
$ mkdir views 
$ mkdir views/beer 
$ mkdir views/brewery 
$ mkdir static 
$ mkdir static/js 
$ mkdir static/css</codeblock>
			<p>To verify the directory structure you just created, you can list all the subdirectories
				in the project directory:</p>
			<codeblock outputclass="language-bash">$ find . -type d
./static
./static/js
./static/css
./views
./views/brewery
./views/beer</codeblock>
			<p>To make the application look pretty, it incorporates <xref href="http://jquery.com"
					format="html" scope="external">jQuery</xref> and <xref href="http://getbootstrap.com"
					format="html" scope="external">Twitter Bootstrap</xref>. You can either download the
				libraries and put them in their appropriate <filepath>css</filepath> and
					<filepath>js</filepath> directories (under <filepath>static</filepath>), or clone the
				project repository and use it from there. If you followed the quick start steps, you
				already have the files in your <filepath>beersample-node</filepath> directory. Either
				way, make sure you have the following files in place:</p>
			<ul>
				<li><filepath>static/css/beersample.css</filepath></li>
				<li><filepath>static/css/bootstrap.min.css</filepath> (the minified Twitter Bootstrap
					library)</li>
				<li><filepath>static/css/bootstrap-responsive.min.css</filepath> (the minified
					responsive layout classes from Bootstrap)</li>
				<li><filepath>static/js/beersample.js</filepath></li>
				<li><filepath>static/js/jquery.min.js</filepath> (the jQuery JavaScript library)</li>
			</ul>
			<p>At this point you have a bare bones web application configured that has all the
				dependencies included.</p>
		</section>

		<section>
			<title>Setting up the Views</title>
			<p>The <codeph>beer-sample</codeph> bucket comes with a small set of predefined views, but
				the application requires some additional views. This is also a good chance to explore
				the view management possibilities available through the Couchbase Server administration
				console.</p>
			<p>The application lists beers and breweries by name, so it also needs predefined views for
				those types of documents. Open the administration console and click
					<uicontrol>Views</uicontrol>. Select <codeph>beer-sample</codeph> from the drop-down list to switch to
				the correct bucket. Now click on <uicontrol>Development Views</uicontrol> and then <uicontrol>Create Development View</uicontrol> to
				define your first view. You need to give it the name of both the design document and the
				actual view. Insert the following names:</p><ul>
				<li><p>Design Document Name: _design/dev_beer</p></li>
				<li><p>View Name: by_name</p></li>
			</ul><p>Next, define the map and optional reduce functions. This example doesn't use reduce functions at
				all, but you can play around with a reduce function to see what happens. Insert the
				following map function (that’s JavaScript) and click <uicontrol>Save</uicontrol>.</p>
			<codeblock outputclass="language-javascript">function (doc, meta) {
  if(doc.type &amp;&amp; doc.type == "beer") {
    emit(doc.name, null);
  }
}</codeblock><p>Every map function takes the full document, <codeph>doc</codeph>, and its associated metadata,
					<codeph>meta</codeph>, as the arguments. Your code can inspect the data in these
				arguments and emit a result when you want to have it in your index. This map function
				emits the name of the beer (<codeph>doc.name</codeph>) when the document both has a type
				field and the type is beer. In this case, a value is not needed, so the function just
				emits <codeph>null</codeph>. It’s always advisable to keep the index as small as
				possible. Resist the urge to include the full document by using <codeph>emit(meta.id,
					doc)</codeph> because it increases the size of your view indexes. If you need to
				access the full document, you can call <codeph>db.get(result.key)</codeph> to get the
				individual document for a single row. The resulting retrieval of the document might be
				slightly out of sync with your view, but it will be fast and efficient. </p><p>Now you need to define a view for the breweries. You already know how to do this—here is all the
				information you need to create a brewery view:</p><ul>
				<li><p>Design Document Name: _design/dev_brewery</p></li>
				<li><p>View Name: by_name</p></li>
				<li><p>Map Function:</p>
					<codeblock outputclass="language-javascript">function (doc, meta) {
  if(doc.type &amp;&amp; doc.type == "brewery") {
    emit(doc.name, null);
  }
}</codeblock></li>
			</ul><p>The final step is to push the design documents in production. While the design documents are in
				development, the index is applied only to a deterministic subset of the data. Because
				you want to have the index on the whole data set, click the <uicontrol>Publish</uicontrol> button on both
				design documents (and accept any pop-up windows that warn you about overriding the old
				design documents).</p>
			
			</section>
	</conbody>

</concept>
