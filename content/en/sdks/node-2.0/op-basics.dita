<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_edq_vdv_t4">
 <title>Operation basics</title>
 <shortdesc>Operations use basic JavaScript data types and callback functions.</shortdesc>
 <conbody>
 	<section>
 		<title>Data types</title>
 		<p>All JavaScript data types that can be serialized via the JSON functions are supported by
				default. Recursive structures cannot be serialized. All textual data is represented
				by UTF-8 when stored to Couchbase Server.  You may alternatively implement your own
				transcoders which modify the method by which your documents are serialized to
				Couchbase.  The following is an example of a transcoder which will transcode all
				documents as UTF-8 encoded JSON documents.</p>
 		<codeblock outputclass="language-javascript">bucket.setTranscoder(function(value) {
  return {
    value: new Buffer(JSON.stringify(value), 'utf8')
    flags: 0
  };
}, function(doc) {
  return JSON.parse(doc.value.toString('utf8'));
});</codeblock>
 	</section>
 	
 	<section>
 		<title>Callbacks</title>
 		
 		<p>The Node.js Couchbase driver uses a callback pattern to notify the application when results
				are ready. You pass callback functions to the operation methods and the callbacks are
				invoked when the results or errors are ready. All storage and retrieval operations (both
				singular and batch methods) follow the same callback pattern, but the format of the
				results differs. </p>
 		<p>Callbacks use the following parameters:</p>
 		
 		<ul>
 			<li><codeph>error</codeph>
					<p><i>Singular operation.</i> If no errors occurred during the operation this
						parameter contains <codeph>null</codeph>. If an error occurred, it contains
						an <codeph>Error</codeph> object.</p>
					<p><i>Batch operation.</i> This parameter contains the number of errors that
						occurred on any of the batched operations.</p>
				</li>
 			
 			<li><codeph>result</codeph>
					<p><i>Singular operation.</i> This parameter contains one object with the properties
						listed in the following table.</p>
					<p><i>Batch operation.</i> This parameter contains an object where the keys match the
						keys your operation targeted and the values contain an object with the properties
						listed in the following table.</p>
					<p>Result objects contain the following properties:</p>
					<table>
						<tgroup cols="3">
							<thead>
								<row>
									<entry>Name</entry>
									<entry>Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry><codeph>value</codeph></entry>
									<entry>For retrieval-type operations, this field contains the value of
										the requested key.</entry>
								</row>
								<row>
									<entry><codeph>error</codeph></entry>
									<entry>For batch operations, this field contains an
											<codeph>Error</codeph> object representing any errors that occurred
										during execution of this particular operation.</entry>
								</row>
								<row>
									<entry><codeph>cas</codeph></entry>
									<entry>An opaque object representing the resulting CAS value of the key
										that was operated on. This value is not meant to be user facing, but
										should be passed directly to other operations for locking
										purposes.</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
				</li></ul>
 	</section>
 </conbody>
</concept>
