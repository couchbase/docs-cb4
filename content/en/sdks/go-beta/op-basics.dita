<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_edq_vdv_t4">
 <title>Operation basics</title>
 <shortdesc>Operations use basic Go data types and JSON marshalling functionality.</shortdesc>
 <conbody>
 	<section>
 		<title>Data types</title>
 		<p>All Go data types that can be serialized via the JSON encoding library are supported by
				default. Recursive structures cannot be serialized. All textual data is represented
				by UTF-8 when stored to Couchbase Server. You may alternatively implement your own
				transcoders which modify the method by which your documents are serialized to
				Couchbase. The following is an example of a transcoder which will transcode all
				documents as UTF-8 encoded JSON documents.</p>
 		<codeblock outputclass="language-javascript">package main

import (
	"github.com/couchbaselabs/gocb"
	"encoding/json"
)

type TestTranscoder struct {
}

func (t TestTranscoder) Decode(bytes []byte, flags uint32, out interface{}) error {
	err := json.Unmarshal(bytes, &amp;out)
	if err != nil {
		return err
	}
	return nil
}

func (t TestTranscoder) Encode(value interface{}) ([]byte, uint32, error) {
	bytes, err := json.Marshal(value)
	if err != nil {
		return nil, 0, err
	}
	return bytes, 0, nil
}

func main() {
	myCluster := gocb.Connect("couchbase://127.0.0.1")
	myBucket := myCluster.OpenBucket("default", "")
	myBucket.SetTranscoder(TestTranscoder{})
}</codeblock>
 	</section>
 	
 	<section>
			<title>Return Values</title>
			<p>The Go SDK uses the typical Go pattern of multiple return values, where the last
				value is an error interface value.  All Go SDK methods follow this pattern.  In
				addition to this, methods which perform JSON marshalling may return values through a
					<codeph>ValuePtr</codeph> parameter of type <codeph>interface{}</codeph>.</p>
		</section>
 </conbody>
</concept>
