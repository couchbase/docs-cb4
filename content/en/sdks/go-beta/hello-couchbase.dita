<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="concept2677">
	<title>Hello Couchbase example</title><shortdesc>The first code example is a <codeph>Hello Couchbase</codeph> app.</shortdesc>
	<conbody>
		<p>This example works with the <codeph>beer-sample</codeph> bucket that is provided with Couchbase
			Server. The following sections contain instructions for running the example app and the
			annotated <codeph>Hello Couchbase</codeph> code.</p>
		<section>
			<title>Running Hello Couchbase</title>
			<p>To run the example Hello Couchbase program:</p>
			<ol id="ol_fw2_rt5_t4">
				<li>Start Couchbase Server on your computer.</li>
				<li>Open the Couchbase administrator console.</li>
					<li>Make sure the <codeph>beer-sample</codeph>
					bucket is available by checking for it under the <uicontrol>Data Buckets</uicontrol>
					tab. If you need to install the bucket:<ol id="ol_bz2_rt5_t4">
						<li>Select <menucascade>
								<uicontrol>Settings</uicontrol>
								<uicontrol>Sample Buckets</uicontrol>
							</menucascade>.</li>
						<li>Install the <codeph>beer-sample</codeph> bucket.</li>
					</ol></li>
				<li>Run the hello-world Go code. </li>
			</ol>
		</section>
			
			<section>
			<title>Hello Couchbase code</title>
			<p>The Hello Couchbase example consists of a single file. The code opens a connection to
				Couchbase Server, retrieves a document, modifies the document, and stores the
				updated document in the database. Here's the code:</p>
			<codeblock outputclass="language-go">package main

import (
"gopkg.in/couchbase/gocb.v1"
)

func main() {
   myCluster, _ := gocb.Connect("couchbase://127.0.0.1")
   myBucket, _ := myCluster.OpenBucket("beer-sample", "")

   var beer map[string]interface{}
   cas, _ := myBucket.Get("aass_brewery-juleol", &amp;beer)

   beer["comment"] = "Random beer from Norway"

   myBucket.Replace("aass_brewery-juleol", &amp;beer, cas, 0)
}</codeblock>
			<p>The following points explain each step in the example:</p>
			<ul>
				<li><i>Connecting</i>
					<p>A <codeph>Bucket</codeph> object represents a connection to a single bucket
						within the cluster.</p><p>A bucket represents a logical namespace for a key.
						All keys must be unique within a single bucket, but multiple buckets can
						have keys with the same names, and they will not conflict. A new connection
						object must be created for each bucket that you want to interact with in
						your application. This example creates one connection to the
							<codeph>beer-sample</codeph> bucket.</p><p>The gocb
							<codeph>Connect()</codeph> method is passed the cluster connection
						string, which specifies the nodes in your cluster. You subsequently use the
							<codeph>OpenBucket()</codeph> method to acquire a Bucket instance. In
						this case, we connect to the local cluster instance, and the bucket named
						`beer-sample` bucket.</p></li>
				<li><i>Retrieving Data</i>
					<p>The <codeph>Get()</codeph> method initiates a request to retrieve the
						specified key. If the key exists, the result consists of the documents value
						and CAS.  If the key does not exist on the server, and error will be
						returned, and a CAS of 0.</p></li>
				<li><i>Storing Data</i>
					<p>To store documents in the server, you can use one of the storage methods
						which consists of <codeph>Insert()</codeph>, <codeph>Upsert()</codeph> and
							<codeph>Replace()</codeph>. This example uses the
							<codeph>Replace()</codeph> method, which enforces the constraint that a
						previous value of the document must already exist. This can be thought of as
						an update operation in terms of CRUD (create, read, update, delete)
						operations.</p><p>The storage methods also return meta-data about the
						document that was stored, namely the new CAS.</p></li>
			</ul>
		</section>


	</conbody>
</concept>
