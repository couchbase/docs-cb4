<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_tvx_nhq_44">
 <title>Working with view queries</title>
 <shortdesc>You can use MapReduce views to create queryable secondary indexes in Couchbase Server. </shortdesc>
 <conbody>
  <p>The primary index for documents is the key you use when performing the standard CRUD methods. </p>
		<p>The following example queries a <codeph>by_name</codeph> view in a beer design document.
			This view checks whether a document is a beer and has a name. If it does, it emits the
			beer's name into the index. This view allows beers to be queried for by name. For example,
			it's now possible to ask the question "What beers start with A?"</p>
   <codeblock outputclass="language-javascript">function (doc, meta) {
  if (doc.type &amp;&amp; doc.type == "beer" &amp;&amp; doc.name) {    
     emit(doc.name, null);
  }
}</codeblock>
  <p>Querying a view through the Go SDK is performed through the <codeph>ViewQuery</codeph>
      interface that is instantiated through the NewViewQuery method of the gocb library.</p>
   <codeblock outputclass="language-go">myQuery := gocb.NewViewQuery("beer", "by_name")</codeblock>
  <p>The <codeph>ViewQuery</codeph> interface enables you to query the view and specify various
      available options for the query. Once you have the query ready for execution, pass it to the
        <codeph>ExecuteViewQuery</codeph> method of the your Bucket instance:</p>
   <codeblock outputclass="language-go">rows, err := myBucket.ExecuteViewQuery(myQuery)
if err != nil {
  fmt.Printf("View query error: %s\n", err)
}

var row interface{}
for rows.Next(&amp;row) {
    fmt.Printf("Row: %+v\n", row)
}
if err := rows.Close(); err != nil {
    fmt.Printf("View query results error: %s\n", err)
}</codeblock>
  <p>You can modify your view results by specifying various options before executing the
				<codeph>query</codeph> method. Here is an example that skips the first six items and
			limits the results to three items:</p>
  <codeblock outputclass="language-go">myQuery = gocb.NewViewQuery("beer", "by_name").Skip(6).Limit(3)</codeblock>
 </conbody>
</concept>
