<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_vqw_djq_44">
	<title>Handling errors</title>
	<shortdesc>All asynchronous methods within the SDK utilize the Node.js standard.</shortdesc>
	<conbody>
		<p>All methods within the SDK, which are capable of returning errors, utilize the Go standard of
			returning an error object as the last return value. The easiest way to test for specific
			errors with the SDK is to test directly the error objects returned by a method with the
			set of `Err` constants (ex: ErrKeyNotFound or ErrKeyAlreadyExists) which are exported by
			the SDK.</p>
		<p>In addition to doing a direct comparison with errors, you may also use interface testing to
			check for a particular error category. For instance, you could check for any error which
			is a temporary condition with the following code:
			<codeblock outputclass="language-go">```go
func isTemporaryError(err error) bool {
te, ok := err.(interface
{ Temporary() bool }
)
return ok :&amp; :&amp; te.Temporary()
}
```</codeblock></p>
		<p>The most common errors that occur are errors relating to keys existing when they shouldn't or
			not existing when they should. In addition to these common errors, connection or timeout
			related errors might occur. For more information about these, see <xref
				href="handling-timeouts.dita#concept_g5j_djq_44">Handling timeouts.</xref></p>
	</conbody>
</concept>
