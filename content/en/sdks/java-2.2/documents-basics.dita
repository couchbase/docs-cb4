<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="documents-basics">
	<title>Document basics</title>
	<shortdesc>Describes the properties and types of <codeph>Document</codeph> objects and how to use
		them.</shortdesc>
	<conbody>

		<section>
			<title>The Document</title>

			<p>The <codeph>Document</codeph> class encapsulates the consolidated representation of all
				attributes that relate to a document stored on a Couchbase Server cluster. It includes
				the document's identifier and related metadata. A <codeph>Document</codeph> object
				contains the following properties:</p>

			<table>
				<tgroup cols="2">
					<thead>
						<row>
							<entry>Name</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>
								<codeph>id</codeph>
							</entry>
							<entry>The (per bucket) unique identifier of the document.</entry>
						</row>
						<row>
							<entry>
								<codeph>content</codeph>
							</entry>
							<entry>The actual content of the document.</entry>
						</row>
						<row>
							<entry>
								<codeph>cas</codeph>
							</entry>
							<entry>The CAS (Compare And Swap) value of the document.</entry>
						</row>
						<row>
							<entry>
								<codeph>expiry</codeph>
							</entry>
							<entry>The expiration time of the document.</entry>
						</row>
						<row>
							<entry>
								<codeph>mutationToken</codeph>
							</entry>
							<entry>The optional MutationToken after a mutation.</entry>
						</row>
					</tbody>
				</tgroup>
			</table>

			<p>There are a few different implementations of a <codeph>Document</codeph>, the most
				prominent one is the <codeph>JsonDocument</codeph>.</p>

			<p>Because Couchbase Server can store anything and not just JSON, many document types exist to
				satisfy the general needs of an application. You can also write your own
					<codeph>Document</codeph> implementations, which is not covered in this
				introduction.</p>

			<p>
				<note>Every <codeph>Document</codeph> has an associated <codeph>Transcoder</codeph> that handles
					serialization and deserialization to and from the target wire format. This
					conversion is transparent but needs to be taken into account when custom
					documents are implemented.</note>
			</p>

			<p>The following <codeph>Document</codeph> types are supported out of the box:</p>

			<p>
				<b>Documents with JSON content:</b>
			</p>

			<table>
				<tgroup cols="4">
					<thead>
						<row>
							<entry>Document Name</entry>
							<entry>Description</entry>
							<entry>Compatible: 2.x SDKs</entry>
							<entry>Compatible: 1.x Java SDK</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>
								<xref href="#documents-basics/json"><codeph>JsonDocument</codeph></xref>
							</entry>
							<entry>The default, which has a <codeph>JsonObject</codeph> at the top level
								content.</entry>
							<entry>Yes</entry>
							<entry>Yes</entry>
						</row>
						<row>
							<entry>
								<xref href="#documents-basics/jsonarray"><codeph>JsonArrayDocument</codeph></xref>
							</entry>
							<entry>Similar to <codeph>JsonDocument</codeph>, but has a
									<codeph>JsonArray</codeph> at the top level content.</entry>
							<entry>Yes</entry>
							<entry>Yes</entry>
						</row>
						<row>
							<entry>
								<xref href="#documents-basics/jsonvalue"><codeph>JsonBooleanDocument</codeph></xref>
							</entry>
							<entry>Stores JSON-compatible Boolean values.</entry>
							<entry>Yes</entry>
							<entry>Partially</entry>
						</row>
						<row>
							<entry>
								<xref href="#documents-basics/jsonvalue"><codeph>JsonLongDocument</codeph></xref>
							</entry>
							<entry>Stores JSON compatible long (number) values.</entry>
							<entry>Yes</entry>
							<entry>Partially</entry>
						</row>
						<row>
							<entry>
								<xref href="#documents-basics/jsonvalue"><codeph>JsonDoubleDocument</codeph></xref>
							</entry>
							<entry>Stores JSON compatible double (number) values.</entry>
							<entry>Yes</entry>
							<entry>Partially</entry>
						</row>
						<row>
							<entry>
								<xref href="#documents-basics/jsonvalue"><codeph>JsonStringDocument</codeph></xref>
							</entry>
							<entry>Stores JSON compatible String values. Input is automatically wrapped
								with <codeph>"..."</codeph>.</entry>
							<entry>Yes</entry>
							<entry>Partially</entry>
						</row>
						<row>
							<entry>
								<xref href="#documents-basics/jsonraw"><codeph>RawJsonDocument</codeph></xref>
							</entry>
							<entry>Stores any JSON value and should be used if custom JSON serializers such
								as Jackson or GSON are already in use.</entry>
							<entry>Yes</entry>
							<entry>Yes</entry>
						</row>
						<row>
							<entry>
								<codeph>EntityDocument</codeph>
							</entry>
							<entry>Used with the Repository implementation to write and read POJOs into JSON and back.</entry>
							<entry>Yes</entry>
							<entry>Yes</entry>
						</row>
					</tbody>
				</tgroup>
			</table>

			<p>
				<b>Documents with other content:</b>
			</p>

			<table>
				<tgroup cols="4">
					<thead>
						<row>
							<entry>Document Name</entry>
							<entry>Description</entry>
							<entry>Compatible: 2.x SDKs</entry>
							<entry>Compatible: 1.x Java SDK</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>
								<xref href="#documents-basics/binary"><codeph>BinaryDocument</codeph></xref>
							</entry>
							<entry>Can be used to store arbitrary binary data.</entry>
							<entry>Yes</entry>
							<entry>Yes</entry>
						</row>
						<row>
							<entry>
								<xref href="#documents-basics/serializable"><codeph>SerializableDocument</codeph></xref>
							</entry>
							<entry>Stores objects that implement <codeph>Serializable</codeph> through
								default Java object serialization.</entry>
							<entry>No</entry>
							<entry>Yes</entry>
						</row>
						<row>
							<entry>
								<xref href="#documents-basics/legacy"><codeph>LegacyDocument</codeph></xref>
							</entry>
							<entry>Uses the <codeph>Transcoder</codeph> from the 1.x SDKs and can be used
								for full cross-compatibility between the old and new versions.</entry>
							<entry>No</entry>
							<entry>Yes</entry>
						</row>
						<row>
							<entry>
								<xref href="#documents-basics/string"><codeph>StringDocument</codeph></xref>
							</entry>
							<entry>Can be used to store arbitrary strings. They will not be quoted, but
								stored as-is and flagged as "String".</entry>
							<entry>Yes</entry>
							<entry>Yes</entry>
						</row>
					</tbody>
				</tgroup>
			</table>

			<p>
				<note type="other" othertype="Backward compatibility">Other than the
						<codeph>LegacyDocument</codeph> class, which strives for full backward
					compatibility, all <codeph>Document</codeph> types are trying best effort in that
					regard. Specific constraints are noted in each document description, but for all
					types keep in mind that compression is not supported other than on the
						<codeph>LegacyDocument</codeph>.</note>
			</p>

		</section>

		<section>
			<title>CAS and Expiry</title>

			<p>Every <codeph>Document</codeph> also contains the <codeph>expiry</codeph> and
					<codeph>cas</codeph> properties. They are considered meta information and are
				optional. An expiration time of <codeph>0</codeph> means that no expiration is set at
				all, and a <codeph>CAS</codeph> value 0 means it won't be used.</p>

			<p>You can set the <codeph>expiry</codeph> to control when the document should be
				deleted:</p>

			<codeblock outputclass="language-java"><![CDATA[// Expire in 10 seconds.
JsonDocument.create("id", 10, content);]]></codeblock>

			<codeblock outputclass="language-java"><![CDATA[// Expire in 1 day.
JsonDocument.create("id", TimeUnit.DAYS.toSeconds(1), content);]]></codeblock>

			<p>The expiration time starts when the document has been successfully stored on the server,
				not when the document was created on the application server. Any expiration time larger
				than 30 days in seconds is considered absolute (as in a Unix time stamp), anything
				smaller is considered relative in seconds.</p>

			<p>The <codeph>CAS</codeph> value can either be set by you directly or is populated by the
				SDK when the <codeph>Document</codeph> is loaded from the server (which is the
				recommended way to use it).</p>

			<p>For detailed information about how to utilize CAS for optimistic concurrency control,
				see <xref href="documents-updating.dita#concept2677" />.</p>
		</section>

		<section id="json">
			<title>JsonDocument</title>

			<p>Couchbase Server uses the JSON format as a first-class citizen. It is used for querying
				(via both views and N1QL) and represents the main storage format that should be
				used.</p>

			<p>The <codeph>JsonDocument</codeph> class has factory methods named
					<codeph>create()</codeph> that you use to create documents. If you do not want to
				pass in an expiration time or CAS value (just the ID and content) you do it like
				this:</p>

			<codeblock outputclass="language-java"><![CDATA[JsonDocument doc = JsonDocument.create("id", content);]]></codeblock>

			<p>The content needs to be of type <codeph>JsonObject</codeph>, which ships with the Java SDK. It
				works very much like a <codeph>Map</codeph> object but makes sure only data types
				understood by JSON are used.</p>

			<p>An empty JSON document can be created like this:</p>

			<codeblock outputclass="language-java"><![CDATA[JsonObject content = JsonObject.empty();]]></codeblock>

			<p>After it is created, you can use the various <codeph>put()</codeph> methods to insert
				data:</p>

			<codeblock outputclass="language-java"><![CDATA[JsonArray friends = JsonArray.empty()
	.add(JsonObject.empty().put("name", "Mike Ehrmantraut"))
	.add(JsonObject.empty().put("name", "Jesse Pinkman"));

JsonObject content = JsonObject.empty()
	.put("firstname", "Walter")
	.put("lastname", "White")
	.put("age", 52)
	.put("aliases", JsonArray.from("Walt Jackson", "Mr. Mayhew", "David Lynn"))
	.put("friends", friends);]]></codeblock>

			<p>This generates a JSON document like this (unordered, because the actual content is
				stored in a <codeph>Map</codeph>):</p>

			<codeblock outputclass="language-json"><![CDATA[{
   "firstname":"Walter",
   "aliases":[
	  "Walt Jackson",
	  "Mr. Mayhew",
	  "David Lynn"
   ],
   "age":52,
   "friends":[
	  {
		 "name":"Mike Ehrmantraut"
	  },
	  {
		 "name":"Jesse Pinkman"
	  }
   ],
   "lastname":"White"
}]]></codeblock>

			<p>
				<image href="images/document-jsonobject.png" id="image_i31_yqb_1" width="650px"/>
			</p>

			<p>In addition, the <codeph>JsonObject</codeph> and <codeph>JsonArray</codeph> classes
				provide convenience methods to generate and modify them.</p>

			<p>The <codeph>JsonDocument</codeph> can then be passed into the various operations on the
					<codeph>Bucket</codeph>:</p>

			<codeblock outputclass="language-java"><![CDATA[JsonDocument walter = JsonDocument.create("user:walter", content);
JsonDocument inserted = bucket.insert(walter);]]></codeblock>

			<p>If you want to read values out of the <codeph>JsonDocument</codeph>, you can use either
				the typed or untyped getter methods.</p>

			<codeblock outputclass="language-java"><![CDATA[int age = content.getInt("age");
String name = content.getString("firstname") + content.getString("lastname");]]></codeblock>

			<p>
				<note>If you are accessing values that potentially do not exist, you need to use boxed
					values (<codeph>Integer</codeph>, <codeph>Long</codeph>, <codeph>Boolean</codeph>)
					instead of their unboxed variants (<codeph>int</codeph>, <codeph>long</codeph>,
						<codeph>boolean</codeph>) to avoid getting <codeph>NullPointerException</codeph>
					exceptions. If you use unboxed variants, make sure to catch them properly.</note>
			</p>

		</section>

		<section id="jsonarray">
			<title>JsonArrayDocument</title>

			<p>The <codeph>JsonArrayDocument</codeph> class works exactly like the
					<codeph>JsonDocument</codeph> class, with the main difference that you can have a
				JSON array at the top level content (instead of an object).</p>

			<p>So if you create a <codeph>JsonArrayDocument</codeph> like this:</p>

			<codeblock outputclass="language-java"><![CDATA[JsonArray content = JsonArray.from("Hello", "World", 1234);
bucket.upsert(JsonArrayDocument.create("docWithArray", content));]]></codeblock>

			<p>It will look like this on the server:</p>

			<p>
				<image href="images/document-jsonarray.png" id="image_json-array" width="650px" />
			</p>

			<p>If you want to read the <codeph>JsonArrayDocument</codeph> back, you need to tell the SDK that
				you explicitly want to deviate from the default. Do it for every document type other
				than <codeph>JsonDocument</codeph>:</p>

			<codeblock outputclass="language-java"><![CDATA[bucket.get("docWithArray", JsonArrayDocument.class);]]></codeblock>

		</section>

		<section id="jsonraw">
			<title>RawJsonDocument</title>

			<p>The <codeph>JsonObject</codeph> and <codeph>JsonArray</codeph> types have been added for
				developer convenience. In a lot of places, custom JSON handling is already in place
				through libraries like Jackson or Google GSON.</p>

			<p>Of course, we want to provide the best of both worlds, and this is where the
					<codeph>RawJsonDocument</codeph> comes into play. You can store and read the
				already stringified JSON, but the SDK properly marks it as JSON, so it is
				cross-compatible with all other documents.</p>

			<p>Here is how you can read and write raw JSON data. For clarity, a plain string is used
				but it is up to you to wire this up with Jackson or a similar JSON processor:</p>

			<codeblock outputclass="language-java"><![CDATA[// write the raw data
String content = "{\"hello\": \"couchbase\", \"active\": true}";
bucket.upsert(RawJsonDocument.create("rawJsonDoc", content));

// read the raw data
// prints RawJsonDocument{id='rawJsonDoc', cas=..., expiry=0, content={"hello": "couchbase", "active": true}}
System.out.println(bucket.get("rawJsonDoc", RawJsonDocument.class));

// read it parsed
// prints true
System.out.println(bucket.get("rawJsonDoc").content().getBoolean("active"));]]></codeblock>

			<p>
				<image href="images/document-rawjson.png" id="image_i31_yqb_3p" width="650px"/>
			</p>

			<p>
				<note>If you use the <codeph>RawJsonDocument</codeph> type, the SDK does not perform any
					validation because the expectation is that a JSON-compatible library is used,
					and additional overhead will be avoided.</note>
			</p>
		</section>

		<section id="jsonvalue">
			<title>JSON value documents</title>

			<p>The JSON specification also allows you to store different values as content, and it also
				specifies how these values need to be encoded. Because the type system of Java is
				not as rich as it could be, different document types are provided to represent
				different values that can be stored. Because the encoding is clearly defined, these
				JSON values are also compatible with other 2.0 SDKs.</p>

			<p>A word on compatibility with the 1.X Java SDK: in a best-effort way the SDK tries to read
				properly flagged data from the old SDKs, but it stores it under the new format,
				which is not readable by the old SDKs anymore. So if you care about back-and-forth
				compatibility only read those values from the new SDK or use the
					<codeph>LegacyDocument</codeph> right away. Another option is to use strings
				only on the old SDK, and then working with it back and forth should be safe.</p>

			<p>Backward compatibility for JSON value documents works only if the actual content is not
				compressed.</p>

			<p>The following documents exist, which all work similarly except the content type that can
				be stored:</p>

			<ul>
				<li>
					<codeph>JsonBooleanDocument</codeph>
				</li>
				<li>
					<codeph>JsonLongDocument</codeph>
				</li>
				<li>
					<codeph>JsonDoubleDocument</codeph>
				</li>
				<li>
					<codeph>JsonStringDocument</codeph>
				</li>
			</ul>

			<p>They are all encoded and decoded based on their <xref href="http://json.org"
					format="html" scope="external">JSON specification</xref>.</p>
		</section>

		<section id="binary">
			<title>BinaryDocument</title>
			<p>The <codeph>BinaryDocument</codeph> can be used to store and read arbitrary bytes. It is
				the only default codec that directly exposes the underlying low-level Netty
					<codeph>ByteBuf</codeph> objects.</p>
			<p>
				<note type="important">Because the raw data is exposed, it is important to free it after
					it has been properly used. Not freeing it will result in increased garbage collection and memory leaks
					and should be avoided by all means. See <xref href="#documents-basics/binary-memory"/>.</note>
			</p>
			<p>Because binary data is arbitrary anyway, it is backward compatible with the old SDK regarding
				flags so that it can be read and written back and forth. Make sure it is not
				compressed in the old SDK and that the same encoding and decoding process is used on
				the application side to avoid data corruption.</p>
			<p>Here is some demo code that shows how to write and read raw data. The example writes
				binary data, reads it back, and then frees the pooled resources:</p>
			<codeblock outputclass="language-java"><![CDATA[// Create buffer out of a string
ByteBuf toWrite = Unpooled.copiedBuffer("Hello World", CharsetUtil.UTF_8);

// Write it
bucket.upsert(BinaryDocument.create("binaryDoc", toWrite));

// Read it back
BinaryDocument read = bucket.get("binaryDoc", BinaryDocument.class);

// Print it
System.out.println(read.content().toString(CharsetUtil.UTF_8));

// Free the resources
ReferenceCountUtil.release(read.content());]]></codeblock>
		</section>

		<section id="binary-memory">
			<title>Correctly managing buffers</title>
			<p>
				<codeph>BinaryDocument</codeph> allows users to get the rawest form of data out of
				Couchbase. It  exposes Netty's <codeph>ByteBuf</codeph>, byte buffers that can have
				various characteristics (on- or off-heap, pooled or unpooled). In general, buffers
				created by the SDK are pooled and off heap. You can disable the pooling in the
					<codeph>CouchbaseEnvironment</codeph> if you absolutely need that. </p>
			<p>
				As a consequence, the memory associated with the ByteBuf must be a little bit more managed by the developer than usual in Java.
			</p>
			<p> Most notably, these byte buffers are reference counted, and you need to know three main
				methods associated to buffer management: <ul>
					<li><codeph>refCnt()</codeph> gives you the current reference count. When it
						hits 0, the buffer is released back to its original pool, and it cannot be
						used anymore.</li>
					<li><codeph>release()</codeph> will decrease the reference count by 1 (by
						default).</li>
					<li><codeph>retain()</codeph> is the inverse of release, allowing you to prepare
						for multiple consumptions by external methods that you know will each
						release the buffer. </li>
				</ul></p>
			<p>You can also use <codeph>ReferenceCountUtil.release(something)</codeph> if you don't want to
				check if <codeph>something</codeph> is actually a <codeph>ByteBuf</codeph> (will do
				nothing if it's not something that is <apiname>ReferenceCounted</apiname>). </p>
			<note type="important">
				The SDK bundles the Netty dependency into a different package so that it doesn't clash with a dependency to another version of Netty you may have. As such, you need to use the classes and packages provided by the SDK (<codeph>com.couchbase.client.deps.io.netty</codeph>) when interacting with the API. For example, the <codeph>ByteBuf</codeph> for the content of a <codeph>BinaryDocument</codeph> is a <codeph>com.couchbase.client.deps.io.netty.buffer.ByteBuf</codeph>.
			</note>

			<p><b>What happens if I don't release?</b></p>
			<p>Basically, you leak memory... </p>
			<p>Netty will by default inspect a small percentage of <codeph>ByteBuf</codeph>
				creations and usage to try and detect leaks (in which case it will output a log,
				look for the "LEAK" keyword). </p>
			<p>You can tune that to be more eagerly monitoring all buffers by calling
					<codeph>ResourceLeakDetector.setLevel(PARANOID)</codeph>. <note type="important"
					>Note that this incurs quite an overhead and should only be activated in tests.
					In production (prod), setting it to <codeph>ADVANCED</codeph> is not as heavy as
					paranoid and can be a good middle ground.</note>
			</p>
			<p><b>What happens if I release twice (or the SDK releases once more after I do)?</b></p>
			<p>Netty will throw an <codeph>IllegalReferenceCountException</codeph>. The buffer that has
				RefCnt = 0 cannot be interacted with anymore since it means it has been freed back
				into the pool. </p>
			<p><b>When must I release?</b></p>
			<p>When the SDK creates a <codeph>BinaryDocument</codeph> for you, basically GET-type operations. </p>
			<p>Mutative operations, on the other hand, will take care of the buffer you pass in for you, at
				the time the buffer is written on the wire. </p>
			<p><b>When must I usually retain?</b></p>
			<p>When you do a write, the buffer will usually be released by the SDK calling
					<codeph>release()</codeph>. But if you implement a kind of fallback behavior
				(for instance attempt to <codeph>insert()</codeph> a doc, catch
					<codeph>DocumentAlreadyExistException</codeph> and then fallback to an
					<codeph>update()</codeph> instead), that means the SDK would attempt to release
				twice, which won't work. </p>
			<p>In this case you can <codeph>retain()</codeph> the buffer before the first attempt, let the
				catch block do the extra release if something goes wrong. You have to manage the
				extra release if the first write succeeds, and think about catching other possible
				exceptions (here also an extra release is needed): </p>
<codeblock outputclass="language-java"><![CDATA[byteBuffer.retain(); //prepare for potential multi usage (+1 refCnt, refCnt = 2)
try {
   bucket.append(document);
   // refCnt = 2 on success
   byteBuffer.release(); //refCnt = 1
} catch (DocumentDoesNotExistException dneException) {
   // buffer is released on errors, refCnt = 1
   //second usage will also release, but we want to be at refCnt = 1 for the finally block
   byteBuffer.retain(); //refCnt = 2
   bucket.insert(document); //refCnt = 1
} // other uncaught errors will still cause refCnt to be released down to 1
finally {
   //we made sure that at this point refCnt = 1 in any case (success, caught exception, uncaught exception)
   byteBuffer.release(); //refCnt = 0, returned to the pool
}]]></codeblock>
		</section>

		<section>
			<title>SerializableDocument</title>

			<p>Any object that implements <codeph>Serializable</codeph> can be safely encoded and
				decoded using the built-in Java serialization mechanism. While it is very convenient, it
				can be slow in cases where the POJOs are very complex and deeply nested. It is backward
				compatible with the old SDK unless the data has been compressed previously.</p>

			<p>Here is an example that serializes a POJO, deserializes it later, and then prints one of
				its properties:</p>

			<codeblock outputclass="language-java"><![CDATA[import java.io.Serializable;

public class User implements Serializable {

	private final String username;

	public User(String username) {
		this.username = username;
	}

	public String getUsername() {
		return username;
	}

}]]></codeblock>

			<codeblock outputclass="language-java"><![CDATA[// Create the User and store it
bucket.upsert(SerializableDocument.create("user::michael",  new User("Michael")));

// Read it back
SerializableDocument found = bucket.get("user::michael", SerializableDocument.class);

// Print a property to verify
System.out.println(((User) found.content()).getUsername());]]></codeblock>

		</section>

		<section id="legacy">
			<title>LegacyDocument</title>

			<p>The <codeph>LegacyDocument</codeph> is intended to be 1:1 compatible (including compression)
				with the 1.x Java SDK. For better compatibility with the other 2.0 SDKs, we
				recommend to move to JSON type documents (and other compatible ones), but the
					<codeph>LegacyDocument</codeph> is very helpful during data migration and
				side-by-side usage.</p>

			<p>Because the old and new SDKs don't share artifacts or namespaces, they can be used at
				the same time. If you're using Maven, you can add both a 1.x SDK and a 2.x SDK as
				dependencies in the <filepath>pom.xml</filepath> file. For example:</p>

			<codeblock outputclass="language-xml"><![CDATA[<dependencies>
	<dependency>
		<groupId>com.couchbase.client</groupId>
		<artifactId>java-client</artifactId>
		<version>2.2.8</version>
	</dependency>
	<dependency>
		<groupId>com.couchbase.client</groupId>
		<artifactId>couchbase-client</artifactId>
		<version>1.4.11</version>
	</dependency>
</dependencies>]]></codeblock>

			<p>Here is a snippet that writes a value using the old SDK and reads it out with the new
				one:</p>

			<codeblock outputclass="language-java"><![CDATA[// Open bucket on the new SDK
Cluster cluster = CouchbaseCluster.create();
Bucket bucket = cluster.openBucket();

// Open bucket on the old SDK
CouchbaseClient client = new CouchbaseClient(
	Arrays.asList(URI.create("http://127.0.0.1:8091/pools")),
	"default",
	""
);

// Create document on old SDK
client.set("fromOld", "Hello from Old!").get();

// Create document on new SDK
bucket.upsert(LegacyDocument.create("fromNew", "Hello from New!"));

// Read old from new
System.out.println(bucket.get("fromOld", LegacyDocument.class));

// Read new from old
System.out.println(client.get("fromNew"));

// Shutdown old client
client.shutdown();

// Shutdown new client
cluster.disconnect();]]></codeblock>

			<p>This prints:</p>

			<codeblock><![CDATA[LegacyDocument{id='fromOld', cas=1097880624822, expiry=0, content=Hello from Old!}
Hello from New!]]></codeblock>

		</section>

		<section id="string">
			<title>StringDocument</title>

			<p>This document type provides an SDK 2.0 cross-compatible way to exchange strings. It should not
				be mistaken with the <codeph>JsonStringDocument</codeph> that automatically quotes
				it and also flags it as JSON. It is also backward compatible unless compression was
				used previously.</p>

			<p>If a <codeph>String</codeph> is stored through it, it is explicitly flagged as a
				non-JSON string. The usage is straightforward:</p>

			<codeblock outputclass="language-java"><![CDATA[// Create the document
bucket.upsert(StringDocument.create("stringDoc", "Hello World"));

// Prints:
// StringDocument{id='stringDoc', cas=1424054670330, expiry=0, content=Hello World}
System.out.println(bucket.get("stringDoc", StringDocument.class));]]></codeblock>

			<p>You can use the <codeph>cbc</codeph> command line tool to compare the flags and actual
				content compared to the <codeph>JsonStringDocument</codeph>:</p>

			<codeblock outputclass="language-java"><![CDATA[bucket.upsert(StringDocument.create("stringDoc", "Hello World"));]]></codeblock>

			<codeblock outputclass="language-bash"><![CDATA[└──╼ cbc cat stringDoc
stringDoc            CAS=0x55668b55f010000, Flags=0x4000000. Size=11
Hello World]]></codeblock>

			<codeblock outputclass="language-java"><![CDATA[bucket.upsert(JsonStringDocument.create("jsonStringDoc", "Hello World"));]]></codeblock>

			<codeblock outputclass="language-bash"><![CDATA[└──╼ cbc cat jsonStringDoc
jsonStringDoc        CAS=0x84d77eb55f010000, Flags=0x2000000. Size=13
"Hello World"]]></codeblock>

			<p>You can see that the JSON string got automatically quoted and also has different flags
				applied to it.</p>

		</section>

	</conbody>
</concept>
