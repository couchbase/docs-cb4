<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_drb_nrp_f5">
  <title>Writing resilient reactive applications</title> <shortdesc>Read this section to learn how to write resilient code for production with the Couchbase
    Java SDK. </shortdesc>
  <body>
    <note type="note">Many concepts can be applied for both synchronous and asynchronous access.
      When necessary, both patterns are discussed separately. The focus is on database interaction,
      but if you are using RxJava as part of your stack, you can and should apply most of the
      principles there as well.</note>
    <section><title>RxJava 101 Recap: Cold and Hot Observables</title>
    <p>When working with <codeph>Observables</codeph>, it is important to understand the difference
        between <term>cold</term> and <term>hot</term>.</p> 
    <ul>
      <li><term>Cold Observables</term> will start to emit events once an Observer subscribes, and will do
          it "fresh" for each Observer. </li>
      <li><term>Hot Observables</term> instead are starting to emit data as soon as it becomes
          available, and will return the same (or parts of the same) to each Observer. There is also
          a special category of <codeph>Hot Observables</codeph> called <term>Subjects</term> in
          RxJava (these allow to construct <codeph>Observables</codeph> that are also Observers, so
          you can feed data manually by calling <apiname>onNext</apiname>). <p>The
              <codeph>Observables</codeph> are discussed in more detail in <xref
              href="observables.dita#concept2677"/>.</p><p>Up to the version 2.2.0, Couchbase Java
            SDK uses <codeph>Hot Observables</codeph> for each database operation, sending a request
            to the server as soon as you obtain the <codeph>Observable</codeph>. This initial
            architectural choice allowed to avoid firing two network operations, such as when doing
            a get and subscribing twice, but it implied harder to grasp behavior when dealing with
            failures.</p><p>One of the most important things to remember is the following: when you
            resubscribe to a <codeph>Hot Observable</codeph>, it won't perform the operation against
            Couchbase Server again. In some cases, your Subscriber will only get notified about new
            emissions coming. In some cases, such as with cached/replaying
              <codeph>Observables</codeph> for the SDK, the source will emit the same data again on
            each new subscription, including if it was an error. Emitting the same data is okay in
            many cases, but not if you want to retry an operation because it has failed. That said,
            RxJava provides ways to turn <codeph>Hot Observables</codeph> into <codeph>cold</codeph>
            and vice versa. </p></li>
    </ul>
    <p>The following example is wrong for the Java SDK versions before 2.2.0 because it will give
        you the same result over and over again:</p>
      
      <codeblock outputclass="language-java">// Will just retry on the same result from the first get request \
        bucket.async().get("id").retry(5).subscribe();</codeblock>
      <p>The next example is correct, because it will produce a brand new
          <codeph>Observable</codeph> every time you retry (resubscribe).</p>
      <codeblock outputclass="language-java">// Will correctly do a new get operation against the server \
        Observable .defer(new Func0&lt;Observable&lt;JsonDocument&gt;&gt;() { @Override \
        public Observable&lt;JsonDocument&gt; call() { return \
        bucket.async().get("id"); } }) .retry(5) .subscribe();</codeblock>
      <p>Use <apiname>Observable#defer()</apiname> if you want a new <codeph>Observable</codeph> for
        every subscriber. You can also use this technique if you want to defer the execution of an
          <codeph>observable</codeph> until someone subscribes.</p>
      <p>As of Java SDK 2.2.0, all the requests sent by the SDK are using <apiname>Observable.defer
        </apiname>and as such are now <codeph>cold</codeph>.</p> 
      <p>If you want to turn a <codeph>cold</codeph> into a <codeph>hot Observable</codeph>, take a
        look at the <apiname>Observable#cache()</apiname> or <apiname>Observable#replay()</apiname>
        operators.</p>
      <p>Finally, the <codeph>Observable</codeph> is not converted from <codeph>cold</codeph> to <codeph>hot</codeph>
        just because a <codeph>hot Observable</codeph> is <codeph>flatMapped</codeph>. Therefore this code works
        perfectly fine:</p>
      <codeblock outputclass="language-java">   Observable .just("id") .flatMap(new Func1&lt;String, \
        Observable&lt;JsonDocument&gt;&gt;() { @Override public \
        Observable&lt;JsonDocument&gt; call(String id) { return \
        bucket.async().get(id); } }) .retry(5) .subscribe();</codeblock> 
    </section> 
<section><title>Error recovery</title>
  <p>This section discusses different strategies to mitigate errors that might come up during
        operations (covered in <xref href="#topic_drb_nrp_f5/errorcauses" format="dita"/>). Some of
        them are shown to make a point, but the techniques apply to all different types of errors
        and can be applied as you see fit.</p>

<sectiondiv>
  <p><b>Logging</b></p>
 
    <p>It is always important to log errors, but even more so in the case of reactive applications.
          Because of the event driven nature, stack traces get harder to look at, and caller context
          is sometimes lost.</p> <p>RxJava provides operators for "side effects" (additional behavior that doesn't change the items
          flowing through the <codeph>Observable</codeph> stream), which should be used to log
          errors. Of course, you can also put logging into the error handlers, but readability is
          increased if the logging is put explicitly as a side effect.</p>
            <codeblock outputclass="language-java">   Observable .error(new Exception("I'm failing")) .doOnError(new \
        Action1&lt;Throwable&gt;() { @Override public void call(Throwable \
        throwable) { // I'm an explicit side effect // use a proper logger of \
        your choice here LOGGER.warn("Error while doing XYZ", throwable); } }) .subscribe(); </codeblock><p>It is also recommended to configure your logger to include absolute timestamps. While this is
          always a good idea, if combined with good logging throughout the application it makes it
          easier to debug error cases and see later what was going on inside your reactive
          application. </p><p>You can also utilize the various other side-effect operators for general logging
            (<apiname>doOnNext</apiname>, <apiname>doOnCompleted</apiname>). If you don't want to
          have different side effects for the same logging operation, you can use
            <apiname>doOnEach</apiname>. It will be called for both errors and next events with a
            <apiname>Notification</apiname> object that denotes what kind of event is being
          processed.</p>
</sectiondiv>     
 <sectiondiv> 
<p><b>Failing</b></p>
 <p>Failing is the easiest way to handle errors - because you don't. While most of the time you want
          more sophisticated error handling strategies (as discussed later), sometimes you just need
          to fail. It makes no sense for some errors to be retried, either because they are not
          transient or because you already tried everything to make it work and it still keeps
          failing. </p><p>In error-resilient architectures, you want to do everything to keep the error contained. However,
          if the containment is not able to handle the error it needs to propagate it to a parent
          component that (possibly) can.</p><p>In the async case, errors are events like every other for your subscribers. Once an error
          happens, your <codeph>Subscriber</codeph> is notified in the method
            <apiname>onError(Throwable)</apiname>, and you can handle it the way you want to. Note
          that by <codeph>Observable</codeph> contract, after the <apiname>onError</apiname> event,
          no more <apiname>onNext</apiname> events will happen.</p>
         
      <codeblock outputclass="language-java">   Observable
        .error(new Exception("I'm failing"))
        .subscribe(new Subscriber&lt;Object&gt;() {
          @Override
          public void onCompleted() {
          }
          
          @Override
          public void onError(Throwable e) {
          System.err.println("Got Error: " + e);
          }
          
          @Override
          public void onNext(Object o) {
          }
          });  </codeblock>   
      <p>It is always a good idea to implement error handling.</p>
      <p>In the synchronous case, every error is converted into an Exception and thrown so that you
          can use regular <apiname>try</apiname>/<apiname>catch</apiname> semantics.</p>
      <codeblock outputclass="language-java">   try {
        Object data = Observable
        .error(new Exception("I'm failing"))
        .toBlocking()
        .single();
        } catch(Exception ex) {
        System.err.println("Got Exception: " + ex);
        }
        </codeblock>
      <p>If you do not catch the Exception, it will bubble up:</p>
      <codeblock outputclass="language-java"> Exception in thread "main" java.lang.RuntimeException: java.lang.Exception: I'm failing
      at rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:482)
      at rx.observables.BlockingObservable.single(BlockingObservable.java:349)
      </codeblock>     
 </sectiondiv>  
  <sectiondiv>
    <p><b>Retry</b></p>
    <p>Retrying operations is a common technique to ride over transient errors. It should not be
          used for non-transient errors because it will only put a load onto the system without the
          chance to resolve the error.</p>
    <p>In practice, the following retry strategies can be applied when a transient error is discovered:</p>
    <ul>
      <li>Retry immediately.</li>
      <li>Retry with a fixed delay.</li>
      <li>Retry with a linearly increasing delay.</li>
      <li>Retry with an exponentially increasing delay.</li>
      <li>Retry with a random delay.</li>   
    </ul>
    <p>Unless you have a very good reason not to, <i>always</i> apply a maximum number of attempts
          and then escalate the error. Systems stuck in infinite retry loops can cause issues that
          are very hard to debug. It's better to fail and propagate at some point.</p>
    <p>Also, we recommend that you use asynchronous retry even if you are blocking at the very end.
          Retrying in the asynchronous <codeph>Observables</codeph> is way more resource efficient
          and also the only sane way to handle multiple operation steps (and bulk operations) under
          a single timeout (read more in  <xref href="#topic_drb_nrp_f5/timeouts" format="dita"
          />).</p>
    <p>Starting with 2.1.0 the Java SDK comes with a <apiname>RetryBuilder</apiname>, a utility
          class to describe retries with a fluent API (see ). In earlier versions use the code
          provided in the documentation.</p>
  
  <dl>
    <dlentry>
      <dt>Retry without delay</dt>
      <dd>Let's get one thing straight right away: immediately retrying is almost never a good idea.
              Instead of resolving the error more quickly, it will put more pressure onto the
              retried system, and there is a good chance it will make resolving errors harder.
                <p>One good reason to do so is if you have a specific operation with a very short
                timeout that you want to keep retrying for a small, fixed amount of times and if it
                still does not work, fail fast. </p><p>If you have the feeling you need to retry
                very quickly, you can also apply a very slight increasing delay to, at least,
                release some pressure from the target system. </p><p>RxJava provides the
                  <apiname>retry</apiname> operator to resubscribe to the source
                  <codeph>Observable</codeph> immediately once it fails (an error event happens).
                Three flavors are available: </p><ul>
                <li><apiname>retry()</apiname>: Instantly retry as long as the source
                    <codeph>Observable</codeph> emits an error. It is strongly recommend not to use
                  this operator.</li>
                <li><apiname>retry(long count)</apiname>: Instantly retry as long as the source
                    <codeph>Observable</codeph> emits an error or the max count is reached. If the
                  count is reached, the Observable will not be resubscribed, but the error is
                  propagated down the stream. This operator is recommended for use.</li>
                <li><apiname>retry(Func2&lt;Integer, Throwable, Boolean&gt; predicate)</apiname>:
                  Instantly retry as long as the predicate returns true. Arguments to the predicate
                  are the number of tries, as well as the exception type. </li>
              </ul><p>Since the <codeph>predicate</codeph> method provides the most flexibility, it
                is recommended to use it. If you only want to handle a specific exception and retry
                a maximum of <codeph>MAX_TRIES</codeph> times, you can do it like this:
                </p><codeblock outputclass="language-java">   Observable .error(new CASMismatchException()) .retry(new \
          Func2&lt;Integer, Throwable, Boolean&gt;() { @Override public Boolean \
          call(Integer tries, Throwable throwable) { return (throwable \
          instanceof CASMismatchException) &amp;&amp; tries &lt;MAX_TRIES; } }) .subscribe();         </codeblock><p>Try
                replacing <codeph>CASMismatchException</codeph> with something else and you will see
                that it does not try to retry, but rather propagates the error downstream. You can
                use this technique to handle specific errors differently by adding more retry
                operators in the pipeline. </p><p>Using the <codeph>retry</codeph> with
                  <codeph>predicate</codeph> also allows you to log the number of retries for a
                specific error. If you use the <apiname>doOnError</apiname> for logging, it's harder
                to log the number of retries.</p><p>The synchronous equivalent to the latest code
                looks like
              this:</p><codeblock outputclass="language-java">   int tries = 0; while(true) { tries++; try { pretendWorkThatMaybeThrows(); // \
          does some work and maybe throws break; } catch(Throwable throwable) { if (!(throwable \
          instanceof CASMismatchException) || tries >= MAX_TRIES) { throw throwable; // \
          rethrow exceptions } } }</codeblock>
            </dd>
    </dlentry>
  </dl>
        <dl id="retrydelay">
          <dlentry>
            <dt>Retry with delay</dt>
            <dd>When applying a <term>Retry with delay</term>, the main question you need to ask
              yourself is: how often and how long is it feasible to retry before giving up (and
              escalate the error). Using this retry option depends on the type of operation, use
              case, and SLA that the application requires, but the techniques are the same.
                <p>RxJava provides the <apiname>retryWhen</apiname> operator, which allows you more
                flexibility with the actions performed as well as when the resubscription is
                happening. This section covers the different delay approaches based on this
                operator.</p><p>Here is the contract for <apiname>retryWhen</apiname> that you
                should always keep in mind: </p><ul>
                <li>It is called when an error on the source <codeph>Observable</codeph>
                  happens.</li>
                <li>The function provided will be called with an <codeph>Observable</codeph>
                  containing this error.</li>
                <li>If you make this <codeph>Observable</codeph> error, it is propagated downstream
                  (without retrying).</li>
                <li>If you make this <codeph>Observable</codeph> complete, it is propagated
                  downstream (without retrying).</li>
                <li>If you make this <codeph>Observable</codeph> call <apiname>onNext</apiname>, a
                  retry will happen. </li>
              </ul><p>Since the version 2.1.0 the Java SDK comes with the
                  <apiname>RetryBuilder</apiname>, a helper to describe when and how to retry: only
                on certain classes of exceptions, max 5 attempts, the exponential delay between
                attempts, and so on. The result of this builder (<apiname>calling build()</apiname>)
                can be used with RxJava's <apiname>retryWhen</apiname> operator directly:
                </p><codeblock outputclass="language-java">Observable.error(new IllegalStateException())
          .retryWhen(
          RetryBuilder.anyOf(IllegalStateException.class).max(6).delay(Delay.linear(TimeUnit.SECONDS)).build()
          ); </codeblock><p>This
                code will ultimately fail after 6 additional attempts. It would fail fast if the
                source errored with something else than an<apiname> IllegalStateException</apiname>
                during retries. Each attempt will be made with an increasing delay, which grows
                linearly (1 second, then 2, 3, 4). If an exception occurs that is not managed by the
                handler, it is propagated as is, allowing you to chain such handlers. </p><p>If the
                maximum number of attempts is reached, the last exception that occurred is
                propagated, wrapped in a <apiname>CannotRetryException</apiname>. This helper allows
                to write retry semantics more easily, but in this section it is explained how to
                write them from scratch. </p><p>The easiest approach is the <term>fixed
                delay</term>. The source <codeph>Observable</codeph> will be resubscribed after a
                specified amount of time and for a fixed maximum number of times. </p><p>Because the
                nested logic is a bit harder to understand in the first place, let's talk through it
                step by step and then put it together. </p><p>Our <apiname>retryWhen</apiname>
                function is called every time an error happens on the source
                  <codeph>Observable</codeph>. If we wanted to try forever every second, it could
                look like this: </p><codeblock outputclass="language-java">    .retryWhen(new Func1&lt;Observable&lt;? extends Throwable&gt;, \
          Observable&lt;?&gt;&gt;() { @Override public Observable&lt;?&gt; call(Observable&lt;? \
            extends Throwable&gt; errorNotification) { return \
            errorNotification.flatMap(new Func1&lt;Throwable, Observable&lt;?&gt;&gt;() { \
          @Override public Observable&lt;?&gt; call(Throwable throwable) { return \
            Observable.timer(1, TimeUnit.SECONDS); } }); } })
          </codeblock>
              <p>We <apiname>flatMap</apiname> our notification <codeph>Observable</codeph> and
                utilize the <apiname>Observable#timer</apiname> to defer emitting a new event for a
                second. Since we need to stop at some point, after a given number of tries, we can
                utilize the <apiname>Observable#zipWith</apiname> operator to zip our error stream
                together with a range where we specify the number of tries we want to allow. Zipping
                has the nice side-effect that once one of the <codeph>Observable</codeph> is
                completed, the resulting <codeph>Observable</codeph> will also be complete, which
                triggers our Rule 4 from above.</p><p>The modified version looks like this:</p><codeblock outputclass="language-java">   .retryWhen(new Func1&lt;Observable&lt;? extends Throwable&gt;, Observable&lt;?&gt;&gt;() {
                @Override
                public Observable&lt;?&gt; call(Observable&lt;? extends Throwable&gt; errorNotification) {
        return errorNotification
            .zipWith(Observable.range(1, 4), new Func2&lt;Throwable, Integer, Integer&gt;() {
                @Override
                public Integer call(Throwable throwable, Integer attempts) {
                    return attempts;
                }
            })
            .flatMap(new Func1&lt;Integer, Observable&lt;?&gt;&gt;() {
                @Override
                public Observable&lt;?&gt; call(Integer attempts) {
                    return Observable.timer(1, TimeUnit.SECONDS);
                }
            });
    }
}) </codeblock>
              <p>Technically, we don't need the zip function here because we ignore it later on, but
                it is required for the <codeph>zipWith</codeph> operator to work. We use the
                  <apiname>Observable#range</apiname> operator to create an
                  <codeph>Observable</codeph> that emits three events and then completes, so we will
                never end up with more retries.</p><p>There is one more enhancement needed: the code
                as it stands there will swallow the originating exception when moving on, which is
                not good because it should be propagated if it can't be handled in this code block.
                </p><p>The following code is modified so that the function of
                  <codeph>zipWith</codeph> returns not only the attempted count but also the
                throwable, so that Couchbase Server has access to it in the
                  <apiname>flatMap</apiname> method. For this, the Java client has a generic
                  <apiname>Tuple</apiname> the server can utilize. In the
                <apiname>flatMap</apiname>, Couchbase Server checks for the number of attempts, and
                if it is over the threshold, it rethrows the exception. Keep in mind that you need
                to change <apiname>Observable#range</apiname> call to
                  <codeph>MAX_ATTEMPTS+1</codeph>, to give your code a chance to be called again one
                final time.</p>
              <codeblock outputclass="language-java">   .retryWhen(new Func1&lt;Observable&lt;? extends Throwable>, \
          Observable&lt;?&gt;&gt;() { @Override public Observable&lt;?&gt; call(Observable&lt;? extends Throwable&gt; \
          errorNotification) { return errorNotification .zipWith(Observable.range(1, 5), \
          new Func2&lt;Throwable, Integer, Tuple2&lt;Throwable, Integer&gt;&gt;() { @Override \
          public Tuple2&lt;Throwable, Integer> call(Throwable throwable, Integer attempts) { \
          return Tuple.create(throwable, attempts); } }) .flatMap(new Func1&lt;Tuple2&lt;Throwable, \
          Integer&gt;, Observable&lt;?&gt;&gt;() { @Override public Observable&lt;?&gt; \
          call(Tuple2&lt;Throwable, Integer&gt; attempt) { if (attempt.value2() == 3) \
          { return Observable.error(attempt.value1()); } return Observable.timer(1, TimeUnit.SECONDS); } }); } })</codeblock><p>If
                you want to enhance it even further, you can add one more
                <apiname>if()</apiname>clause in the <apiname>flatMap</apiname> to see if the
                throwable that is passed down is actually the one we want to
                retry.</p><p>Functionality like this is a great candidate to be generic and
                encapsulated, so that's what we did with <apiname>RetryBuilder</apiname>. If you are
                already using Java 8, the code becomes more condensed as
                well:</p><codeblock outputclass="language-java">  .retryWhen(notification -> notification .zipWith(Observable.range(1, 5), \
                Tuple::create) .flatMap(att -> att.value2() == 3 ? Observable.error(att.value1()) : \
                Observable.timer(1, TimeUnit.SECONDS) ) ) </codeblock><p>Here
                are the variations for linear, exponential and random delays:
                </p><p><b>Linear:</b></p><codeblock outputclass="language-java">   // Utilizes the number of attempts for the number of seconds to wait .\
                retryWhen(notification -> notification .zipWith(Observable.range(1, 5), \
                Tuple::create) .flatMap(att -> att.value2() == 3 ? Observable.error(att.value1()) : \
                Observable.timer(att.value2(), TimeUnit.SECONDS) ) )</codeblock><p><b>Exponential:</b></p><codeblock outputclass="language-java">   // Uses the timer with 2^attempts to generate exponential delays \
                .retryWhen(notification -> notification .zipWith(Observable.range(1, 5), \
                Tuple::create) .flatMap(att -> att.value2() == 3 ? Observable.error(att.value1()) : \
                Observable.timer(1 &lt;&lt; att.value2(), TimeUnit.SECONDS) ) )</codeblock><p><b>Random:</b></p><codeblock outputclass="language-java">   // Random between 0 and 5 seconds to retry per attempt .retryWhen(notification -> \
                notification .zipWith(Observable.range(1, 5), Tuple::create) .flatMap(att -> \
                att.value2() == 3 ? Observable.error(att.value1()) : \
                Observable.timer(new Random().nextInt(5), TimeUnit.SECONDS) ) )</codeblock><p>With
                the synchronous code, there are not many options other than using
                  <apiname>Thread.sleep()</apiname> to keep the current thread waiting until the
                loop is allowed to proceed:</p><codeblock outputclass="language-java">   // Linear Backoff
                int tries = 0;
                while(true) {
                tries++;
                try {
                pretendWorkThatMaybeThrows(); // does some work and maybe throws
                break;
                } catch(Throwable throwable) {
                if (!(throwable instanceof CASMismatchException) || tries >= MAX_TRIES) {
                throw throwable; // rethrow exceptions
                }
                }
                
                Thread.sleep(TimeUnit.SECONDS.toMillis(tries));
                }             </codeblock>
              <p>You can then use the same approaches as with the asynchronous ones on the
                  <apiname>Thread.sleep()</apiname> time to accommodate for a static, linear,
                exponential or random delay. </p></dd>
    </dlentry>
  </dl>
    
  </sectiondiv>
  <sectiondiv><p><b>Fallback</b></p><p>Instead of (or in addition to) retrying, another valid option is falling back to either a
          different <codeph>Observable</codeph> or a default value. </p><p>RxJava
          provides you with different operators, prefixed with <apiname>onError*()</apiname>:</p><ul>
          <li><apiname>onErrorReturn(Func1&lt;Throwable, T&gt;)</apiname>: It is called when the
            source <codeph>Observable</codeph> errors and allows to return custom data instead.</li>
          <li><apiname>onErrorResumeNext(Observable&lt;?&gt;)</apiname>: It is called when the
            source <codeph>Observable</codeph> errors and allows to resume transparently with a
            different Observable.</li>
          <li><apiname>onErrorResumeNext(Func1&lt;hrowable, Observable&lt;?&gt;)</apiname>: It is
            called when the source <codeph>Observable</codeph> errors and allows to transparently
            resume with an <codeph>Observable</codeph> (based on a specific
              <codeph>Throwable</codeph>).</li>
        </ul><p>You should use the <apiname>onErrorReturn</apiname> if you want to fallback to
          static data quickly. For
          example:</p><codeblock outputclass="language-java">    Observable
      .&lt;String&gt;error(new Exception("I failed"))
        .onErrorReturn(new Func1&lt;Throwable, String&gt;() {
          @Override
          public String call(Throwable throwable) {
          // You could return data based on the throwable as well
          return "Default";
          }
          })
          .subscribe();</codeblock><p>If you only want to return default values based on a specific exception or even call another
            <codeph>Observable</codeph> as fallback, <apiname>onErrorResumeNext</apiname> is what
          you're looking for. </p>
    <codeblock outputclass="language-java">Observable
      .&lt;String&gt;error(new TimeoutException("I failed"))
        .onErrorResumeNext(new Func1&lt;Throwable, Observable&lt;? extends String&gt;&gt;() {
          @Override
          public Observable&lt;? extends String&gt; call(Throwable throwable) {
            if (throwable instanceof TimeoutException) {
                return Observable.just("Default");
            }
            // Forward anything other than the TimeoutException
            return Observable.error(throwable);
        }
    })
    .subscribe();</codeblock><p>If you just want to fallback onto another <codeph>Observable</codeph> that you have in scope
          without caring about the Exception, you can use the other
            <apiname>onErrorResumeNext()</apiname> overload. For example, this loads data from all
          replicas if the <apiname>get()</apiname> call did not succeed with the Java SDK:</p><codeblock outputclass="language-java">   bucket
      .async()
      .get("id")
      .onErrorResumeNext(bucket.async().getFromReplica("id", ReplicaMode.ALL))
      .subscribe();   </codeblock><p>Synchronous
          fallbacks can be implemented by conditionally setting the default in the
            <apiname>catch</apiname>
          clause:</p><codeblock outputclass="language-java">   String value;
      try {
      value = pretendWorkThatMaybeThrows();
      } catch(Exception ex) {
      value = "Default";
      }   </codeblock><p>Here is the gotcha: this synchronous example only works great if the fallback is static. If you
          need to fallback into another database call, for example, you quickly get into nested
          error handling and timeouts are a pain to handle (since they start to accumulate for every
          synchronous call). It is recommended to use asynchronous fallbacks and then block at the
          very end through <apiname>toBlocking().single()</apiname> or equivalents.</p></sectiondiv>
 
  
  <sectiondiv><p><b>Defaults</b></p><p>Another possibility that requires intervention on the application side are
            <codeph>Observables</codeph> that do not emit a single value. This can happen because
          operators filtered the <codeph>Observable</codeph> so that nothing is left, or they did
          not produce any values in the first place. One common case in the Java SDK is
            <apiname>get()</apiname>. If the Document is not found, the <codeph>Observable</codeph>
          will complete without emitting anything.</p><p>RxJava provides helper operators that all end with <apiname>*OrDefault()</apiname> and allow you
          to return default values if no item is emitted when the <codeph>Observable</codeph>
          completes.</p><p>In most cases, you want to use <apiname>singleOrDefault()</apiname> and return a default value
          when not a single item is emitted by the source <codeph>Observable</codeph>:</p>
    <codeblock outputclass="language-java">Observable
      .&lt;String&gt;empty()
        .singleOrDefault("Default")
        .subscribe(); </codeblock>   
          
          <p>If you are dealing with potentially more than one item emitted in your
            <codeph>Observable</codeph> and you only want to emit either the first or the last
          value, there are also operators that allow you to emit a default if it's unexpectedly
          empty. See <apiname>firstOrDefault()</apiname> as well as
            <apiname>lastOrDefault()</apiname> for more details.</p><p>Lastly, RxJava offers the method <apiname>defaultIfEmtpy</apiname>, which allows you to return a
          value if the source doesn't emit anything. In recent versions, the method
            <apiname>switchIfEmpty</apiname> allows you to switch to a different
            <codeph>Observable</codeph> in that same case.</p></sectiondiv>
  <sectiondiv>
    <p><b>Error handling in bulk scenarios</b></p>
    
    <p>Bulk operations are used to handle more data in one batch and, therefore, benefit from better
          resource utilization. However,  error handling becomes more complicated. There are three
          high-level cases to consider:</p>
    
    <ul>
      <li><b>Best Effort</b>: Keep going and just use the results that succeeded when errors
            happen.</li>
      <li><b>Full Retry</b>: Retry the complete Observable when errors happen.</li>
      <li><b>Incremental Retry</b>: Only retry specific events of the Observable.</li>
    </ul>
    <p>Before we "dig" into the specific approaches, let's revisit the contract of Observables:</p>
    <codeblock outputclass="language-java">onNext* (onError | onComplete)</codeblock>
    <p>Zero or more events are followed by either an error event or a complete event. 
      This provides an important clue right away: once our <codeph>Observable</codeph> fails, no more events can be passed through. 
      Therefore, 
      you need to make sure that errors are handled at the smallest scope possible, only letting it proceed 
      if you cannot handle it right away.</p>
  
  <dl>
    <dlentry>
      <dt>Best effort bulk handling</dt>
      <dd>Sometimes it is more important to get data in a timeframe, or maybe with a short timeout,
              then getting all data. In general, you want to keep a timeout that lets you fetch all
              the data, but depending on the use case you are fine with only getting a subset of the
              data returned. <p>To ignore errors and turn them into "noops", you can utilize
                  <apiname>onErrorResumeNext()</apiname>:</p><codeblock outputclass="language-java">    Observable
          .create(new Observable.OnSubscribe&lt;String&gt;() {
            @Override
            public void call(Subscriber&lt;? super String&gt; subscriber) {
            subscriber.onNext("A");
            subscriber.onNext("B");
            subscriber.onError(new IllegalStateException("Woops"));
            subscriber.onNext("C");
        }
    })
    .onErrorResumeNext(Observable.&lt;String&gt;empty())
    .toBlocking()
    .forEach(new Action1&lt;String&gt;() {
        @Override
        public void call(String s) {
            System.out.println("Got: " + s);
        }
    });</codeblock>
              <p>This will not raise any exception to your calling thread, but it will never process
                "C" because, based on the <codeph>Observable</codeph> contract, once
                  <apiname>onError</apiname> is called no more events are allowed to be
                generated.</p><p>To keep going in case an event fails, you need to turn each event
                into a single <codeph>Observable</codeph> and then merge it back together to either
                defer the error handling (through <apiname>Observable#mergeDelayError</apiname>) or
                use <apiname>flatMap</apiname> and make sure to contain the errors before
                flattening.</p><p>This code provides some fake data with which you can work. It will
                emit four <codeph>Observables</codeph> where one of them will
                fail:</p><codeblock outputclass="language-java">    Observable&lt;Observable&lt;String&gt;&gt; dataObservables = Observable
          .just("a", "b", "c", "d")
          .map(new Func1&lt;String, Observable&lt;String&gt;&gt;() {
            @Override
            public Observable&lt;String&gt; call(String s) {
              if (s.equals("b")) {
              return Observable.error(new IllegalStateException("I dont like b"));
              }
              return Observable.just(s);
              }
              });</codeblock><p>You
                can then use <apiname>mergeDelayError</apiname> to defer error handling until the
                end. If you uncomment the <apiname>onErrorResumeNext</apiname>, it will silently
                discard any errors as well leaving you with an <codeph>Observable</codeph> that
                provides best-effort processing of the source <codeph>Observables</codeph>.
                </p><codeblock outputclass="language-java">   Observable.mergeDelayError(dataObservables)
          //.onErrorResumeNext(Observable.&lt;String&gt;empty())
            .toBlocking()
            .forEach(new Action1&lt;String&gt;() {
              @Override
              public void call(String s) {
              System.out.println(s);
              }
              });        </codeblock><p>Alternatively,
                you can use <apiname>flatMap</apiname> and make sure the errors are contained for
                each emitted
                <codeph>Observable</codeph>:</p><codeblock outputclass="language-java">    Observable
          .just("a", "b", "c", "d")
          .flatMap(new Func1&lt;String, Observable&lt;String&gt;&gt;() {
            @Override
            public Observable&lt;String&gt; call(String s) {
              // Simulate some observable that sometimes fails
              Observable&lt;String&gt; obs;
                if (s.equals("b")) {
                obs = Observable.error(new IllegalStateException("I dont like b"));
                } else {
                obs = Observable.just(s);
                }
                
                // Here comes the actual handling part before we flatten it back
                return obs.onErrorResumeNext(Observable.&lt;String&gt;empty());
                  }
                  })
                  .toBlocking()
                  .forEach(new Action1&lt;String&gt;() {
                    @Override
                    public void call(String s) {
                    System.out.println(s);
                    }
                    });
        </codeblock><p>As
                a more practical example here is a best effort bulk loading of documents from
                Couchbase Server that just discards operations that fail: </p><codeblock outputclass="language-java">    private static Observable&lt;JsonDocument&gt; loadDocsBestEffort(Bucket bucket, List&lt;String&gt; ids) {
            return Observable
            .from(ids)
            .flatMap(new Func1&lt;String, Observable&lt;JsonDocument&gt;&gt;() {
              @Override
              public Observable&lt;JsonDocument&gt; call(String id) {
                return bucket
                .async()
                .get(id)
                .onErrorResumeNext(Observable.&lt;JsonDocument&gt;empty());
                  }
                  });
                  }
        </codeblock>
              <p>Of course, you can add more logic onto each emitted <codeph>Observable</codeph> and
                also proper logging so that you at least know which errors occurred.</p></dd>
    </dlentry>
  </dl>
    <dl>
      <dlentry>
        <dt>Full retry bulk handling</dt>
        <dd>Full retry bulk handling can be done by just chaining one of the retry operators right
              at the end of the <codeph>Observable</codeph> chain. <note type="note">This example
                uses Java 8 Lambda syntax for conciseness.</note><codeblock outputclass="language-java">    private static Observable&lt;JsonDocument&gt; loadDocsFullRetry(Bucket bucket, List&lt;String&gt; ids) {
              return Observable
              .from(ids)
              .flatMap(id -> return bucket.async().get(id))
              .retry(4);
              } </codeblock>
              <p>This is, however, a bit crude because the whole list of IDs will be retried if
                there is an error. This is the case even if the error happens late in the stream and
                some items have already been emitted. Imagine that you retrieve items
                  <codeph>A</codeph>, <codeph>B</codeph>, <codeph>C</codeph>, <codeph>D</codeph> and
                that an error occurs just the first time the SDK retrieves C. What you will see is
                  <codeph>A</codeph>, <codeph>B</codeph>, <codeph>A</codeph>, <codeph>B</codeph>,
                  <codeph>C</codeph>, <codeph>D</codeph>.</p><p>This can be mitigated by using the
                  <apiname>distinct()</apiname> operator, but keep in mind the memory tradeoff
                (distinct will maintain a set of values it saw in the background, which can be
                problematic for infinite or very large streams).</p></dd>
      </dlentry>
    </dl>
    <dl>
      <dlentry>
        <dt>Incremental retry bulk handling</dt>
        <dd>Incremental retry improves on full retry by only actually retrying elements that
              couldn't be loaded. It is easily done by chaining the retry operators inside the
                <apiname>flatMap</apiname> instead of outside of it.
              <codeblock outputclass="language-java">    private static Observable&lt;JsonDocument&gt; loadDocsIncrementalRetry(Bucket bucket, List&lt;String&gt; ids) {
              return Observable
              .from(ids)
              .flatMap(id -> return bucket.async().get(id)
              .retry(4)
              );
              }         </codeblock>
              One thing to keep in mind with <apiname>flatMap</apiname> is that the order of
              emissions isn't guaranteed to be the same as the source emissions. This can be
              especially visible in this case since individual streams are retried on their own:
              retried keys could come back with a value much later than other keys, more often
              changing the order in which they appear.</dd>
      </dlentry>
    </dl>
    <dl>
      <dlentry>
        <dt>Bulk pattern, <apiname>BackpressureException</apiname> and reactive pull backpressure</dt>
        <dd>The bulk pattern is powerful, but if you try it with a very large collection, it is
              especially susceptible to a <apiname>BackpressureException</apiname>. This exception
              is a way for the SDK to tell you that you're asking for too much in a short amount of
              time, and requests have piled up too much while waiting for a server response to free
              up a spot. <p>By default, the internal structure that holds pending requests is sized
                to a little over 16 000 slots. Since <apiname>from</apiname> iterates over a
                collection in memory, which is <i>very</i> fast, it can easily flood the SDK if the
                size of it is over or close to 16K.</p><p>You could try to react to that by
                implementing a retry strategy, but it is hard to get it right. Fortunately, RxJava
                comes with an even better solution, a form of flow-control called <term>reactive
                  pull backpressure</term> that you can leverage to avoid getting a
                  <apiname>BackpressureException</apiname>. </p><p>This is done through the
                Subscriber, its <apiname>onStart()</apiname> method and the
                  <apiname>request(n)</apiname> method.</p><note type="note">You have to use the
                Subscriber to <apiname>subscribe()</apiname> instead of the convenience methods that
                just take <apiname>Action</apiname> individually for <apiname>next</apiname>,
                  <apiname>error</apiname> and <apiname>completed</apiname> handlers.</note>
              <codeblock outputclass="language-java"> 
    Observable&lt;JsonDocument&gt; largeBulk = Observable
              .from(oneMillionIds)
              .flatMap(id -> return bucket.async().get(id));
              
              //the subscription is where reactive pull backpressure happens
              largeBulk.subscribe(new Subscriber&lt;JsonDocument&gt;() {
                
                //onStart initiates the backpressure
                @Override
                public void onStart() {
                request(100);
                }
                
                @Override
                public void onNext(JsonDocument jsonDocument) {
                System.out.println(jsonDocument.content());
                request(100); //request more items
                }
                
                //onCompleted and onError are less relevant.
                //Note that if you want to block you'd need a CountDownLatch in this case
                
                @Override public void onCompleted() { System.out.println("Done"); }
                
                @Override public void onError(Throwable e) { e.printStackTrace(); }
                
                });
          </codeblock>
              <p>The <apiname>request(n)</apiname> method allows to notify the upstream source that
                the consumer is ready for more, and is prepared to consume <codeph>n</codeph> items.
                For example, this avoids instant iteration of the collection in the case of
                  <apiname>from</apiname>. And as long as responses come in from Couchbase Server,
                we continue asking for more.</p><p> This is a form of <term>error mitigation</term>,
                and we'll see a few others in the next section. </p></dd>
      </dlentry>
    </dl>
  </sectiondiv>  
  
</section>
<section><title>Error mitigation</title>
  <p>The idea behind <term>error mitigation</term> is to limit the impact a failing piece had on the
        rest of the system. When an error occurs, you don't want it to cause failures downstream.
        You also want to prevent as much of the error conditions to happen as possible.</p>
  <p>The <apiname>BackpressureException</apiname> and RxJava's <term>reactive pull
          backpressure</term> are forms of error mitigation we already saw since they both allow a
        form of flow control that avoids overloading the system.</p>
<sectiondiv>
  <p><b>Slowing down</b></p>
  <p>Rate limiting of the requests can be a way to keep the system within parameters that are known
          to be stable, thus mitigating overloading errors. This can happen in the client-to-server
          direction, which avoids making more requests than can be processed later. It can also
          happen in the server-to-client direction, when the client can't keep up with the bandwidth
          at which data is sent from the server because, for instance, it has to process it through
          long-running tasks. Rather than choking on that data when backpressure mechanisms are not
          available, the client can decide to discard some of the data. This is referred to as
            <term>Load Shedding</term>.</p> 
  <p>For example, consider a system where multiple sensors write data into Couchbase, and the client
          application reads that data and displays it in a UI. The graphs in the UI can be built on
          a <codeph>sample</codeph> of the data, and that's the key point. The processing rate of
          the data is lower than its producing rate, but at the same time the resolution is also
          lower. That means we can simply ignore some of the data and only consume what's needed,
          such as take the data point at every second to trigger a refresh of the graph in the
          UI.</p>
  <p>RxJava allows you to do that through several operators:</p>
  <ul>
    <li><apiname>sample</apiname> (alternatively <apiname>throttleLast</apiname>) periodically looks at an Observable and emits the item last seen during this period.</li>
    <li><apiname>throttleFirst</apiname> does the same except it emits the <codeph>first</codeph> item seen during the period.</li>
    <li><apiname>debounce</apiname> only emits an item if a given timespan has passed since the last emission, eliminating items that are rapidly following another item.</li>
  </ul>
  <p>The operator <apiname>sample</apiname> is useful for sources that are "too chatty" even at a
          regular rate. The operator <apiname>debounce</apiname>, on the other hand, is really
          shining with sources that have a variable rate of emission.  The sources only trigger a
          web search for autocomplete suggestions from an input form once the user has stopped
          typing for 500ms.</p>
  
</sectiondiv>
  <sectiondiv>
    <p><b>Semaphore</b></p>
    <p>To limit the strain put on dependencies of your application, one possibility is to put hard
          limits on how many concurrent threads can access a resource. This is done with the classic
          concurrency programming pattern of the <apiname>Semaphore</apiname>, which is implemented
          in <apiname>java.util.concurrent</apiname> since Java 7.</p>
    
    <p>Note that Semaphores are a bit different from locks since they don't have a notion of
          ownership. For example, two different threads can respectively
            <apiname>acquire()</apiname> and <apiname>release()</apiname> a
            <apiname>Semaphore</apiname> permit), which can avoid things like deadlocks.</p>  
    <p>The same concept could also be implemented using a fixed-size thread pool. Such thread pool
          adds overhead but allows upstream code to just "walk away" from the call if it takes too
          long for a slot to become available, providing an even better isolation.</p>  
    
  </sectiondiv>
  <sectiondiv>
    <p><b>Collapsing requests</b></p>
    <p>Another way of mitigating errors is to batch similar requests together and "collapse" them
          into one request to the subsystem. If you have multiple threads that potentially ask for
          the same data, the benefit can be immediate by just putting a facade on your calls that
          will deduplicate parallel requests.</p>
    <p>You can go beyond and trade a little bit of latency to allow for more potential
          deduplication. Wait a little longer to see if any duplicate request comes in before firing
          the actual deduplicated request.</p>
  </sectiondiv> <sectiondiv>
    <p><b>Implementation</b></p>
    <p>All the mentioned techniques can be easily implemented in an application in a
          RxJava-compatible way by using another library from Netflix, <xref
            href="https://github.com/Netflix/Hystrix/wiki" format="html" scope="external"
            >Hystrix</xref>. It is a very comprehensive library for building resilient applications,
          including techniques for error mitigation but also failing fast. Here, the circuit-breaker
          pattern short-circuits calls to a service that is known to be down until we detect it is
          back up, which stops cascading failures, provides fallbacks and gathers metrics.</p> 
  </sectiondiv>
</section> 
    <section id="errorcauses">
    <title>Error causes</title>
    <p>This section discusses errors that need to be covered by the application developer to make
        the application resilient.</p>
    </section>
    <section id="timeouts"><title>Timeouts</title>
     
      <p>Timeouts are a very important part of a distributed application that needs to be resilient.
          When a network is involved, you can be sure that something will fail, be it a network
          partition, a server that takes a long time to answer or one that is simply down. Timeouts
          are both your worst nightmare and a very important safety net. You should never let a call
          hang forever. On the contrary, it is usually better to fail fast and retry/fallback, as we
          saw earlier. The <codeph>sane</codeph> timeouts (not too long, not too short) give you
          that guarantee that the call won't block forever. They can keep you awake at night because
          you are virtually guaranteed to see some of them in production. However,  that's OK once
          you embrace them  because they do, in fact, give you control. You decide how much time
          your application will wait before either a result or an error happens, and there are no
          more random (and potentially very long) outliers.</p>
      <p>You have to decide on relevant durations for your timeouts, and then put them into place,
          and finally design and implement the failure-recovery scenarios for the situation when a
          timeout occurs. This should be guided in part by your SLAs: say your SLAs indicate that
          the app should respond in 1.5s in the 99th percentile, and then you'll probably have to
          set timeouts below this duration. Think about the compounding effect as well! Note that it
          is usually a good idea to come up with SLAs internally if your business doesn't explicitly
          define some.</p>
      <p>There are so many places where you can set a timeout, especially in fan-out requests
          scenarios where you could set an individual timeout on each fanned-out request or a global
          timeout, on the whole operation.</p>
      
   <dl>
     <dlentry>
       <dt>Setting timeouts on an async workflow</dt>
       <dd>RxJava offers an easy way to set up a timeout on any <apiname>Observable</apiname>:
              simply chain in a call to <apiname>timeout(long duration, TimeUnit unit)</apiname>. If
              the timeout is triggered, the Observable is notified of a
                <apiname>TimeoutException</apiname> in its <apiname>onError</apiname> handler.
                <p>The underlying timer used for enforcing the timeout considers the delay between
                each emission in the source Observable. It is by default running on the
                  <apiname>Schedulers.computation()</apiname> Scheduler. Note that in the Couchbase
                blocking API, this <apiname>TimeoutException</apiname> is in turn wrapped into a
                  <apiname>RuntimeException</apiname> so that only unchecked exceptions are used in
                the API. </p><p>There is a <apiname>timeout</apiname> variant that will directly
                switch to a provided fallback Observable instead of propagating an Exception.
                Another variant also accepts a <term>timeout selector</term> instead of a simpler
                duration, in the form of an Observable for each emission. If said Observable
                completes before a new emission is seen in the source Observable, this is considered
                a timeout. This is a much more flexible implementation should you needs go beyond
                the simple duration-based timeout. </p></dd>
     </dlentry>
   </dl> 
    <dl>
      <dlentry>
        <dt>Timeouts in the Couchbase synchronous API</dt>
        <dd>The way the synchronous API is built around calling the async API and blocking on it
              means that you cannot weave in timeouts from RxJava directly. So the API offers
              overloads for every methods that allow you to explicitely set a timeout duration.
                <p>If you don't provide one explicitly on each operation, a default timeout will be
                used. Each operation belongs to a broad category for which a default timeout can be
                tuned in the <apiname>CouchbaseEnvironment</apiname> used to configure the SDK (for
                  example,<apiname>connectionTimeout</apiname> for bootstrapping,
                  <apiname>kvTimeout</apiname> for Key/Value operations or
                  <apiname>viewTimeout</apiname> for view operations), so there'll never be a
                blocking operation that doesn't have a timeout set. </p></dd>
      </dlentry>
    </dl>
    </section>
    <section><title><apiname>BackpressureException</apiname></title>
  
      <p>Sometimes you'll see a <apiname>BackpressureException</apiname> being propagated in your
          Observable. This error indicates that the SDK was overloaded with too many operations. By
          default, the SDK maintains an internal structure called the <term>Ring Buffer</term>,
          which has a little over 16K slots for queuing up requests. As soon as the server responds,
          the corresponding request's slot is freed. <apiname>BackpressureException</apiname>
          happens when this ring buffer becomes full, meaning that 16K requests were still pending,
          and the server couldn't keep up with the load.</p>
      <p>One very common cause for this is to use a bulk get/set using
            <apiname>Observable.from(collection)</apiname> where <codeph>collection</codeph> is
          larger than or close to the size of the ring buffer. Since
            <apiname>Observable.from</apiname> consumes the collection from memory in one sweep, it
          can be done extremely fast, thus filling the ring buffer almost instantly and causing a
            <apiname>BackpressureException</apiname> (such as clogging the pipes).</p>
      <p>We've seen the solution to this in the section "Bulk pattern,
            <apiname>BackpressureException</apiname> and reactive pull backpressure". One can use
          RxJava's reactive pull backpressure mechanisms only to consume from the collection as
          slots free up. Another possibility is to implement retry and backoff semantics, especially
          if the error happens out of a bulk context. For example, that happens if the server is
          under heavy load, and locally the application does many operations in parallel, but these
          operations are isolated from one another instead of batches.</p>
      
      
    
    </section>
    <section><title>Correctly Dealing with Binary Data, <apiname>ByteBuf</apiname>, and Memory Leak</title>
      
      <p>The Java SDK uses Netty for network IO. The library has an implementation of byte buffers
          that go beyond what the JVM currently offers, <apiname>ByteBuf</apiname>. Such buffers can
          wrap JVM buffers, use memory from the heap or off the heap, and be pooled or not. For
          performance reasons, the SDK mainly uses <term>pooled off-heap</term>
          <apiname>ByteBuf</apiname>.</p>
      <p>Netty's buffers are <term>reference counted</term>. Once their <apiname>refCnt()</apiname>
          (reference count) reaches 0, the buffer is cleaned up, returned to the pool (if it was
          pooled). Most operations will automatically <apiname>release()</apiname> the buffers,
          especially when a buffer is written on the wire. But sometimes you'll need to
            <apiname>retain()</apiname>the buffer if you need to reuse it after such an automatic
          cleanup. Usually, the symptom for this is an
            <apiname>IllegalReferenceCountException</apiname> mentioning a <codeph>refCnt:
            0.</codeph></p>
      <p>The opposite symptom is when you see a trace in the logs that says <systemoutput>LEAK:
            ByteBuf.release() was not called before it's garbage-collected</systemoutput>. This is
          symptomatic of a buffer that is not released correctly. Netty will by default sample 1% of
          the created buffer, which can be tuned up by using
            <apiname>ResourceLeakDetector.setLevel(...) </apiname>method. This message appears in
          the logs when one of these sampled buffers is detected to be garbage-collected while still
          having a <codeph>refCnt > 0.</codeph></p>
      <p>One context where both of these are more likely to happen is when you use a
            <apiname>BinaryDocument</apiname>. Since this kind of <codeph>Document</codeph> exposes
          the raw <codeph>ByteBuf</codeph> to the user, it is your responsibility to manage the
          buffer correctly. On the <codeph>write</codeph> path, you create the buffer and you pass
          it to the SDK through the <apiname>BinaryDocument</apiname>. The SDK will take it from
          here and Netty will release the buffer once it writes it down the wire during IO. However,
          on the read path the SDK creates a buffer and passes it to you, giving you responsibility
          for <apiname>release()</apiname>. See the <xref
            href="http://netty.io/wiki/reference-counted-objects.html" format="html"
            scope="external">Netty</xref> documentation for more information about managing buffers. </p>
      <p>There could also be subtleties with use cases where you reuse a buffer, like in the
          following code.  The buffer CAN be used twice, and second time as fallback if the document
          didn't exist:</p>
      <codeblock outputclass="language-java">  byteBuffer.retain(); //prepare for potential multi usage (+1 refCnt, refCnt = 2)
        try {
        bucket.append(document);
        // refCnt = 2 on success
        byteBuffer.release(); //refCnt = 1
        } catch (DocumentDoesNotExistException dneException) {
        // buffer is released on errors, refCnt = 1
        //second usage will also release, but we want to be at refCnt = 1 for the finally block
        byteBuffer.retain(); //refCnt = 2
        bucket.insert(document); //refCnt = 1
        } // other uncaught errors will still cause refCnt to be released down to 1
        finally {
        //we made sure that at this point refCnt = 1 in any case (success, caught exception, uncaught exception)
        byteBuffer.release(); //refCnt = 0, returned to the pool
        }   
      </codeblock>
      <p>You have to prepare everything beforehand by calling <apiname>retain()</apiname> because
          once the <apiname>refCnt</apiname> reaches 0 you cannot do anything else with the
          buffer.</p>   
      
    </section>
    <section><title>Operation Effects</title>
  
      <p>Most operations have a set of error conditions described in their corresponding Javadoc.
          This section describes a few that are quite common and their usual meaning:</p>
      <ul>
        <li><apiname>DocumentDoesNotExistException</apiname></li>
        <li><apiname>DocumentAlreadyExistsException</apiname></li>
        <li><apiname>CASMismatchException</apiname></li>
        <li><apiname>TemporaryLockFailureException</apiname></li>
        <li><apiname>DurabilityException</apiname></li>
        <li><apiname>TemporaryFailureException</apiname></li>
      </ul>
      <p>The first two, <apiname>DocumentDoesNotExistException</apiname> and
            <apiname>DocumentAlreadyExistsException</apiname>, happen respectively when using
            the<apiname> replace()</apiname> operation and the <apiname>insert()</apiname>
          operation. First operation semantics implies that the operation expects a document with
          the provided key to be already stored in the database. If this is not the case, the
          exception is thrown. On the other hand of the spectrum, <codeph>insert</codeph> semantics
          implies that there should not be any document in the database with the given key. Hence
          the <apiname>DocumentAlreadyExistsException</apiname> when one such document is found.
          Note that if you want a <codeph>write</codeph> operation that works in both cases, you can
          use <apiname>upsert()</apiname>, which will by design also ignore the CAS value.</p>  
      <p>Mutative operations will usually take the Document's CAS into account and update it in the
          returned instance of <codeph>Document</codeph>. This is optimistic locking, meaning that
          the database is optimistic about the rarity of a clash of writes. Instead of paying the
          costly overhead of locking the document whenever it is accessed, the engine will instead
          refuse to execute one of the conflicting operations, detecting such changes by a variation
          of the CAS metadata. This surfaces in the SDK with a
            <apiname>CASMismatchException</apiname>. Usually, the way to go in this case is to retry
          by issuing a <apiname>get()</apiname> command to get the latest version of the document,
          or the one that took precedence. Then re-apply the mutation, maybe by reapplying a delta
          change or maybe by presenting the document to the user for the edition, and re-perform
            <apiname>replace()</apiname>.</p>  
      <p>Couchbase also allows to perform pessimistic locking, meaning that a particular key cannot
          be touched by anyone except the performer of a<apiname>getAndLock()</apiname> for up to 30
          seconds. If some code tries to access or mutate a locked document, a
            <apiname>TemporaryLockFailureException</apiname> will be thrown. Once again, the best
          way to deal with that error is to try again later, but you'll usually have to make sure
          that the attempted change does not overwrite the one performed during lock. After all, it
          was important enough that a pessimistic lock was enforced around it.</p>  
      <p>Durability constraints (<apiname>ReplicateTo</apiname> and <apiname>PersistTo</apiname>)
          allow you to instruct the SDK not to return until the database has acknowledged a certain
          level of replication/persistence. This is done using the corresponding overloads, on a
          per-operation basis. The SDK will perform the operation and will poll the cluster until
          enough replicate nodes have acknowledged seeing the mutation in RAM (for
            <apiname>ReplicateTo</apiname>) and/or having persisted it on disk
            (<apiname>PersistTo</apiname>). The original operation and the polling for durability
          constraint requirements are two separate things. It the later fails a
            <apiname>DurabilityException</apiname> will be raised mainly for these reasons:</p>
      <ul>
    
        <li>The constraint cannot be met in the first place due to replication factor being set up
            too low. The cause of the exception would be a
              <apiname>ReplicaNotConfiguredException</apiname>.</li>
        <li>One of the replicas is down and brings the total number of alive replicas under the
            number required for the durability constraint to be met. The cause of the exception
            would then be a <apiname>ReplicaNotAvailableException</apiname>. </li>
      </ul>
      <p>Finally, Couchbase Server is sometimes in a very busy state, for example: rebalance,
          reindexing and heavy load combined. In some cases, it will prefer to drop a request rather
          than failing into an unstable state. This <apiname>TemporaryFailureException</apiname>
          indicates that the server couldn't answer, but this is due to a transient state. Retrying
          later with that kind of exception is very likely to succeed.</p> 

  </section>  
    
    
  </body>  
</topic>
