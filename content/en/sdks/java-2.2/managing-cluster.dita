<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept
PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="concept2677">
    <title>Managing clusters</title>
    <shortdesc>You can manage Couchbase clusters programmatically from the Java SDK by using a
			<codeph>ClusterManager</codeph> object. </shortdesc>
    <conbody>
    	
    	<p>The <codeph>ClusterManager</codeph> class provides
    		methods to create, update, and remove buckets.</p>
		<section>
			<title>Accessing the ClusterManager</title>
			<p>To perform cluster-level management tasks, you need to get a reference to the
				<codeph>ClusterManager</codeph> object. It can be accessed through the
				<codeph>Cluster</codeph>, but you need to provide administrative credentials:</p>
			<codeblock outputclass="language-java">Cluster cluster = CouchbaseCluster.create("127.0.0.1");
ClusterManager clusterManager = cluster.clusterManager("Administrator", "password");</codeblock>
			<p>The <codeph>ClusterManager</codeph> class provides methods that enable you to retrieve
				information about the cluster state and manage buckets in the cluster:</p>
			<table>
				<title>ClusterManager methods</title>
				<tgroup cols="2">
					<colspec colnum="1" colname="col1" />
					<colspec colnum="2" colname="col2" />
					<thead>
						<row>
							<entry>Method</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry><codeph>info</codeph></entry>
							<entry>Provides cluster information</entry>
						</row>
						<row>
							<entry><codeph>getBuckets</codeph></entry>
							<entry>Lists all buckets with their settings from the cluster</entry>
						</row>
						<row>
							<entry><codeph>getBucket</codeph></entry>
							<entry>Gets a bucket with its settings from the cluster</entry>
						</row>
						<row>
							<entry><codeph>hasBucket</codeph></entry>
							<entry>Checks if a bucket exists or not on the cluster</entry>
						</row>
						<row>
							<entry><codeph>insertBucket</codeph></entry>
							<entry>Creates a new bucket on the cluster</entry>
						</row>
						<row>
							<entry><codeph>updateBucket</codeph></entry>
							<entry>Updates a bucket on the cluster</entry>
						</row>
						<row>
							<entry><codeph>removeBucket</codeph></entry>
							<entry>Removes a bucket from the cluster</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</section>
		<section>
			<title>Cluster information</title>
			
			<p>When you call <codeph>ClusterManager#info()</codeph> it returns a <codeph>ClusterInfo</codeph>
				object that contains both raw and typed information on the overall cluster state. In
				addition to the <codeph>ClusterInfo#raw()</codeph> method that provides direct access to
				everything returned by the server, the following methods are available:</p>
			<ul>
				<li>
					<p>To find out the minimum version of all nodes in the cluster, you can use the
							<codeph>ClusterInfo#getMinVersion()</codeph> method. For example, if you have 3
						nodes running version 3.1 and one running version 3.0.3, it reports version
						3.0.3.</p>
				</li>
				<li>
					<p>If you want to check if a certain feature is enabled on the cluster, you can use the
							<codeph>checkAvailable</codeph> method and pass in one of
							the<codeph>CouchbaseFeature</codeph> enumerations. It uses the minimum cluster
						version as a basis and then asserts it against the minimum version of the passed
						in feature. The SDK uses this internally to determine if specific integration
						tests can be executed against the connected cluster, and so can you.</p>
				</li>
				<li>
					<p>The <codeph>getAllVersions</codeph> method returns the version number of all nodes in the
						cluster.</p>
				</li>
			</ul>
		</section>
		<section>
			<title>Bucket management</title>
			<p>To create a bucket, first define the bucket attributes in a
				<codeph>BucketSettings</codeph> object, and then pass it to the
				<codeph>insertBucket()</codeph> method:</p>
			<codeblock outputclass="language-java">new DefaultBucketSettings.Builder()
    .type(BucketType.COUCHBASE)
    .name("hello")
    .password("s3cret")
    .quota(100) // megabytes
    .replicas(0)
    .indexReplicas(false)
    .enableFlush(false)
    .build();

manager.insertBucket(bucketSettings);</codeblock>
			<p>The <codeph>name</codeph> and <codeph>quota</codeph> properties are
				mandatory. By default, the type of the bucket is
				<codeph>BucketType.COUCHBASE</codeph>.</p>
			<p>All properties of a bucket except the <codeph>name</codeph> and
				<codeph>type</codeph> can be updated programmatically via the
				<codeph>BucketSettings</codeph> object. If you omit a property from
				the<codeph>BucketSettings</codeph> object, the default value for the omitted
				property is used.</p>
			<p>To avoid any inadvertent changes to bucket properties, make sure to set all properties
				in the <codeph>BucketSettings</codeph> object regardless of whether you are
				changing the value or continuing to use the existing value:</p>
			<codeblock outputclass="language-java">BucketSettings bucketSettings = new DefaultBucketSettings.Builder()
    .type(BucketType.COUCHBASE)
    .name("hello")
    .password("")
    .quota(120) // megabytes
    .replicas(1)
    .indexReplicas(true)
    .enableFlush(true)
    .build();

manager.updateBucket(bucketSettings);</codeblock>
			<p>To remove a bucket, pass its name to the <codeph>removeBucket()</codeph>
				method.</p>
			<codeblock outputclass="language-java">manager.removeBucket("hello");</codeblock>
			<p>Since all of the bucket management methods require you to deal with
				<codeph>BucketSettings</codeph>, here is a reference table:</p>
			<table>
				<title>BucketSettings methods</title>
				<tgroup cols="2">
					<colspec colnum="1" colname="col1" />
					<colspec colnum="2" colname="col2" />
					<thead>
						<row>
							<entry>Method</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>name</entry>
							<entry>The name of the bucket</entry>
						</row>
						<row>
							<entry>type</entry>
							<entry>The type of the bucket (couchbase or memcached)</entry>
						</row>
						<row>
							<entry>quota</entry>
							<entry>The bucket quota</entry>
						</row>
						<row>
							<entry>port</entry>
							<entry>The optional proxy port</entry>
						</row>
						<row>
							<entry>password</entry>
							<entry>The password of the bucket</entry>
						</row>
						<row>
							<entry>replicas</entry>
							<entry>The number of replicas</entry>
						</row>
						<row>
							<entry>indexReplicas</entry>
							<entry>The number of index replicas</entry>
						</row>
						<row>
							<entry>enableFlush</entry>
							<entry>If flush is enabled or not</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</section>
    	
    	
	</conbody>
</concept>
