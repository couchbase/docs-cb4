<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_yny_mhq_44">
	<title>Retrieving documents</title>
	<shortdesc>Documents are retrieved by unique identifier (key). You can retrieve documents by using
		consistent reads from the primary cluster node or inconsistent reads from
		replicas.</shortdesc>
	<conbody>
		
		<section>
			<title>Regular reads </title>
			<p>In most cases you can use regular reads for accessing your documents in Couchbase Server. In
				this case the client  reads from the primary cluster node.</p>
			<p>There are two methods defined (with many overloads) for reading documents. The first one takes
				the unique identifier of the document and returns an <codeph>IOperationResult&lt;T&gt;</codeph> object
				and the other takes the unique identifier and returns an <codeph>IDocumentResult&lt;T&gt;</codeph>
				object. Here is an example of using the latter:</p>
			<codeblock outputclass="language-csharp">
  var result = bucket.GetDocument&lt;Person&gt;("P1");
  if (result.Success)
  {
      var person = result.Content;
      Console.WriteLine("Retrieved document '{0}': {1} {2}", id, person.FirstName, person.LastName);
  }
			</codeblock>
			
			<p>The two perform essentially the same purpose; they retrieve a document from Couchbase by ID
				and cast the value to specified Type T. The <codeph>IDocumentResult&lt;T&gt;
				</codeph>and <codeph>IOperationResult&lt;T&gt;</codeph> interfaces are nearly symmetric.
				They both offer properties for checking whether or not the operation completed
				successfully (<codeph>Success</codeph>) and if the operation failed the serverâ€™s
				response status (<codeph>Status</codeph>) and an optional message with reason why.</p>
		
			<p>Here is a table that describes the <codeph>IDocumentResult&lt;T&gt;</codeph> interface:</p>
			<p><table frame="all" rowsep="1" colsep="1" id="table_gzw_jld_3p">
					<title>IDocumentResult&lt;T> properties</title>
						<tgroup cols="3">
						<colspec colnum="1" colname="col1" colwidth="1*"/>
						<colspec colnum="2" colname="col2" colwidth="1.66*"/>
						<colspec colnum="3" colname="col3" colwidth="3.86*"/>
						<thead>
							<row>
								<entry>Name</entry>
								<entry>Type</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry><codeph>Status</codeph></entry>
								<entry>ResponseStatus*</entry>
								<entry>The memcached response status from the server</entry>
							</row>
							<row>
								<entry><codeph>Content</codeph></entry>
								<entry>IDocument&lt;T&gt;</entry>
								<entry>A type constrained representing a JSON document</entry>
							</row>
							<row>
								<entry><codeph>Message</codeph></entry>
								<entry>string</entry>
								<entry>The message returned by the server or the client if the
									request could not be satisfied</entry>
							</row>
							<row>
								<entry><codeph>Success</codeph></entry>
								<entry>Boolean</entry>
								<entry>True if the request was successful</entry>
							</row>
						</tbody>
					</tgroup>
					</table>
				</p>
			
		</section>
		
		<section>
			<title>Replica reads</title>
			<p>In certain cases when availability is favored over consistency, replica reads can be used. A
				replica read returns data from the non-authoritative location (a node other than its
				master). </p>
			
		</section>

	</conbody>
</concept>
