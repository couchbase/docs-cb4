<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="concept227">
	<title>Getting started</title>
	<shortdesc>This section shows how to add the Couchbase .NET SDK to your application and how to get
		up and running with the client by way of a simple “Hello Couchbase” application.</shortdesc>
	<conbody>
		
		<section>
			<title>Installing the Client</title>
			<p>You can add the Couchbase .NET SDK to your code by using one of the following
				methods: </p>
			<p>
				<ul>
					<li>Using NuGet (recommended method)</li>
					<li>Downloading and referencing the binaries</li>
					<li>Building from source yourself</li>
				</ul>
			</p>
			<p>The following sections explain in detail how to get started using each method.</p>
		</section>
		<section>
			<title>Using NuGet</title>
			<p>For every release, we package the binaries and store the latest version in <xref
				href="https://www.nuget.org/packages/CouchbaseNetClient/" format="html" scope="external">NuGet</xref>. If you
				are not familiar with NuGet, it’s the official and most widely supported package
				manager for Microsoft Visual Studio and .NET in general. NuGet is a centralized
				repository for package authors and consumers, and it also defines a suite of tools
				for authoring and consuming packages.</p>
			<p>Using Visual Studio 2012 or later, follow these steps to get started with the
				Couchbase .NET SDK: </p>
			<ol>
				<li>From the IDE, right-click the project you want to add the dependency to.</li>
				<li>In the context menu, click <uicontrol>Manage NuGet Packages</uicontrol>. The
					NuGet package manager modal dialog opens.</li>
				<li>From the Tree View menu on the left, select <menucascade>
						<uicontrol>Online</uicontrol>
						<uicontrol>nuget.org</uicontrol>
					</menucascade>.</li>
				<li>In the search box at the top right-hand side of the dialog, type
						<userinput>CouchbaseNetClient</userinput> and then press enter on your
					keyboard.</li>
				<li>In the search results, select the CouchbaseNetClient package and then click
						<uicontrol>Install</uicontrol>.</li>
			</ol>
			<p>That’s it! NuGet will pull in all required dependencies and reference them. You're
				ready to start coding!</p>
			<p>As an alternative to using the Visual Studio IDE, you can include the binaries by
				using the Package Manager Console. The main advantage of using the Package Manager
				Console is that the NuGet Dialog by default always installs the latest version of
				the package published to NuGet.org, however the console allows you to define the
				version of the package you want to include. For users targeting older builds of the
				SDK, using the Package Manager Console is the best option.</p>
			<p>To use the Package Manager Console to include the SDK in your project:</p>
			<ol>
				<li>From the Visual Studio menu bar, click <uicontrol>Tools</uicontrol>.</li>
				<li>Select <menucascade>
						<uicontrol>NuGet Package Manager</uicontrol>
						<uicontrol>Package Manager Console</uicontrol>
					</menucascade>.</li>
				<li>In the console, enter the package installation command: <ul id="ul_bgb_lyc_kp">
						<li>To install the latest version:
							<pre>Install-Package CouchbaseNetClient</pre></li>
						<li>To install a specific version, include the version parameter. For
							example:
							<pre>Install-Package CouchbaseNetClient -Version 2.0.0 -Pre</pre></li>
					</ul></li>
			</ol>
			
		</section>
		<section>
			<title>Downloading and referencing the binaries</title>
			<p>If you do not want to use NuGet to include the Couchbase .NET SDK in your project,
				you can download and reference the binaries directly. If you chose this route,
				you’ll also be responsible for including and resolving dependencies used internally
				by the SDK.</p>
			<p>To download and reference the binaries directly:</p>
			<p>
				<ol>
					<li>Download the version of the SDK you want to install.</li>
					<li>In Visual Studio, right-click the project you want to include the SDK in and
						then click <uicontrol>Add</uicontrol>.</li>
					<li>Click <uicontrol>Reference</uicontrol> to open the Reference Manager.</li>
					<li>On the left side, click <uicontrol>Browse</uicontrol> and select the
						binaries you downloaded.</li>
					<li>Click <uicontrol>OK</uicontrol>.</li>
				</ol>
			</p>
			<p>After you have referenced the Couchbase .NET SDK binaries, you need to locate and
				reference the dependencies it uses in a similar fashion. At the time of this
				writing, the dependencies are: </p>
			<p>
				<ul>
					<li>Apache Common Infrastructure Libraries for .NET v2.0.0: <xref
							href="http://www.apache.org/licenses/LICENSE-2.0" format="html"
							scope="external"
						>http://netcommon.sourceforge.net/downloads.html</xref></li>
					<li>Json.NET v6.0.1: <xref href="https://json.codeplex.com/releases/view/126052"
							format="html" scope="external"
							>https://json.codeplex.com/releases/view/126052</xref></li>
				</ul>
			</p>
			<p>Other versions might not be compatible with the current SDK version. </p>
		</section>
		<section>
			<title>Building from source</title>
			<p>If none of the other installation options suffice or if you want to debug the source or
				perhaps contribute, building directly from the source is the best option for you. All
				source is located on GitHub.</p>
			<note>
				<p>The software provided via NuGet and S3 are the official releases that have been through a
					rigorous testing process. Code on GitHub that is not tagged as an official release is
					still in development.</p>
			</note>
			<p>To build the .NET SDK from source:</p>
			<p>
				<ol>
					<li>(<i>Optional</i>) Fork the GitHub repository: <xref format="html"
							href="https://github.com/couchbase/couchbase-net-client/fork"
							>https://github.com/couchbase/couchbase-net-client/fork</xref></li>
					<li>Using a Git console, enter the command to clone the repository:
						<pre>git clone https://github.com/couchbase/couchbase-net-client.git</pre></li>
					<li>Enter the command to retrieve the latest code from GitHub:
						<pre>git pull origin master</pre></li>
					<li>Navigate to the directory that the source was cloned to and open the
						solution. </li>
					<li>Build the solution.</li>
				</ol>
			</p>
			<p>After you have successfully built the source, it’s then just a matter of referencing
				the binaries (.DLL files) from your consuming project.</p>
		</section>
	</conbody>
</concept>
