<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_ff3_2jq_44">
 <title>Setting up logging</title>
  <shortdesc>The library offers basic functionality for logging to the program's standard error stream.</shortdesc>
 <conbody>
    <p>The most common way to enable logging is to set the LCB_LOGLEVEL environment variable to a
      number between 1 and 5, with 5 being the most verbose and 1 being the least verbose. Logging
      can also be enabled programmatically via the LCB_CNTL_CONLOGGER_LEVEL setting or the
      console_log_level option in the connection string. There is also support for receiving a
      logging callback (via LCB_CNTL_LOGGER).</p>
    <p>The logging output should be considered a work in progress, but does yield important
      information on what the library is doing and any errors being encountered.</p>
    <section>
      <title>Understanding output</title>
      <p>The console logger outputs a line that looks similar to
				this:<codeblock>1ms [I0] {14780} [DEBUG] (lcbio_mgr - L:383) &lt;localhost:11210> (HE=0xe56760) 
Creating new connection because none are available in the pool</codeblock></p>
    	<p>The following table describes the components of the log entries:</p>
      <table id="table_jnv_fv4_p4">
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1*" rowsep="1" colsep="1"/>
          <colspec colnum="2" colname="c2" colwidth="4.26*" rowsep="1" colsep="0"/>
          <thead>
            <row>
              <entry>Format</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><codeph><i>n</i>ms</codeph></entry>
              <entry>The number of milliseconds elapsed since the loading of the library</entry>
            </row>
            <row>
              <entry><codeph>[I<i>n</i>]</codeph></entry>
              <entry>The identifier of the <codeph>lcb_t</codeph> object associated with the current
                message. This allows you to determine the origin of the message in the case where
                the application contains multiple such <codeph>lcb_t</codeph> objects. The number is
                incremented for each call to <apiname>lcb_create()</apiname></entry>
            </row>
            <row>
              <entry><codeph>{<i>PID</i>}</codeph></entry>
              <entry>The current thread ID. On Linux this is also the process ID for single-threaded
                programs, further helping distinguish between multiple forks of an
                application.</entry>
            </row>
            <row>
              <entry><codeph>[<i>LEVEL</i>]</codeph></entry>
              <entry>A string representing the severity of the level</entry>
            </row>
            <row>
              <entry><codeph>(<i>subsystem</i> - L:<i>line</i>)</codeph></entry>
              <entry>The <i>subsystem</i> that produced this message, followed by the source code
                line at which this message was created. The subsystem will typically, but not
                always, resemble the source code file. It is a small string describing what the
                current line is doing.</entry>
            </row>
            <row>
              <entry><codeph>&lt;<i>host:port</i>></codeph></entry>
              <entry>The host and port, if any, associated with the message. This is supplied
                for messages that relate to the state of a particular connection.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </conbody>
</concept>
