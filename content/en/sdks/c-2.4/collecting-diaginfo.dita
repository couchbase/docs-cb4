<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="c-sdk-troubleshooting">
    <title>Collecting Diagnostic Information</title>
    <shortdesc>This section will discuss how to collect diagnostic information</shortdesc>
    <task id="task_jy5_nxw_dq">
        <title>Getting Stack Traces (and understanding them)</title>
        <taskbody>
            <prereq>This assumes you have <xref href="http://www.gnu.org/software/gdb/"
					format="html" scope="external">GDB</xref> installed and are familiar with its use.
				Note that <i>gdb</i> can also attach to an existing process, if you cannot run your
				application from within <i>gdb</i></prereq>
            <context>
                <p>If an application crashes, a proper stack trace and/or core dump file is
                    necessary when reporting an issue. This information helps the developer
                    determine in which specific code path and condition an application crashed. This
                    task will deal with Linux systems (with some of these commands also working on
                    Mac OS X).</p>
            </context>
            <steps id="steps_t2j_txw_dq">
                <step>
					<note>It is recommended that you run your application with a <i>debug</i> build of
						the library (this means, building the library from source with
							<codeph>--enable-debug</codeph>) for the sake of generating a stack trace.
						Released binaries are built with optimizations which will often result in
						providing obscured source-file/line-number information, because of how the
						compiler may rearrange and reorder various statements.</note>
					<cmd>Ensure debugging symbols for the C client are installed. If you are using a
						binary distribution, there should be a <i>libcouchbase-dbg</i> or a
							<i>libcouchbase-debuginfo</i> package which can be installed via your package
						manager. If using a version of the client built from source, ensure that
							<codeph>--enable-debug</codeph> was passed to the <codeph>configure</codeph>
						script. It is <i>also</i> helpful to ensure that your application itself is also
						built with debug symbols, though not strictly required.</cmd>
				</step>
                <step>
                    <cmd>If your application crashes within the C library, gather the stack trace
                        information. Be aware that since the C library is asynchronous in its core,
                        most everything will happen from within the <apiname>lcb_wait()</apiname>
                        function. Tracing actual state changes and events within the library is only
                        really possible using <xref href="logging.dita#concept_ff3_2jq_44"
                            >logging</xref></cmd>
                </step>
            </steps>
            <example>
                <title>Building the library with debugging</title>
                <screen>mnunberg@mbp15 ~/Source/libcouchbase $ ./cmake/configure --enable-debug
Detected in-source build. Making 'build' directory
cmake ../ \
    "-DCMAKE_BUILD_TYPE=DEBUG" \
    "-DCMAKE_INSTALL_PREFIX=/usr/local" \
    "-GUnix Makefiles" \
# SNIP</screen>
                <title>Running</title>
                <screen>mnunberg@mbp15 ~/Source/libcouchbase/build $ gdb --args ./bin/cbc cat foo -U couchbase://192.168.33.101/default
# SNIP
(gdb) r
Starting program: /Users/mnunberg/Source/libcouchbase/build/bin/cbc cat foo -U couchbase://192.168.33.101/default
Reading symbols for shared libraries .
# SNIP
Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0x0000000000000020
0x00000001000bacb9 in try_read (ctx=0x100703760, server=0x100700660, ior=0x1007037a8) at /Users/mnunberg/Source/libcouchbase/src/mcserver/mcserver.c:198
198	        pl2->index++;
(gdb) thread apply all bt

Thread 1 (process 7377):
#0  0x00000001000bacb9 in try_read (ctx=0x100703760, server=0x100700660, ior=0x1007037a8) at /Users/mnunberg/Source/libcouchbase/src/mcserver/mcserver.c:198
#1  0x00000001000baa29 in on_read (ctx=0x100703760, nb=31) at /Users/mnunberg/Source/libcouchbase/src/mcserver/mcserver.c:299
#2  0x0000000100090935 in invoke_read_cb (ctx=0x100703760, nb=31) at /Users/mnunberg/Source/libcouchbase/src/lcbio/ctx.c:273
#3  0x0000000100090a23 in E_handler (sock=4, which=2, arg=0x100703760) at /Users/mnunberg/Source/libcouchbase/src/lcbio/ctx.c:290
#4  0x000000010030d422 in event_base_loop ()
#5  0x00000001003068e1 in lcb_io_run_event_loop (iops=0x100405e50) at /Users/mnunberg/Source/libcouchbase/plugins/io/libevent/plugin-libevent.c:202
#6  0x00000001000c1d4d in lcb_wait (instance=0x100405910) at /Users/mnunberg/Source/libcouchbase/src/wait.c:88
#7  0x0000000100003be9 in cbc::GetHandler::run (this=0x100801200) at /Users/mnunberg/Source/libcouchbase/tools/cbc.cc:317
#8  0x000000010000318f in cbc::Handler::execute (this=0x100801200, argc=4, argv=0x7fff5fbffac8) at /Users/mnunberg/Source/libcouchbase/tools/cbc.cc:219
#9  0x000000010000e93c in main (argc=4, argv=0x7fff5fbffac8) at /Users/mnunberg/Source/libcouchbase/tools/cbc.cc:1204
</screen>
            </example>
        </taskbody>
    </task>
    <task id="task_l4n_jzw_dq">
        <title>Detecting Invalid Memory Access</title>
        <taskbody>
            <prereq>This assumes you are running Linux and have <i>valgrind</i> installed (which may
                be obtained from your package manager)</prereq>
            <context>Valgrind may help detect issues in your application (or the library itself)
                related to accessing invalid (already freed, or not-allocated) memory, or by
                accessing uninitialized memory regions. This is often very useful in debugging an
                application before a crash, since often times a crash may be a result of a normally
                impossible state induced by a previous write or read to an invalid memory location.<hazardstatement>
                    <messagepanel id="messagepanel_iw4_tzw_dq">
                        <typeofhazard>Valgrind will slow down execution time significantly, often by
                            a factor of <i>20x</i></typeofhazard>
                        <howtoavoid>If your application performs lots of load, attempt to
                            temporarily reduce the amount of CPU used by your application; if
                            possible.</howtoavoid>
                    </messagepanel>
                </hazardstatement><hazardstatement>
                    <messagepanel id="messagepanel_nkd_2hx_dq">
                        <typeofhazard>Valgrind will typically not work well with dynamic language
                            interpreters, such as Python, Ruby, Perl, etc. - this is due to how
                            these languages optimize memory allocation.</typeofhazard>
                        <howtoavoid>To effectively use valgrind with these languages, it is often
                            required that a special debug build of the interpreter be used. Refer to
                            the specific interpreter documentation.</howtoavoid>
                    </messagepanel>
                </hazardstatement></context>
            <example>
                <title>Running with Valgrind</title>
                <screen>mnunberg@csure:/sources/libcouchbase/build$ valgrind ./bin/cbc cat foo -U couchbase://192.168.33.101/default
==29887== Memcheck, a memory error detector
==29887== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
==29887== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
==29887== Command: ./bin/cbc cat foo -U couchbase://192.168.33.101/default
==29887== 
==29887== Conditional jump or move depends on uninitialised value(s)
==29887==    at 0x4E6D801: try_read (mcserver.c:221)
==29887==    by 0x4E6DD64: on_read (mcserver.c:294)
==29887==    by 0x4E4B8AA: invoke_read_cb (ctx.c:273)
==29887==    by 0x4E4B92B: E_handler (ctx.c:290)
==29887==    by 0x6E55EEB: event_base_loop (in /usr/lib/x86_64-linux-gnu/libevent_core-2.0.so.5.1.7)
==29887==    by 0x6C49610: lcb_io_run_event_loop (plugin-libevent.c:202)
==29887==    by 0x4E73D75: lcb_wait (wait.c:88)
==29887==    by 0x410964: cbc::GetHandler::run() (cbc.cc:317)
==29887==    by 0x41036F: cbc::Handler::execute(int, char**) (cbc.cc:219)
==29887==    by 0x414E03: main (cbc.cc:1204)
==29887== 
==29887== Conditional jump or move depends on uninitialised value(s)
==29887==    at 0x4E4BF07: E_schedule (ctx.c:447)
==29887==    by 0x4E4BFD4: lcbio_ctx_schedule (ctx.c:471)
==29887==    by 0x4E4BA21: E_handler (ctx.c:320)
==29887==    by 0x6E55EEB: event_base_loop (in /usr/lib/x86_64-linux-gnu/libevent_core-2.0.so.5.1.7)
==29887==    by 0x6C49610: lcb_io_run_event_loop (plugin-libevent.c:202)
==29887==    by 0x4E73D75: lcb_wait (wait.c:88)
==29887==    by 0x410964: cbc::GetHandler::run() (cbc.cc:317)
==29887==    by 0x41036F: cbc::Handler::execute(int, char**) (cbc.cc:219)
==29887==    by 0x414E03: main (cbc.cc:1204)
==29887== 
foo                  Client-Side timeout exceeded for operation. Inspect network conditions or increase the timeout (0x17)
==29887== Conditional jump or move depends on uninitialised value(s)
==29887==    at 0x4E4B4EB: lcbio_ctx_close_ex (ctx.c:156)
==29887==    by 0x4E4B640: lcbio_ctx_close (ctx.c:192)
==29887==    by 0x4E6EFB8: finalize_errored_ctx (mcserver.c:720)
==29887==    by 0x4E6EEE3: start_errored_ctx (mcserver.c:698)
==29887==    by 0x4E6ED98: mcserver_close (mcserver.c:646)
==29887==    by 0x4E6A943: lcb_destroy (instance.c:491)
==29887==    by 0x41020C: cbc::Handler::~Handler() (cbc.cc:208)
==29887==    by 0x42222D: cbc::GetHandler::~GetHandler() (in /sources/lcb-packet-ng/build/bin/cbc)
==29887==    by 0x422297: cbc::GetHandler::~GetHandler() (cbc-handlers.h:31)
==29887==    by 0x414E3D: main (cbc.cc:1221)
==29887== 
==29887== 
==29887== HEAP SUMMARY:
==29887==     in use at exit: 4,994 bytes in 20 blocks
==29887==   total heap usage: 602 allocs, 582 frees, 588,374 bytes allocated
==29887== 
==29887== LEAK SUMMARY:
==29887==    definitely lost: 35 bytes in 1 blocks
==29887==    indirectly lost: 0 bytes in 0 blocks
==29887==      possibly lost: 28 bytes in 1 blocks
==29887==    still reachable: 4,931 bytes in 18 blocks
==29887==         suppressed: 0 bytes in 0 blocks
==29887== Rerun with --leak-check=full to see details of leaked memory
==29887== 
==29887== For counts of detected and suppressed errors, rerun with: -v
==29887== Use --track-origins=yes to see where uninitialised values come from
==29887== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 10 from 6)</screen>
                <p>In the above example, the operation ostensibly times out, but the real cause is
                    uninitialized memory access which causes the client to incorrectly read the
                    response from the server.</p>
            </example>
        </taskbody>
    </task>
    <task id="task_rms_ncx_dq">
        <title>Getting Core Dumps</title>
        <taskbody>
            <context>Core dumps may be generated when an application crashes (though on many systems
                core file generation is off by default). The core dump contains a memory dump of
                your application which may be inspected on a different system. This lets the
                Couchbase developers inspect the state of the library to determine what the error
                was at the time of the crash.<p>Note that core dumps can only be analyzed if the
                    binaries that generated them are accessible and have debugging symbols.
                        <i>Binaries</i> in this sense refers to the client library, the application,
                    and any other shared libraries loaded by the application. This means that the
                    platform (and distribution) which generated the core dump must be available and
                    loadable (or at least reproducible) when analyzing the core dump.</p><hazardstatement>
                    <messagepanel id="messagepanel_rxl_ydx_dq">
                        <typeofhazard>A core file contains the memory contents of your application.
                            Anyone who can read your core file can access potentially sensitive data
                            your application was processing at the time of the crash.</typeofhazard>
                        <howtoavoid>If possible, have your application operate on sample
                            data.</howtoavoid>
                    </messagepanel>
                </hazardstatement></context>
            <steps id="steps_ifl_2dx_dq">
                <step>
                    <cmd>Invoke <codeph>ulimit -c unlimited</codeph> in the <b>same</b> shell that
                        your application will run (or a parent thereof) <i>prior</i> to the
                        invocation of that application. The <codeph>ulimit</codeph> command will
                        instruct the kernel to generate core dump files for all subsequent processes
                        which terminate abnormally and are executed within the current shell or any
                        child shell.</cmd>
                </step>
                <step>
                    <cmd>Ensure you are either using a binary install of the client library (which
                        was installed from an official Couchbase repository), or are using a source
                        build with debug symbols enabled.</cmd>
                </step>
                <step>
                    <cmd>When the application crashes, a core file will be created. The exact
                        location and name of the file is dependent on the specific kernel
                        configuration. See <xref
                            href="http://stackoverflow.com/questions/2065912/core-dumped-but-core-file-is-not-in-current-directory"
                            format="html" scope="external"/> for some more intricacies of where and
                        when the core file is located.</cmd>
                </step>
                <step>
                    <cmd>Compress the core file using <i>gzip</i> or similar before submitting to
                        support. This will make the upload and download times quicker for analyzing
                        the core file.</cmd>
                </step>
                <step>
                    <cmd>Disable core dumps once completed. Core dumps are disabled by default on
                        most Linux distributions because they may potentially write sensitive
                        information to disk, and because many core dump files can quickly fill up a
                        filesystem.</cmd>
                </step>
            </steps>
            <example>
                <title>Enabling and collecting a core dump</title>
                <screen>mnunberg@csure:/sources/libcouchbase/build$ ulimit -c unlimited
mnunberg@csure:/sources/libcouchbase/build$ ./bin/cbc cat foo -U couchbase://192.168.33.101
Aborted (core dumped)
# Showing the effects of compressing the core file:
mnunberg@csure:/sources/libcouchbase/build$ ls -lsh core 
961K -rw------- 1 mnunberg mnunberg 1.3M Nov 21 12:53 core
mnunberg@csure:/sources/libcouchbase/build$ gzip core 
mnunberg@csure:/sources/libcouchbase/build$ ls -lsh core.gz 
136K -rw------- 1 mnunberg mnunberg 133K Nov 21 12:53 core.gz</screen>
            </example>
        </taskbody>
    </task>
    <task id="task_jwq_tfx_dq">
        <title>Collecting Log Information</title>
        <taskbody>
            <context>Logging is a lightweight way to collect state and diagnostic information on the
                library. The <xref href="logging.dita#concept_ff3_2jq_44"/> section explains how to
                set up logging.</context>
            <steps-unordered id="steps-unordered_bfz_1gx_dq">
                <step>
                    <cmd>You may use the library's default logging (to standard error) by setting
                        the <codeph>LCB_LOGLEVEL</codeph> environment variable as described in the
                        link above.</cmd>
                </step>
                <step>
                    <cmd>There are some other undocumented methods of customizing the logging output
                        or integrating them with your application. Refer to the source code of the
                        library for more information on how this may be done.</cmd>
                </step>
            </steps-unordered>
            <example>
                <title>Running an application with logging, redirecting stderr to a file</title>
                <screen>mnunberg@csure:/sources/libcouchbase/build$ LCB_LOGLEVEL=5 ./bin/cbc cat foo 2&amp;> log
mnunberg@csure:/sources/libcouchbase/build$ cat log 
0ms [I0] {30280} [INFO] (instance - L:372) Version=2.4.4, Changeset=4410eebcd813844b6cd6f9c7eeb4ab3dfa2ab8ac
0ms [I0] {30280} [INFO] (instance - L:373) Effective connection string: http://localhost/default?. Bucket=default
0ms [I0] {30280} [DEBUG] (instance - L:63) Adding host localhost:8091 to initial HTTP bootstrap list
0ms [I0] {30280} [DEBUG] (instance - L:63) Adding host localhost:11210 to initial CCCP bootstrap list
0ms [I0] {30280} [DEBUG] (confmon - L:89) Preparing providers (this may be called multiple times)
0ms [I0] {30280} [DEBUG] (confmon - L:99) Provider FILE is DISABLED
0ms [I0] {30280} [DEBUG] (confmon - L:96) Provider CCCP is ENABLED
0ms [I0] {30280} [DEBUG] (confmon - L:96) Provider HTTP is ENABLED
0ms [I0] {30280} [DEBUG] (confmon - L:99) Provider MCRAW is DISABLED
0ms [I0] {30280} [TRACE] (confmon - L:284) Start refresh requested
0ms [I0] {30280} [TRACE] (confmon - L:264) Current provider is CCCP
1ms [I0] {30280} [INFO] (cccp - L:118) Requesting connection to node localhost:11210 for CCCP configuration
1ms [I0] {30280} [DEBUG] (lcbio_mgr - L:414) &lt;localhost:11210> (HE=0x1927e70) Creating new connection because none are available in the pool
1ms [I0] {30280} [DEBUG] (lcbio_mgr - L:318) &lt;localhost:11210> (HE=0x1927e70) Starting connection on I=0x19284c0
1ms [I0] {30280} [INFO] (connection - L:441) &lt;localhost:11210> (SOCK=0x1928600) Starting. Timeout=2000000us
1ms [I0] {30280} [TRACE] (connection - L:258) &lt;localhost:11210> (SOCK=0x1928600) Got event handler for new connection
1ms [I0] {30280} [TRACE] (connection - L:305) &lt;localhost:11210> (SOCK=0x1928600) Scheduling asynchronous watch for socket.
1ms [I0] {30280} [TRACE] (connection - L:258) &lt;localhost:11210> (SOCK=0x1928600) Got event handler for new connection
1ms [I0] {30280} [TRACE] (connection - L:321) &lt;localhost:11210> (SOCK=0x1928600) connect() failed. os_error=111 [Connection refused]
1ms [I0] {30280} [TRACE] (connection - L:258) &lt;localhost:11210> (SOCK=0x1928600) Got event handler for new connection
1ms [I0] {30280} [ERROR] (connection - L:118) &lt;localhost:11210> (SOCK=0x1928600) Failed: lcb_err=0x2c, os_errno=111
1ms [I0] {30280} [DEBUG] (lcbio_mgr - L:272) &lt;localhost:11210> (HE=0x1927e70) Received result for I=0x19284c0,C=(nil); E=0x2c
1ms [I0] {30280} [ERROR] (cccp - L:133) &lt;NOHOST:NOPORT> Got I/O Error=0x2c
1ms [I0] {30280} [INFO] (confmon - L:202) Provider 'CCCP' failed
1ms [I0] {30280} [DEBUG] (confmon - L:229) Will try next provider in 0us
1ms [I0] {30280} [TRACE] (confmon - L:264) Current provider is HTTP
1ms [I0] {30280} [TRACE] (htconfig - L:395) Starting HTTP Configuration Provider 0x191e070
1ms [I0] {30280} [INFO] (connection - L:441) &lt;localhost:8091> (SOCK=0x1928f90) Starting. Timeout=2000000us
2ms [I0] {30280} [TRACE] (connection - L:258) &lt;localhost:8091> (SOCK=0x1928f90) Got event handler for new connection
2ms [I0] {30280} [TRACE] (connection - L:305) &lt;localhost:8091> (SOCK=0x1928f90) Scheduling asynchronous watch for socket.
2ms [I0] {30280} [TRACE] (connection - L:258) &lt;localhost:8091> (SOCK=0x1928f90) Got event handler for new connection
2ms [I0] {30280} [TRACE] (connection - L:321) &lt;localhost:8091> (SOCK=0x1928f90) connect() failed. os_error=111 [Connection refused]
2ms [I0] {30280} [TRACE] (connection - L:258) &lt;localhost:8091> (SOCK=0x1928f90) Got event handler for new connection
2ms [I0] {30280} [ERROR] (connection - L:118) &lt;localhost:8091> (SOCK=0x1928f90) Failed: lcb_err=0x2c, os_errno=111
2ms [I0] {30280} [ERROR] (htconfig - L:341) Connection to REST API failed with code=0x2c (111)
2ms [I0] {30280} [INFO] (confmon - L:202) Provider 'HTTP' failed
2ms [I0] {30280} [TRACE] (confmon - L:219) Maximum provider reached. Resetting index
2ms [I0] {30280} [ERROR] (bootstrap - L:100) Failed to bootstrap client=0x191bc60. Code=0xa, Message=No more bootstrap providers remain
Operation failed with code 0x2c (The remote host refused the connection. Is the service up?)</screen>
            </example>
        </taskbody>
    </task>
</task>
