<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="concept2677">
	<title>Creating documents</title>
	<shortdesc>Describes creating documents by using the <codeph>insert()</codeph> or <codeph>upsert()</codeph> methods.</shortdesc>

	<conbody>

		<section>
			<title>Insert</title>

			<p>The <codeph>insert</codeph> method allows you to store a <codeph>Document</codeph>, if it does not already exist in the bucket. If it does exist, the <codeph>Observable</codeph> fails with a <codeph>DocumentAlreadyExistsException</codeph> (or it is thrown in the synchronous counterpart).</p>

<codeblock outputclass="language-java"><![CDATA[JsonObject content = JsonObject.empty().put("name", "Michael");
JsonDocument doc = JsonDocument.create("docId", content);
JsonDocument inserted = bucket.insert(doc)]]></codeblock>

<codeblock outputclass="language-java"><![CDATA[JsonObject content = JsonObject.empty().put("name", "Michael");
JsonDocument doc = JsonDocument.create("docId", content);
Observable<JsonDocument> inserted = asyncBucket.insert(doc)]]></codeblock>

			<p>If the <codeph>Document</codeph> also has the <codeph>expiry</codeph> time set, it is
				respected and picked up by the server.</p>

			<p>It doesn't matter what type of <codeph>Document</codeph> is inserted because its type is
				inferred from the method argument and the corresponding <codeph>Transcoder</codeph> is
				used to encode it.</p>

			<p>The <codeph>Document</codeph> returned as a result is a different from the
					<codeph>Document</codeph> passed in. The returned document references some values
				like its <codeph>id</codeph> and <codeph>content</codeph>, but also has the
					<codeph>CAS</codeph> value set.</p>

		</section>

		<section>
			<title>Upsert</title>

			<p>The <codeph>upsert</codeph> method works similar to <codeph>insert</codeph>, but it also overrides a already stored <codeph>Document</codeph> (so there is no <codeph>DocumentAlreadyExistsException</codeph> thrown.</p>

<codeblock outputclass="language-java"><![CDATA[JsonObject content = JsonObject.empty().put("name", "Michael");
JsonDocument doc = JsonDocument.create("docId", content);
JsonDocument inserted = bucket.upsert(doc)]]></codeblock>

<codeblock outputclass="language-java"><![CDATA[JsonObject content = JsonObject.empty().put("name", "Michael");
JsonDocument doc = JsonDocument.create("docId", content);
Observable<JsonDocument> inserted = asyncBucket.upsert(doc)]]></codeblock>

			<p>If the <codeph>Document</codeph> also has the <codeph>expiry</codeph> time set, it is
				respected and picked up by the server.</p>

			<p>It doesn't matter what type of <codeph>Document</codeph> is upserted, it's type is inferred from the method argument and the corresponding <codeph>Transcoder</codeph> is used to encode it.</p>

			<p>The <codeph>Document</codeph> returned as a result is a different one compare to the <codeph>Document</codeph> passed in. It references some values like its <codeph>id</codeph> and <codeph>content</codeph>, but also has the <codeph>CAS</codeph> value set.</p>
		</section>

		<section>
			<title>Durability Requirements</title>

			<p>If no durability requirements are set on the <codeph>insert</codeph> or <codeph>upsert</codeph> methods, the operation will succeed when the server acknowledges the document in its managed cache layer. While this is a performant operation, there might be situations where you want to make sure that your document has been persisted and/or replicated so that it survives power outages and other node failures.</p>

			<p>Both methods provide overloads to supply such requirements:</p>

<codeblock outputclass="language-java"><![CDATA[Observable<D> insert(D document, PersistTo persistTo);
Observable<D> insert(D document, ReplicateTo replicateTo);
Observable<D> insert(D document, PersistTo persistTo, ReplicateTo replicateTo);

Observable<D> upsert(D document, PersistTo persistTo);
Observable<D> upsert(D document, ReplicateTo replicateTo);
Observable<D> upsert(D document, PersistTo persistTo, ReplicateTo replicateTo);]]></codeblock>

			<p>In addition, the synchronous wrapper provides the same methods with custom timeouts.</p>

			<p>You can configure either just one or both of the requirements when inserting or upserting. From an application point of view nothing needs to be changed when working with the response, although there is something that need to be kept in mind:</p>

			<p>The internal implementation first performs a regular <codeph>insert</codeph> or
					<codeph>upsert</codeph> operation and afterward starts polling the specific affected
				cluster nodes for the state of the document. If something fails during this operation
				(and failing the <codeph>Observable</codeph>), the original operation might have
				succeeded nonetheless.</p>

<codeblock outputclass="language-java"><![CDATA[// Insert the document and make sure it is persisted to the master node
bucket.insert(document, PersistTo.MASTER);

// Insert the document and make sure it is replicate to one replica node
bucket.insert(document, ReplicateTo.ONE);

// Insert the document and make sure it is persisted to one node and replicated to two
bucket.insert(document, PersistTo.ONE, ReplicateTo.TWO);]]></codeblock>

		</section>

		<section>
			<title>Batching</title>

			<p>Because everything is asynchronous by default, batching <codeph>inserts</codeph> or <codeph>upserts</codeph> can be achieved with <codeph>Observable</codeph> functionality.</p>

			<p>A combination of <codeph>just()</codeph> and <codeph>flatMap()</codeph> is used to store them without blocking:</p>

<codeblock outputclass="language-java"><![CDATA[JsonDocument doc1 = JsonDocument.create("id1", content);
JsonDocument doc2 = JsonDocument.create("id2", content);
JsonDocument doc3 = JsonDocument.create("id3", content);

Observable
    .just(doc1, doc2, doc3)
    .flatMap(new Func1<JsonDocument, Observable<JsonDocument>>() {
        @Override
        public Observable<JsonDocument> call(JsonDocument document) {
            return bucket.insert(document);
        }
    }).subscribe();]]></codeblock>

    	<p>For the blocking API, batching is currently not supported. It is recommended to fall back on the asynchronous API for now. We are considering adding a bulk API soon.</p>

		</section>

	</conbody>
</concept>