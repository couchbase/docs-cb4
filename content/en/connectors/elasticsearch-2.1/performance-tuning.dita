<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic xml:lang="en-us" id="topic2913">
	<title>Performance Tuning</title>
	<body>
		<p>You can make some adjustments to tune system performance with Couchbase and Elasticsearch. You
			can omit some fields from indexing, add more Elasticsearch nodes, change the number
			of concurrent replications, and make sure to configure your Elasticsearch nodes properly. </p>
		<section>
			<title>Disable Fields from Indexing</title>
			<p>When any search engine has to index large blocks of data, the process is more CPU
				intensive than smaller blocks of data. So if you have objects with large amounts of text
				that are not important for search results, you can provide a custom mapping and omit
				those fields from indexing using the setting <codeph>enabled</codeph>. For more detailed
				information about disabling fields, see <xref
					href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-object-type.html"
					format="html" scope="external">Object Type</xref> in the <cite>Elasticsearch
					Reference</cite>.</p>
		</section>
<section><title>Limit the Number of Index Entries</title>
<p>To limit the number of index entries, you can filter the documents on the Elasticsearch side. The
				document filter chooses whether to index or ignore certain documents according to
				their ID. To configure filtering, see <xref
					href="adv-usage.dita#elastic-advanced/filter"/>.</p>	
	
	
	
</section>

		<section>
			<title>Add Elasticsearch Nodes</title>
			<p>If your Couchbase Server cluster experiences a backlog of items in the replication queue,
				consider adding additional Elasticsearch nodes. Adding additional nodes should
				increase the speed of items indexing by the search engine.</p>
		</section>
		<section>
			<title>Adjust Concurrent Replication</title>
			<p>If you are running your Couchbase cluster and Elasticsearch cluster on hardware with
				high-performance CPUs, you can adjust settings to improve replication speed between
				the two clusters. For more information about adjusting XDCR parameters, see <xref
					href="../../xdcr/xdcr-adv-settings.dita#topic_l3v_lh4_14"/>.</p>
			<p>Key parameters you can use to adjust XDCR performance are <codeph>XDCR Source Nozzles per
					Node</codeph> and <codeph>XDCR Target Nozzles per Node</codeph>. These
				parameters increase or decrease the maximum concurrent replication by a Couchbase
				node. </p>
			<p>Each replication can require multiple TCP connections and both the concurrent
				replications and the number of connections may overwhelm the Elasticsearch node. If
				this does occur, you may see errors in the Couchbase Web Console. Click XDCR and
				look in the <wintitle>Ongoing Replications</wintitle> section, where the
					<codeph>capi_…</codeph> string is the ID of the CAPI nozzle, a component in XDCR
				replication, which writes to the target:</p>
			<codeblock>"capi_f4268e62702130298bf87f17cc481219/default/default_172.23.105.146:9091_1 – Connection reset failed"</codeblock>

			<p>This message indicates that Couchbase Server cannot communicate with Elasticsearch in the time
				that it expects. Couchbase Server can recover from these types of errors and retry
				replication. However, your replication may take longer to complete or operate with
				higher latency because the operations must be later retried. In such case, you could
				lower the total number of concurrent replications that can be handled by your
				Elasticsearch node by decreasing the default <codeph>XDCR Source Nozzles per
					Node</codeph> setting and adjusting the <codeph>XDCR Target Nozzles per
					Node</codeph> accordingly.</p>
		</section>
		<section><title>Configure your Elasticsearch Nodes Properly</title>
			<p>Check Elasticsearch documentation to make sure that you have configured your Elasticsearch
				nodes for best performance. </p>
			<p>The following tips, which are not specific to Couchbase, will also tune system
				performance: <ul id="ul_ac4_5lz_pt">
					<li>When bulk loading, increase the Elasticsearch setting
							<codeph>index.refresh_interval</codeph> to improve indexing performance.
						This setting determines how quickly Elasticsearch makes the indexed
						documents available to query. For a large bulk load, where realtime indexing
						is not needed, setting this setting to a large number such as 30s can
						significantly increase throughput.</li>
					<li>If you know that some documents are always or nearly always queried
						together, you can configure document routing in the plugin so that those
						documents end up on the same Elasticsearch shard. This can provide a
						significant boost in query performance.</li>
					<li>Mapping documents to different Elasticsearch types and then searching only
						within a specific type will always be faster than searching the whole
						Elasticsearch index.</li>
				</ul>
			</p>
			
			
			
		</section>
		
	</body>

</topic>
