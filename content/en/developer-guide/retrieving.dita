<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept-devguide-retrieving">
 <title>Retrieving Documents</title>
 <shortdesc>Retrieve stored documents from Couchbase</shortdesc>
 <conbody>
        <p>
            <codeblock>document = get(docid)</codeblock>
        </p>
        <note>This section discusses retrieving documents using their IDs, or primary keys.
            Documents can also be accessed using secondary lookups via <xref
                href="querying.dita">Query</xref> and MapReduce. Primary key
            lookups are performed using the key-value API, which simplifies use and increases
            performance (as applications may interact with the KV store directly, rather than a
            secondary index or query processor).</note>
        <section><title>Retrieving documents using the SDK</title><p>In Couchbase, documents are
                stored with their IDs. Retrieving a document via its ID is the simplest and quickest
                operation in
                Couchbase.<screen>>>> result = cb.get('docid')
>>> print result.value
{'json': 'value'}</screen></p>To
            retrieve a document, use the <apiname>get()</apiname> API. This API call will return the
            document along with metadata (such as the <xref
                href="cas-concurrency.dita#concept_iq4_bts_zs">CAS</xref> value).<p>Examples of
                retrieving a document using an SDK:</p><p><xref
                    href="https://github.com/couchbaselabs/devguide-examples/blob/master/c/retrieving.cc"
                    format="html" scope="external">C</xref> | <xref
                    href="https://github.com/couchbaselabs/devguide-examples/blob/master/python/retrieving.py"
                    format="html" scope="external">Python</xref> | <xref
                    href="https://github.com/couchbaselabs/devguide-examples/blob/master/java/src/main/java/com/couchbase/devguide/Retrieving.java"
                    format="html" scope="external">Java</xref> | .NET | <xref
                    href="https://github.com/couchbaselabs/devguide-examples/blob/master/go/retrieving.go"
                    format="html" scope="external">Go</xref> | <xref
                    href="https://github.com/couchbaselabs/devguide-examples/blob/master/nodejs/retrieving.js"
                    format="html" scope="external">node.js</xref></p></section>
        <section><title>Retrieving via the command line</title>The <xref
                href="cli-overview.dita#concept_lg3_dhm_zs">cbc</xref> tool may be used to fetch
            documents by their
            IDs<codeblock>$ cbc cat docid
docid                CAS=0x8234c3c0f213, Flags=0x0. Size=16
{"json":"value"}</codeblock>Will
            output the document’s value and metadata (<xref
                href="cas-concurrency.dita#concept_iq4_bts_zs">CAS</xref> and <xref
                href="transcoders.dita#concept_bdb_smb_bt/table_wrc_2nb_bt">flags</xref>).</section>
        <section><title>Retrieving JSON documents</title>Most SDKs will automatically deserialize
            the JSON document retrieved from the server into your language’s native representation
            (array, string, dictionary, etc.) depending on the JSON stored.</section>
        <section><title>Retrieving non-JSON documents</title>The SDK will know what type a document
            is by inspecting its metadata (See <xref
                href="transcoders.dita#concept_bdb_smb_bt/table_wrc_2nb_bt">flags</xref>). If the
            document is not JSON (and was not stored as JSON), the SDK will properly deserialize it
            to the type it was stored as.</section>
        <section><title>Retrieving multiple documents</title>Multiple documents may be retrieved at
            once, making better use of the network. See [batching operations] for a discussion of
            how to efficiently perform multiple operations.</section>
        <section><title>Retrieving and setting expiration</title>Couchbase Server offers a
                <apiname>getAndTouch</apiname> operation which retrieves an item and updates its
                <xref href="expiry.dita#concept_o53_kps_zs">expiration time</xref> while doing so.
            This is most useful to prolong the lifetime of transient data, and delay its expiration
            a bit further. See <xref href="expiry.dita#concept_o53_kps_zs">TTL</xref> for more
            information.</section>
        <section><title>Primary key lookups using N1QL</title>While N1QL is generally used for secondary
            queries, it can also be used to retrieve documents by their primary keys (ID) (though it
            is recommended to use the key-value API if the ID is known). Lookups may be done either
            by comparing the <codeph>META(from-term).id</codeph> or by using the <codeph>USE
                KEYS</codeph> [...] keyword:
            <codeblock>SELECT * FROM default USE KEYS ["docid"];</codeblock>or<codeblock>SELECT * FROM default WHERE META(default).id = "docid";</codeblock></section>
    </conbody>
</concept>
