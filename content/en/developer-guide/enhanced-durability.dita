<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_cgn_flg_lt">
 <title>Enhanced Durability</title>
 <shortdesc>Couchbase 4.0 offers additional durability options which provide clearer semantics in
        the face of failover.</shortdesc>
 <conbody>
  <p>Prior to Couchbase 4.0, durability was only implemented using the <xref
                href="cas-concurrency.dita#concept_iq4_bts_zs">CAS</xref>. Since the CAS changed for
            each mutation, a client could normally determine if the mutation was persisted on a
            given node if the item existed on the node with the same CAS.</p>
        <p>The core issue with CAS-based checking is that a different CAS on a replica may either be
            a result of:</p>
        <p>
            <ul id="ul_wf2_ylg_lt">
                <li>Client contention: The CAS is different from the current mutation because it
                    been changed by a subsequent mutation (one performed <i>after</i> our current
                    client)</li>
                <li>Slow propagation: The mutation has not yet been propagated to all replicas</li>
                <li>Failover: The CAS has changed because the master was failed over and control has
                    been transferred to a replica which is using an older copy.</li>
            </ul>
        </p>
        <section><title>Sequence number based durability</title>In Couchbase 4.0, an enhanced mode
            of durability, based on <i>sequence numbering</i> is available. To this effect, an
            application may opt to enable receiving sequence data for each mutation. This provides
            the SDK with an ever-increasing sequence number for a given mutation. The sequence
            number data contains:<ul id="ul_cff_vmg_lt">
                <li>A random identifier representing (called a <u>UUID</u>) the current cluster
                    state. This state is changed whenever something happens to the cluster (for
                    example, a failover).</li>
                <li>A counter value which is associated with the current state.</li>
            </ul><p>Applications may enable this extra sequence data to be sent for each mutation
                response. This data is then transparently used by the SDK to use sequence
                number-based durability checking.</p><p>Unlike CAS-based polling, it is simple to
                distinguish various failure cases:<ul id="ul_jvy_kng_lt">
                    <li>If the <i>UUID</i> is equal, but the sequence number is lower than the
                        expected value, then it means the mutation has not yet been propagated.</li>
                    <li>If the UUID is equal, and the sequence number is greater or equal to the
                        current mutation, it means the current mutation has been propagated.</li>
                    <li>If the UUID is different than the one available at the client, it means the
                        mutation has been lost.</li>
                </ul></p></section>
        <section><title>Enabling enhanced durability via the SDK</title>Enhanced durability can be
            enabled and used transparently via the SDK. Enhanced durability is disabled by default
            as it adds an overhead of 16 bytes per operation. An example for the Python client is
            presented below. Consult your SDK's documentation to see how to enable enhanced
            durability for your
            SDK:<codeblock>from couchbase.bucket import Bucket
cb = Bucket('couchbase://localhost/default?<b>fetch_mutation_tokens=1</b></codeblock></section>
 </conbody>
</concept>
