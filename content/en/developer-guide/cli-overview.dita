<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_lg3_dhm_zs">
	<title>Accessing Data from a Command Line</title>
	<shortdesc>The Couchbase command line client, <cmdname>cbc</cmdname>, is part of the C SDK. The
		most common form of installation is via the Couchbase software repositories, though it can
		also be built from source or downloaded directly.</shortdesc>
	<conbody>
		<section><title>Installing cbc on Linux </title><p>To install <cmdname>cbc</cmdname> on Linux, you
				can use a simple Perl setup script that automatically configures your system to use
				the Couchbase software repositories. Use the following commands to download and
				execute this script (as root or using sudo):
			</p><codeblock>$ wget http://packages.couchbase.com/clients/c/couchbase-csdk-setup
$ perl couchbase-csdk-setup</codeblock>The
			script prompts you before each modification it makes. When done setting up the
			repository, it installs the C SDK (just a few simple libraries) and the command-line
			tool. </section>
		<section><title>Installing cbc on OS X</title>The <cmdname>cbc</cmdname> utility is available with
			the <i>libcouchbase</i> package, which you can install by using the <xref
				href="http://brew.sh" format="html" scope="external">Homebrew</xref> package manager for
			OS X:<codeblock>$ brew install libcouchbase</codeblock></section>
		<section><title>Running the client</title><p>The command-line client contains subcommands that
				perform various operations on the server. The basic commands are:<ul id="ul_xn5_nhm_zs">
					<li><codeph>cbc create</codeph> (create/update documents)</li>
					<li><codeph>cbc cat</codeph> (retrieve a document)</li>
					<li><codeph>cbc n1ql</codeph> (execute a query)</li>
					<li><codeph>cbc rm</codeph> (remove a document).</li>
				</ul>To point the client at a cluster, provide one of the cluster nodes using the -U
				argument:</p><screen>$ cbc cat document_id -U couchbase://10.0.0.31 </screen>Most
			commands accept a document ID (key) as a positional argument. Some commands (specifically,
			mutation commands) require a value as well.</section>
		<section>
			<title>Command symbolic links</title>
			<p>On Unix-like platforms, shortcuts for the various subcommands are available in the form of
					<i>cbc-&lt;command></i>. For example, the following commands to retrieve an item are
				equivalent:<codeblock>cbc cat foo</codeblock><codeblock>cbc-cat foo</codeblock>The
				symbolic link works well with your shell's tab completion features to help you discover
				new commands.</p>
		</section>
		<section><title>Documents</title>Unlike most SDKs, the command line client is not JSON-aware. If
			dealing with JSON documents, ensure that values passed to it are well formed JSON because
			the <cmdname>cbc</cmdname> program does not do any validation.</section>
		<section><title>Storing a document</title>Documents can be created or replaced using the
				<codeph>create</codeph> subcommand. To specify one of the mutation modes (such as
				<i>upsert</i>), use the <codeph>--mode</codeph> argument. The default mode is
				<codeph>upsert</codeph>.<p>The document to be stored can be supplied on the command line
				using the <codeph>-V</codeph> parameter. If the document is large or is the result of
				another program's output, <codeph>cbc-create</codeph> can also read the document from
				standard
				input.<codeblock>$ cbc-create document_id -V '{"json":"value"}'</codeblock><codeblock>$ echo '{"json":"value"}' | cbc-create document_id</codeblock></p>If
			the operation was successful, the client will output the <xref
				href="cas-concurrency.dita#concept_iq4_bts_zs">CAS</xref> of the document. If an error
			was received, it will be printed as well.</section>
		<section><title>Retrieving a document</title>Documents can be retrieved using the
				<codeph>cbc-cat</codeph> command. The document ID to retrieve should be specified as a
			positional argument.<p>The output of the command contains the actual document value on
					<codeph>stdout</codeph> and any metadata/error information on
				<codeph>stderr</codeph>.<codeblock>$ <b>cbc-cat document_id</b>
document_id          CAS=0xe0004ea40100, Flags=0x0. Size=16
{"json":"value"}</codeblock></p>The
			metadata consists of the document's ID, the <xref
				href="cas-concurrency.dita#concept_iq4_bts_zs">CAS</xref>, <xref
				href="transcoders.dita#concept_bdb_smb_bt">flags</xref>, and the size of the document in
			bytes.</section>
		<section><title>Issuing N1QL queries</title>The <cmdname>cbc</cmdname> tool can be used as a simple N1QL (query) client. It accepts the query
			string as its argument.<note>Ensure the string is properly escaped for the shell. It is
				best to place the query string in single quotes; this way the shell does not recognize
				double-quotes or backticks, which are often used in N1QL
				queries</note><codeblock>$ cbc-n1ql 'SELECT airportname, city FROM `travel-sample` WHERE type="airport" LIMIT 2'</codeblock>Named
			placeholders can also be specified using the <codeph>--qarg</codeph>
			argument.<codeblock>$ cbc-n1ql 'SELECT airportname, city FROM `travel-sample` WHERE faa=$faa' --qarg faa='"RNO"'</codeblock></section>
		<section>
			<title>Other commands</title>
			<p>There are many other subcommands available with <cmdname>cbc</cmdname>. Use <codeph>cbc
					help</codeph> to see the full listing.</p>
		</section>
	</conbody>
</concept>
