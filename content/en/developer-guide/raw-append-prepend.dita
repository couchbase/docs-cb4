<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_kfc_zsg_vt">
 <title>Raw <apiname>Append</apiname> and <apiname>Prepend</apiname></title>
 <conbody>
     <p> <note type="warning">These methods should not be used with JSON
         documents. <p>The append and prepend operations operate at the byte level and are
         unsuitable for dealing with JSON documents. Use these methods only when
         explicitly dealing with binary or UTF-8 documents. Using the append and
         prepend methods may invalidate an existing JSON document.</p></note>
            <codeblock>append(docid, fragment)
prepend(docid, fragment)</codeblock>
        </p>
        <p>The <apiname>append</apiname> and <apiname>prepend</apiname> methods atomically add bytes
            to the end or beginning of a binary document. They are an efficient alternative to
            retrieving a binary document in its entirety, appending the contents locally, and then
            saving the contents back to the server.</p>
        <p>Because these methods do raw string manipulation, they are only suitable for non-JSON
            documents: Prepending or appending anything to a JSON document will invalidate the JSON
            and make it unparseable by standard JSON parsers.</p>
        <p>The semantics of the <apiname>append</apiname> and <apiname>prepend</apiname> functions
            are similar to those of the <apiname>upsert</apiname> family of methods, except that
            they accept the fragment to append as their value, rather than the entire document.
            These functions may be used to add efficiency for custom binary data structures (such as
            logs), as they avoid transferring the contents of the entire document for each
            operation. Consider the following versions (which are equivalent)</p>
        <p>
            <codeblock outputclass="language-python" spectitle="Append using get() and replace() (slow)">import couchbase
import couchbase.exceptions
import couchbase.bucket

cb = couchbase.bucket.Bucket('couchbase://10.0.0.31/default')
# Store the document
cb.upsert('binary_doc', '\x01', format=couchbase.FMT_BYTES)

while True:
    # Retrieve the entire document
    rv = cb.get('binary_doc')
    value = rv.value + '\x02'
    try:
        # Upload the entire document
        cb.replace('binary_doc', value, format=couchbase.FMT_BYTES)
        break
    except couchbase.exceptions.KeyExistsError:
        continue

print repr(cb.get('binary_doc').value)</codeblock>
            <codeblock spectitle="Append using append() (fast)" outputclass="language-python">import couchbase
import couchbase.exceptions
import couchbase.bucket

cb = couchbase.bucket.Bucket('couchbase://10.0.0.31/default')
# Store the document
cb.upsert('binary_doc', '\x01', format=couchbase.FMT_BYTES)

# Append a fragment
cb.append('binary_doc', '\x02', format=couchbase.FMT_BYTES)

print repr(cb.get('binary_doc').value)</codeblock>
        </p>
        <p>Note that since the <apiname>append()</apiname> method is done atomically, there is no
            need for a CAS check (though one can still be supplied if the document must be at a
            specific state).</p>
        <section><title>SDK Examples</title>Examples of using <apiname>prepend</apiname> and
                <apiname>append</apiname> in Couchbase SDKs:<p>C | Python | Java | .NET | Go |
                node.js | PHP</p></section>
        <section><title>Performance considerations</title>Users of the <apiname>append</apiname> and
                <apiname>prepend</apiname>  methods should ensure that the resulting documents do
            not become too large. Couchbase has a hard document size limit of 20MB.<p>Using append
                and <apiname>prepend</apiname> on larger documents may cause performance degradation
                and memory fragmentation at the server level, as for each <apiname>append</apiname>
                operation the server must allocate memory for the new document size and then append
                the fragment to the new memory. The performance impact may be significant when
                document sizes reach beyond 100KB.</p><p>Finally, note that while append saves
                network traffic from the client to server (by only specifying the fragment to
                append), the entire document is replicated for each mutation. Five append operations
                on a single 10MB document will result in 50MB of traffic to each
            replica.</p></section>
    </conbody>
</concept>
