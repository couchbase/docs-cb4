<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_uyc_ldv_yn">
 <title>Stream-based XDCR</title>
 <shortdesc>Stream-based XDCR collects data changes from the memory on the source cluster and
    streams the data changes directly to the memory on the destination cluster.</shortdesc>
 <conbody>
  <p>The stream-based XDCR replication is available due to
    <term>Database Change Protocol </term>(DCP), a stream-based protocol.</p>
 <!--  <p>Once the data changes are detected and streamed to the destination cluster's memory, each
      cluster persists the data to disk. When data is going to be persisted to disk on source
      cluster is not related to when the data is streamed to the destination.</p> -->
    <p>On the source cluster, the data changes (in memory) are queued and then persisted to disk.
      Correspondingly, on the destination cluster, the data changes (stream to memory) are queued
      and then persisted to disk.</p>
  <p>The stream-based XDCR replication provides:</p>
  <ul>
   <li>Lower latency or smaller time gap between data replication</li>
   <li>High availability and disaster recovery</li>
   <li>Improved Recovery Point Objective (RPO)</li>
   <li>Smaller data loss window</li>
  </ul>
  <p><image href="../images/streambased_XDCR.png" id="image_x5j_c1f_xq" width="600"
    placement="inline" align="left"/></p>
  <section>
      <title>Backward compatibility</title> To secure the backward compatibility of the stream based
      replication: <ul>
        <li>Changes are made automatically through the upgrade.</li>
        <!-- <li>Only the source cluster is upgraded while the destination cluster accepts the data
          changes into memory. </li> -->
      </ul></section>
   <section>
      <title>XDCR stream management</title>
      <!-- New XDCR stream creation must occur after creating a
      bucket or after deleting an XDCR stream.-->
      <p>Depending on the CPU load, a certain period of time should pass before creating new XDCR
        streams and under the following circumstances:</p>
      <ul>
        <li>After creating a bucket.</li>
        <li>After deleting an old XDCR stream.</li>
      </ul>
      <p>If a new XDCR stream is created immediately after a bucket has been created, a
          <codeph>db_not_found</codeph> error may occur. When you create a bucket, some time passes
        before the buckets are available. If XDCR tries to replicate to or from the vBucket too
        soon, a <codeph>db_not_found</codeph> error occurs. The same situation applies when other
        clients are “talking” to a bucket.</p>
     <!--  <p>If a new XDCR stream is created immediately after an old XDCR stream is deleted, an Erlang
          <systemoutput>eaddrinuse</systemoutput> error occurs related to the Erlang implementation
        of the TCP/IP protocol. </p>
      <p>After an Erlang process releases a socket, the socket stays in <codeph>TIME_WAIT</codeph>
        for a while before a new Erlang process can reuse it. If the new XDCR stream is created too
        quickly, vBucket replicators may encounter the <systemoutput>eaddrinuse</systemoutput>
        error, and XDCR may not be able to start fully.</p>
      <note type="note">The <codeph>TIME_WAIT</codeph> interval may be tunable from the operating
        system: if so, try lowering the interval time. </note> -->
    </section>
 </conbody>
 
</concept>
