<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_uhg_2gk_np">
  <title>GROUP BY Clause</title>
  <conbody>
    <p><i>group-by-clause:</i></p>
    <codeblock>GROUP BY expression [ , expression ]* [ letting-clause ] 
    [having-clause] ] | [letting-clause]  </codeblock>
    <p><i>letting-clause:</i></p>
    <codeblock>LETTING  alias = expression [(, alias = expression) ]*
</codeblock>
    <p><i>having-clause:</i></p>
    <codeblock>HAVING condition</codeblock>
    <p>GROUP BY allows you to organize a result set by one or more expressions. It can be used with
      aggregate functions to group the result set. The optional LETTING and HAVING clauses follow
      the GROUP BY clause.</p>
    <p>Example</p>
    <codeblock>
SELECT relation, COUNT(*) AS count
    FROM tutorial
        GROUP BY relation 
</codeblock>
    <p>Results</p>
    <codeblock>
{
  "resultset": [
    {
      "count": 2,
      "relation": "friend"
    },
    {
      "count": 1,
      "relation": "coworker"
    },
    {
      "count": 1,
      "relation": "parent"
    },
    {
      "count": 2,
      "relation": "cousin"
    }
  ]
}

</codeblock>
    <p>Example</p>
    <codeblock>SELECT title, type, COUNT(*) AS count FROM catalog GROUP BY type</codeblock>
    <p><b>LETTING Clause</b></p>
    <codeblock>
LETTING  alias = expression [(, alias = expression) ]*
</codeblock>
    <p>Aliases in the LETTING clause create new names that can be referred to in the HAVING, SELECT,
      and ORDER BY clauses. </p>
    <p><b>HAVING Clause</b></p>
    <codeblock>HAVING condition</codeblock>
    <p>The HAVING clause optionally follows the GROUP BY clause. It filters result objects from the
      GROUP BY clause using the given condition.</p>
  </conbody>
</concept>
