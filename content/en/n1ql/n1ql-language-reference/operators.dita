<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_7" xml:lang="en-US">
	<title id="title__Toc272567236">Operators</title>
	<shortdesc>Operators perform a specific operation on the input values or expressions. </shortdesc>
	
	<conbody>


		<p> N1QL provides a full set of operators that you can use within its statements. Here are the categories of N1QL operators: </p>
		<ul>
			<li><xref href="arithmetic.dita"></xref> to perform basic mathematical operations (such as addition, subtraction, multiplication, and divisions) on numbers.</li>
			<li><xref href="collectionops.dita"></xref> to evaluate expressions on collections or objects. </li>
			<li><xref href="comparisonops.dita"></xref> to compare two expressions.</li>
			<li><xref href="conditionalops.dita"></xref> to evaluate conditional logic in an expression</li>
			<li><xref href="constructionops.dita"></xref> to construct arrays and objects.</li>
			<li><xref href="logicalops.dita"></xref> to combine operators using Boolean logic.</li>
			<li><xref href="nestedops.dita"></xref> to access nested elements and embedded arrays. </li>
			<li><xref href="stringops.dita"></xref> to concatenate two expressions.</li>
		</ul>
		<section><title>Operator Precedence</title>
			<p>N1QL supports the use of parentheses to group operators and expressions. Expressions enclosed
				in parentheses are evaluated first. </p>
			<p>The following table shows operator precedence level. An operator at a higher level is
				evaluated before an operator at a lower level.</p>
			<table>
				<tgroup cols="2"><colspec colname="1" colwidth="1445*"/>
					<colspec colname="2" colwidth="7385*"/>
					<tbody><row><entry>
						<p >Evaluation Order</p></entry><entry>
							<p >Operator</p></entry></row>
						<row><entry><p >1</p></entry><entry>
							<p >CASE</p></entry></row>
						<row><entry><p >2</p></entry><entry>
							<p >. (period)</p></entry></row>
						<row><entry><p >3</p></entry>
							<entry><p >[ ] (left and right bracket) </p></entry></row>
						<row><entry><p >4</p></entry>
							<entry><p >- (unary)</p></entry></row>
						<row><entry><p >5</p></entry>
							<entry><p >* (multiply), / (divide), % (modulo)</p></entry></row>
						<row><entry><p >6</p></entry>
							<entry><p >+, - (binary)</p></entry></row>
						<row><entry><p >7</p></entry>
							<entry><p >IS</p></entry></row>
						<row><entry><p >8</p></entry>
							<entry><p >IN</p></entry></row>
						<row><entry><p >9</p></entry>
							<entry><p >BETWEEN</p></entry></row>
						<row><entry><p >10</p></entry>
							<entry><p >LIKE</p></entry></row>
						<row><entry><p >11</p></entry>
							<entry><p >&lt; (less than, &lt;= (less than or equal to, &gt; (greater than), and =&gt; (equal to or greater than)</p></entry></row>
						<row><entry><p >12</p></entry>
							<entry><p >= (equal to) , == (equal to), &lt;&gt; (less than or greater than), != (not equal to)</p></entry></row>
						<row><entry><p >13</p></entry>
							<entry><p >NOT</p></entry></row>
						<row><entry><p >15</p></entry>
							<entry><p >AND</p></entry></row>
						<row><entry><p >16</p></entry>
							<entry><p >OR</p></entry></row></tbody></tgroup></table>
		</section>
	</conbody>


</concept>
