<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_mrs_vfk_np">
 <title>SELECT statement syntax</title>

 <conbody>
 <p><i>select:</i></p>
 

  <codeblock>subselect [ set-op ([ALL] )  subselect]* [order-by-clause] [limit-clause]  [offset-clause]
  </codeblock>
  
  <p><i>set-op:</i></p>
<codeblock>UNION | INTERSECT | EXCEPT
</codeblock>

  <p><i>subselect:</i></p>
  <codeblock>select-from | from-select
  </codeblock>
  
  <p><i>select-from:</i></p>
  <codeblock>select-clause [from-clause] [let-clause] [where-clause] [group-by-clause] 
  </codeblock>
  
  <p><i>from-select:</i></p>
  <codeblock>from-clause [let-clause] [where-clause] [group-by-clause] select-clause  
  </codeblock>
  
  <p><b>SELECT Clause</b></p>
  <p><i>select-clause:</i></p>
  <codeblock>SELECT ( [ALL | DISTINCT]  ( result-expression [, result-expression]*) | 
    (RAW | ELEMENT) expression)
  </codeblock>
  
  <p><i>result-expression:</i></p>
  <codeblock>[(path .)] * | expression [ ([AS] alias) ]
  </codeblock>
  
  <p><i>path:</i></p>
  <codeblock>identifier [<b>[</b> expression <b>]</b>]  [. path]  
  </codeblock>
  
  <p><i>alias:</i></p>
  <codeblock>identifier
  </codeblock>
  
  <p><b>FROM clause</b></p>
  <p><i>from-clause:</i></p>
  <codeblock>FROM from-term
  </codeblock>
  
  <p><i>from-term:</i></p>
  <codeblock>from-path [([AS] alias)] [use-keys-clause] | from-term join-clause | from-term nest-clause | from-term unnest-clause 
  </codeblock>
  
  <p><i>from-path:</i></p>
  <codeblock>[(namespace :)] path
  </codeblock>
  
  <p><i>namespace:</i></p>
  <codeblock>identifier
  </codeblock>
  
  <p><i>use-keys-clause:</i></p>
  <codeblock>USE [PRIMARY] KEYS expression
  </codeblock>
  
  <p><i>join-clause:</i></p>
  <codeblock>[join-type] JOIN from-path [( [AS] alias) ] on-keys-clause  
  </codeblock>
  
  <p><i>join-type:</i></p>
  <codeblock>INNER | LEFT [OUTER]
  </codeblock>

  <p><i>on-keys-clause:</i></p>
  <codeblock>ON [PRIMARY] KEYS expression
  </codeblock>

  <p><i>nest-clause:</i></p>
  <codeblock>[join-type] NEST from-path [ ( [AS] alias) ] on-keys-clause 
  </codeblock>
  
  <p><i>unnest-clause:</i></p>
  <codeblock>[join-type] [UNNEST | FLATTEN] expression [ ( [AS] alias) ]
  </codeblock>
  
  <p><b>LET clause</b></p>
  <codeblock>LET (alias = expression) [, (alias = expression)]*
  </codeblock>

  <p><b>WHERE clause</b></p>
  <p><i>where-clause:</i></p>
  <codeblock>WHERE condition
  </codeblock>
  
  <p><i>cond:</i></p>
  <codeblock>expression 
  </codeblock>
  
  
  <p><b>GROUP BY clause</b></p>
  <p><i>group-by-clause:</i></p>
  <codeblock>GROUP BY expression [ , expression ]* [ letting-clause ] 
    [having-clause] ] | [letting-clause] 
  </codeblock>
  
  <p><i>letting-clause:</i></p>
  <codeblock>LETTING  alias = expression [(, alias = expression) ]*
  </codeblock>
  
  <p><i>having-clause:</i></p>
  <codeblock>HAVING condition
  </codeblock>
 
  <p><b>ORDER BY clause</b></p> 
  <p><i>order-by-clause:</i></p>
  <codeblock>ORDER BY ordering-term [, ordering-term]* 
  </codeblock>
  
  <p><i>ordering-term:</i></p>
  <codeblock>expression [ASC | DESC]
  </codeblock>
  
  <p><b>LIMIT clause</b></p>
  <codeblock>LIMIT expression
  </codeblock>
  
  <p><b>OFFSET clause</b></p>
  <codeblock>OFFSET expression 
  </codeblock>






 </conbody>
</concept>
