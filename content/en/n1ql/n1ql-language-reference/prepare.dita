<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_11_4_2" xml:lang="en-US">
  <title>PREPARE</title>
  <conbody >
    <section> <title>PREPARE statement</title>
      <p><i>prepare:</i></p>
      <codeblock> PREPARE [ name ( FROM | AS ) ] statement </codeblock>
      <p>The PREPARE statement prepares a query. A name can optionally be specified. A JSON array is returned that contains one result that has the properties: <ul>
        <li><parmname>name</parmname>: If present, this will be the name given to the PREPARE
            statement. If not, a name is generated. </li>
        <li><parmname>operator</parmname>: the execution plan of the statement being prepared.</li>
        <li><parmname>signature</parmname>: the signature of the statement being prepared. </li>
        <li><parmname>text</parmname>: the full PREPARE statement text.</li>
        <li><parmname>encoded_plan</parmname>: the full prepared statement in encoded format. The encoded plan can be included in addition to the prepared parameter in a request to execute a prepared statement. If the name given by the prepared parameter is unrecognized, the query engine will decode and execute the prepared statement given by the <parmname>encoded_plan</parmname> parameter. The decoded prepared statement will be saved by the query engine so the next request that uses its name will succeed.</li>
      </ul></p>
      <p>Repeatedly preparing a statement with the same name will result in the statement being
        overwritten. A PREPARE statement that uses a name that was used for a different statement
        will result in a duplicate name error. </p>
      <p>Prepared statements are stored in memory until you restart the Couchbase Server. After
        restarting the server, you must prepare the statements again before you can execute the
        prepared statements.  </p>
      <p>For information on how to use prepared statements with various SDK, refer to the SDK
        documentation. For example, see <xref href="../../sdks/dotnet-2.2/prepared-statements.dita">Using prepared statements</xref> with .NET SDK.</p>
    </section>
    
    <section><title>EXECUTE statement</title>
      <!--<p><i>execute:</i></p>
      <codeblock> EXECUTE mexpr [ USING mexpr [ , mexpr ]* ] </codeblock>
      <p><i>mexpr</i></p>
      <codeblock>expression | rcvexpr | first</codeblock>
      <p><i>rcvexpr</i></p>
      <codeblock> &lt;- mexpr </codeblock>
      <p><i>first</i></p>
      <codeblock>'FIRST' cursor</codeblock>
      <p><i>cursor</i></p>
      <codeblock>query | execute </codeblock>
      <p><i>query </i></p>
      <codeblock>select | dml-stmt </codeblock>-->
      <p>The EXECUTE statement executes a prepared statement. When specified, the name should
        identify a prepared statement. An error is returned if the name does not identify a prepared
        statement. When specified, the <parmname>encoded_plan</parmname> should be the result of a
        prepared statement. An error is returned if the <parmname>encoded_plan</parmname> cannot be
        converted to a prepared statement.</p>
    </section>
    
    <section><title>Examples</title>
      <b>Prepared statement without a name</b>
      <p>The following example shows how to prepare the statement without specifying a name.</p><codeblock spectitle="Request:">$ curl -v http://localhost:8093/query/service \
-d 'statement=PREPARE SELECT text FROM tweets WHERE rating > $r AND created_at > $date'    </codeblock>
      <codeblock spectitle="Response">&lt; HTTP/1.1 200 OK
{
  "requestID": "a339a496-7ed5-4625-9c64-0d7bf584a1bd",
  "signature": "json",
  "results": [
  {  "encoded_plan": "H4sIAAAJbogA/5yRQU/6QBDFvwpZ/gdIIAAA==",
    <b>"name": "a1355198-2576-4e3d-af04-5acc77d8a681"</b>,
     "operator": {
            "#operator": "Sequence",
            "~children": [
            // Content redacted
            ]
            },
     "signature": {
     "text": "json"
  },
  "text": "PREPARE SELECT text FROM tweets WHERE rating > $r AND created_at > $date"
  }
  ],
  "status": "success",
  "metrics": {
  "elapsedTime": "1.970679ms",
  "executionTime": "1.889351ms",
  "resultCount": 1,
  "resultSize": 2261
 }
}</codeblock>
      <p>The following example uses the server-generated name of the prepared statement to execute
        the statement.</p><codeblock spectitle="Request:">$ curl -v http://localhost:8093/query/service -d <b>'prepared="a1355198-2576-4e3d-af04-5acc77d8a681"</b>&amp;$r=9.5&amp;$date="1-1-2014"'</codeblock>
      <codeblock spectitle="Response:">&lt; HTTP/1.1 200 OK
{
 "requestID": "1bd9956b-bc8e-478a-bd84-3955fe2db047",
 "signature": {
 "text": "json"
 },
 "results": [
 {
  "text": "Couchbase is my favorite database"
 }
 ],
 "status": "success",
 "metrics": {
 "elapsedTime": "1.527795ms",
 "executionTime": "1.443748ms",
 "resultCount": 0,
 "resultSize": 0
 }
}
$          </codeblock>
      <p><b>Specifying a name for the prepared statement</b></p><p>The following example specifies a
          <parmname>name</parmname> for the prepared statement.</p><codeblock spectitle="Request:">$ curl -v http://localhost:8093/query/service \
-d 'statement=PREPARE <b>fave_tweets</b> FROM SELECT text FROM tweets WHERE rating >= $r'
      </codeblock>
      <codeblock spectitle="Response:">&lt; HTTP/1.1 200 OK
 {
        "requestID": "a339a496-7ed5-4625-9c64-0d7bf584a1bd",
        "signature": "json",
        "results": [
        {   "encoded_plan": "H4sIAAAJbogA/5yRQU/6QBDFvwpZ/gdIIAAA==",
        <b>"name": "fave_tweets"</b>,
        "operator": {
        // and so on
        ...
     </codeblock>
      <p>The following example uses the <parmname>name</parmname> specified in the example above to
        run the prepared statement.</p><codeblock spectitle="Request:">$ curl -v http://localhost:8093/query/service -d '<b>prepared="fave_tweets"</b>&amp;$r=9.5'      </codeblock>
      <codeblock spectitle="Response">&lt; HTTP/1.1 200 OK
{
 "requestID": "1bd9956b-bc8e-478a-bd84-3955fe2db047",
 "signature": {
 "text": "json"
 },
 "results": [
 {
   "text": "Couchbase is my favorite database"
  }
  ],
 "status": "success",
 "metrics": {
 "elapsedTime": "1.527795ms",
 "executionTime": "1.443748ms",
 "resultCount": 0,
 "resultSize": 0
 }
 }
$      </codeblock>
      <p><b>Specifying the name and the <parmname>encoded_plan</parmname></b></p><p>The following
        example specifies a <parmname>name</parmname> for the prepared statement and the response
        includes an <parmname>encoded_plan</parmname>.</p><codeblock spectitle="Request:">$ curl -v http://localhost:8093/query/service \
-d 'statement=PREPARE <b>fave_tweets</b> FROM SELECT text FROM tweets WHERE rating >= $r'    </codeblock>
      <codeblock spectitle="Response:">&lt; HTTP/1.1 200 OK
{
  "requestID": "a339a496-7ed5-4625-9c64-0d7bf584a1bd",
  "signature": "json",
  "results": [
  {   <b>"encoded_plan": "H4sIAAAJbogA/5yRQU/6QBDFvwpZ/gdIIAAA=="</b>,
        "name": "fave_tweets",
        "operator": {
        // and so on
        ...</codeblock>
      The following example uses the <parmname>name</parmname> and <parmname>encoded_plan</parmname>
      from the example above to run the prepared statement. <codeblock spectitle="Request">$ curl -v http://localhost:8093/query/service -H "Content-Type: application/json" -d  \
'{ "prepared":"fave_tweets", <b>"encoded_plan":"H4sIAAAJbogA/5yRQU/6QBDFvwpZ/gdIIAAA=="</b>, "$r":9.5 }' </codeblock>
      <codeblock spectitle="Response">&lt; HTTP/1.1 200 OK
{
 "requestID": "1bd9956b-bc8e-478a-bd84-3955fe2db047",
 "signature": {
 "text": "json"
 },
 "results": [
  {
   "text": "Couchbase is my favorite database"
   }
   ],
  "status": "success",
  "metrics": {
  "elapsedTime": "1.527795ms",
  "executionTime": "1.443748ms",
  "resultCount": 0,
  "resultSize": 0
   }
 }
$</codeblock>
    </section>
    
    
  </conbody>
</concept>
