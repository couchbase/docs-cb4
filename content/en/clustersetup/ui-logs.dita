<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic xml:lang="en-us" id="topic180">
  <title>Using Logs</title>
  <shortdesc>Logs allow you to identify activity and errors within the Couchbase
    cluster.</shortdesc>
  <body>
    <section><title>Collect Log Information  </title><p>From the main Couchbase Web Console screen
        select the Log tab. Two sub-tabs are available: Logs and Collect Information.</p><p>The Logs
        tab displays available logs by the Event, Module Code, Server Node, and Time. </p>
      <image href="../admin/picts/logs-tab.png" id="image_hwn_lnn_ht" align="left" width="720"/>
      <p>The Collection Information tab enables you to collect logs and diagnostic information from
        either all nodes or selected nodes in a cluster. You can also upload the collected logs
        directly to Couchbase Support with your data (customer name, ticket number) for easy
        tracking. </p>
      <image href="../images/ui-log-collect-info.png" width="720"/>
    </section>
    <section id="logtypes"><title>Log Types</title>
      <p>Couchbase Server creates a number of different log files depending on the components of the system that produce the error and the level and severity of the reported problem.</p>  
      <table>
        <tgroup cols="2">
          <colspec colname="col1" colwidth="1*"/>
          <colspec colname="col2" colwidth="6*"/>
          <thead>
            <row>
              <entry>Platform</entry>
              <entry>Location</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Linux</entry>
              <entry><filepath>/opt/couchbase/var/lib/couchbase/logs</filepath></entry>
            </row>
            <row>
              <entry>Windows</entry>
              <entry><filepath>C:\Program
                Files\Couchbase\Server\var\lib\couchbase\logs</filepath> <p>Assumes
                  default installation location</p></entry>
            </row>
            <row>
              <entry>Mac OS X</entry>
              <entry><filepath>/Users/couchbase/Library/Application
                Support/Couchbase/var/lib/couchbase/logs</filepath>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <p>The table below summarizes the log files for the different components in Couchbase.</p>
      <table><title>Couchbase log files for various components</title>
        <tgroup cols="2">
          <colspec colname="col1" colwidth="1*"/>
          <colspec colname="col2" colwidth="4*"/>
          <thead>
            <row>
              <entry>File</entry>
              <entry>Log Contents</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><codeph>audit</codeph></entry>
              <entry>Security auditing for administrators.</entry>
            </row>
            <row>
              <entry><codeph>babysitter</codeph></entry>
              <entry>The <codeph>babysitter</codeph> process log captures when 
                the larger processes are spawned for cluster management, 
                cross data center replication, views, query, and N1QL.</entry>
            </row>
            <row>
              <entry><codeph>couchdb</codeph></entry>
              <entry>Errors relating to the CouchDB subsystem that supports views, indexes, and related REST
                API issues.</entry>
            </row>
            <row>
              <entry><codeph>debug</codeph></entry>
              <entry>Debug level error messages related to the core server management
                subsystem, excluding information included in the
                <codeph>couchdb</codeph>, <codeph>xdcr</codeph> and
                <codeph>stats</codeph> logs.</entry>
            </row>
            <row>
              <entry><codeph>error</codeph></entry>
              <entry>Error level messages for all subsystems excluding
                cross datacenter replication.</entry>
            </row>
            <row>
              <entry><codeph>goxdcr</codeph></entry>
              <entry>Log messages related to Cross Datacenter Replication (XDCR) written in Go.</entry>
            </row>
            <row>
              <entry><codeph>http_access.log</codeph></entry>
              <entry>The admin access log records server requests (including administrator logins) 
                to the REST API or Couchbase Server web console. It is output in 
                common log format and contains several important fields such as remote client IP, 
                timestamp, GET/POST request and resource requested, HTTP status code, and so on.</entry>
            </row>
            
            <row>
              <entry><codeph>info</codeph></entry>
              <entry>Information level error messages related to the core server
                management subsystem, excluding information included in the
                CouchDB, cross datacenter replication, and stats logs.
              </entry>
            </row>
            <row>
              <entry><codeph>mapreduce_errors</codeph></entry>
              <entry>JavaScript and other view-processing errors are reported in this
                file.</entry>
            </row>
            <row>
              <entry><codeph>memcached.log</codeph></entry>
              <entry>Contains information relating to the core memcached component,
                including vBucket and replica and rebalance data streams requests.
              </entry>
            </row>
            <row>
              <entry><codeph>ns-couchdb</codeph></entry>
              <entry>Contains information related to starting up the CouchDB subsystem.</entry>
            </row>
            <row>
              <entry><codeph>Projector</codeph></entry>
              <entry>Contains information for the projector process that runs on each KV node and sends
                requested index data to the index nodes.</entry>
            </row>
            <row>
              <entry><codeph>reports.log</codeph></entry>
              <entry>Contains only progress report and crash reports for the Erlang
                processes. </entry>
            </row>
            
            <row>
              <entry><codeph>ssl_proxy</codeph></entry>
              <entry></entry>
            </row>
            
            
            <row>
              <entry><codeph>crash-log.bin</codeph></entry>
              <entry>Used to pass service crash reports from the babysitter to the
                <codeph>ns_server</codeph>. For example, if the
                <codeph>ns_server</codeph> is available, any crash of the
                babysitter's child is passed directly to the special crash logger
                service within the <codeph>ns_server</codeph>. If the logger service is
                not attached to the babysiter, then the babysitter saves that crash
                report to the disk and the <codeph>ns_server</codeph> can later obtain
                and log it even if the babysitter is restarted.</entry>
            </row>
            <row>
              <entry><codeph>stats</codeph></entry>
              <entry>Contains periodic reports of the core statistics.</entry>
            </row>
            <row>
              <entry><codeph>tmpfail</codeph></entry>
              <entry>For XDCR, the destination cluster is not able to eject items fast
                enough to make room for new mutations. XDCR retries several times,
                without throwing errors, but after a fixed number of attempts the errors
                are shown to the user. Nevertheless, if a user waits long enough, XDCR
                eventually retries and can replicate the remaining data.</entry>
            </row>
            <row>
              <entry><codeph>views</codeph></entry>
              <entry>Errors relating to the integration of the view system and the core
                server subsystem.</entry>
            </row>
            <row>
              <entry><codeph>xdcr</codeph></entry>
              <entry>Log messages related to starting up the cross datacenter replication subsystem.</entry>
            </row>
            <row>
              <entry><codeph>xcdr_trace</codeph></entry>
              <entry>Cross datacenter replication trace messages</entry>
            </row>
            
            
          </tbody>
        </tgroup>
      </table>
      
      <p>Some logs are automatically rotated after a certain fixed size. For example, individual log files are automatically 
        numbered with the number suffix incremented for each new log, and with a maximum of 20 files per log. 
        Individual log file sizes are limited to 10MB by default.</p>
      
      <p>For other logs, when a log file reaches 40MB it will be rotated and compressed. 
        The file will keep 5 rotations (the current rotation plus four compressed rotations). Here is an example list of log files: 			
      </p>
      <codeblock>-rw-rw---- 1 couchbase couchbase 12M Feb 2 16:15 couchdb.log 
        -rw-rw---- 1 couchbase couchbase 4.8M Feb 2 16:13 couchdb.log.1.gz 
        -rw-rw---- 1 couchbase couchbase 4.5M Jan 30 17:35 couchdb.log.2.gz 
        -rw-rw---- 1 couchbase couchbase 3.9M Jan 30 17:34 couchdb.log.3.gz 
        -rw-rw---- 1 couchbase couchbase 5.7M Jan 30 17:30 couchdb.log.4.gz 
      </codeblock>
      <p>In this list, the oldest file has the largest number.</p>
      
      <p>To provide custom rotation settings for each component, use the following : 		</p>
      <codeblock>{disk_sink_opts_disk_debug, 
        [{rotation, [{size, 10485760}, 
        {num_files, 10}]}]}.</codeblock>
      
      <p>This will rotate the debug.log at 10M and keep 10 copies of the log (the current log and 9 compressed logs).
      </p>
      
      
    </section>
    <section id="managinglogs"><title>Managing Logs</title>
      <sectiondiv id="change-loglocation"><b>Changing log file location</b>
  The default file log location is /opt/couchbase/var/lib/couchbase/logs, however, if you
            want to change the default log location to a different directory, change the log file
            configuration option. <note type="note">To implement a log file location change (from
              the default), you must be log in as either root or sudo and the Couchbase service must
              be restarted. </note><p>To change the log file configuration:</p><ol>
              <li>Log in as root or sudo and navigate to the directory where you installed
                Couchbase. For example:
                <codeph>/opt/couchbase/etc/couchbase/static_config</codeph></li>
              <li>Edit the static_config file and change the <codeph>error_logger_mf_dir</codeph>
                variable to a different directory. For example: <codeph>{error_logger_mf_dir,
                  "/home/user/cb/opt/couchbase/var/lib/couchbase/logs"}</codeph></li>
              <li>Restart the Couchbase service. After restarting the Couchbase service, all
                subsequent logs will be in the new directory.</li>
            </ol>
      </sectiondiv>
      <sectiondiv id="change-loglevel"><b>Changing logging levels</b> The default logging level for
        all log files are set to debug except for couchdb, which is set to info. If you want to
        change the default logging level, modify the logging level configuration options. <p>The
          configuration change can be performed in one of the following ways:</p><ul>
          <li>persistent</li>
          <li>dynamic (on the fly, without restarting). </li>
        </ul><dl>
          <dlentry>
            <dt>Changing logging levels to be persistent</dt>
            <dd>Logging levels can be changed so that the changes are persistent, that is, the
              changes continue to be implemented should a Couchbase Server reboot occur. <note
                type="note">To implement logging level changes, the Couchbase service must be
                restarted.</note><p>To change logging levels to be persistent:</p><ol>
                <li>Log in as root or sudo and navigate to the directory where you installed
                  Couchbase. For example:
                    <codeph>/opt/couchbase/etc/couchbase/static_config</codeph></li>
                <li>Edit the <b>static_config</b> file and change the desired log component. For
                  example, parameters with the <codeph>loglevel_</codeph> prefix set the logging
                  level.</li>
                <li>Restart the Couchbase service. </li>
              </ol><p>After restarting the Couchbase service, logging levels for that component will
                be changed.</p></dd>
          </dlentry>
        </dl><dl>
          <dlentry>
            <dt>Changing logging levels dynamically</dt>
            <dd>If logging levels are changed dynamically and if a Couchbase server reboot occurs,
              then the changed logging levels revert to the default. <p>To change logging levels
                dynamically, execute a curl POST command using the following
                syntax:</p><codeblock>curl -X POST -u adminName:adminPassword HOST:PORT/diag/eval 
-d ‘ale:set_loglevel(&lt;log_component&gt;,&lt;logging_level&gt;).’        </codeblock><p>Where:</p><dl>
                <dlentry>
                  <dt>Log_component</dt>
                  <dd>The default log level (except <codeph>couchdb</codeph>) is
                      <codeph>debug</codeph>; for example <codeph>ns_server</codeph>. The available
                    loggers are <codeph>ns_server</codeph>, <codeph>couchdb</codeph>,
                      <codeph>user</codeph>, <codeph>Menelaus</codeph>, <codeph>ns_doctor</codeph>,
                      <codeph>stats</codeph>, <codeph>rebalance</codeph>, <codeph>cluster</codeph>,
                    views, <codeph>mapreduce_errors</codeph> , xdcr and
                      <codeph>error_logger.</codeph></dd>
                </dlentry>
                <dlentry>
                  <dt>Logging_level</dt>
                  <dd>The available log levels are <codeph>debug</codeph>, <codeph>info</codeph>,
                      <codeph>warning</codeph>, and <codeph>error</codeph>. </dd>
                </dlentry>
              </dl><p>
                <codeblock>curl -X POST -u Administrator:password http://127.0.0.1:8091/diag/eval 
    -d 'ale:set_loglevel(ns_server,error).     </codeblock>
              </p></dd>
          </dlentry>
        </dl>
      </sectiondiv></section>
    <section><title>Collect Logs with CLI or REST API</title>
    <sectiondiv><b>Using CLI commands</b>
        <p>You can use the CLI command <xref
            href="../cli/cbcollect-info-tool.dita#cbcollect-info-tool">cbcollect_info</xref>, which
          is one of the most important diagnostic tools used by Couchbase technical support.
          </p><p>The other three CLI commands you can use to start and stop log collection and to
          read the log collection status: <ul>
            <li><xref href="../cli/cbcli/collect-logs-start.dita#reference_xd5_mm5_ls"
                >collect-logs-start</xref></li>
            <li><xref href="../cli/cbcli/collect-logs-stop.dita#reference_cqx_4m5_ls"
                >collect-logs-stop</xref></li>
            <li><xref href="../cli/cbcli/collect-logs-status.dita#reference_ufl_rm5_ls"
                >collect-logs-status</xref></li>
          </ul></p></sectiondiv>
        
        
     <sectiondiv><b>Using REST API</b>
        <p>The Logs REST API provides the REST API endpoints for retrieving log and diagnostic
          information as well as how an SDK can add entries into a log. </p><p>To retrieve log
          information use the <codeph>/diag </codeph>and <codeph>/sasl_logs</codeph>
          <xref href="../rest-api/rest-logs-api.dita#reference_rest_logs">REST
          endpoints</xref>.</p><p>To create client logs use <xref
            href="../rest-api/rest-client-logs.dita#reference_gv3_fs4_hp">client
        logs</xref>.</p></sectiondiv>
        
        
      </section>
      
 
    
  </body>
</topic>
