<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_ihy_ddy_w5">
  <title>Memory-Optimized Global Indexes</title> 
  <shortdesc>Memory optimized global secondary indexes is an additional storage setting for Couchbase Server clusters. Memory optimized global secondary indexes (also called memory optimized indexes or MOI) can perform index maintenance and index scan faster at in-memory speeds. 
  </shortdesc>
  <body>
    <section><title>Enabling Memory-Optimized Global Indexes</title>
      <p>By default, Couchbase Server uses standard global secondary indexes storage setting with the circular write mode for all indexes. In this release, standard vs memory optimized storage settings apply to all indexes in the cluster and cannot be mixed within a single cluster. At the time of the clusterâ€™s initial setup, storage setting can be switched to memory optimized GSI setting. 
      <note>Changing the storage setting from standard GSI to memory optimized GSI or visa versa cannot be done online in a single cluster. Changing the storage setting for GSI requires removing all index service nodes in the cluster.</note>
      <note>Regardless of the GSI storage setting, standard GSI ve memory optimize GSI, it is still possible to create indexes using GSI or view during CREATE INDEX statement with the USING clause.</note>
    </p></section>
    <section><title>Memory Optimized Global Secondary Index Performance</title>
      <p>There are several performance advantages to using memory optimized global secondary indexes: MOIs use skiplist, a memory efficient index structure for a lock-free index maintenance and index scan. Lock-free architecture increase concurrency of index maintenance and index scans. This enhances the index maintenance rate by more than an order of magnitude under high mutation rates. Skiplist based indexes take up less space in memory. Memory optimized indexes can also provide a much more predictable latency with queries as they never reach into disk for index scans. </p>
      <p>MOIs use ForestDB for storing a snapshot of the index on disk. However writes to storage are done purely for crash recovery and is not in the critical path of latency of index maintenance or index scans. The snapshots on disk is used to avoid rebuilding the index when a node experiences failure. Building the index from the snapshot on disk, minimizes the impact of index node failures on the data service nodes.</p>
      <p>In short, MOIs completely run at in-memory speeds and performs an order of magnitude faster in several cases compared to standard global secondary indexes.</p>
      <p>With memory optimized global secondary indexes, it is important to monitor memory usage over time. Memory optimized indexes have to reside in memory. Indexes on a given node will stop processing further mutations, if the node runs out of index RAM quota. The index maintenance is paused until RAM Quota becomes available on the node. There are two important metrics you need to monitor to detect the issues: <ul>
        <li>MAX Index RAM Used %: Reports the max ram quota used in percent (%) through the cluster and on each node both realtime and with a history over minutes, hours, days, weeks and more. </li>
        <li>Remaining Index RAM: Reports the free index RAM quota for the cluster as a total and on each node both realtime and with a history over minutes, hours, days weeks and more. </li></ul></p>
      <p>If a node is approaching high percent usage of Index RAM Quota, it is time to take action. <ul>
        <li>You can either increase the RAM quota for the index service on the node to give indexes more RAM. </li>
        <li>You can also place some of the indexes on the node in other nodes with more RAM available.</li></ul></p>
      <p>It is also important to understand other resource utilization beyond RAM. You can monitor
        the resource usage for the index nodes through Web Console and pick the nodes that can house
        your next index. <fig id="fig_ccd_b1b_vv">
          <title>Monitor Resource Usage for Index Nodes</title>
          <image placement="break" href="../indexes/images/moi-index-resource-usage.png" width="570"
            id="image_dcd_b1b_vv"/>
        </fig></p>
      <p>There are also per-index statistics that can help identify the item counts, disk/snapshot
        and data size and more individual statistics for an index for memory optimized indexes.<fig
          id="fig_xzy_wz1_vv">
          <title>Per-index Statistics</title>
          <image placement="break" href="../indexes/images/moi-per-index-stats.png" width="400"
            id="image_yzy_wz1_vv"/>
        </fig></p>
      <p>Aside from the performance characteristics, the mechanics of creating, placing, load balancing, partitioning and HA behavior is identical in both standard and memory optimized global secondary indexes. </p>
    </section>
    
  </body>
</topic>
