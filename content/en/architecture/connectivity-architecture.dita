<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_xh5_l3j_vs">
 <title>Connectivity Architecture</title>
 <shortdesc>Couchbase Server is a fully distributed database, making connection management and efficient communication key components of the architecture. This section provides information about client to cluster, node to node, cluster to cluster, and cluster to external products communications.</shortdesc>
 <conbody>
  <section id="section-client-2-cluster-comm"><title>Client to Cluster Communication</title> Client
   applications communicate with Couchbase Server through a set of access points tuned for the data
   access category such as CRUD operations, N1QL queries, and so on. Each access point supports
   clear text and encrypted communication ports. <p> There are four main types of access points that
    drive the majority of client to server communications. </p><table frame="all" rowsep="1"
    colsep="1" id="table_yph_ppc_ws">
    <title>Communication ports</title>
    <tgroup cols="4">
     <colspec colname="c1" colnum="1" colwidth="1.0*"/>
     <colspec colname="c2" colnum="2" colwidth="1.0*"/>
     <colspec colname="c3" colnum="3" colwidth="1.0*"/>
     <colspec colname="c4" colnum="4" colwidth="1.0*"/>
     <thead>
      <row>
       <entry>Type</entry>
       <entry>Port</entry>
       <entry>API</entry>
       <entry/>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>REST</entry>
       <entry>8091, 18091 (SSL)</entry>
       <entry>Admin operations with the REST Admin API</entry>
       <entry>Direct Connect to a single node in the cluster to perform admin operations,
        monitoring, and alerting.</entry>
      </row>
      <row>
       <entry>REST</entry>
       <entry>8092, 18092 (SSL)</entry>
       <entry>Query with View (View and Spatial View API)</entry>
       <entry>Load balanced connection across nodes of the cluster that run the data service for
        View queries.</entry>
      </row>
      <row>
       <entry>REST</entry>
       <entry>8093, 18093 (SSL)</entry>
       <entry>Query with N1QL (N1QL API)</entry>
       <entry>Load balanced connection across nodes of the cluster that run the query service for
        N1QL queries.</entry>
      </row>
      <row>
       <entry>ONLINE</entry>
       <entry>11210, 11207 (SSL)</entry>
       <entry>Core Data operations</entry>
       <entry>Stateful connections from client app to nodes of the cluster that runs data service
        for CRUD operations.</entry>
      </row>
      <row>
       <entry>REST</entry>
       <entry>8094, 18094 (SSL)</entry>
       <entry>Search Service (Developer Preview)</entry>
       <entry>Load balanced connections across nodes of the cluster that run the search service for
        full text search queries.</entry>
      </row>
     </tbody>
    </tgroup>
   </table><p>For information on how a connection is established when a request from the client side
    is received, see <xref href="connection-phases.dita"/>.</p></section>
  <section><title>Node to Node Communication</title> Nodes of the cluster communicate with each
   other to replicate data, maintain indexes, check health of nodes, communicate changes to the
   configuration of the cluster, and much more. <p>Node to node communication is optimized for high
    efficiency operations and may not go through all the connectivity phases (authentication,
    discovery, and service connection). For more information about connectivity phases, see <xref
     href="#concept_xh5_l3j_vs/section-client-2-cluster-comm" format="dita"/>. </p></section>
  <section><title>Cluster to Cluster Communication</title> Couchbase Server clusters can communicate
   with each other using the Cross Datacenter Replication (XDCR) capability. <p>XDCR communication
    is set up from a source cluster to a destination cluster. For more information, see <xref
     href="cross-datacenter-replication.dita">Cross Datacenter Replication</xref>. </p></section>  
  <section><title>External Connector Communication</title> Couchbase Server also communicates with
   external products through connectors. <p>Couchbase has built and supports connectors for Spark,
    Kafka, Elasticsearch, SOLR, and so on. For more information about the connectors built by Couchbase, see <xref href="../connectors/intro.dita"></xref>. The community and other companies have also
    built more connectors for ODBC driver, JDBC driver, Flume, Storm, Nagios connectors for
    Couchbase, and so on. External connectors are typically built using the existing client SDKs, the
    direct service or admin APIs listed in the client to cluster communication section, or feed
    directly from the internal APIs such as the Database Change Protocol (DCP) API. For more
    information about Database Change Protocol, see <xref href="intra-cluster-replication.dita">
     Intra-cluster replication</xref>.</p>
  </section>
 </conbody>
</concept>
