<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_gv3_znv_vs">
 <title>Couchstore versus ForestDB</title>
 <shortdesc>Couchbase Server uses multiple storage engines to optimize specific I/O patterns required by the services. Couchstore is used for storage under data service for both database engine and for view engine. ForestDB is used by the index service for storage of global secondary indexes.</shortdesc>
 <conbody>
   <p>There are a few similarities between Couchstore and ForestDB. <ul>
    <li>Both use an append-only write approach.</li>
    <li>Both storage engines perform compression using the Snappy library when persisting.</li>
    <li>Both storage engines require compaction to periodically clean up orphaned pages. </li>
   </ul>  
  </p>
  <p>There are a few important differences between Couchstore and ForestDB. <ul>
   <li><b>Tree Structure</b>: Unlike Couchstore, ForestDB does not maintain a B+tree structure. ForestDB uses an optimized tree structure called B+Trie. B+Trie can handle large keys much more efficiently. This helps in cases where a large set of attributes or a single large attribute in the document need to be indexed. B+tree with large index keys can end up with many levels in the tree. The depth of the tree impacts the write amplification and access times to get to the leaf of the tree during scans. With a B+Trie, the same key size can achieve much shallower tree structure reducing both write amplification and retrieval times.</li>
   <li><b>Caching</b>: Unlike Couchstore, ForestDB maintain its own cache. This cache holds the mutations before they are persisted to disk.</li>
  </ul>
  </p>
 </conbody>
</concept>
