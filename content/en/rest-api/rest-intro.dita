<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_d3j_g5d_54">
  <title>REST API reference</title>
  <shortdesc>The Couchbase Server REST API enables you to manage a Couchbase Server deployment 
    as well as perform operations such as storing design documents and querying for results.</shortdesc>
  <body>
    
    <p>Use the REST API to manage clusters, server nodes, and buckets, and to retrieve run-time statistics within a Couchbase Server deployment. </p>
    <section>
      <title>Description</title>
      <p>When developing a Couchbase Server-compatible SDK, the REST API is used within your library
        to handle views. Views enable you to index and query data based on functions that you
        define. </p>
      
      <note type="tip">The REST API should <b>not</b> be used to read or write data to the
        server. Data operations, such as <codeph>set</codeph> and <codeph>get</codeph> are
        handled by Couchbase Server SDKs. </note>
      
      <p>In addition, the Couchbase Web Console uses REST API endpoints for administrative tasks,
        such as creating a new bucket, adding a node to a cluster, or changing cluster settings.</p>
      
      <p>Build your request starting from Couchbase Server cluster URIs. Be aware that URIs for
        resources may change from version to version. The URI hierarchies facilitate reuse of
        requests because they follow a similar pattern for accessing different parts of the
        system.</p>
    </section>
    
    <section><title>Basic principles</title>
      <p>The Couchbase Server REST API is built on the following basic principles:</p>
      
      <dl>
        <dlentry>
          <dt>JSON Responses</dt>
          <dd>The Couchbase Server REST API returns many responses as JavaScript Object
            Notation (JSON). On that note, you may find it convenient to read responses with a tool
            that specifically parses and formats JSON output. Some responses may have an empty body,
            but indicate the response with standard HTTP codes. For more information, see RFC 4627
            at www.json.org.</dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>HTTP Basic Access Authentication</dt>
          <dd>The Couchbase Server REST API, web console user interface, and command line utilities
            all use HTTP basic authentication.</dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>Versatile Server Nodes</dt>
          <dd>All server nodes in a cluster share the same properties and can handle any requests
            made via the REST API.  You can make a REST API request against any node in a
            cluster
            <p>If the server node cannot directly service a request, 
              it will forward the request to the appropriate server node, retrieve the response, 
              and send the response to the client.</p></dd>
        </dlentry>
      </dl>
      
    </section>
    
    
    
    <section><title>Types of resources</title>
      
      <p>There are a number of different resources
        within the Couchbase Server and these resources require a different
        URI/RESTful-endpoint in order to perform an operations:</p>
      <dl>
        <dlentry>
          <dt>Server nodes</dt>
          <dd>A Couchbase Server instance, also known as a server or server node, is a
            physical or virtual machine running Couchbase Server. Each server node is as
            a member of a cluster.</dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>Cluster/Pool</dt>
          <dd>A cluster is a group of one or more servers and is a collection of physical
            resources that are grouped together and provide services and a management
            interface. A single default cluster exists for every deployment of Couchbase
            Server. A server node, or instance of Couchbase Server, is a member of a
            cluster. Couchbase Server collects run-time statistics for clusters,
            maintaining an overall pool-level data view of counters and periodic metrics
            of the overall system. The Couchbase Server REST API can be used to
            retrieve historic statistics for a cluster.</dd>
        </dlentry>
      </dl>
      <dl>
      <dlentry>
        <dt>Buckets</dt>
        <dd>A bucket is a logical grouping of data within a cluster. It provides a name space for
            all the related data in an application. You can use the same key in two different
            buckets and they are treated as unique items by Couchbase Server.<p> Couchbase Server
              collects run-time statistics for buckets, maintaining an overall bucket-level data
              view of counters and periodic metrics of the system. Buckets are categorized by
              storage type. Memcached buckets are for in-memory, RAM-based information. Couchbase
              buckets are for persisted data.</p></dd>
      </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>Views</dt>
          <dd>Views enable you to index and query data
            based on logic you specify. You can also use views to perform calculations and
            aggregations, such as statistics, for items in Couchbase Server.</dd>
        </dlentry>
      </dl>
     <dl>
      <dlentry>
        <dt>Cross Datacenter Replication (XDCR)</dt>
        <dd>Cross Datacenter Replication (XDCR) enables automatic
          replicate of data between clusters and between data buckets. The major
          benefits include the ability to restore data from one Couchbase Server cluster to
          another cluster after system failure and the ability to provide copies of
          data on clusters that are physically closer to end users.</dd>
      </dlentry>
     </dl>
    </section>
    
    
    
    
    <section><title>HTTP request headers</title>
      <p>The following HTTP request headers are used to create requests:</p>
      
      <table>
        <tgroup cols="4">
          <colspec colname="col1"/>
          <colspec colname="col2"/>
          <colspec colname="col3"/>
          <colspec colname="col4"/>
          <thead>
            <row>
              <entry>Header</entry>
              <entry>Supported Values</entry>
              <entry>Description of Use</entry>
              <entry>Required</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Accept</entry>
              <entry>Comma-delimited list of media types or media type
                patterns.</entry>
              <entry>Indicates to the server what media type(s) this client is
                prepared to accept.</entry>
              <entry>Recommended</entry>
            </row>
            <row>
              <entry>Authorization</entry>
              <entry><codeph>Basic</codeph> plus username and password (per RFC
                2617).</entry>
              <entry>Identifies the authorized user making this request.</entry>
              <entry>No, unless secured</entry>
            </row>
            <row>
              <entry>Content-Length</entry>
              <entry>Body Length (in bytes)</entry>
              <entry>Describes the size of the message body.</entry>
              <entry>Yes, on requests that contain a message body.</entry>
            </row>
            <row>
              <entry>Content-Type</entry>
              <entry>Content type</entry>
              <entry>Describes the representation and syntax of the request message
                body.</entry>
              <entry>Yes, on requests that contain a message body.</entry>
            </row>
            <row>
              <entry>Host</entry>
              <entry>Origin host name</entry>
              <entry>Required to allow support of multiple origin hosts at a single IP
                address.</entry>
              <entry>All requests</entry>
            </row>
            <row>
              <entry>X-YYYYY-Client-Specification-Version</entry>
              <entry>String</entry>
              <entry>Declares the specification version of the YYYYY API that this
                client was programmed against.</entry>
              <entry>No </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      
    </section>
    
    
    <section><title>HTTP response codes</title>
      <p>The Couchbase Server  returns one of the following HTTP status codes in response to REST API
        requests:</p>
      
      <table>
        <tgroup cols="2">
          <colspec colname="col1" colwidth="1*"/>
          <colspec colname="col2" colwidth="3*"/>
          <thead>
            <row>
              <entry>HTTP response</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>200 OK</entry>
              <entry>Successful request and an HTTP response body returns. If this creates a new
                resource with a URI, the 200 status will also have a location header containing the
                canonical URI for the newly created resource.</entry>
            </row>
            <row>
              <entry>201 Created</entry>
              <entry>Request to create a new resource is successful, but no HTTP response body
                returns. The URI for the newly created resource returns with the status
                code.</entry>
            </row>
            <row>
              <entry>202 Accepted</entry>
              <entry>The request is accepted for processing, but processing is not complete. Per
                HTTP/1.1, the response, if any, SHOULD include an indication of the requestâ€™s
                current status, and either a pointer to a status monitor or some estimate of when
                the request will be fulfilled.</entry>
            </row>
            <row>
              <entry>204 No Content</entry>
              <entry>The server fulfilled the request, but does not need to return a response
                body.</entry>
            </row>
            <row>
              <entry>400 Bad Request</entry>
              <entry>The request could not be processed because it contains missing or invalid
                information, such as validation error on an input field, a missing required value,
                and so on.</entry>
            </row>
            <row>
              <entry>401 Unauthorized</entry>
              <entry>The credentials provided with this request are missing or invalid.</entry>
            </row>
            <row>
              <entry>403 Forbidden</entry>
              <entry>The server recognized the given credentials, but you do not possess proper
                access to perform this request.</entry>
            </row>
            <row>
              <entry>404 Not Found</entry>
              <entry>URI provided in a request does not exist.</entry>
            </row>
            <row>
              <entry>405 Method Not Allowed</entry>
              <entry>The HTTP verb specified in the request (DELETE, GET, HEAD, POST, PUT) is not
                supported for this URI.</entry>
            </row>
            <row>
              <entry>406 Not Acceptable</entry>
              <entry>The resource identified by this request cannot create a response corresponding
                to one of the media types in the Accept header of the request.</entry>
            </row>
            <row>
              <entry>409 Conflict</entry>
              <entry>A create or update request could not be completed, because it would cause a
                conflict in the current state of the resources supported by the server. For example,
                an attempt to create a new resource with a unique identifier already assigned to
                some existing resource.</entry>
            </row>
            <row>
              <entry>500 Internal Server Error</entry>
              <entry>The server encountered an unexpected condition which prevented it from
                fulfilling the request.</entry>
            </row>
            <row>
              <entry>501 Not Implemented</entry>
              <entry>The server does not currently support the functionality required to fulfill the
                request.</entry>
            </row>
            <row>
              <entry>503 Service Unavailable</entry>
              <entry>The server is currently unable to handle the request due to temporary
                overloading or maintenance of the server. </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </body>
</topic>
