<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference xml:lang="en-us" id="rest-ddocs-create">
	<title>Creating Design Documents</title>
	<shortdesc>To create a new design document, use the <codeph>PUT
			/[bucket-name]/_design/[ddoc-name]</codeph> HTTP method and URI on the
			<codeph>8092</codeph> port.</shortdesc>

	<refbody>

		<section><title>Description</title>
			<p>Design documents are used to store one or more view definitions. Views can be defined within a
				design document and uploaded to Couchbase Server.</p>
			<p>Design documents are validated before being created or updated in the system. The validation
				checks for valid JavaScript and for the use of valid built-in reduce functions. Any
				validation failure is reported as an error.</p>
			<p>The format of the design document should include all the views defined in the design document, 
				incorporating both the map and reduce functions for each named view.</p>
			<note type="note">When creating a design document, first create a dev design document and views
				and then check the output of the configured views in your design document. To create
				a development view, you must explicitly use the <codeph>dev_</codeph> prefix for the
				design document name.</note>
		</section>

		<section><title>HTTP method and URI</title>
			<codeblock>PUT /[bucket-name]/_design/[ddoc-name]</codeblock>
			<table>
				<tgroup cols="2">
					<colspec colname="col1"/>
					<colspec colname="col2"/>
					<tbody>
						<row>
							<entry><b>Request data</b></entry>
							<entry>Design document definition (JSON)</entry>
						</row>
						<row>
							<entry><b>Response data</b></entry>
							<entry>Success and stored design document ID</entry>
						</row>
						<row>
							<entry><b>Authentication required</b></entry>
							<entry>Optional</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</section>
		
		<section><title>Syntax</title>
			<p>Curl request syntax:</p>
			<codeblock>curl -X PUT
  -u [admin]:[password]
  -H "Content-Type: application/json"
  http://[localhost]:8092/[bucket-name]/_design/[ddoc-name]			</codeblock>
		</section>
		
		
		<section><title>Example</title>
			<p>A design document, <codeph>byfield</codeph> can be created using a text file
					(<codeph>byfield.ddoc</codeph> ) with the design document content. In this
				example, the view is a development view. Development view names <i>must</i> have the
					<codeph>dev_</codeph>.</p>
			
			<p>Curl request example:</p>

			<codeblock>curl -X PUT
  -H "Content-Type: application/json" \
  http://Administrator:password@10.5.2.117:8092/sales/_design/dev_byfield \
  -d @byfield.ddoc </codeblock>
			<p>As a <codeph>PUT</codeph> command, the URL is also significant,since the location designates
				the name of the design document. In the example, the URL includes the name of the
				bucket ( <codeph>sales</codeph> ) and the name of the design document being created
				is <codeph>dev_byfield</codeph>.</p>
			
			<p>In the above example:</p>
			<ul>
				<li><codeph>-X PUT</codeph>
					<p>Indicates that an HTTP PUT operation is requested.</p></li>
				<li><codeph>-H "Content-Type: application/json"</codeph>
					<p>Specifies the HTTP header information. Couchbase Server requires the
						information to be sent and identified as the
							<codeph>application/json</codeph> datatype. Information not supplied
						with the content-type set in this manner is rejected.</p></li>
				<li><codeph>http://user:password@10.5.2.117:8092/sales/_design/dev_byfield</codeph>
					<p>Specifies the URL, including the authentication information of the bucket
						where you want the design document uploaded. The <codeph>user</codeph> and
							<codeph>password</codeph> are either the administration privileges or
						the bucket name and bucket password for SASL protected buckets. If the
						bucket does not have a password, then authentication information is not
						required.</p></li>
				<li><codeph>-d @byfield.ddoc</codeph>
					<p>Specifies that the data payload should be loaded from the file
							<codeph>byfield.ddoc</codeph>.</p></li>
			</ul>
		</section>
				

		
		<section><title>Response</title>
			<p>If successful, the HTTP response code is 201 OK (created) and the returned JSON fields are
					<codeph>ok</codeph> and <codeph>ID</codeph>.</p>
			<codeblock>{
    "ok":true,
    "id":"_design/dev_byfield"
}</codeblock>
			
			<p>The top-level <codeph>views</codeph> field lists one or more view definitions, and for each
				view, a corresponding <codeph>map()</codeph> function. For example:</p>
			
			<codeblock>{
   "views" : {
      "byfield" : {
         "map" : "function (doc, meta) {\n  if (meta.type == \"json\") 
         	{\n    emit(doc.city, doc.sales);\n  } else 
         	{\n    emit([\"blob\"]);\n  }\n}"
      }
   }
}</codeblock>
		
		</section>

		<section><title>Response codes</title>
			<table>
				<tgroup cols="2">
					<colspec colname="col1" colwidth="1*"/>
					<colspec colname="col2" colwidth="2.85*"/>
					<thead>
						<row>
							<entry>Response codes</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>201</entry>
							<entry>Document created successfully.</entry>
						</row>
						<row>
							<entry>401</entry>
							<entry>The item requested not available using the supplied authorization
								or authorization not supplied.</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			
			<p>In the event of an error, the returned JSON includes the field <codeph>error</codeph> with a short
				description and the field <codeph>reason</codeph> with a longer description of the
				problem.</p>
		</section>





	</refbody>
</reference>
