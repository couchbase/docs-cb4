<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_wk1_5v3_t5">
  <title>Query Settings</title>
  <shortdesc>Description of Service-level query settings and methods to set and use them. </shortdesc><body>
    <p>The Couchbase Query Service is made of two components, Service-level query settings and
      Request-level parameters, which are set, used, and behave differently:</p>
    <table frame="all" rowsep="1" colsep="1" id="table_hkz_dlp_j1b">
      <title>Comparison of Query Settings and Parameters</title>
      <tgroup cols="5" align="left">
        <colspec colname="c1" colnum="1" align="left" colwidth="216px"/>
        <colspec colname="c2" colnum="2" colwidth="145px" align="left"/>
        <colspec colname="c3" colnum="3" colwidth="145px" align="left"/>
        <colspec colname="c4" colnum="4" colwidth="145px" align="left"/>
        <colspec colname="c5" colnum="5" colwidth="230px" align="left"/>
        <thead>
          <row>
            <entry/>
            <entry>Setting Per</entry>
            <entry>Set By</entry>
            <entry>Set On</entry>
            <entry>Set Via</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><b>Service-level Query Settings</b></entry>
            <entry>Service Node</entry>
            <entry>The administrator at the system level</entry>
            <entry>Server side</entry>
            <entry>curl statements</entry>
          </row>
          <row>
            <entry><b>Request-level Parameters</b></entry>
            <entry>Request (statement)</entry>
            <entry>Each user</entry>
            <entry>Client side</entry>
            <entry>cbq command-line parameters, curl or client programming</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <note>The Request-level Parameters overwrite their Service-level Query Setting
      equivalents.</note>
    <note>The Service-level settings will dictate the upper-bound values of the Request-level
      parameters.  For example, if the Service-level<codeph> timeout </codeph>is set to 500, then
      the Request-level parameter cannot be set to 501 or any value higher.</note>
    <p>To set a Service-level query setting, while the Query Service is running, use the
      /admin/settings REST API endpoint with a curl statement.</p>
    <p>To see a list of the current Query Settings,
      enter:<codeblock>curl http://<varname>hostname</varname>:8093/admin/settings -u <varname>user</varname>:<varname>pword</varname></codeblock></p>
    <p>This will output to the screen the entire list of service-level query
      settings:<codeblock>{"completed-limit":7000,"completed-threshold":0,"controls":false,"cpuprofile":"","debug":false,"keep-alive-length":16384,"loglevel":"INFO","max-parallelism":1,"memprofile":"","pipeline-batch":16,"pipeline-cap":512,"prepared-limit":16384,"pretty":false,"profile":"off","request-size-cap":67108864,"scan-cap":512,"servicers":32,"timeout":0}</codeblock>To
      output to a file for editing multiple settings at a single time, add the<varname> -o filename
      </varname>option, for
      example:<codeblock>curl http://<varname>hostname</varname>:8093/admin/settings -u <varname>user</varname>:<varname>pword</varname> -o settings.txt</codeblock>To
      instantly change one setting, see details of each setting in the below <xref
        href="#topic_wk1_5v3_t5/table_kgw_2lr_hz" format="dita">Service-Level Query Settings</xref>
      table.</p>
    <section id="section_rvx_smp_j1b">
      <title>Table of Query Setting Levels and Overwrites</title>
      <p>Some query settings are service-level or request-level only, while some are both levels
        with slightly different names.</p>
    </section>
    <table frame="all" rowsep="1" colsep="1" id="table_s3x_1np_j1b">
      <title/>
      <tgroup cols="2" align="left">
        <colspec colname="c1" colnum="1"/>
        <colspec colname="c2" colnum="2"/>
        <thead>
          <row>
            <entry>Service-level Name</entry>
            <entry>Request-level Name</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><b><i>Service-level Only
                Settings</i></b><p>completed-limit</p><p>completed-threshold</p><p>cpuprofile</p><p>debug</p><p>keep-alive-length</p><p>loglevel</p><p>memprofile</p><p>request-size-cap</p><p>servicers</p><p>_</p><p>NOTE:
                These settings can not be set by cbq.</p></entry>
            <entry><b><i>Request-level Only
                Settings</i></b><p>args</p><p>batch-args</p><p>batch_named_args</p><p>client_context</p><p>compression</p><p>creds</p><p>encoded_plan</p><p>encoding</p><p>format</p><p>namespace</p><p>prepared</p><p>scan_consistency</p><p>scan_vector</p><p>scan_vectors</p><p>scan_wait</p><p>statement</p><p>$&lt;<i>identifier</i>></p><p/></entry>
          </row>
          <row>
            <entry namest="c1" nameend="c2" align="center"><b><i>Both Service-level and
                  Request-level Settings</i></b></entry>
          </row>
          <row>
            <entry><p>controls</p><p>max-parallelism</p><p>metrics</p><p>pipeline-batch</p><p>pipeline-cap</p><p>pretty</p><p>profile</p><p>readonly</p><p>scan-cap</p><p>signature</p><p>timeout</p></entry>
            <entry><p>controls</p><p>max_parallelism</p><p>metrics
                *</p><p>pipeline_batch</p><p>pipeline_cap</p><p>pretty</p><p>profile</p><p>readonly
                *</p><p>scan_cap</p><p>signature *</p><p>timeout</p></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>* Request-level Parameters overwrite their Service-level equivalents, except
        <codeph>metrics</codeph>, <codeph>readonly</codeph>, and <codeph>signature</codeph>.</p>
    <p/>
    <section id="section_snb_qpp_j1b">
      <title>Service-Level Query Settings</title>
      <p>Below is a description of each query setting along with examples. While
          <codeph>cbq</codeph>  is a sandbox to test code on your local machine, your production
        query settings are set with the  <codeph>curl</codeph>  commands on your server. These are
        the only two ways to set these settings, and not all settings can be set by
          <codeph>cbq</codeph>.</p>
    </section>
    <p/>
    <p>
      <table frame="all" rowsep="1" colsep="1" id="table_kgw_2lr_hz">
        <title>Service-Level Query Settings</title>
        <tgroup cols="6">
          <colspec colname="c1" colnum="1" colwidth="1.85*"/>
          <colspec colname="c2" colnum="2" colwidth="1*"/>
          <colspec colname="c3" colnum="3" colwidth="1.3*"/>
          <colspec colname="c4" colnum="4" colwidth="2.6*"/>
          <colspec colname="newCol5" colnum="5" colwidth="3.41*"/>
          <colspec colname="newCol6" colnum="6" colwidth="5.71*"/>
          <thead>
            <row>
              <entry>Setting</entry>
              <entry>Type</entry>
              <entry>Default</entry>
              <entry namest="c4" nameend="newCol6">Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><codeph>completed-limit</codeph></entry>
              <entry>int</entry>
              <entry><codeph>4000</codeph></entry>
              <entry namest="c4" nameend="newCol6">Maximum number of completed requests. As new
                completed requests are added, old ones are removed.<p>Increase this when the
                  completed request keyspace is not big enough to track the slow requests, such as
                  when customers want a larger sample of slow requests.</p><p>
                  <codeblock spectitle="Example">curl http://<varname>hostname</varname>:8093/admin/settings -d '{"completed-limit":7000}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
                </p></entry>
            </row>
            <row>
              <entry><codeph>completed-threshold</codeph></entry>
              <entry>int</entry>
              <entry><codeph>1000</codeph></entry>
              <entry namest="c4" nameend="newCol6">Cache completed query lasting longer than this
                many milliseconds.<p>Specify 0 to track all requests independent of
                  duration.</p><p>Specify any negative number to track none.</p><p>
                  <codeblock spectitle="Example">curl http://<varname>hostname</varname>:8093/admin/settings -d '{"completed-threshold":7000}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
                </p></entry>
            </row>
            <row>
              <entry><codeph>controls</codeph></entry>
              <entry>bool</entry>
              <entry><codeph>false</codeph></entry>
              <entry namest="c4" nameend="newCol6">[Optional] Specifies if there should be a
                controls section returned with the request results. <p>When set to<codeph>
                    true</codeph>, the query response document includes a controls section with
                  runtime information provided along with the request, such as positional and named
                  parameters or settings.</p><p>
                  <note>If the request qualifies for caching, these values will also be cached in
                      the<codeph> completed_requests </codeph>system keyspace.</note>
                </p><codeblock spectitle="Example">cbq> \set -controls true;

curl http://<varname>hostname</varname>:8093/admin/settings -d '{"controls":true}' -u <varname>user</varname>:<varname>pword</varname></codeblock></entry>
            </row>
            <row>
              <entry><codeph>cpuprofile</codeph></entry>
              <entry>string</entry>
              <entry><codeph>""</codeph></entry>
              <entry namest="c4" nameend="newCol6">The absolute path and filename to write the CPU
                profile to a local file. <p>The output file includes a controls section and
                  performance measurements, such as memory allocation and garbage collection, to
                  pinpoint bottlenecks and ways to improve your code execution.</p><p>To stop
                    <codeph>cpuprofile</codeph>, run with the empty setting of
                  <codeph>""</codeph>.</p><p>
                  <note>If <codeph>cpuprofile</codeph> is left running too long, it can slow the
                    system down as its file size increases.</note>
                </p><codeblock spectitle="Example">curl http://<varname>hostname</varname>:8093/admin/settings -d '{"cpuprofile":"/tmp/info.txt"}' -u <varname>user</varname>:<varname>pword</varname></codeblock><p><!--
                     Do we want to add this engineering method?   
                        <note>For another way to set this, see the Capturing Profiling Info
                    section.</note>
                        
                        --></p></entry>
            </row>
            <row>
              <entry><codeph>debug</codeph></entry>
              <entry>bool</entry>
              <entry><codeph>false</codeph></entry>
              <entry namest="c4" nameend="newCol6">Use debug mode.<p>When set to
                    <codeph>true</codeph>, extra logging is provided.</p><p>
                  <codeblock spectitle="Example">curl http://<varname>hostname</varname>:8093/admin/settings -d '{"debug":true}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
                </p></entry>
            </row>
            <row>
              <entry><codeph>keep-alive-length</codeph></entry>
              <entry>int</entry>
              <entry><codeph>16384</codeph></entry>
              <entry namest="c4" nameend="newCol6">Maximum size of buffered result.<p>
                  <codeblock spectitle="Example">curl http://<varname>hostname</varname>:8093/admin/settings -d '{"keep-alive-length":7000}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
                </p></entry>
            </row>
            <row>
              <entry morerows="8"><codeph>loglevel</codeph></entry>
              <entry morerows="8">string</entry>
              <entry morerows="8"><codeph>"INFO"</codeph></entry>
              <entry namest="c4" nameend="newCol6" rowsep="0">Log level used in the logger. All
                values in descending order of data:</entry>
            </row>
            <row>
              <entry colsep="0" rowsep="0">
                <ul>
                  <li>DEBUG</li>
                </ul>
              </entry>
              <entry colsep="0" rowsep="0">For developers</entry>
              <entry colsep="0" rowsep="0">Writes everything.</entry>
            </row>
            <row>
              <entry colsep="0" rowsep="0">
                <ul>
                  <li>TRACE</li>
                </ul>
              </entry>
              <entry colsep="0" rowsep="0">For developers</entry>
              <entry colsep="0" rowsep="0">Less info than debug.</entry>
            </row>
            <row>
              <entry colsep="0" rowsep="0">
                <ul>
                  <li>INFO</li>
                </ul>
              </entry>
              <entry colsep="0" rowsep="0">For admin &amp; customers</entry>
              <entry colsep="0" rowsep="0">Lists warnings &amp; errors.</entry>
            </row>
            <row>
              <entry colsep="0" rowsep="0">
                <ul>
                  <li>WARN</li>
                </ul>
              </entry>
              <entry colsep="0" rowsep="0">For admin</entry>
              <entry colsep="0" rowsep="0">Only abnormal items.</entry>
            </row>
            <row>
              <entry colsep="0" rowsep="0">
                <ul>
                  <li>ERROR</li>
                </ul>
              </entry>
              <entry colsep="0" rowsep="0">For admin</entry>
              <entry colsep="0" rowsep="0">Only errors to be fixed.</entry>
            </row>
            <row>
              <entry colsep="0" rowsep="0">
                <ul>
                  <li>SEVERE</li>
                </ul>
              </entry>
              <entry colsep="0" rowsep="0">For admin</entry>
              <entry colsep="0" rowsep="0">Major items, like crashes.</entry>
            </row>
            <row>
              <entry colsep="0" rowsep="0">
                <ul>
                  <li>NONE</li>
                </ul>
              </entry>
              <entry colsep="0" rowsep="0"/>
              <entry rowsep="0">Doesn't write anything.</entry>
            </row>
            <row>
              <entry colsep="0" namest="c4" nameend="newCol6">
                <codeblock spectitle="Example">curl http://<varname>hostname</varname>:8093/admin/settings -d '{"loglevel":"DEBUG"}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
              </entry>
            </row>
            <row>
              <entry><codeph>max-parallelism</codeph></entry>
              <entry>int</entry>
              <entry><codeph>1</codeph></entry>
              <entry namest="c4" nameend="newCol6">[Optional] Specifies the maximum parallelism for
                the query.<p>A zero or negative value means the number of logical CPUs will be used
                  as the parallelism for the query.</p><p>A server-wide<codeph> max_parallelism
                  </codeph>parameter defaults to "1" and will be used when a request does not
                  include this parameter.</p><p>If a request includes<codeph>
                    max_parallelism</codeph>, it will be capped by the server<codeph>
                    max_parallelism</codeph>.</p><p>
                  <codeblock spectitle="Example">cbq> \set -max-parallelism 3;

curl http://<varname>hostname</varname>:8093/admin/settings -d '{"max-parallelism":0}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
                </p></entry>
            </row>
            <row>
              <entry><codeph>memprofile</codeph></entry>
              <entry>string</entry>
              <entry><codeph>""</codeph></entry>
              <entry namest="c4" nameend="newCol6">Filename to write the diagnostic memory usage
                  log.<p>To stop<codeph> memprofile</codeph>, run with the empty setting of<codeph>
                    ""</codeph>.</p><p>
                  <note>If<codeph> memprofile </codeph>is left running too long, it can slow the
                    system down as its file size increases.</note>
                </p><p>
                  <codeblock spectitle="Example">curl http://<varname>hostname</varname>:8093/admin/settings -d '{"memprofile":"/tmp/memory-usage.log"}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
                </p><p><!--
                    To be added after deciding whether to add this engineering method.
                        <note>For another way to set this, see the Capturing Profiling Info
                    section.</note>
                        --></p></entry>
            </row>
            <row>
              <entry><codeph>pipeline-batch</codeph></entry>
              <entry>int</entry>
              <entry><codeph>16</codeph></entry>
              <entry namest="c4" nameend="newCol6">[Optional] Controls the number of items execution
                operators can batch for Fetch from the KV.<p>
                  <codeblock spectitle="Example">cbq> \set -pipeline_batch 64;

curl http://<varname>hostname</varname>:8093/admin/settings -d '{"pipeline-batch":64' -u <varname>user</varname>:<varname>pword</varname></codeblock>
                </p></entry>
            </row>
            <row>
              <entry><codeph>pipeline-cap</codeph></entry>
              <entry>int</entry>
              <entry><codeph>512</codeph></entry>
              <entry namest="c4" nameend="newCol6">[Optional] Maximum number of items each execution
                operator can buffer between various operators.<p>
                  <codeblock spectitle="Example">cbq> \set -pipeline_cap 1024;

curl http://<varname>hostname</varname>:8093/admin/settings -d '{"pipeline-cap":1024}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
                </p></entry>
            </row>
            <row>
              <entry><codeph>prepared-limit</codeph></entry>
              <entry>int</entry>
              <entry><codeph>16384</codeph></entry>
              <entry namest="c4" nameend="newCol6">The number of Prepared statements in the
                  cache.<p>When this cache reaches the limit, the least recently used prepared
                  statements will be discarded as new prepared statements are created.</p><p>
                  <codeblock spectitle="Example">curl http://<varname>hostname</varname>:8093/admin/settings -d '{"prepared-limit":65536}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
                </p></entry>
            </row>
            <row>
              <entry><codeph>pretty</codeph></entry>
              <entry>bool</entry>
              <entry><codeph>false</codeph></entry>
              <entry namest="c4" nameend="newCol6">[Optional] Specifies the query results returned
                in pretty format.<p>There is also a server-wide<codeph> pretty </codeph>parameter
                  which defaults to<codeph> true</codeph>. If a request does not include pretty, the
                    server-wide<codeph> pretty </codeph>will be used.</p><p>
                  <codeblock spectitle="Example">cbq> \set -pretty true;

curl http://<varname>hostname</varname>:8093/admin/settings -d '{"pretty":false}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
                </p></entry>
            </row>
            <row>
              <entry><codeph>profile</codeph></entry>
              <entry>string</entry>
              <entry><codeph>off</codeph></entry>
              <entry namest="c4" nameend="newCol6">[Optional] Specifies if there should be a profile
                section returned with the request results. The valid values are:<p>
                  <dl>
                    <dlentry>
                      <dt><codeph>off</codeph></dt>
                      <dd>No profiling information is added to the query response.</dd>
                    </dlentry>
                  </dl>
                  <dl>
                    <dlentry>
                      <dt><codeph>phases</codeph></dt>
                      <dd>The query response includes a profile section with stats and details about
                        various phases of the query plan and execution. Three phase times will be
                        included in the<codeph> system:active_requests </codeph>and<codeph>
                          system:completed_requests</codeph> monitoring keyspaces.</dd>
                    </dlentry>
                  </dl>
                  <dl>
                    <dlentry>
                      <dt><codeph>timings</codeph></dt>
                      <dd>Besides the phase times, the profile section of the query response
                        document will include a full query plan with timing and information about
                        the number of processed documents at each phase. This information will be
                        included in the<codeph> system:active_requests </codeph>and<codeph>
                          system:completed_requests</codeph> keyspaces.</dd>
                    </dlentry>
                  </dl>
                </p><p>
                  <note>If<codeph> profile </codeph>is not set as one of the above values, then the
                    profile setting does not change.</note>
                </p><p>
                  <codeblock spectitle="Example">cbq> \set -profile "phases";

curl http://<varname>hostname</varname>:8093/admin/settings -d '{"profile":"phases"}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
                </p></entry>
            </row>
            <row>
              <entry><codeph>request-size-cap</codeph></entry>
              <entry>int</entry>
              <entry><codeph>67108864</codeph></entry>
              <entry namest="c4" nameend="newCol6">Maximum size of a request.<p>
                  <codeblock spectitle="Example">curl http://<varname>hostname</varname>:8093/admin/settings -d '{"request-size-cap":70000}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
                </p></entry>
            </row>
            <row>
              <entry><codeph>scan-cap</codeph></entry>
              <entry>int</entry>
              <entry><codeph>512</codeph></entry>
              <entry namest="c4" nameend="newCol6">[Optional] Maximum buffered channel size between
                the indexer client and the query service for index scans. This parameter controls
                when to use scan backfill.<p>Use <codeph>0</codeph> or a negative number to
                  disable.</p><p>Smaller values reduce GC while larger values reduce indexer
                  backfill.</p><p>The index channel capacity is configurable per request.</p><p>
                  <codeblock spectitle="Example">cbq> \set -scan_cap 1024;

curl http://<varname>hostname</varname>:8093/admin/settings -d '{"scan-cap":1024}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
                </p></entry>
            </row>
            <row>
              <entry><codeph>servicers</codeph></entry>
              <entry>int</entry>
              <entry><codeph>32</codeph></entry>
              <entry namest="c4" nameend="newCol6">The number of service threads for the query.<p>
                  <codeblock spectitle="Example">curl http://<varname>hostname</varname>:8093/admin/settings -d '{"servicers":8}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
                </p></entry>
            </row>
            <row>
              <entry><codeph>timeout</codeph></entry>
              <entry>string (duration format)</entry>
              <entry><codeph>"0s"</codeph></entry>
              <entry namest="c4" nameend="newCol6">[Optional] Maximum time to spend on the request
                before timing out.<p>The default value means no timeout is applied and the request
                  runs for however long it takes.</p><p>
                  <note>There is also a server-wide <codeph>timeout</codeph> parameter, and the
                    minimum of that and the request <codeph>timeout</codeph> is what gets
                    applied.</note>
                </p><p>Its format includes an amount and a mandatory unit. Valid units are:</p><p>
                  <ul id="ul_cym_xhc_m1b">
                    <li><codeph>ns </codeph>(nanoseconds)</li>
                    <li><codeph>us </codeph>(microseconds)</li>
                    <li><codeph>ms </codeph>(milliseconds)</li>
                    <li><codeph>s </codeph>(seconds)</li>
                    <li><codeph>m </codeph>(minutes)</li>
                    <li><codeph>h </codeph>(hours)</li>
                  </ul>
                </p><p>Ex: "10ms" (10 milliseconds) and "0.5s" (half a second).</p><p>Specify
                    <codeph>0</codeph> or a negative integer to disable.</p><p>
                  <codeblock spectitle="Example">cbq> \set -timeout "30m";

curl http://<varname>hostname</varname>:8093/admin/settings -d '{"timeout":"30m"}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
                </p></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </p>
    <section id="section_nnj_sjk_k1b">
      <title>Request-Level Parameters</title>
      <p>This table contains details of all the parameters that can be passed in a request to the
        /query/service endpoint:</p>
    </section>
    <table frame="all" rowsep="1" colsep="1" id="table_fbs_vjk_k1b">
      <title>Request-Level Parameters</title>
      <tgroup cols="5" align="left">
        <colspec colname="c1" colnum="1" colwidth="1.85*"/>
        <colspec colname="c2" colnum="2" colwidth="1*"/>
        <colspec colname="c3" colnum="3" colwidth="1.8*"/>
        <colspec colname="c4" colnum="4" colwidth="1.1*"/>
        <colspec colname="newCol5" colnum="5" colwidth="8.24*"/>
        <thead>
          <row>
            <entry>Parameter Name</entry>
            <entry>Type</entry>
            <entry>Default</entry>
            <entry namest="c4" nameend="newCol5">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><codeph>args</codeph></entry>
            <entry>list</entry>
            <entry/>
            <entry namest="c4" nameend="newCol5">[Optional] If the statement has 1 or more
              positional parameters, this parameter needs to be in the request; this is a list of
              JSON values, one for each positional parameter in the statement. <p>
                <note>Positional parameters apply to<codeph> prepared </codeph>also.</note>
              </p><p>
                <codeblock spectitle="Example">cbq > \set -args ["LAX", 6];</codeblock>
              </p><p>See section <xref href="#topic_wk1_5v3_t5/section_srh_tlm_n1b" format="dita"
                  >Named Parameters VS. Positional Parameters</xref> for details.</p></entry>
          </row>
          <row>
            <entry><codeph>batch_args</codeph></entry>
            <entry>list of list</entry>
            <entry/>
            <entry namest="c4" nameend="newCol5">[Optional] Applies to POST requests containing
              UPDATE/INSERT/DELETE statements.<p>DML statements containing <i>positional</i>
                parameters.</p><p>
                <codeblock spectitle="Example">INSERT INTO location (id, name) VALUES (<i>$1</i>, <i>$2</i>)</codeblock>
              </p><p>These require the values to be given in<codeph> batch_args</codeph>, which
                contains a list of lists.</p><p>
                <note>The inner lists need to match the positional parameters in the<codeph>
                    statement</codeph>.</note>
              </p></entry>
          </row>
          <row>
            <entry><codeph>batch_named_args</codeph></entry>
            <entry>list of object</entry>
            <entry/>
            <entry namest="c4" nameend="newCol5">[Optional] Applies to POST requests only,
              containing a UPDATE/INSERT/DELETE statement.<p>DML statements containing <i>named</i>
                parameters.</p><p>
                <codeblock spectitle="Example">INSERT INTO location (id, name) VALUES (<i>$id</i>, <i>$n</i>)</codeblock>
              </p><p>These require the values to be given in<codeph> batch_named_args</codeph>,
                which contains a list of objects.</p><p>
                <note>The keys in each object need to match the named parameters in the<codeph>
                    statement</codeph>.</note>
              </p></entry>
          </row>
          <row>
            <entry><codeph>client_context_id</codeph></entry>
            <entry>string</entry>
            <entry/>
            <entry namest="c4" nameend="newCol5">[Optional] A piece of data supplied by the client
              that is echoed in the response, if present. N1QL is agnostic about the content of this
              parameter; it is just echoed in the response.<p>Note:</p><p> 1) Maximum allowed size
                is 64 characters; all others will be cut.</p><p> 2) If it contains an escape
                character (‘/’) or quote ("), it will be rejected as Error code 1110.</p></entry>
          </row>
          <row>
            <entry><codeph>compression</codeph></entry>
            <entry>string</entry>
            <entry><codeph>"NONE"</codeph></entry>
            <entry namest="c4" nameend="newCol5">[Optional] Compression format to use for response
              data on the wire.<p>Possible values are <codeph>ZIP</codeph>, <codeph>RLE</codeph>,
                  <codeph>LZMA</codeph>, <codeph>LZO</codeph>, or
                <codeph>NONE</codeph>.</p><p>Values are case-insensitive.</p><p>
                <codeblock spectitle="Example">cbq> \set -compression "zip";</codeblock>
              </p></entry>
          </row>
          <row>
            <entry><codeph>controls</codeph></entry>
            <entry>bool</entry>
            <entry><codeph>false</codeph></entry>
            <entry namest="c4" nameend="newCol5">[Optional] Specifies if there should be a controls
              section returned with the request results.<p dir="ltr">When set to<codeph>
                  true</codeph>, the query response document includes a controls section with
                runtime information provided along with the request, such as positional and named
                parameters or settings.</p><note>If the request qualifies for caching, these values
                will also be cached in the<codeph> completed_requests </codeph>system
                keyspace.</note><codeblock spectitle="Example">cbq> \set -controls true;

curl http://<varname>hostname</varname>:8093/admin/settings -d '{"controls":true}' -u <varname>user</varname>:<varname>pword</varname></codeblock></entry>
          </row>
          <row>
            <entry><codeph>creds</codeph></entry>
            <entry>list</entry>
            <entry/>
            <entry namest="c4" nameend="newCol5">[Optional] Specify the login credentials in the
              form of <codeph>user:password</codeph>.<p>You can specify credentials for different
                buckets by separating them with a comma.</p><p>If credentials are supplied in the
                request header, then<codeph> creds </codeph>is ignored since HTTP Basic
                Authentication takes precedence and overrides<codeph> creds</codeph>.</p><p>
                <codeblock spectitle="Example">cbq> \set -creds <varname>travel-sample</varname> <varname>user</varname>:<varname>pword</varname>, <varname>beer-sample</varname> <varname>user</varname>:<varname>pword</varname>;</codeblock>
              </p>
              <!--
                To be added after confirming the latest info
                <p>See Authentication Parameters
                section <?oxy_custom_start type="oxy_content_highlight" color="255,255,0"?>at GD:
                N1QL Query API<?oxy_custom_end?> for full spec.</p>
              -->
            </entry>
          </row>
          <row>
            <entry><codeph>encoded_plan</codeph></entry>
            <entry>string</entry>
            <entry/>
            <entry namest="c4" nameend="newCol5">[Optional] For later, multiple executions, a query
              can be prepared, which results in five properties, of which one is called
              encoded_plan. This can then be used to execute the query.<p><b>Example</b>: Prepare
                the query result of the most expensive hotel.</p><p>
                <codeblock>$ curl -v http://localhost:8093/query/service \
-d 'statement=PREPARE pricy_hotel FROM SELECT name, max(price) FROM `travel-sample` WHERE type="hotel";</codeblock>
              </p><p>Response:</p><codeblock>{
  "requestID": "a339a496-7ed5-4625-9c64-0d7bf584a1bd",
  "signature": "json",
  "results": [
  {   "encoded_plan": "<b>H4sIAAAJbogA/5yRQU/6QBDFvwpZ/gdIIAAA==</b>",
        "name": "fave_tweets",</codeblock><p>Use
                  the<codeph> encoded_plan </codeph>to execute that prepared
                statement.</p><codeblock>$ curl -v http://localhost:8093/query/service -H "Content-Type: application/json" -d  \
'{ "prepared":"pricy_hotel", "encoded_plan":"<b>H4sIAAAJbogA/5yRQU/6QBDFvwpZ/gdIIAAA==</b>", "$r":9.5 }'</codeblock><p>Both
                the encoded plan and the prepared N1QL statement output the same.</p></entry>
          </row>
          <row>
            <entry><codeph>encoding</codeph></entry>
            <entry>string</entry>
            <entry><codeph>"UTF-8"</codeph></entry>
            <entry namest="c4" nameend="newCol5">[Optional] Desired character encoding for the query
                results.<p>Only possible value is<codeph> UTF-8 </codeph>and is
                case-insensitive.</p></entry>
          </row>
          <row>
            <entry><codeph>format</codeph></entry>
            <entry>string</entry>
            <entry><codeph>"JSON"</codeph></entry>
            <entry namest="c4" nameend="newCol5">[Optional] Desired format for the query
                results.<p>Possible values are <codeph>JSON</codeph>, <codeph>XML</codeph>,
                  <codeph>CSV</codeph>, and <codeph>TSV</codeph>.</p><p>Values are
                case-insensitive.<codeblock spectitle="Example">cbq> \set -format "XML";</codeblock></p></entry>
          </row>
          <row>
            <entry><codeph>max_parallelism</codeph></entry>
            <entry>string</entry>
            <entry><codeph>"1"</codeph></entry>
            <entry namest="c4" nameend="newCol5">[Optional] Specifies the maximum parallelism for
              the query.<p>A zero or negative value means the number of logical CPUs will be used as
                the parallelism for the query.</p><p>A server-wide<codeph> max_parallelism
                </codeph>parameter defaults to "1" and will be used when a request does not include
                this parameter.</p><p>If a request includes<codeph> max_parallelism</codeph>, it
                will be capped by the server<codeph> max_parallelism</codeph>.</p><p>
                <codeblock spectitle="Example">cbq> \set -max-parallelism 3;

curl http://<varname>hostname</varname>:8093/admin/settings -d '{"max-parallelism":0}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
              </p></entry>
          </row>
          <row>
            <entry><codeph>metrics</codeph></entry>
            <entry>bool</entry>
            <entry><codeph>false</codeph></entry>
            <entry namest="c4" nameend="newCol5">[Optional] Specifies that metrics should be
              returned with query results.<p>There is also a server wide<codeph> metrics
                </codeph>parameter which defaults to<codeph> true</codeph>. If a request does not
                  include<codeph> metrics</codeph>, the server wide metrics will be used.</p><p>
                <codeblock spectitle="Example">cbq> \set -metrics false;

curl http://<varname>localhost</varname>:8093/query/service -u <varname>user</varname>:<varname>pword</varname> -d 'statement=select * from default&amp;metrics=true' </codeblock>
              </p></entry>
          </row>
          <row>
            <entry><codeph>namespace</codeph></entry>
            <entry>string</entry>
            <entry/>
            <entry namest="c4" nameend="newCol5">[Optional] Specifies the namespace to use.<p>There
                is a server-wide namespace parameter, which is used if a request does not specify a
                namespace.</p><p>
                <codeblock spectitle="Example">cbq> \set -namespace travel-sample;</codeblock>
              </p></entry>
          </row>
          <row>
            <entry><codeph>pipeline_batch</codeph></entry>
            <entry>int</entry>
            <entry/>
            <entry namest="c4" nameend="newCol5">[Optional] Controls the number of items execution
              operators can batch for Fetch from the KV.<p>
                <codeblock spectitle="Example">cbq> \set -pipeline_batch 64;

curl http://<varname>hostname</varname>:8093/admin/settings -d '{"pipeline-batch":64}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
              </p></entry>
          </row>
          <row>
            <entry><codeph>pipeline_cap</codeph></entry>
            <entry>int</entry>
            <entry/>
            <entry namest="c4" nameend="newCol5">[Optional] Maximum number of items each execution
              operator can buffer between various operators.<p>
                <codeblock spectitle="Example">cbq> \set -pipeline_cap 1024;

curl http://<varname>hostname</varname>:8093/admin/settings -d '{"pipeline-cap":1024}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
              </p></entry>
          </row>
          <row>
            <entry><codeph>prepared</codeph></entry>
            <entry>string</entry>
            <entry/>
            <entry namest="c4" nameend="newCol5">[Required if<codeph> statement </codeph>not
              provided] <p>The prepared form of the N1QL statement to be executed.</p><p>
                <note>If both<codeph> prepared </codeph>and<codeph> statement </codeph>are present
                  and non-empty, an error is returned.</note>
              </p><p><b>Example</b>: Prepare the query result of the most expensive hotel.</p><p>
                <codeblock>$ curl -v http://localhost:8093/query/service \
-d 'statement=PREPARE pricy_hotel FROM SELECT name, max(price) FROM `travel-sample` WHERE type="hotel";</codeblock>
              </p><p>Response:</p><codeblock>{
  "requestID": "a339a496-7ed5-4625-9c64-0d7bf584a1bd",
  "signature": "json",
  "results": [
  {   "encoded_plan": "<b>H4sIAAAJbogA/5yRQU/6QBDFvwpZ/gdIIAAA==</b>",
        "name": "fave_tweets",</codeblock><p>Use
                  the<codeph> encoded_plan </codeph>to execute that prepared
                statement.</p><codeblock>$ curl -v http://localhost:8093/query/service -H "Content-Type: application/json" -d  \
'{ "prepared":"pricy_hotel", "encoded_plan":"<b>H4sIAAAJbogA/5yRQU/6QBDFvwpZ/gdIIAAA==</b>", "$r":9.5 }'</codeblock><p>Both
                the encoded plan and the prepared N1QL statement output the same.</p></entry>
          </row>
          <row>
            <entry><codeph>pretty</codeph></entry>
            <entry>bool</entry>
            <entry><codeph>true</codeph></entry>
            <entry namest="c4" nameend="newCol5">[Optional] Specifies the query results returned in
              pretty format.<p>
                <note>There is also a server-wide <codeph>pretty</codeph> parameter which defaults
                  to <codeph>true</codeph>. If a request does not include pretty, the server-wide
                    <codeph>pretty</codeph> will be used.</note>
              </p><p>
                <codeblock spectitle="Example">cbq> \set -pretty true;

curl http://<varname>hostname</varname>:8093/admin/settings -d '{"pretty":false}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
              </p></entry>
          </row>
          <row>
            <entry><codeph>profile</codeph></entry>
            <entry>string</entry>
            <entry><codeph>"off"</codeph></entry>
            <entry namest="c4" nameend="newCol5" rowsep="1" colsep="1">[Optional] Specifies if there
              should be a profile section returned with the request results. The valid values are:<p>
                <dl>
                  <dlentry>
                    <dt><codeph>off</codeph></dt>
                    <dd>No profiling information is added to the query response.</dd>
                  </dlentry>
                </dl>
                <dl>
                  <dlentry>
                    <dt><codeph>phases</codeph></dt>
                    <dd>The query response includes a profile section with stats and details about
                      various phases of the query plan and execution. Three phase times will be
                      included in the<codeph> system:active_requests </codeph>and<codeph>
                        system:completed_requests</codeph> monitoring keyspaces.</dd>
                  </dlentry>
                </dl>
                <dl>
                  <dlentry>
                    <dt><codeph>timings</codeph></dt>
                    <dd>Besides the phase times, the profile section of the query response document
                      will include a full query plan with timing and information about the number of
                      processed documents at each phase. This information will be included in
                        the<codeph> system:active_requests </codeph>and<codeph>
                        system:completed_requests</codeph> keyspaces.</dd>
                  </dlentry>
                </dl>
              </p><p>
                <note>If<codeph> profile </codeph>is not set as one of the above values, then the
                  profile setting does not change.</note>
              </p><p>
                <codeblock spectitle="Example">cbq> \set -profile "phases";

curl http://<varname>hostname</varname>:8093/admin/settings -d '{"profile":"phases"}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
              </p></entry>
          </row>
          <row>
            <entry><codeph>readonly</codeph></entry>
            <entry>bool</entry>
            <entry><codeph>false</codeph></entry>
            <entry namest="c4" nameend="newCol5">[Optional] Controls whether a query can change a
              resulting recordset.<p>If<codeph> readonly </codeph>is<codeph> true</codeph>, then the
                following statements are not allowed:</p><p>
                <ul id="ul_shj_ggm_n1b">
                  <li>CREATE INDEX</li>
                  <li>DROP INDEX</li>
                  <li>INSERT</li>
                  <li>MERGE</li>
                  <li>UPDATE</li>
                  <li>UPSERT</li>
                </ul>
              </p><p>
                <note>When using GET requests, it's best to set<codeph> readonly </codeph>to<codeph>
                    true</codeph>.</note>
              </p><p>
                <note>There is a server-wide<codeph> readonly </codeph>parameter; and if that is
                  true, it supersedes the request<codeph> readonly </codeph>parameter.</note>
              </p><p>
                <codeblock spectitle="Example">cbq> \set -readonly true;</codeblock>
              </p></entry>
          </row>
          <row>
            <entry><codeph>scan_cap</codeph></entry>
            <entry>int</entry>
            <entry><codeph>512</codeph></entry>
            <entry namest="c4" nameend="newCol5">[Optional] Maximum buffered channel size between
              the indexer client and the query service for index scans. This parameter controls when
              to use scan backfill.<p>Use <codeph>0</codeph> or a negative number to
                disable.</p><p>Smaller values reduce GC while larger values reduce indexer
                backfill.</p><p>The index channel capacity is configurable per request.</p><p>
                <codeblock spectitle="Example">cbq> \set -scan_cap 1024;

curl http://<varname>hostname</varname>:8093/admin/settings -d '{"scan-cap":1024}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
              </p></entry>
          </row>
          <row>
            <entry><codeph>scan_consistency</codeph></entry>
            <entry>string</entry>
            <entry><codeph>"not_bounded"</codeph></entry>
            <entry nameend="newCol5" namest="c4">[Optional] Specify the consistency
              guarantee/constraint for index scanning. The valid values are:<p>
                <dl>
                  <dlentry>
                    <dt><codeph>not_bounded</codeph></dt>
                    <dd>No timestamp vector is used in the index scan. This is the fastest mode,
                      because it avoids the costs of obtaining the vector and waiting for the index
                      to catch up to the vector.</dd>
                  </dlentry>
                </dl>
                <dl>
                  <dlentry>
                    <dt><codeph>at_plus</codeph></dt>
                    <dd>This implements bounded consistency. The request includes a scan_vector
                      parameter and value, which is used as a lower bound. This can be used to
                      implement read-your-own-writes (RYOW). </dd>
                  </dlentry>
                </dl>
              </p><dl>
                <dlentry>
                  <dt><codeph>request_plus</codeph></dt>
                  <dd>This implements strong consistency per request. Before processing the request,
                    a current vector is obtained. The vector is used as a lower bound for the
                    statements in the request. If there are DML statements in the request, RYOW is
                    also applied within the request.</dd>
                </dlentry>
              </dl><dl>
                <dlentry>
                  <dt><codeph>statement_plus</codeph></dt>
                  <dd>This implements strong consistency per statement. Before processing each
                    statement, a current vector is obtained and used as a lower bound for that
                    statement.</dd>
                </dlentry>
              </dl><p>
                <note>The default behavior is RYOW within the request, however, if you want to
                  disable RYOW within a request, add a separate<codeph> request_consistency
                  </codeph>parameter that can be set to<codeph> not_bounded</codeph>.</note>
              </p><p>Values are case-insensitive.</p><p>
                <codeblock spectitle="Example">cbq> \set -scan_consistency "at_plus";</codeblock>
              </p></entry>
          </row>
          <row>
            <entry><codeph>scan_vector</codeph></entry>
            <entry>list or object</entry>
            <entry/>
            <entry namest="c4" nameend="newCol5">[<codeph>scan_vector </codeph>or<codeph>
                scan_vectors </codeph>is required if<codeph> scan_consistency=at_plus</codeph>]
                <p>Specify the lower bound vector timestamp for one bucket when using<codeph>
                  at_plus </codeph>scan consistency.</p><p>Scan vectors are built of
                  [<varname>value</varname>, <varname>guard</varname>] entries, two-element
                arrays:</p><p>
                <ul id="ul_mnh_nkd_m1b">
                  <li><varname>value</varname>: a vbucket's sequence number (a JSON number)</li>
                  <li><varname>guard</varname>: a vbucket's UUID (a string)</li>
                </ul>
              </p><p>
                <codeblock spectitle="Example">scan_vector={ "5 ": [5409393,"VB5ID"], "19": [47574574, "VB19ID"] }</codeblock>
              </p><p>Scan vectors have two forms:</p><p>
                <ol id="ol_fln_zdw_l1b">
                  <li><b>Full scan vector</b>: an array of [<varname>value</varname>,
                      <varname>guard</varname>] entries, giving an entry for every vbucket in the
                    system.</li>
                  <li><b>Sparse scan vectors</b>: provide entries for specific vbuckets, mapping a
                    vbucket number (a string) to a [<varname>value</varname>,
                      <varname>guard</varname>] entry.</li>
                </ol>
              </p><p>
                <note><codeph>scan_vector </codeph>can only be used if the query uses at most one
                  bucket; if it is used for a query referencing more than one bucket, the query will
                  fail with an error. </note>
              </p><p>For queries referencing multiple buckets, use<codeph>
                scan_vectors</codeph>.</p></entry>
          </row>
          <row>
            <entry><codeph>scan_vectors</codeph></entry>
            <entry>object</entry>
            <entry/>
            <entry namest="c4" nameend="newCol5">[<codeph>scan_vector </codeph>or<codeph>
                scan_vectors </codeph>is required if<codeph> scan_consistency=at_plus</codeph>] <p>A
                map from bucket names to scan vectors. See <codeph>scan_vector</codeph>.</p><p>The
                scan vectors can be Full or Sparse.</p></entry>
          </row>
          <row>
            <entry><codeph>scan_wait</codeph></entry>
            <entry>string (duration format)</entry>
            <entry><codeph>""</codeph></entry>
            <entry namest="c4" nameend="newCol5">[Optional] Can be supplied with<codeph>
                scan_consistency </codeph>values of<codeph> request_plus</codeph>,<codeph>
                statement_plus </codeph>and<codeph> at_plus</codeph>.<p>Specifies the maximum time
                the client is willing to wait for an index to catch up to the vector timestamp in
                the request.</p><p>
                <note>If an index has to catch up, and the<codeph> scan_wait </codeph>time is
                  exceeded while waiting, an error is returned.</note>
              </p><p>Its format includes an amount and a mandatory unit. Valid units are:</p><p>
                <ul id="ul_jmg_hww_l1b">
                  <li><codeph>ns </codeph>(nanoseconds)</li>
                  <li><codeph>us </codeph>(microseconds)</li>
                  <li><codeph>ms </codeph>(milliseconds)</li>
                  <li><codeph>s </codeph>(seconds)</li>
                  <li><codeph>m </codeph>(minutes)</li>
                  <li><codeph>h </codeph>(hours)</li>
                </ul>
              </p><p>Ex:<codeph> 10ms </codeph>(10 milliseconds) and<codeph> 0.5s </codeph>(half a
                  second).<note>Specify <codeph>0</codeph> or a negative integer to
                disable.</note></p><p>
                <codeblock spectitle="Example">cbq> \set -scan_wait "30m";</codeblock>
              </p></entry>
          </row>
          <row>
            <entry><codeph>signature</codeph></entry>
            <entry>bool</entry>
            <entry><codeph>true</codeph></entry>
            <entry namest="c4" nameend="newCol5">[Optional] Include a header for the results schema
              in the response.<p>
                <note>There is a server-wide<codeph> signature </codeph>parameter which defaults to
                  true and will be used if a request does not include<codeph>
                  signature</codeph>.</note>
              </p><p>
                <codeblock spectitle="Example">cbq> \set -signature false;

curl http://<varname>localhost</varname>:8093/query/service -u <varname>user</varname>:<varname>pword</varname> -d 'statement=select * from default&amp;signature=false' </codeblock>
              </p></entry>
          </row>
          <row>
            <entry><codeph>statement</codeph></entry>
            <entry>string</entry>
            <entry/>
            <entry namest="c4" nameend="newCol5">[Required if<codeph> prepared </codeph>not
              provided] <p>Any valid N1QL statement for a POST request, or a read-only N1QL
                statement (SELECT, EXPLAIN) for a GET request.</p><p>
                <note>If both<codeph> prepared </codeph>and<codeph> statement </codeph>are present
                  and non-empty, an error is returned.</note>
              </p></entry>
          </row>
          <row>
            <entry><codeph>timeout</codeph></entry>
            <entry>string (duration format)</entry>
            <entry><codeph>"0s"</codeph></entry>
            <entry namest="c4" nameend="newCol5">[Optional] Maximum time to spend on the request
              before timing out.<p>The default value means no timeout is applied and the request
                runs for however long it takes.</p><p>
                <note>There is also a server-wide <codeph>timeout</codeph> parameter, and the
                  minimum of that and the request <codeph>timeout</codeph> is what gets
                  applied.</note>
              </p><p>Its format includes an amount and a mandatory unit. Valid units are:</p><p>
                <ul id="ul_k1t_h3c_m1b">
                  <li><codeph>ns </codeph>(nanoseconds)</li>
                  <li><codeph>us </codeph>(microseconds)</li>
                  <li><codeph>ms </codeph>(milliseconds)</li>
                  <li><codeph>s </codeph>(seconds)</li>
                  <li><codeph>m </codeph>(minutes)</li>
                  <li><codeph>h </codeph>(hours)</li>
                </ul>
              </p><p>Ex:<codeph> 10ms </codeph>(10 milliseconds) and<codeph> 0.5s </codeph>(half a
                second).</p><p>
                <note>Specify <codeph>0</codeph> or a negative integer to disable.</note>
              </p><p>
                <codeblock spectitle="Example">cbq> \set -timeout "30m";

curl http://<varname>hostname</varname>:8093/admin/settings -d '{"timeout":"30m"}' -u <varname>user</varname>:<varname>pword</varname></codeblock>
              </p></entry>
          </row>
          <row>
            <entry><codeph>$&lt;identifier></codeph></entry>
            <entry>json_value</entry>
            <entry/>
            <entry namest="c4" nameend="newCol5">[Optional] If the<codeph> statement </codeph>has 1
              or more named parameters, there should be 1 or more named parameters in the
                request.<p>A named parameter consists of two parts:</p><p><ol id="ol_hvv_3kc_m1b">
                  <li>The $ character</li>
                  <li>An identifier that starts with an alpha character followed by one or more
                    alphanumeric characters.</li>
                </ol>Named parameters apply to <codeph>prepared</codeph> also. </p><p>See section
                  <xref href="#topic_wk1_5v3_t5/section_srh_tlm_n1b" format="dita">Named Parameters
                  VS. Positional Parameters</xref> for examples.</p></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <section id="section_srh_tlm_n1b">
      <title>Named Parameters VS. Positional Parameters</title>
      <p>Named Parameters use a variable name to refer to each one, while Positional Parameters
        refer to the position each variable is used.  As summarized in the below table, these two
        types of requests should contain the following parameters:</p>
    </section>
    <table frame="all" rowsep="1" colsep="1" id="table_a4v_dkm_n1b">
      <title>Named Parameters VS. Positional Parameters</title>
      <tgroup cols="3" align="left">
        <colspec colname="c1" colnum="1" colwidth="1*"/>
        <colspec colname="c2" colnum="2" colwidth="2.5*"/>
        <colspec colname="c3" colnum="3" colwidth="1*"/>
        <thead>
          <row>
            <entry/>
            <entry>Statement</entry>
            <entry>Args</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><b>Named Parameters</b></entry>
            <entry>SELECT detail FROM emp WHERE name = <b>$nval</b> AND age > <b>$aval</b></entry>
            <entry>$nval = "smith"<p>$aval = 45</p></entry>
          </row>
          <row>
            <entry morerows="1"><b>Positional Parameters</b></entry>
            <entry>SELECT detail FROM emp WHERE name = <b>$1</b> AND age > <b>$2</b></entry>
            <entry morerows="1">[ "smith", 45 ]</entry>
          </row>
          <row>
            <entry>SELECT detail FROM emp WHERE name = <b>?</b> AND age > <b>?</b></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <note>Positional Parameters can also be specified in a statement using <b>?</b> as an
      alternative way to specify the same query.</note>
    <p>For more details about N1QL REST API, see <xref
        href="../n1ql/n1ql-rest-api/index.dita#concept_djt_2pj_kr">N1QL REST API</xref>.</p>
    <p>For more details about API content and settings, see <xref
        href="../n1ql/n1ql-language-reference/restapi.dita#topic_13">REST API</xref>.</p>
  </body>
</topic>
