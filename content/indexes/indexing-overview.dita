<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_ssb_qhb_ys">
 <title>Indexing in Couchbase</title>
 <shortdesc>An index is a data-structure that provides quick and efficient means to access data, that would otherwise require scanning a lot more documents. Couchbase Server provides three types of indexers which you can use to build indexes. You must keep in mind the guidelines/restrictions described in the following sections when selecting indexes in your application. </shortdesc>
 <conbody>
  <p>There are three types of indexers in Couchbase Server and these indexes are handled by
   different services. <dl>
    <dlentry>
     <dt>MapReduce views </dt>
     <dd>MapReduce views (also called <i>views</i>) are JavaScript functions defined on documents in
      a Couchbase bucket. Views are built incrementally, re-indexing only the documents that have
      changed since the last index update. Couchbase Server precomputes and stores view results
      before returning the results to the client. The data service is responsible to handle
      MapReduce views.</dd>
    </dlentry>
    <dlentry>
     <dt>Spatial views</dt>
     <dd>Couchbase Server uses spatial views to query geospatial information. A spatial view can
      contain geometric data that can be queried to return information based on whether the recorded
      geometries exist within a given multidimensional range. They can also be used for
      non-geometric multidimensional range queries. <p>The major difference between MapReduce views
       and spatial views is that instead of two functions, one each for map and reduce, spatial
       views contain a single function called <i>spatial function</i>. The spatial function is
       similar to the map function in MapReduce views. Spatial views also output more than a single
       index key per document, enabling queries against several fields in a single query. The data
       service is responsible to handle spatial views. </p></dd>
    </dlentry>
    <dlentry>
     <dt>Global Secondary Index</dt>
     <dd>Global Secondary Index (GSI) enables applications to perform fast query lookups and data
      scans at a high throughput. Unlike the view index that indexes only a subset of the data local
      to each data node, global secondary indexes are global across the cluster. Global secondary
      indexes index the entire bucket's data in a single location and reside on the index nodes. The
      index service is responsible to handle GSIs.</dd>
    </dlentry>
   </dl></p>
  <p>Applications can query the Couchbase server in one of the following ways: <ul>
   <li>Using key-value access</li>
   <li>Using the Couchbase View API. Applications can choose to use either MapReduce view indexes or spatial views. </li>
   <li>Using N1QL. Applications can choose to use MapReduce views or global secondary indexes. </li>
  </ul></p>
  <note> Passing large documents to the view engine can adversely affect the performance. Hence, Couchbase Server limits the size of the documents during indexing by default. For more information, see <xref href="../clustersetup/server-setup.dita"></xref>. </note>
 <!-- <section><title>Tuning Network IRQs for GSI Scan Performance</title>
   <p>Modern NICs have multiple RX and TX queues to provide concurrent handling for network
    requests. By default, most Linux distributions configure CPU0 to handle all network interrupts
    for all the queues. For a system running with a high rate of TCP requests, this can become a
    bottleneck as CPU0 has to handle all the requests. To achieve better performance, network queue
    IRQs can be distributed to all the cores uniformly. A 2X improvement in the GSI scan throughput
    was observed by reconfiguring the interrupt CPU affinity. You can use the following script to
    reconfigure the IRQ affinity, <xref
     href="https://ntzc.googlecode.com/svn/trunk/zc/ixgbe/set_irq_affinity.sh" format="html"
     scope="external"/>.</p>
  </section>-->
 </conbody>
</concept>
