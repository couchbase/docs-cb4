<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_plr_jwp_yn">
	<title><cmdname>cbbackup</cmdname> and <cmdname>cbrestore</cmdname> Tools</title>
	<shortdesc>The <cmdname>cbbackup</cmdname> and <cmdname>cbrestore</cmdname> tools perform
		incremental backup, enabling administrators to quickly back up only the modified data in the
		database. This makes incremental backup and restore more efficient for larger data
		sets.</shortdesc>


	<conbody>
<!--		<note type="attention">This feature is available only for the Enterprise edition of Couchbase
			Server.</note>-->
		<p>The purpose of an incremental backup is to back up only the data that has changed since the
			previous backup. Incremental backups provide the following benefits:</p>
		
		<ul>
			<li>More options for backup strategies.</li>
			<li>Greater flexibility in the restoration process.</li>
			<li>Reduce the amount of time needed for daily backups.</li>
			<li>Reduce the amount of disk storage needed for backups.</li>
			<li>Reduce bandwidth usage when backing up over a network.</li>
		</ul>
		
		<p>When you need to recover data, the restoration process uses the last full backup and one or
			more incremental backups. You can restore data either beginning with a specified date or
			ending with a specified date. For more information, see the Couchbase CLI <xref
				href="../cli/cbbackup-tool.dita#cbbackup-tool">cbbackup</xref> and <xref
				href="../cli/cbrestore-tool.dita#cdbrestore-tool">cbrestore</xref> commands. </p>		
		
			<p>In addition to full backups, Couchbase Server offers the following types of incremental backups:</p>
			<ul>
				<li>Differential incremental backup</li>
				<li>Cumulative incremental backup</li>
			</ul>

		<section><title>Differential incremental backup</title><p>Differential incremental backups
				contain only the database changes that occurred since the last backup. Differential
				backups are created quickly because less data is backed up, but restorations from
				differential backups take longer than restorations from cumulative incremental
				backups. </p><p>The following figure shows an example of a differential incremental
				backup strategy. Every Sunday, a full backup is made. On the other days of the week,
				a differential incremental backup is made.</p>
			<p><image href="../admin/picts/backup-differential-incremental.jpg"
					id="image_jm5_td2_dt" align="left" width="720"/></p>In this example, the Monday
			backup contains the changes made since the full backup on Sunday, the Tuesday backup
			contains the changes made since the Monday backup, the Wednesday backup contains the
			changes made since the Tuesday backup, and so on. For example, a restore operation
			performed on Wednesday uses the full backup from Sunday and the differential incremental
			backups from Monday and Tuesday.</section>

		<section><title>Cumulative incremental backup</title><p>Cumulative incremental backups contain
				all changes that occurred since the last full backup. Restorations from cumulative
				backups are faster than restorations from differential backups, but cumulative
				backups require a longer backup window and use more disk space than differential
				backups.</p><p>The following figure shows an example of a cumulative incremental
				backup strategy. Every Sunday, a full backup is made. On the other days of the week,
				a cumulative incremental backup is made. </p>
			<p><image href="../admin/picts/backup-cumulative-incremental.jpg" id="image_y2y_yd2_dt"
					align="left" width="720"/></p>
			<p>In this example, the Monday backup contains all the changes made since the full backup on
				Sunday, the Tuesday backup contains all the changes made since the full backup on
				Sunday, the Wednesday backup contains all the changes made since the full backup on
				Sunday, and so on. For example, a restore operation performed on Wednesday uses the
				full backup from Sunday and the cumulative incremental backup from Tuesday. </p>
		</section>
		<section>
			<title>Combining incremental backup
				types </title><p>For greater flexibility in the restoration process, your backup
				strategy can include a combination of differential and cumulative incremental
				backups.</p><p>The following figure shows an example of a backup strategy that
				incorporates both differential and cumulative backups. Every Sunday, a full backup
				is made. For the remainder of the week, depending on the day, either a differential
				or cumulative incremental backup is made.</p>
			
			<p><image href="../admin/picts/backup-combined-incremental.jpg" id="image_qpn_b22_dt"
					align="left" width="720"/></p><p>In this example, the backup schedule includes differential and cumulative incremental backups on
				different days. On Monday, Tuesday, Wednesday, Friday, and Saturday a differential
				incremental backup is made. On Thursday, a cumulative incremental backup is made.
				For example, a restore operation performed on Saturday uses the full backup from
				Sunday, the cumulative incremental backup from Thursday, and the differential
				incremental backup from Friday.</p>
		</section>
		<section>
			<title>Backup and Restore of Global Secondary Indexes</title>
			<p>By default, <codeph>cbbackup</codeph> backs up all global secondary indexes in a
				cluster, as well as the view definitions and data. If you are using <codeph>cbbackup</codeph>
						to backup a single node in the cluster then global secondary index
						definitions will only be backed up if the node has the index service
						enabled. If you backup a single index node, then all index definitions
						across the cluster will be stored in the backup, not just indexes on that
						one node.</p>
					<note>To backup global secondary indexes, the cluster administrator
						username and password must be passed as parameters to <codeph>cbbackup</codeph>.</note>
			<p>As with map-reduce views, <codeph>cbbackup</codeph> only stores the definitions of
						these indexes (i.e which fields are being indexed), not the contents of the
						index itself. These definitions are stored in the file <codeph>index.json</codeph>, located in the backup directory. Unlike
						both data and map-reduce views, global secondary indexes are not
						automatically distributed across a cluster. As a result, many users manually
						distribute their indexes across separate index nodes to ensure high
						availability (see <xref href="../n1ql/n1ql-language-reference/createindex.dita">
							CREATE INDEX</xref>).</p>
			<p>Due to the topology-agnostic nature of <codeph>cbbackup</codeph>, it stores these
						index definitions without the explicit node names, which are passed in as
						part of the <codeph>CREATE INDEX</codeph> command. <codeph>Cbbackup</codeph> does however store the indexer-id
						for each index, a value used to internally identify a specific index node.
						In order to restore indexes to a cluster, <codeph>cbrestore</codeph> sends each index
						definition, along with this indexer-id, to the index service which will
						appropriately distribute these indexes across all index nodes. When you
						restore indexes to the same cluster using <codeph>cbrestore</codeph> after a backup, the
						indexing service is able to locate the appropriate index nodes using the
						indexer-id so that the indexes are on the same nodes as before. Often the
						topology of a cluster at the time of backup is not the same as the topology
						when restoring. In this case the indexing service may be unable to find the
						specific node associated with an index which it is restoring. The behaviour
						when the specific index node cannot be found is for the index service to
						distribute the index definition to another index node randomly. This random
						distribution can cause indexes with the same definitions to be placed on the
						same node rather than separate nodes. You should always check that the
						indexes have been correctly distributed after running a restore, you may
						need to manually redistribute some indexes if necessary.</p>
					<p>Once the index definitions have been restored by cbrestore they
						must be built manually (see <xref href="../n1ql/n1ql-language-reference/build-index.dita">
							BUILD INDEX</xref>).
						as the index service only creates them (without building them). This is to
						prevent resource contention caused by simultaneous data restoration and
						building of indexes during the cbrestore process. Additionally this gives
						the Couchbase administrator a chance to examine and redistribute the indexes
						before they are built.</p>
					<p>You can check whether or not an index is in a ‘created’, ‘built’ or
						‘building’ state by viewing the ‘Index’ tab in the web console.</p>
		</section>
	</conbody>
</concept>
