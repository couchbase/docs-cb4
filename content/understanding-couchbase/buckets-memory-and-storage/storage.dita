<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_cy4_tr2_xs2">
 
 <title>
  Storage
 </title>
 
 <shortdesc>
  Couchbase Server provides persistence, whereby certain items are stored on disk as well as
  in memory; and reliability is thereby enhanced. 
 </shortdesc>
 
 <body>
  
  <section id="understanding-couchbase-storage">
  
  <title>
   Understanding Couchbase Storage
  </title>
  
  <p>
   Couchbase Server stores certain items in
   compressed form on disk; and, whenever required, removes them. This allows data-sets to 
   exceed the size permitted
   by existing memory-resources; since undeleted items not currently in memory can be
   restored to memory from disk, as needed. It also facilitates backup-and-restore procedures.
  </p>
   
   <p>
    Generally, a client's interactions with the server are not blocked during 
    disk-access procedures. 
    However, if a specific item is being restored from disk to memory, the item
    is not made available to the client until the item's restoration is complete.
   </p>
   
   <p>
    Not all items are written to disk: <i>Ephemeral</i> buckets and their items are maintained
    in memory only. See
    <xref href="../buckets-memory-and-storage/buckets.dita" scope="local" format="dita">Buckets</xref>
    for information.
   </p>
   
   <p>
    Items written to disk are always written in compressed form. Based on bucket configuration, 
    items may be maintained in compressed form in memory also. See
    <xref href="../buckets-memory-and-storage/compression.dita" scope="local" format="dita">Compression</xref>
    for information.
   </p>
   
   <p>
    Items can be removed from disk based on a configured point of expiration, referred to as
    <i>Time-To-Live</i>. See
    <xref href="../buckets-memory-and-storage/expiration.dita" scope="local" format="dita">Expiration</xref>
    for information.
   </p>
   
   <p>
    For illustrations of how Couchbase Server saves new and updates existing Couchbase-bucket items, 
    thereby employing both memory and storage resources, see
    <xref href="../buckets-memory-and-storage/memory-and-storage.dita" scope="local" format="dita">Memory 
     and Storage</xref>.
   </p>

  </section>
  
  <section id="threading">
   
   <title>
    Threading
   </title>
   
   <p>
    Synchronized, multi-threaded <i>readers</i> and <i>writers</i> provide simultaneous, high-performance 
    read-write operations for data on disk. Conflicts are avoided by assigning each thread (reader
    or writer) a specific subset of the 1024
    vBuckets for each Couchbase bucket. For example, the first of five reader-threads is assigned 
    vBuckets 0, 5, 10, 15, 20, and so on; while the second is assigned vBuckets 1, 6, 11, 16, 21, and
    so on. Thread-status can be viewed, by means of the <cmdname>cbstats</cmdname> command, specified with the 
    <parmname>raw workload</parmname> option. 
   </p>
   
   <p>
    See
    <xref href="../../cli/cbstats-intro.dita" scope="local" format="dita">cbstats</xref> and
    <xref href="./vbuckets.dita" scope="local" format="dita">vBuckets</xref> for information.
   </p>
   
  </section>
  
  <section id="deletion">
   
   <title>
    Deletion
   </title>
   
   <p>
    Items can be deleted by a client application: either by immediate action, or by setting
    a <i>Time-To-Live</i> (TTL) value: this value is established through accessing the 
    <codeph>TTL</codeph> metadata field of the item, which establishes a future point-in-time
    for the item's <i>expiration</i>. When the point-in-time is reached, Couchbase Server deletes
    the item.
   </p>
 
   <p>
    Following deletion by either method, a <i>tombstone</i> is maintained by Couchbase Server,
    as a record (see below).
   </p>
   
   <p>
    An item's TTL can be established either directly on the item itself, or via the bucket that
    contains the item. For information, see
    <xref href="../buckets-memory-and-storage/expiration.dita" scope="local" format="dita">Expiration</xref>.
   </p>
   
  </section>
  
  <section>
   <title>
    Tombstones
   </title>
   
   <p>
    A <i>tombstone</i> is the record of a deleted item. Each tombstone includes the item's key
    and metadata. Tombstones are maintained in order to provide eventual consistency both between
    nodes and between clusters. 
   </p>
   
   <p>
    The <i>Metadata Purge Interval</i> establishes the frequency with which Couchbase Server <i>purges</i> 
    itself of tombstones: which means, removes them fully and finally.
    The Metadata Purge Interval setting runs as part of auto-compaction.
   </p>
   
   <p>
    For more information, see
    <xref href="../buckets-memory-and-storage/expiration.dita#bucket-expiration2/post-expiration-purging" scope="local" format="dita">Post-Expiration Purging</xref>,
    in
    <xref href="../buckets-memory-and-storage/expiration.dita" scope="local" format="dita">Expiration</xref>.
   </p>
   
  </section>
  
  <section>
   
   <title>
    Disk I/O Priority
   </title>
   
   <p>
    <i>Disk I/O</i> &#8212; reading items from and writing them to disk &#8212; does not block client-interactions:
    disk I/O is thus considered a <i>background task</i>. The priority of disk I/O (along with that of
    other background tasks, such as item-paging and DCP stream-processing) is configurable
    <i>per bucket</i>. This means, for example, that one bucket's disk I/O can be granted
    priority over another's. 
    For further information, see
    <xref href="../../clustersetup/create-bucket.dita" scope="local" format="dita">Create a Bucket</xref>.
   </p>
   
  </section>
  
 </body>
</topic>
