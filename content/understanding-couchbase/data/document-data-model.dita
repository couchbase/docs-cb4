<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="document-data-model">
 <title>The Couchbase Data Model</title>
 
 <shortdesc>
  The Couchbase Data Model provides a lightweight, flexible schema; which can be progressively evolved
  by applications, over time.
 </shortdesc>
	
 <body>
  
  <section>
   
   <title>
    Couchbase Server and JSON: The Benefits
   </title>
   
    <p>
     The Couchbase data model is based on JSON, which
     provides a simple, lightweight, human-readable notation. 
     It supports <i>basic</i> data types, such as numbers and strings; and
     <i>complex</i> types, such as embedded documents and arrays. JSON provides rapid serialization
     and deserialization; is native to JavaScript; and constitutes the most common REST API return-type.
     Consequently, JSON is extremely convenient for web-application programming.
    </p>

    <p>
     An individual document often represents a single instance of an object in application
     code. A <i>document</i> might be considered equivalent to a <i>row</i> in a relational table; with each
     of the document's <i>attributes</i> being equivalent to a column. Couchbase, however, provides greater
     flexibility than relational databases, in that it can store JSON documents with varied <i>schemas</i>.
    </p>
   
    <p>
     Documents can contain nested structures. This allows
     developers to express <i>many-to-many</i> relationships without requiring a <i>reference</i>
     or <i>junction</i> table; and is naturally expressive of hierarchical data.
    </p>
   
  </section>
  
  <section>
   
   <title>
    Documents versus Tables
   </title>
   
   <p>
    The nature and value of the <i>document</i> data model is clarified by comparison with the
    <i>relational</i>. To support an online flight-booking application, allowing users to search
    for flights by date, the relational model requires multiple tables &#8212; for flights, airlines,
    and schedules. The result may be as follows:
   </p>
   
   <p>
     <image href="./images/relationalDataModel.png" width="450" id="relational_data_model"/>
   </p>
   
   <p>
    By contrast, the document model likely requires only a single document, which embeds
    an array of schedules for all flights between each of two airports:
   </p>
   
   <p>
    <image href="./images/jsonDataModel.png" width="150" id="json_data_model"/>
   </p>
   
   <p>
    Thus, in the document model, each document can be highly self-contained. This supports the rapid
    fulfillment of application-requests, and has important implications for both <i>scalability</i> and <i>latency</i>:
    one document can be replicated, or atomically changed, without
    other documents needing to be accessed; eradicating the need
    for complex inter-node coordination, and minimizing contention. 
   </p>
   
  </section> 
  
  <section> 
   
   <title>
    Flexible, Dynamic Schema
   </title>
   
   <p>
    In the document model, a <i>schema</i> is the result of an application's structuring of its
    documents: schemas are entirely defined and managed by applications. A document's
    <i>structure</i> consists of its inner arrangement of <i>attribute</i>-<i>value</i> pairs.
   </p>
   
   <p>
    Couchbase Server does not enforce uniformity: document-structures can vary, even across multiple
    documents that each contain a <codeph>type</codeph> attribute with a common value. This allows 
    differences between objects to be represented 
    with great efficiency. It also allows a schema to be progressively evolved by an application, as required:
    properties and structures can be added to the document, without other documents needing
    to be updated in the same way. (This flexibility is especially advantageous when the application itself
    is large and long-lived.)  
    </p>
   
  </section>
  
  <section> 
   
   <title>
    Document Design Considerations
   </title>
   
   <p> 
    When JSON documents are initially designed, performance and scalability should be considered. The 
    best document-design can often be 
    determined through consideration of access-patterns and object-management
    routines:
   </p>
   
   <p>
    
   </p>
   
   <ul>
    <li>
     The definition of a small number of rich documents, each embedding complex information, may sometimes be appropriate: in
     order to group together properties typically accessed or written at the same time. This potentially allows
     information
     to be read or written in a single operation; atomicity to be improved, due to the simultaneous
     occurrence of mutations; and scalability to be enhanced, due to the existence of fewer relations between
     independent objects. It may also allow the grouped properties to be more easily maintained in a state of mutual
     consistency.
     <p>
      
     </p>
    </li>
    
    <li>
     The definition of a large number of simple documents, each of which refers to others,
     may be appropriate when access-patterns are predictable, and data-size needs to be kept small, in order to reduce
     network-bandwidth consumption. Documents can refer to each other by key.
     
     <p>
      
     </p>
    </li>
    
   </ul>
   
   <p>
    Note that Couchbase Server provides <i>atomicity</i>, <i>consistency</i>, <i>isolation</i>, and <i>durability</i> 
    on operations that address a single document. 
    Thus, a single write is guaranteed either fully to succeed or to fail: no operation results in a partially 
    updated version of the document. Moreover, if an update operation imposes durability requirements &#8212; say, for 
    <i>replicated</i> or <i>persisted</i> durability &#8212;  
    the <i>whole document</i> is guaranteed to be durable. 
   </p>
     
  </section>

  
 </body>

</topic>
