<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="sv-writing-views-keys">
 <title>Keys in Spatial View Functions</title>
 <shortdesc>The key must be a multidimensional bounding box. </shortdesc>
 <conbody>
  <p>The keys in a spatial view function can defined in several ways:</p>
  <section>
   <title>Single values</title>
   <p>When a single value is used in the key, it expands to a collapsed range. </p>
   <p>For example, the <codeph>[1, 2]</codeph> value is stored as <codeph>[[1, 1], [2,
    2]]</codeph>.</p>
  </section>
  <section>
   <title>Ranges</title>
   <p>Use ranges for keys, for example, for shops with certain opening hours such as 10:00 to 20:00.
        This example uses timestamps and converts the values of 10:00 - 20:00 to 1000 and 2000.</p>
   <codeblock>emit([[1000, 2000]], null);</codeblock>
  </section>
  <section>
   <title>GeoJSON geometry</title>
   <p>You can use a GeoJSON geometry in a key. It must be the first element of the array. The
        bounding box is automatically calculated and used as the range.</p>
   
   <p>Couchbase Server supports the following <xref href="http://geojson.org/geojson-spec.html"
     format="html" scope="external">GeoJSON</xref> objects:</p>
   <ul>
    <li>Point</li>
    <li>MultiPoint</li>
    <li>LineString</li>
    <li>MultiLineString</li>
    <li>Polygon</li>
    <li>MultiPolygon</li>
    <li>GeometryCollection</li>
   
   </ul>
  </section>
 <section><title>Examples</title>
  <p>In this example, the key is stored internally as [[10.9, 10.9], [48.4, 48.4]]. </p>
  <codeblock> emit([{
   "type": "Point",
   "coordinates":[10.9, 48.4]
}], null);  </codeblock>
  <p>In this example, the key is stored internally as [[10.9, 10.9], [48.4, 48.4]]. </p> 
 <codeblock>emit([{
   "type": "Point",
   "coordinates":[10.9, 48.4]
}, [1000, 2000], 5], null);</codeblock>
  <note type="note">For backward compatibility, you can also emit a GeoJSON geometry that is not wrapped in an array.</note>
  <p>The value can be any arbitrary valid JSON. Here is an example spatial view function that emits a point with its height:
  </p>
  <codeblock>function(doc, meta) {
  if (doc.loc &amp;&amp; doc.height &amp;&amp; doc.name) {
     emit([doc.loc.lon, doc.loc.lat, doc.height], doc.name);
  }
}</codeblock>
  <p>You can put a spatial view function into a design document by using the object name 	spatial to indicate the nature of 
   the view definition. For example, the following design document includes the previous function as a view named points.</p>
  <codeblock>  {
   "spatial" : {
      "points" : "function(doc, meta) {if (doc.loc  &amp;&amp; doc.height &amp;&amp; doc.name) {
          emit([doc.loc.lon, doc.loc.lat, doc.height], doc.name);}}"
   }
}</codeblock>
  <p>If your document already contains GeoJSON encoded data, you can directly emit that geometry:
  </p>
  <codeblock>function(doc, meta) {
  if (doc.geometry &amp;&amp; doc.name) {
     emit([doc.geometry], doc.name);
  }
}   </codeblock>
  <p>To execute the spatial query, use the design document format that uses the embedded spatial 	function. 
   For example, a design document named main that resides within the bucket places is executed with this URL: </p>
  <codeblock>http://[localhost]:8092/places/_design/main/_spatial/points.</codeblock>
 </section> 
  
 </conbody>
</concept>
