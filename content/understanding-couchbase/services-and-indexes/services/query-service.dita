<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Concept//EN" "topic.dtd">
<topic id="topic_igg_kq4_vs2">
 
 <title>Query Service</title>
 
 <shortdesc>
  The Query Service supports the querying of data by means of the <i>N1QL</i> query language.
  The Query Service depends on both the <i>Index Service</i> and the <i>Data Service</i>.
 </shortdesc>
 
 <body>
  
  <section>
   
   <title>
    Query Service Architecture
   </title>
  
    <p>
     The architecture of the <i>Query Service</i> is shown by the following illustration:
    </p>
   
   <p>
    <image href="./images/queryServiceArchitecture.png" id="query_service_architecture" align="left" width="700"/>
   </p>
   
   <p>
    The principal components are:
   </p>
   
   <p>
   </p>
   
   <ul>
    <li>
     <b>Listeners</b>: Concurrent query requests are received on ports 8093 and 18093 (for more information
     on port-allocation, see
     <xref href="../../../install/install-ports.dita" scope="local" format="dita">Network Configuration</xref>).
     <p>
      
     </p>
    </li>
    
    <li>
     <b>Query Processor</b>: Responsible for applying the <b>Parser</b> to incoming queries, in order to 
     determine whether each is a valid statement. Also employs the <b>Optimizer</b>, which evaluates available
     execution paths, so determining the path of lowest latency; generates a query-execution plan that uses
     the lowest-latency path; and assembles the plan into a series of operators. The <b>Execution Engine</b>
     receives the operators, and executes them &#8212; in parallel where possible.
     <p>
      
     </p>
    </li>
    
    <li>
     <b>Data Stores</b>: Provides access to various data-sources. The <b>Couchbase Server</b> store is used to
     access the data and indexes on Couchbase Server, and to handle authentication. Other data stores are also
     included, such as the store for the local filesystem.
     <p>
      
     </p>
    </li>
    
   </ul>
  
  </section>
  
  <section>
   <title>
    Query Execution
   </title>
   
   <p>
    The sequence whereby queries are executed is shown below:
   </p>
   
   <p>
    <image href="./images/querySequence.png" id="query_sequence" align="left" width="820"/>
   </p>
   
   <p>
    The client's N1QL query is shown entering the Query Service at the left-hand side. The Query Processor performs
    its <b>Parse</b> routine, to validate the submitted statement, then creates the execution <b>Plan</b>. <b>Scan</b> operations 
    are then performed on the relevant index, by accessing the <b>Index Service</b>. Next, <b>Fetch</b>
    operations are performed by accessing the <b>Data Service</b>, and the data duly returned is used in <b>Join</b> operations.
    The Query Service continues by performing additional processing, which includes <b>Filter</b>, <b>Aggregate</b>, and
    <b>Sort</b> operations. Note the degree of parallelism with which operations are frequently performed, represented
    by the vertically aligned groups of right-pointing arrows.
   </p>
   
  </section>
  
  <section>
   
   <title>
    Using N1QL
   </title>
   
   <p>
    The Query Service supports queries made in the <i>N1QL</i> query language. As well as providing a rich
    variety of query-options, N1QL allows statements to be <i>prepared</i>, so that the parsing
    and compiling of plans is completed prior to execution; and permits <i>consistency-levels</i> to be
    configured. For detailed information, see
    <xref href="../../../sdk/n1ql-query.dita" scope="local" format="dita">Querying with N1QL</xref>.
   </p>
   
  </section>
  
 </body>
</topic>
