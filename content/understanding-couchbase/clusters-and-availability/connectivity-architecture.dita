<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="concept_xh5_l3j_vs2">
 <title>Connectivity Architecture</title>
 <shortdesc>Couchbase Server is a fully distributed database, making connection management and efficient communication key components of the architecture. This section provides information about client to cluster, node to node, cluster to cluster, and cluster to external products communications. It also describes the phases of establishing a connection.</shortdesc>
 <body>
  <section id="section-client-2-cluster-comm"><title>Client to Cluster Communication</title> Client
   applications communicate with Couchbase Server through a set of access points tuned for the data
   access category such as CRUD operations, N1QL queries, and so on. Each access point supports
   clear text and encrypted communication ports. <p> There are five main types of access points that
    drive the majority of client to server communications. </p><table frame="all" rowsep="1"
    colsep="1" id="table_yph_ppc_ws">
    <title>Communication ports</title>
    <tgroup cols="4">
     <colspec colname="c1" colnum="1" colwidth="1.0*"/>
     <colspec colname="c2" colnum="2" colwidth="1.0*"/>
     <colspec colname="c3" colnum="3" colwidth="1.0*"/>
     <colspec colname="c4" colnum="4" colwidth="1.0*"/>
     <thead>
      <row>
       <entry>Type</entry>
       <entry>Port</entry>
       <entry>API</entry>
       <entry/>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>REST</entry>
       <entry>8091, 18091 (SSL)</entry>
       <entry>Admin operations with the REST Admin API</entry>
       <entry>Direct Connect to a single node in the cluster to perform admin operations,
        monitoring, and alerting.</entry>
      </row>
      <row>
       <entry>REST</entry>
       <entry>8092, 18092 (SSL)</entry>
       <entry>Query with View (View and Spatial View API)</entry>
       <entry>Load balanced connection across nodes of the cluster that run the data service for
        View queries.</entry>
      </row>
      <row>
       <entry>REST</entry>
       <entry>8093, 18093 (SSL)</entry>
       <entry>Query with N1QL (N1QL API)</entry>
       <entry>Load balanced connection across nodes of the cluster that run the query service for
        N1QL queries.</entry>
      </row>
      <row>
       <entry>ONLINE</entry>
       <entry>11210, 11207 (SSL)</entry>
       <entry>Core Data operations</entry>
       <entry>Stateful connections from client app to nodes of the cluster that runs data service
        for CRUD operations.</entry>
      </row>
      <row>
       <entry>REST</entry>
       <entry>8094</entry>
       <entry>Search Service (Developer Preview)</entry>
       <entry>Load balanced connections across nodes of the cluster that run the search service for
        full text search queries.</entry>
      </row>
     </tbody>
    </tgroup>
   </table><p><note>This table lists a subset of the network ports. For a complete list of network
     ports, see <xref href="../../install/install-ports.dita#topic2659"/>.</note>  </p></section>
  <section><title>Node to Node Communication</title> Nodes of the cluster communicate with each
   other to replicate data, maintain indexes, check health of nodes, communicate changes to the
   configuration of the cluster, and much more. <p>Node to node communication is optimized for high
    efficiency operations and may not go through all the connectivity phases (authentication,
    discovery, and service connection).  </p></section>
  <section><title>Cluster to Cluster Communication</title> Couchbase Server clusters can communicate
   with each other using the Cross Datacenter Replication (XDCR) capability. <p>XDCR communication
    is set up from a source cluster to a destination cluster.  </p></section>  
  <section><title>External Connector Communication</title> Couchbase Server also communicates with
   external products through connectors. <p>Couchbase has built and supports connectors for Spark,
    Kafka, Elasticsearch, SOLR, and so on.</p><p>The community and other companies have also built
    more connectors for ODBC driver, JDBC driver, Flume, Storm, Nagios connectors for Couchbase, and
    so on. External connectors are typically built using the existing client SDKs, the direct
    service or admin APIs listed in the client to cluster communication section, or feed directly
    from the internal APIs such as the Database Change Protocol (DCP) API. </p></section>
  <section id="connectivity-phases"><title>Connectivity Phases</title>
   <p>When a connection request comes in from the client side, the
    connection is established in three phases: authentication, discovery, and service connection.</p>
   <p> <ol>
    <li><b>Authentication</b>: In the first phase, the connection to a bucket is authenticated
     based on the credentials provided by the client. In case of Admin REST API, admin users are
     authenticated for the cluster and not just a bucket.</li>
    <li><b>Discovery</b>: In the second phase, the connection gets a cluster map which represents
     the topology of the cluster, including the list of nodes, how data is distributed on these
     nodes, and the services that run on these nodes. Client applications using the SDKs only need
     to know the URL or address to one of the nodes in the cluster. Client applications with the
     cluster map discover all other nodes and the entire topology of the cluster. </li>
    <li><b>Service Connection</b>: Armed with the cluster map, client SDKs figure out the
     connections needed to establish and perform the service level operations through key-value,
     N1QL, or View APIs. Service connections require a secondary authentication to the service to
     ensure the credentials passed on to the service have access to the service level operations.
     With authentication cleared, the connection to the service is established. <p>At times, the
      topology of the cluster may change and the service connection may get exceptions on its
      requests to the services. In such cases, client SDKs go back to the previous phase to rerun
      discovery and retry the operation with a new connection.</p></li>
   </ol></p>
  </section>
 </body>
</topic>
