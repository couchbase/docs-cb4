<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_l2x_pkx_vx">
  
  <title>
    Sorting Query Results
  </title>
  
  <shortdesc>
    The results of Full Text Searches are returned as objects, the data within which can be sorted.
  </shortdesc>
  
  <body>
    
    <section>
      
      <title>
        Sorting Result Data
      </title>
      
      <p>
        On query-completion, <i>sorting</i> allows specified members of the result-set to be displayed prior to others: this
        facilitates review of the most significant data.
      </p>
      
      <p>
        Within a JSON query object, the required sort-type is specified by using the <codeph>sort</codeph> field. This
        takes, as its value, an array of either <i>strings</i> or <i>objects</i>. 
      </p>
      
    </section>
    
    <section>
      
      <title>
        Sorting with Strings
      </title>
      
      <p>
        The value of the <codeph>sort</codeph> field can be specified as an array of strings. These can be of three
        types:
      </p>
      
      <ul>
        
        <li>
          <i>field name</i>: Specifies the name of a field. If multiple fields are included in the array, the sorting
          of documents begins according to their values for the field whose name is first in the array. If any number
          of these values are identical, their documents are sorted again, this time according to their values for the 
          field whose name is second; then, if any number of these values are identical, their documents are sorted a third time, 
          this time according to their values for the field whose name is third; and so on.
          
          <p>
            Any document-field may be specified to hold the value on which sorting is to be based, provided that 
            the field has been indexed in some way, whether dynamically or specifically.
          </p>
          
          <p>
            The default sort-order is <i>ascending</i>. If a field-name is prefixed with the <codeph>-</codeph> character, 
            that field's results are sorted in <i>descending</i> order.
          </p>
          
        </li>
        
        <li>
          <codeph>_id</codeph>: Refers to the document identifier. Whenever encountered in the array, causes sorting
          to occur by document identifer.
          
          <p>
            
          </p>
        </li>
        
        <li>
          <codeph>_score</codeph>: Refers to the score assigned the document in the result-set. Whenever encountered in the
          array, causes sorting to occur by score.
          
          <p>
            
          </p>
          
        </li>
        
      </ul>
      
      <p>
        For example:
      </p>
        
      <codeblock>"sort": ["country", "state", "city","-_score"]</codeblock>
      
      <p>
        This <codeph>sort</codeph> statement specifies that results will first be sorted by <codeph>country</codeph>. If 
        some documents are then found to have the same value in their <codeph>country</codeph> fields, they
        are re-sorted by <codeph>state</codeph>. Next, if some of these documents are found to have the 
        same value in their
        <codeph>state</codeph> fields, they are re-sorted
        by <codeph>city</codeph>. Finally, if some of these documents are found to have the same value in their
        <codeph>city</codeph> fields, they are re-sorted by <codeph>score</codeph>, in <i>descending</i> order. 
      </p>
      
      <p>
        The following JSON query demonstrates how and where 
        the <codeph>sort</codeph> property can be specified:
      </p>
        
        <codeblock>{
  "explain": false,
  "fields": [
    "title"
  ],
  "highlight": {},
  "sort": ["country", "-_score","-_id"],
  "query":{ 
    "query": "beautiful pool" 
  }
}</codeblock>
      
    </section>
    
    
    <section id="fts-advanced-sort-options">
      
      <title>
        Sorting with Objects
      </title> 
      
      <p>
       Fine-grained control over sort-procedure can be achieved by specifying <i>objects</i> as array-values in
       the <codeph>sort</codeph> field. Each object can have the following fields:
      </p>
      
      <ul id="ul_xhg_wzz_yx">
        
        <li>
          <codeph>by</codeph>: Sorts results on <codeph>id</codeph>, <codeph>score</codeph>, or a specified
          <codeph>field</codeph> in the Full Text Index. 
          
          <p>
            
          </p>
        
        </li>
        
        <li>
          <codeph>field</codeph>: Specifies the name of a field on which to sort. Used only 
          if <codeph>field</codeph> has been specified as the value for the <codeph>by</codeph>
          field; otherwise ignored.
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          
          <codeph>missing</codeph>: Specifies the sort-procedure for documents with a missing value
          in a field specified for sorting. The value of <codeph>missing</codeph> can be <codeph>first</codeph>, in which case
          results with missing values appear <i>before</i> other results; or <codeph>last</codeph> (the default), in which
          case they appear <i>after</i>. 
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <codeph>mode</codeph>: Specifies the search-order for index-fields that contain multiple values (in
          consequence of
          arrays or multi-token analyzer-output). The <codeph>default</codeph> order is undefined but
          deterministic, allowing the paging of results from 
          <codeph>from (</codeph><i>offset</i><codeph>)</codeph>, with
          reliable ordering. To sort using the minimum or maximum value, the value of <codeph>mode</codeph> should be set
          to either <codeph>min</codeph> or <codeph>max</codeph>.
        </li>
          
      </ul>
      
      <p>
        The example below shows how an object-sort can be specified. It assumes that the
        <codeph>travel-sample</codeph> bucket has been loaded, and a default index has been
        created on it. This query sorts search-results based on
        <codeph>reviews.ratings.Overall</codeph> &#8212; a field that is normally multi-valued, because it
        contains an array of different users' ratings. When there are multiple values, the highest
        <codeph>Overall</codeph> ratings are used for sorting. Hotels with no <codeph>Overall</codeph> rating are
        placed at the end. 
      </p>
      
      <p>
        For information on loading sample buckets, see
        <xref href="../settings/install-sample-buckets.dita" scope="local" format="dita">Install Sample Buckets</xref>.
        For instructions on creating a default Full Text Index by means of the Couchbase Web Console, see
        <xref href="./fts-performing-searches.dita" scope="local" format="dita">Performing Searches</xref>.
      </p>
      
        <codeblock>{
  "explain": false,
  "fields": [
     "*"
   ],
   "highlight": {},
   "query": {
     "match": "bathrobes",
     "field": "reviews.content",
     "analyzer": "standard"
   },
   "size" : 10,
   "sort": [
      {
       "by" : "field", 
       "field" : "reviews.ratings.Overall", 
       "mode" : "max",
       "missing" : "last"
      },
   ]
}</codeblock>
      
      <p>
        Note also that 
        <codeph>sort</codeph> field accepts <i>combinations</i> of strings and objects as its value. This
        is demonstrated as follows:
      </p>
      
        <codeblock>{
   ...
   "sort": [
      "country",
      {
       "by" : "field", 
       "field" : "reviews.ratings.Overall", 
       "mode" : "max",
       "missing" : "last"
      },
      {
       "by" : "field", 
       "field" : "reviews.ratings.Location", 
       "mode" : "max",
       "missing" : "last"
      },
      "-_score"
   ]
}</codeblock>

    </section>
    
  </body>
  
</topic>
