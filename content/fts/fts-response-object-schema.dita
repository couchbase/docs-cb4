<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_uvg_4x1_4v">
  
  <title>
    Handling Response Objects
  </title>
  
  <shortdesc>
    Full Text Search provides a <i>response object</i>, which contains detailed information on 
    the results of the search. Prior to the search,
    a <i>facet</i> can be add to the response object, and 
    information on <i>aggregations</i> thereby returned.
  </shortdesc>
  
  <body>
    
    <section id="response-object-structure">
      
      <title>
        Response-Object Structure
      </title>
      
      <p>
        A Full Text Search <i>Response Object</i> is itself composed of multiple child-objects, each of 
        which provides important
        information. Each child-object is listed and explained below.
      </p>

    </section>
    
    <section>
      
      <title>
        Status
      </title>
      
      <p>
        The status object includes the number of successful and failed pindex queries. 
      </p> 
      
      <p>
        We recommend that the status object be checked for failures, as a preferred alternative to relying on HTTP 
        response codes alone. For example,FTS returns an HTTP 200 response in case of pindex failures 
        or timeouts (not consistency timeouts). This is done so that you can choose to accept partial 
        results in an application. However, this also means FTS returns an HTTP 200 response even when 
        ALL pindexes fail. 
      </p>
      
      <p>
        Refer to the following table for more information about the possible status messages. 
        
        <table
          frame="all" rowsep="1" colsep="1" id="table_omj_wgn_zv">
          <title>Response Object Status Values</title>
          <tgroup cols="2">
            <colspec colname="c1" colnum="1" colwidth="1.0*"/>
            <colspec colname="c2" colnum="2" colwidth="1.0*"/>
            <thead>
              <row>
                <entry>Status</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>HTTP 400</entry>
                <entry>Returned when an error is detected when validating the inputs. The text error
                  message accompanying the status describes the problem.</entry>
              </row>
              <row>
                <entry>HTTP 412</entry>
                <entry>Returned when the consistency requirements are not satisfied within the
                  specified timeout. The JSON structure accompanying the status provides information
                  about the current consistency levels.</entry>
              </row>
              <row>
                <entry>HTTP 200</entry>
                <entry>Returned when an error is detected during query execution. The errors may be
                  contained in the JSON section named "status".</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </p> <dl>
        <dlentry>
          <dt>Total</dt>
          <dd>The <codeph>total</codeph> field returns an integer representing the total number of
            pindexes queried. This value varies depending on how your index is configured, the
            platform you are running on, and whether you are querying an index or an index alias.
            Each index has a setting for number of vBuckets per pindex. For example, when running on
            a cluster with 1024 vBuckets and with an index setting of 171 vBuckets per pindex, the
            total number of pindexes is 6. When you query an <xref
              href="fts-index-alias.dita#topic_c2m_wgz_1v">index alias</xref>,
              <codeph>total</codeph> is the sum of all the pindexes in each index that is included
            in the definition of the index alias. </dd>
        </dlentry>
        <dlentry>
          <dt>Successful</dt>
          <dd>This field returns the total number of pindexes successfully queried. This integer
            value can range from 0 to the total number of pindexes.
            <codeblock spectitle="Example Status: Successful"> "status": {
     "total": 6,
     "failed": 0,
     "successful": 6
},</codeblock></dd>
        </dlentry>
        <dlentry>
          <dt>Failed</dt>
          <dd>This field returns the total number of pindexes with failed queries. This integer
            value can range from 0 to the total number of pindexes. If the number is greater than 0,
            the response object contains an <codeph>errors</codeph> array.  </dd>
        </dlentry>
        <dlentry>
          <dt>Errors</dt>
          <dd>This returns an array of error messages as reported by individual pindexes. This array
            only appears if the field "failed" is greater than 0.
            <codeblock spectitle="Example Status: Failure">"status": {
    "total":6,
    "failed":3,
    "successful":6,
    "errors":{
        "IndexClient - http://127.0.0.1:9201/api/pindex/beer-search_447fd6df2d6f4b54_0a44bddb":"context deadline exceeded",
         "IndexClient - http://127.0.0.1:9201/api/pindex/beer-search_447fd6df2d6f4b54_24e7ea2d":"context deadline exceeded",
         ...
    }
}          </codeblock></dd>
        </dlentry>
      </dl>
      <p id="handling-response-status"><b>Understanding the Query Response Status</b></p>
      <p>This section explains the contents of a typical query response status.</p>
    </section>
    <section><title>Request</title>
      <p>The request object stores a copy of the query that was executed and other details from the request that generated 
        this response object: for example the number of results requested (size), the offset, highlighting, and so on.</p> <dl>
        <dlentry>
          <dt>Query</dt>
          <dd>Represents the actual query that was executed. </dd>
        </dlentry>
        <dlentry>
          <dt>Size</dt>
          <dd> Represents the number of results requested. The default size is 10. If the size is
            set to 0, the query returns the count of matches with no other results.</dd>
        </dlentry>
        <dlentry>
          <dt>From</dt>
          <dd> Results of a query are returned in the descending score order. This field specifies
            the offset, starting at 0 (default) for the first match, to return the results. </dd>
        </dlentry>
        <dlentry>
          <dt>Highlight</dt>
          <dd>This object indicates whether highlighting was requested. The
              <codeph>highlight</codeph> object contains two fields:<ul id="ul_byz_pzt_zv">
              <li><parmname>style</parmname> - Optional field that specifies the name of the
                highlighter, which can be "<userinput>html</userinput>",
                  "<userinput>ansi</userinput>", or a custom highlighter. </li>
              <li><parmname>fields</parmname> - Specifies an array of field names to which
                highlighting is restricted.</li>
            </ul></dd>
        </dlentry>
        <dlentry>
          <dt>Fields</dt>
          <dd>This object contains an array of field names which must be loaded and returned with
            the query response. If you store a field and want it returned with the result, you must
            name the field here. The field names are specified as string values. While there is no
            field name pattern matching available, you can use an asterisk "*" to specify that all
            the fields must be loaded and returned with the response.</dd>
        </dlentry>
        <dlentry>
          <dt>Facets</dt>
          <dd>This object indicates whether faceting was requested and when requested, returns the
            facets. See below for detailed information on facets.
            <codeblock>"facets": {
    "type": {
        "size": 5,
        "field": "type"
    }
}            </codeblock></dd>
        </dlentry>
        <dlentry>
          <dt>Explain</dt>
          <dd>This Boolean field when set to true prints a verbose response with full scoring
            information. </dd>
        </dlentry>
      </dl>
    </section>
    
    <section>
      <title>
        Hits
      </title>
      
      <p>
        Hits returns an array containing the matches for the executed query. The length of the array is equal to or less than the size specified in the request.
      </p>
      
      <dl>
        <dlentry>
          <dt>Index</dt>
          <dd>The unique ID of the pindex. The index name always begins with a
            string.</dd>
        </dlentry>
        <dlentry>
          <dt>ID</dt>
          <dd>The document ID that matched. </dd>
        </dlentry>
        <dlentry>
          <dt>Score</dt>
          <dd>The document score. </dd>
        </dlentry>
        <dlentry>
          <dt>Locations</dt>
          <dd>This object contains field names where matches were found. The "Locations" object
            depends on the term vectors being stored; if term vectors are not stored, locations are
            not returned in the result object. <p><b>{Field Name}</b></p><p>Lists the field names
              where the match was found. These fields are scoped so that "description: american"
              searches for "american" scoped to the "description" field. In the example below, there
              are two fields named "description" and "name".</p><p><b>{Term Found}</b></p><p>A name
              value pair whose name is the name of the term that was found and whose value is an
              array on objects representing the vector information that describes the position of
              the matched term in the field. This value is only present if the term vectors are
              calculated. For each match, the object contains the position
                (<systemoutput>pos</systemoutput>), start, end, and array positions
                (<systemoutput>array_positions</systemoutput>).</p><codeblock spectitle="Sample Locations Fragment">"locations": {
    "reviews.content": {
        "light": [
            {
                "pos": 277,
                "start": 1451,
                "end": 1456,
                "array_positions": [
                    0
                ]
           },
           {
               "pos": 247,
               "start": 1321,
               "end": 1326,
               "array_positions": [
                   3
               ]
           }
       ]
   }
},</codeblock>
          </dd>
        </dlentry>
        
        <dlentry>
          <dt>Fragments</dt>
          <dd>These objects, also known as snippets, contain field names that contain an array of
            one or more text strings. The text strings contain the "<codeph>&lt;mark&gt;</codeph>"
            tags surrounding the term that was matched in order to render highlighting. </dd>
        </dlentry>
        <dlentry>
          <dt>Fields</dt>
          <dd>This object returns the value of the field that was matched. However, unlike the
            Fragments field, this does not have any tags to render highlighting. </dd>
        </dlentry>
        <dlentry>
          <dt>Sort</dt>
          <dd>This field contains an array of one or more values that were used to sort the search
            results. Documents that don't have a value in the index for a particular field used in
            sorting will return a series of non-printable Unicode characters:
              <codeph>\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd</codeph>.</dd>
        </dlentry>
      </dl>
    </section>
    
    <section><title>Total_hits</title>
      <p>Total hits represents the total number of matches for this result. It can be any integer starting from 0.</p>
    </section>
    
    <section><title>Max_score</title>
      <p>Max score represents the highest score of all documents for this query.</p>
    </section>
    
    <section>
      <title>Took</title>
      
      <p>Time taken to complete the query.
        <codeblock>"total_hits": 56,
"max_score": 0.8041158525040355,  
"took": 1449005,</codeblock></p>
    </section>
    
    
    <section>
      
      <title>
        Response Headers
      </title>
      
      <p>
        Response headers can contain the following information:
      </p>
      
      <table frame="all"
        rowsep="1" colsep="1" id="table_wcx_nw1_4v">
        <title>Response Headers</title>
        <tgroup cols="3" align="left">
          <colspec colname="c1" colnum="1" colwidth="1.0*"/>
          <colspec colname="c2" colnum="2" colwidth="1.0*"/>
          <colspec colname="c3" colnum="3" colwidth="1.0*"/>
          <thead>
            <row>
              <entry>Code</entry>
              <entry>Example</entry>
              <entry>Valid Return Codes</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Status</entry>
              <entry>HTTP/1.1 200 OK</entry>
              <entry>200 OK<p>400 Bad Request, returned if the query is invalid
                due to malformed JSON or invalid consistency
                request.</p><p>412 if timeout occurs before the requested
                  consistency requirements are met.</p>
                </entry>
            </row>
            <row>
              <entry>Cache-Control</entry>
              <entry>no-cache</entry>
              <entry/>
            </row>
            <row>
              <entry>Content-Type</entry>
              <entry>application/json; version=1.0.0</entry>
              <entry>The API version information is included in this field unless
                the response is HTTP 400, in which case the response will be
                "text/plain: charset=utf-8"</entry>
            </row>
            <row>
              <entry>Date</entry>
              <entry>Tue, 22 Mar 2016 19:28:57 GMT</entry>
              <entry>Date of the response</entry>
            </row>
            <row>
              <entry>Transfer-Encoding</entry>
              <entry>chunked</entry>
              <entry/>
            </row>
            <row>
              <entry>X-Content-Type-Options</entry>
              <entry>nosniff</entry>
              <entry>Value "<xref
                href="https://blogs.msdn.microsoft.com/ie/2008/09/02/ie8-security-part-vi-beta-2-update/"
                format="html" scope="external">nosniff</xref>" is returned
                in case of a bad request (400 or 412) in order to deter driveby
                downloads.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      
    </section>
    
    <section>
      
      <title>
        Query Counts
      </title>
      
      <p>
        All queries return a result count. To get just the count of documents that match a
        particular query without returning documents or ids, execute the query as usual but
        specify size "<userinput>0</userinput>" to return no results, as in the following
        example:
      </p>
      
      <codeblock>curl -X POST -H "Content-Type: application/json" \
http://127.0.0.1:8094/api/index/beer-idx/query -d \
'{
    "indexName": "beer-idx",
    "size": 0,
    "from": 0,
    "explain": true,
    "highlight": {},
    "query": {
        "boost": 1,
        "query": "geo.accuracy:rooftop"
    },
    "fields": [
        "*"
    ],
    "ctl": {
        "consistency": {
            "level": "",
            "vectors": {}
        },
        "timeout": 0
    }
}'</codeblock>
      
      <p>
        You can get a count of entries in an index overall by using the REST API:
      </p>
      
        <codeblock>http://localhost:8094/api/index/beer-idx/count</codeblock>
      
    </section>
    
    <section>
      
      <title>
        Search Facets
      </title>
      
      <p>
        Facets are aggregate information collected on a particular result set. So, you have to
        already have a search in mind, and then you collect additional facet information along with
        it. All of the facet examples below are for the query "<codeph>water</codeph>" on the
        beer-sample dataset.
      </p>
      
      <p>
        FTS supports 3 types of facet: 
      </p>
      
        <ul>
        <li>
          Term Facet - A term facet counts up how many of the matching documents have a particular
          term in a particular field. Most of the time this only makes sense for relatively low
          cardinality fields, like a type or tags. It would not make sense to use it on a unique
          field like an ID.
        </li>
          
        <li>
          Numeric Range Facet - A numeric range facet works by the user defining their own buckets
          (numeric ranges). The facet then counts how many of the matching documents fall into a
          particular bucket for a particular field.
        </li>
          
        <li>
          Date Range Facet - same as numeric, but on dates instead of numbers. Full text
          search and Bleve expect dates to be in the format specified by 
          <xref
            href="https://www.ietf.org/rfc/rfc3339.txt" format="html"
            scope="external">RFC-3339</xref>, 
          which is a specific profile of
          ISO-8601 that is more restrictive.  
          
        </li>
          
      </ul>
        
      <note>Most of the time, when building a term facet you want to use the keyword analyzer.
        Otherwise multi-term values get tokenized and the results are not what you
        expect.
      </note>
      
      <p>
        <b>Examples</b>
      </p>
      
      <ul>
        
        <li>
          Term Facet - computes facet on the type field which has 2 values: <codeph>beer</codeph> and <codeph>brewery</codeph>.
          
          <codeblock>curl -X POST -H "Content-Type: application/json" \
http://localhost:8094/api/index/bix/query -d \
'{
    "size": 10,
    "query": {
        "boost": 1,
        "query": "water"
     },
    "facets": {
         "type": {
             "size": 5,
             "field": "type"
         }
    }
}'</codeblock>
          
          <p>
            The result snippet below only shows the facet section for clarity. Run the curl
            command to see the HTTP response containing the full results.
          </p>
            
            <codeblock outputclass="language-json">"facets": {
    "type": {
        "field": "type",
        "total": 91,
        "missing": 0,
        "other": 0,
        "terms": [
            {
                "term": "beer",
                "count": 70
            },
            {
                "term": "brewery",
                "count": 21
            }
        ]
    }
}</codeblock>
        
        </li>
        
        <li>
          Numeric Range Facet - computes facet on the <codeph>abv</codeph> field with 2
          buckets describing <codeph>high</codeph> (greater than 7) and
          <codeph>low</codeph> (less than 7).
          
          <codeblock>curl -X POST -H "Content-Type: application/json" \
http://localhost:8094/api/index/bix/query -d \
'{
    "size": 10,
    "query": {
        "boost": 1,
        "query": "water"
    },
    "facets": {
        "abv": {
            "size": 5,
            "field": "abv",
            "numeric_ranges": [
                {
                    "name": "high",
                    "min": 7
                },
                {
                    "name": "low",
                    "max": 7
                }
             ]
        }
    }
}'</codeblock>
          
          <p>
            Results:
          </p>
          
          <codeblock outputclass="language-json">facets": {
    "abv": {
        "field": "abv",
        "total": 70,
        "missing": 21,
        "other": 0,
        "numeric_ranges": [
            {
                "name": "high",
                "min": 7,
                "count": 13
            },
            {
                "name": "low",
                "max": 7,
                "count": 57
            }
        ]
    }
}</codeblock>
          
        </li>
        
      </ul>
      
    </section>
    
  </body>
</topic>
