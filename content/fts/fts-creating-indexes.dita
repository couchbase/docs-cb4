<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_ksl_wwk_1v">
  <title>Text Indexing</title>
  <body>
    <p>In order to perform full text queries, you must first create a full text index. Unlike N1QL or other SQL systems, you can’t run full text searches directly on data without a full text index: full text search has nothing like a table scan that can inspect documents outside the index.</p>
    <p>The process of creating an index is called <term>index mapping</term>, in which you specify
      how you want Couchbase Server to map the different fields in your JSON documents to elements
      in the full text index. You typically want a different index mapping for each type of document
      you want to search. For example, if you’re using the Couchbase
        <parmname>beer-sample</parmname> bucket, you might choose to map documents of type
        <parmname>beer</parmname> one way and documents of type <parmname>brewery</parmname>
      another.</p>
    <p>An index can contain information from one bucket only. Your user must have appropriate access
      permissions for the bucket they want to search. You can enable searches across buckets by
      using an <xref href="fts-index-alias.dita#topic_c2m_wgz_1v">index alias</xref>.</p>
    <p>To create an index, go to the Couchbase Server web console > <uicontrol>Indexes</uicontrol>
      tab > <uicontrol>Full Text</uicontrol>.</p>
    <p>Your URL might look something like this, if you replace <parmname>localhost</parmname> with
      the name of your server:
      <codeblock>http://localhost:8091/ui/index.html#/fts_list</codeblock></p>
    <p>From here, you can create, edit, clone, and delete index definitions. If you see a message
      saying “<systemoutput>Full Text not enabled on this node,</systemoutput>” access the web
      console on another node where the full text service is enabled.</p>
    <p>To create an index in the web console, using your web browser: <ul>
        <li>Navigate to the <uicontrol>Indexes</uicontrol> tab > <uicontrol>Full
          Text</uicontrol>.</li>
        <li>Click on the <uicontrol>New Index</uicontrol> button.</li>
      </ul></p>
    <p>To edit an index definition in the web console, using your web browser: <ul>
        <li>Navigate to the <uicontrol>Indexes</uicontrol> tab > <uicontrol>Full
          Text</uicontrol>.</li>
        <li>This page displays a list of full text indexes that you had previously defined, , if
          any.</li>
      </ul> Each listed index, if any, has buttons for the following operations: <ul>
        <li>The index <uicontrol>edit</uicontrol> button allows you to update an index definition.
          Updating the index definition causes it to be rebuilt.</li>
        <li>the index <uicontrol>clone</uicontrol> button allows you to copy an index
          definition.</li>
        <li>the index <uicontrol>delete</uicontrol> button allows you to delete an index definition.
            <note>When you click on the index <uicontrol>delete</uicontrol> button, you will have a
            chance to first confirm the deletion operation. Deleting an index, importantly, is a
            permanent operation.</note></li>
      </ul></p>
    <section><title>Index Mapping</title>
      <p>The simplest way to create an index is to use the default index mapping with no further
        customization. This is what you did in <xref href="fts-quick-start.dita">Quick Start</xref>.
        <term>Default index mapping</term> refers to the index mapping that Couchbase Server uses
        for JSON documents that don’t match a more specific document mapping based on document type.
        This example relies on dynamic mapping, explained later, to decide how to index
        the individual fields in the documents. <note type="warning">Using the default index mapping
          with dynamic mapping is a good way to ensure that full text search is working properly on
          a small set of data, but it’s not very selective so it tends to write a lot of information
          into the index. For this reason, default index mapping may be slow or result in high load
          if used on a production-sized dataset. </note></p><ol>
            <li>Click the button <uicontrol>New Full Text Index</uicontrol>. <image placement="break"
              href="images/fts-create-index.png" width="570" id="image_x44_s1l_1v"/></li>
            <li>Give your index a name like “<userinput>beer-sample-idx</userinput>” and select the bucket
              you want to index from the drop-down list. If you click on “<uicontrol>Type
                Mappings</uicontrol>,” you will only see one type listed, which is
              “<systemoutput>default</systemoutput>.” <image placement="break"
                href="images/fts-create-index-2.png" width="300" id="image_s1h_x1l_1v"/></li>
            <li>Click the “<uicontrol>Create Index</uicontrol>” button. You will then see a screen that
              shows you how many documents are in your index and the percentage complete. <image
                placement="break" href="images/fts-create-index-3.png" width="300" id="image_zn3_1bl_1v"
              /></li>
            <li>Click on the <uicontrol>Full Text</uicontrol> link again to search the index you just created.</li>
            <li>Your search shows the list of document IDs that contain the best matches for whatever search you ran, in order of score, with the highest scoring document listed first.</li>
          </ol>
    </section>
    <section><title>Custom Mapping</title>
      <p>There are many additional controls that can be used to build indexes on your documents just the
        way you want them. These can be found under <uicontrol>Indexes</uicontrol> > <uicontrol>Full
          Text</uicontrol> > <b>New</b> or <uicontrol>Edit Full Text Index</uicontrol> buttons.</p>
      <p>Document mapping works as follows: <ol>
        <li>Specify the type of the document you want to include in your index. You can include more than one type of document in a single index but you can only index documents in a single bucket. </li>
        <li> For each type of document, you specify how to index its fields and embedded structures. </li>
        <li>The term <parmname>field</parmname> refers to a name value pair in JSON where the value is simple (i.e. not an object).  </li>
        <li>Use a <b>child mapping</b> to index embedded objects, i.e. name-value pairs where the
          value is of type object. You can add field mappings as in step 3 to describe how the
          name-value pairs in the embedded object should be indexed.</li>
        <li>To index arrays, use fields for arrays of simple values and use a child mapping for arrays
          of objects. In other words, you design your mapping so that you essentially ignore the
          array and FTS “just works” even though there are multiple values. For example, to index
          the following document containing an array, add a field of type <parmname>text</parmname>
          for <parmname>pachyderms</parmname>. Queries work just like any other field. If included
          in <codeph>_all</codeph>, a query for <parmname>rhinoceros</parmname> matches this
          document, or you can scope to the field using the normal field scoping syntax:
          <codeph>pachyderms:rhinoceros</codeph>.
          <codeblock>{
            "pachyderms": ["hippopotamus", "rhinoceros",  "elephant"]
            }</codeblock></li>
      </ol></p>
      <p><b>Type Mappings</b></p>
      <p>Couchbase Server indexes JSON documents differently depending on the type of the JSON document.
        For example, you can create a full text index that only includes documents of
        type="brewery," and you can specify exactly how you want the documents mapped. To do this,
        click <uicontrol>Add Type Mapping</uicontrol> and enter a type name that matches the type
        attribute of the JSON document you want to index.</p><p>There is also a special type mapping for the <i>Default Type</i>. The default type mapping is created for every index automatically and is used for any document whose type does not match another type mapping or that doesn’t have a type attribute. <note>You must disable the default mapping if you <i>only</i> want documents of the types that you specify to be in the index. If default mapping is enabled, Couchbase Server will use it to include all the documents in your index that don’t match another type mapping, which may or may not be what you want.</note></p>
      <p>Each type mapping in an index definition can be enabled or disabled. Disabling a type
        mapping can be used to ignore documents of a certain type. For example, if you want to index
        all documents in the beer-sample bucket <i>except</i> "breweries" you could simply create a
        type mapping for breweries and then check disabled (assuming the default mapping is also
        disabled).</p>
      <p>You can also specify an analyzer to use for a type mapping. This defaults to inheriting the
        Default Analyzer specified in "<uicontrol>Advanced</uicontrol>".</p>
      <p><b>Field Mapping</b></p>
      <p>For any type mapping, you can insert a child field to index the values in your JSON
        document with more control about what appears in the index and how. The word "field" in
        index mapping refers to a name-value pair in JSON whose value is a simple type: string,
        number, true, false, or null. These child fields refer to name-value pairs that are directly
        under an object. In the brewery sample below, <parmname>name</parmname>,
        <parmname>city</parmname>, and <parmname>description</parmname> are all fields.</p>
      <p>You can index the <parmname>description</parmname> field of every document in the
        beer-sample bucket, you can create an index, hover over the <i>default index</i>, click on
        the plus that appears, and select "<uicontrol>Insert child field</uicontrol>". Because both
        beers and breweries have a description field, this default mapping will end up with every
        document in it.
        <codeblock>{
          "name": "21st Amendment Brewery Cafe",
          "city": "San Francisco",
          ...
          "description": "The 21st Amendment Brewery offers a variety of award winning house made brews and American grilled cuisine in a comfortable loft like setting. Join us before and after Giants baseball games in our outdoor beer garden. A great location for functions and parties in our semi-private Brewers Loft. See you soon at the 21A!",
          "address": [
          "563 Second Street"
          ],
          "geo": {
          "accuracy": "ROOFTOP",
          "lat": 37.7825,
          "lon": -122.393
          }
          }</codeblock></p>
      <p>There are four values and four checkboxes you can specify when you insert a child field. <ul>
        <li><parmname>field</parmname>: The name of name-value pair in the JSON document.</li>
        <li><parmname>type</parmname>: Defaults to text, but other possible values are object,
          number, datetime, and disabled. <note>Type object is not supported in Developer Preview
            and will cause an index mapping to fail.</note></li>
        <li><parmname>searchable as</parmname>: You can change the name that is written into the
          index, so if a user limits their search to a specific field they would use this value
          instead of the actual name of the field in the JSON. For example, if we mapped the field
          <parmname>description</parmname> "searchable as" <parmname>info</parmname>, instead of
          typing "description:semi-private", users would instead search for "info:semi-private". </li>
        <li><parmname>analyzer</parmname>: The analyzer to use for this specific field. </li>
      </ul>In addition, there are four checkboxes: <ul>
        <li><uicontrol>index</uicontrol>: If unchecked, fields that match this will not be
          indexed. If the store checkbox is checked, they will still be stored.</li>
        <li><uicontrol>store</uicontrol>: Normally, only the document IDs are written to the
          index. If this is checked, the document contents are also written to the index. This
          enables highlighting and result snippets but generally results in larger indexes that
          are slower to build. Since gets and multi-gets are quite fast, usually users don’t need
          to store the additional information in the index.</li>
        <li><uicontrol>Include in _all field</uicontrol>: If this is checked, the text in this
          field will be searchable in query strings without prefixing the field name. If
          unchecked, the query must include this prefix, for example, "description:modern."</li>
        <li><uicontrol>include term vectors</uicontrol>: Term vectors are the locations of terms
          in a particular field. Some functionality, such as snippets, highlighting, and phrase
          search, requires term vectors and can’t be used without them. Not storing term vectors
          results in smaller indexes and faster index build times.</li>
      </ul> In this example, you would create the mapping like this:
        <codeblock>field: description
          type: text
          searchable as: description (automatically filled in)
          analyzer: inherit</codeblock>
        Check "<uicontrol>store</uicontrol>" so that all four checkboxes are checked. This makes it
        easier to test and debug your new index because search results will include snippets with
        the search terms highlighted. The downside of storing the information is the extra size and
        time it takes to build, but these should be acceptable in this case.</p>
      <p>Field is the name of the name-value pair in the JSON. In our example, the
        <parmname>description</parmname> property is at the top level but if you need to map
        name-value pairs that are embedded in complex structures, you need to use a <xref
          href="#topic_cmy_jzk_1v/child-mapping" format="dita">child mapping</xref> instead.</p>
      <p id="child-mapping"><b>Insert Child Mapping</b></p>
      <p>Child Mappings are similar to field mappings, but instead of indexing simple values, they enable you to index embedded structures in a JSON document. Use a child mapping when the value of  a name-value pair is an object.</p>
      <p>For example, consider the brewery document in the beer sample bucket. This document
        contains an embedded object called "geo" that has three fields: accuracy, lat, and lon.
        <codeblock>"geo": {
          "accuracy": "ROOFTOP",
          "lat": 37.7825,
          "lon": -122.393
          }   </codeblock>
        To create an index with an object mapping for the geo structure using the Web Console, do
        the following:<ol>
          <li>Create a type mapping for breweries.</li>
          <li>Insert a child mapping for the attribute "<parmname>geo</parmname>".</li>
          <li>In the "<parmname>geo structure</parmname>", insert a child field for
            "<parmname>accuracy</parmname>".</li>
          <li>Insert child fields for "<parmname>lat</parmname>" and "<parmname>lon</parmname>" and
            set them to type <codeph>number</codeph>.</li>
          <li>In a search on your newly created index, you can search the accuracy field using a dot
            syntax: "<codeph>geo.accuracy:rooftop</codeph>".</li>
          <li>You can also do range searches on the geo fields: "<codeph>geo.accuracy:rooftop
            +geo.lat:>37 +geo.lon:>141</codeph>".</li>
        </ol>The index definition you created will look like the example below. You can create the
        same index definition with object mappings using the REST API:
        <codeblock>{
          "type": "fulltext-index",
          "name": "beer-idx",
          "uuid": "af4c073428d51ed5",
          "sourceType": "couchbase",
          "sourceName": "beer-sample",
          "sourceUUID": "a6e631d6c59692d8a8e4280615afd727",
          "planParams": {
          "maxPartitionsPerPIndex": 32,
          "numReplicas": 0,
          "hierarchyRules": null,
          "nodePlanParams": null,
          "pindexWeights": null,
          "planFrozen": false
          },
          "params": {
          "mapping": {
          "analysis": {
          "analyzers": {},
          "char_filters": {},
          "token_filters": {},
          "token_maps": {},
          "tokenizers": {}
          },
          "byte_array_converter": "json",
          "default_analyzer": "standard",
          "default_datetime_parser": "dateTimeOptional",
          "default_field": "_all",
          "default_mapping": {
          "display_order": "1",
          "dynamic": true,
          "enabled": false,
          "fields": [],
          "properties": {}
          },
          "default_type": "_default",
          "type_field": "type",
          "types": {
          "brewery": {
          "display_order": "0",
          "dynamic": false,
          "enabled": true,
          "fields": [],
          "properties": {
          "geo": {
          "display_order": "0",
          "dynamic": true,
          "enabled": true,
          "fields": [],
          "properties": {
          "accuracy": {
          "dynamic": false,
          "enabled": true,
          "fields": [
          {
          "analyzer": "",
          "date_format": null,
          "display_order": "2",
          "include_in_all": false,
          "include_term_vectors": true,
          "index": true,
          "name": "accuracy",
          "store": true,
          "type": "text"
          }
          ],
          "properties": {}
          },
          "lat": {
          "dynamic": false,
          "enabled": true,
          "fields": [
          {
          "analyzer": "",
          "date_format": null,
          "display_order": "1",
          "include_in_all": true,
          "include_term_vectors": true,
          "index": true,
          "name": "lat",
          "store": true,
          "type": "number"
          }      
          ],
          "properties": {}
          },
          "lon": {
          "dynamic": false,
          "enabled": true,
          "fields": [
          {
          "analyzer": "",
          "date_format": null,
          "display_order": "0",
          "include_in_all": true,
          "include_term_vectors": true,
          "index": true,
          "name": "lon",
          "store": true,
          "type": "number"
          }
          ],
          "properties": {}
          }
          }
          }
          }
          }
          }
          },
          "store": {
          "kvStoreName": "forestdb"
          }
          },
          "sourceParams": {
          "authPassword": "",
          "authSaslPassword": "",
          "authSaslUser": "",
          "authUser": "beer-sample",
          "clusterManagerBackoffFactor": 0,
          "clusterManagerSleepInitMS": 0,
          "clusterManagerSleepMaxMS": 2000,
          "dataManagerBackoffFactor": 0,
          "dataManagerSleepInitMS": 0,
          "dataManagerSleepMaxMS": 2000,
          "feedBufferAckThreshold": 0,
          "feedBufferSizeBytes": 0
          }
          }</codeblock></p>
      <p><b>Advanced Index Settings</b></p>
      <p><b>Type field </b></p>
      <p>By default, Couchbase Server will look for an attribute called "type" in your document and
        will use that for type mappings. You can change the name of the "type" field by clicking on
        the "<uicontrol>Advanced</uicontrol>" options and changing the value of the "<uicontrol>Type
          Field</uicontrol>".</p>
      <p><b>Default Type</b></p>
      <p>Documents that match the default type mapping rules are written to the index as being of
        this type. The field defaults to "<codeph>_default</codeph>", which you can change to avoid
        conflicts if "<codeph>_default</codeph>" is a valid type field value in your JSON
        documents.</p>
      <p><b>Default Analyzer  </b></p>
      <p>This analyzer is used by default when creating an index, if no other analyzer is specified.
        When you define your index mapping, you can override this value in a number of places, for
        example, when you create type mappings or field mappings.</p>
      <p><b>Default Date/Time Parser </b></p>
      <p>The name of a Date/Time parser that will be used to parse a date stored as a string. </p>
      <p id="def-field-all"><b>Default Field </b></p>
      <p>The default field is searched when a user query does not limit the scope of a search to a
        particular field. This is highly convenient because most of the time you want a user to be
        able to search for a term wherever it shows up in the index. For example, if you create a
        text index of breweries, as long as terms are included in the <codeph>_all</codeph> field,
        you can query "<codeph>La Jolla</codeph>" and find it without specifying "<codeph>name:la
          jolla</codeph>" or "<codeph>city:la jolla</codeph>". You would only need to change the
        name of this value if your JSON documents already include a field called
        "<codeph>_all</codeph>". </p>
    </section>
    <section><title>Index Aliases</title>
        <p>An <term>index alias</term> is a special "virtual index" that points to other, real full text indexes.</p><p>Similar to a symbolic link in a file system, an index alias allows a naming level of indirection, so that applications can refer to a stable name (the alias' name) while administrators can dynamically re-target or re-point the index alias to different, real indexes. This can be useful for applications that are in production. For example, say you build an index my-index. You then build my-index-alias and point it to my-index. Your production application can search my-index-alias until you need to adjust the index, perhaps to change the index mapping or the analyzer. Any such change will require the index to be rebuilt, which would mean the current index will be out of commission.  Instead, you can clone the index and give it a new name, like my-better-index. Once this index has had the time to build, you can test it before putting it into production. If you decide it's ready, you then modify the definition of my-index-alias to remove my-index and instead point to my-better-index. By using an alias like this, the switch to my-better-index will be instantaneous and the index will already be fully ready to use. </p>
        <p>Similar to an email list alias, an index alias in FTS can also "fan-out" and refer to multiple, real indexes. Aliases can also refer to other aliases. A query on an index alias will be scatter-gathered by FTS to all of the actual, real indexes and FTS will provide merged results from those scatter-gathered queries.</p>
    </section>
  </body>
</topic>
