<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_ksl_wwk_1v">
  
  <title>
    Creating Indexes
  </title>
  
  <shortdesc>
    Full Text Searches are supported by specially purposed indexes, which can be created either from the
    Couchbase Web Console, or by means of the REST API.
  </shortdesc>
  
  <body>
    
    <section id="indexes-and-full-text-search">
      
      <title >
        Indexes and Full Text Search
      </title>
      
      <p>
        Every Full Text Search is performed on
        a user-created <i>Full Text Index</i>, which contains the targets
        on which searches are to be performed: these targets are values derived from the textual and
        other contents of documents within a specified bucket.
      </p>
      
      <p>
        Index-creation is configurable, and can be highly selective:
        documents can be user-grouped into
        different <i>types</i> (for example, <codeph>airline</codeph> documents
        versus <codeph>hotel</codeph> documents), based on the document-IDs or the values
        of a designated document-field; and
        each document-type can be assigned its own
        index-mapping. Each index-mapping in turn can be assigned its own <i>analyzers</i>, can
        be applied to a specific subset of document-fields, and can be explicitly included in
        or excluded from the index.
      </p>
      
      <p>
        Additionally, searches can be performed across multiple buckets, by means
        of <i>index aliases</i>.
      </p>
      
      <p>
        This section provides detailed explanations of how indexes can be created by means of the
        Couchbase Web Console. Additionally, it explains how index-creation can be achieved with
        the Couchbase REST API: see
        <xref href="./fts-creating-indexes.dita#topic_ksl_wwk_1v/index-creation-with-the-rest-api" scope="local" format="dita">Index-Creation with the REST API</xref>, 
        below.
      </p>
      
    </section>
    
    <section id="creating-a-full-text-index">
      
      <title>
        Creating a Full Text Index
      </title>
      
      <p>
        Index-creation can be performed by means of the Couchbase Web Console. The basic
        procedure is outlined in 
        <xref href="./fts-searching-from-the-ui.dita" scope="local" format="dita">Searching from the UI</xref>.
        The current page explains the more
        advanced aspects of index-creation, and shows how they can be
        managed from the console.
      </p>
      
    </section>
    
    <section id="accessing-and-managing-full-text-indexes">
      
      <title>
        Accessing and Managing Full Text Indexes
      </title>
      
      <p>
        Full Text Indexes are different from the <i>Global</i> indexes that are
        accessed under the <b>Indexes</b> tab in the left-hand navigation panel of the Couchbase
        Web Console. Full Text Indexes are accessed from the <b>Search</b> tab: left-click on 
        this to display the <b>Full Text Search</b> panel, which
        contains a tabular presentation of currently existing indexes, with a row for each
        index. (See
        <xref href="./fts-searching-from-the-ui.dita" scope="local" format="dita">Searching from the UI</xref>
        for a full illustration.)
        To manage an index, left-click on its row. The row expands, as
        follows:
      </p>
      
      <p>
        <image href="./images/fts-index-management-ui.png" id="fts_index_management_ui" align="left" width="820"/>
      </p>
      
      <p>
        Three buttons are displayed:
      </p>
        
        <ul>
          
          <li>
            
            <uicontrol>Delete</uicontrol> causes the current index to be deleted.
            
            <p>
              
            </p>
            
          </li>
          
          <li>
            
            <uicontrol>Clone</uicontrol> brings up the <b>Clone Index</b> screen, which allows the a copy 
            of the current index to
            be modified as appropriate and saved under a new name.
            
            <p>
              
              
            </p>
            
          </li>
          
          <li>
            <p>
              <uicontrol>Edit</uicontrol> brings up the <b>Edit Index</b> screen, which allows
              the index to be modified.
              Saving modifications causes the index to be rebuilt.
            </p>
            
            <p>
              Note that both the <uicontrol>Edit Index</uicontrol> and <uicontrol>Clone Index</uicontrol>
              screens are in most respects the same as the <uicontrol>Add Index</uicontrol> screen,
              which was itself described in 
              <xref href="./fts-searching-from-the-ui.dita" scope="local" format="dita">Searching from the UI</xref>.
            </p>
            
          </li>

        </ul>
      
    </section>
    
    <section id="specifying-type-identifiers">
      
      <title>
        Specifying Type Identifiers
      </title>
      
      <p>
        A <i>type identifier</i> allows the documents in a bucket to be identified by the index
        according to their <i>type</i>. When the
        <uicontrol>Add Index</uicontrol>, <uicontrol>Edit Index</uicontrol>, or <uicontrol>Clone Index</uicontrol>
        screen is accessed, a <uicontrol>Type Identifier</uicontrol> panel is displayed:
      </p>
      
      <p>
        <image href="./images/fts-type-identifier-ui.png" id="fts_type_identifer_ui" align="left" width="460"/>
      </p>
      
      <p>
        Three options are provided, each of which gives the index a particular way of determining the type
        of each document in the bucket:
      </p>
      
      <ul>
        
        <li>
          <b>JSON type field</b>: The name of a document-field. The value specified
          for this field is used by the index to determine the type of the document. 
          The default value is <codeph>type</codeph>: meaning that the index searches for a field
          in each document whose name is <codeph>type</codeph>. Each document that
          contains a field with
          that name is duly included in the index, with the 
          value of the field specifying the type of the document. Note that the value cannot be
          an array or JSON object.
          
          <p>
            
          </p>
          
        </li>
        
        
        <li>
          <b>Doc ID up to separator</b>: The characters in the ID of each document,
          up to but not including the separator. For example, if the document's
          ID is <codeph>hotel_10123</codeph>, the value <codeph>hotel</codeph> is
          determined by the index to be the type of the document. The value entered into
          the field should be the separator-character used in the ID: for example, 
          <codeph>_</codeph>, if that character is the underscore.
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <b>Doc ID with regex</b>: A regular expression that is applied by the
          index to the ID of each document. The resulting value is determined to
          be the type of the document. (This option may be used when the targeted document-subset
          contains neither a suitable <b>JSON type field</b> nor an ID that follows
          a naming convention suitable for <b>Doc ID up to separator</b>.) The value
          entered into the field should be the regular expression to be used.
          
          <p>
            
          </p>
          
        </li>
        
      </ul>
      
    </section>
    
    <section id="specifying-type-mappings">
      
      <title>
        Specifying Type Mappings
      </title>
      
      <p>
        Whereas a <i>type identifer</i> tells the index how to determine
        the position in each document of the characters 
        that specify the document's type, a <i>type mapping</i> specifies the 
        characters themselves. Thus, if <b>Doc ID up to separator</b> is used
        as a type identifier, and the underscore is specified as the separator-character,
        a type mapping of <i>hotel</i> ensures that
        <codeph>hotel_10123</codeph>, rather than <codeph>airline_10</codeph>, is indexed.
      </p>
      
      <p>
        When the
        <uicontrol>Add Index</uicontrol>, <uicontrol>Edit Index</uicontrol>, or <uicontrol>Clone Index</uicontrol>
        screen is accessed, the <uicontrol>Type Mappings</uicontrol> panel can be opened. The
        default setting is displayed:
      </p>
      
      <p>
        <image href="./images/fts-type-mappings-ui-closed.png" id="fts_type_mappings_ui_closed" align="left" width="720"/>
      </p>
      
      <p>
        Left-click on the <uicontrol>+ Add Type Mapping</uicontrol> button. The display now
        appears as follows:
      </p>
      
      <p>
        <image href="./images/fts-type-mappings-ui-add.png" id="fts_type_mappings_ui_add" align="left" width="700"/>
      </p>
      
      <p>
        The display indicates that a single type mapping is currently defined, which is 
        <codeph>default</codeph>. This is a special type mapping
        created by every index automatically: it is applied to each document 
        whose type <i>either</i> does not match a user-specified type mapping,
        <i>or</i> has no recognized type attribute. Therefore, if the default mapping is
        left enabled, all documents are included in the index, regardless of
        whether the user actively specifies type mappings. To ensure that only
        documents corresponding to the user's specified type mappings are included
        in the index, the default type mapping must be disabled (see below for an
        example).
      </p>
      
      <p>
        Each type mapping is listed as either <b>dynamic</b>, meaning 
        that all fields are considered available for indexing;
        or <b>only index specified fields</b>, meaning that
        only fields specified by the user are indexed.
        Therefore, specifying the default index with dynamic mapping
        creates a large index whose response times may be relatively slow; and is,
        as such, an option potentially unsuitable for post-production deployments.
      </p>
      
      <p>
        For information on how values are data-typed when dynamic mapping is specified,
        see the section below, 
        <xref href="./fts-creating-indexes.dita#topic_ksl_wwk_1v/document-fields-and-data-types" scope="local" format="dita">Document Fields and Data Types</xref>.
      </p>
      
      <p>
        To specify a type mapping, type an appropriate string (for example, <codeph>hotel</codeph>) 
        into the interactive text field. Note the <uicontrol>only index specified fields</uicontrol>
        checkbox: if this is checked, only user-specified fields from the document are
        included in the index. (For an example, see
        <xref href="./fts-creating-indexes.dita#topic_ksl_wwk_1v/specifying-fields" scope="local" format="dita">Specifying Fields</xref>, below.)
      </p>
      
      <p>
        Optionally, an <i>analyzer</i> can be specified for the type mapping: for all queries
        that do indeed support use of an analyzer, the specified analyzer will be applied,
        rather than the default analyzer (which is itself specified in the <b>Advanced</b> pane, as described
        below, in
        <xref href="./fts-creating-indexes.dita#topic_ksl_wwk_1v/specifying-advanced-settings" scope="local" format="dita">Specifying Advanced Settings</xref>). A list of
        available analyzers can be accessed and selected from, by means of the pull-down
        menu to the right of the interactive text-field:
      </p>
      
      <p>
        <image href="./images/fts-type-mappings-ui-analyzers-menu.png" id="fts_type_mappings_ui_analyzers_menu" align="left" width="320"/>
      </p>
      
      <p>
        The default value, <codeph>inherit</codeph>, means that the type mapping inherits the
        default analyzer. 
        Note that custom analyzers can be created and stored for the index that is being defined,
        by means of the <uicontrol>Analyzers</uicontrol> panel, described below in
        <xref href="./fts-creating-indexes.dita#topic_ksl_wwk_1v/creating-analyzers" scope="local" format="dita">Creating Analyzers</xref>.
        On creation, all custom analyzers are available for association with a type mapping, and so
        appear in the pull-down menu shown above.
      </p>
      
      <p>
        Additional information on analyzers can also be found on the page
        <xref href="./fts-using-analyzers.dita" scope="local" format="dita">Understanding Analyzers</xref>.
      </p>
      
      <p>
        Left-click on <uicontrol>OK</uicontrol> to save.
      </p>
      
      <p>
        The <uicontrol>Type Mappings</uicontrol> panel now appears as follows:
      </p>
      
      <p>
        <image href="./images/fts-type-mappings-ui-addition-both-checked.png" id="fts_type_mappings_ui_addition_both_checked" align="left" width="540"/>
      </p>
      
      <p>
        Note that the checkbox to the left of each of the two specified type mappings,
        <codeph>hotel</codeph> and <codeph>default</codeph>, is checked. Because
        <codeph>default</codeph> is checked, <i>all</i> documents in the bucket (not
        merely those that correspond to the <codeph>hotel</codeph> type mapping) will be
        included in the index. To ensure that only <codeph>hotel</codeph> documents
        are included, <i>uncheck</i> the checkbox for <codeph>default</codeph>. The panel
        now appears as follows:
      </p>
      
      <p>
        <image href="./images/fts-type-mappings-ui-addition-default-unchecked.png" id="fts_type_mappings_ui_addition_default_unchecked" align="left" width="540"/>
      </p>
      
      <p>
        Note also that should you wish to ensure that all documents in the bucket are included
        in the index <i>except</i> those that correspond to the <codeph>hotel</codeph> type
        mapping, <i>uncheck</i> the checkbox for <codeph>hotel</codeph>:
      </p>
      
      <p>
        <image href="./images/fts-type-mappings-ui-addition-both-unchecked.png" id="fts_type_mappings_ui_addition_both_unchecked" align="left" width="540"/>
      </p>
      
    </section>
    
    <section id="specifying-fields">
      
      <title>
        Specifying Fields
      </title>
      
      <p>
        A Full Text Index can be defined not only to include (or exclude)
        documents of a certain <i>type</i>,
        but also to include (or exclude) specified <i>fields</i> within each of the typed 
        documents.
      </p>
      
      <p>
        To specify one or more fields, hover with the mouse cursor over a row in the
        <b>Type Mappings</b> panel that contains an enabled type mapping. Buttons labeled
        <uicontrol>edit</uicontrol> and <uicontrol>+</uicontrol> appear:
      </p>
      
      <p>
        <image href="./images/fts-type-mappings-ui-fields-buttons.png" id="fts_type_mappings_ui_fields_buttons" align="left" width="700"/>
      </p>
      
      <p>
        Left-clicking on the <uicontrol>edit</uicontrol> button displays the following interface:
      </p>
      
      <p>
        <image href="./images/fts-type-mappings-ui-edit.png" id="fts_type_mappings_ui_edit" align="left" width="700"/>
      </p>
      
      <p>
        This allows the mapping to be deleted or associated with a different analyzer. If the
        <b>only index specified fields</b> checkbox is checked, only fields specified by the user
        are included in the index. Left-clicking
        on the <uicontrol>+</uicontrol> button displays a pop-up that features two options:
      </p>
      
      <p>
        <image href="./images/fts-type-mappings-ui-field-options.png" id="fts_type_mappings_ui_field_options" align="left" width="700"/>
      </p>
      
      <p>
        These options are described in the following sections.
      </p>
      
    </section>
    
    <section id="inserting-a-child-field">
      
      <title>
        Inserting a Child Field
      </title>
      
      <p>
        The option <uicontrol>insert child field</uicontrol> allows a field to be individually
        included for (or excluded from) indexing, provided that it contains a single value or an array, rather
        than a JSON object. Selecting this option displays the following:
      </p>
      
      <p>
        <image href="./images/fts-type-mappings-child-field-dialog.png" id="fts_type_mappings_child_field_dialog" align="left" width="700"/>
      </p>
      
      <p>
        The interactive fields and checkboxes are:
      </p>
      
      <ul>
        <li>
          <uicontrol>field</uicontrol>: The name of any field within the document that contains
          a single value or an array, rather than a JSON object.
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <uicontrol>type</uicontrol>: The <i>data-type</i> of the value of the field. This can
          be <codeph>text</codeph>, <codeph>number</codeph>, <codeph>datetime</codeph>, <codeph>boolean</codeph>,
          <codeph>disabled</codeph>, or <codeph>geopoint</codeph>; and can be selected from the
          field's pull-down menu, as follows:
          
          <p>
            <image href="./images/fts-type-mappings-ui-select-data-type.png" id="fts_type_mappings_ui_select_data_type" align="left" width="300"/>
          </p>
          
        </li>
        
        <li>
          <uicontrol>searchable as</uicontrol>: Typically identical to the <uicontrol>field</uicontrol> (and
          dynamically supplied during text-input of the <uicontrol>field</uicontrol>-value). This can be
          modified, to indicate an alternative field-name, whose associated value thereby becomes included
          in the indexed content, rather than that associated with the field-name specified in
          <b>field</b>.
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <uicontrol>analyzer</uicontrol>: An analyzer optionally to be used for the
          field. The list of available analyzers can be displayed by means of the
          field's pull-down muenu, and so selected from.
          
          <p>
            
          </p>
        </li>
        
        <li>
          <uicontrol>index</uicontrol>: When checked, the field is indexed; when unchecked,
          the field is not indexed. This may be used, therefore, to explicitly remove an already-defined
          field from the index.
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <uicontrol>store</uicontrol>: When checked, the field-content is included in the set of
          values returned from a search; when unchecked, the field-content is not so included. Note that
          inclusion of field-content specifically permits <i>highlighting</i> of results, so that matched
          expressions can be easily seen; and generally assists in debugging procedures. However, it also 
          results in larger indexes and
          longer processing-times.
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <uicontrol>include in _all field</uicontrol>: When checked, the field
          is included in the definition of <uicontrol>_all</uicontrol>, which is
          the field specified by default in the <uicontrol>Advanced</uicontrol>
          panel. When unchecked, the field is not so
          included. Inclusion means that when <i>query strings</i> are used to
          specify searches, the text in the current field is searchable without
          the field-name requiring a prefix (thus, a search on
          <codeph>description:modern</codeph> can be accomplished simply by specifying
          <codeph>modern</codeph>).
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <uicontrol>include term vectors</uicontrol>: When checked, term
          vectors are included. When unchecked, term vectors are not
          included. Term vectors are the locations of terms
          in a particular field. Certain kinds of functionality (such as highlighting, and phrase
          search) require term vectors. Inclusion of term vectors
          results in larger indexes and correspondingly slower index build-times.
          
          <p>
            
          </p>
          
        </li>
        
      </ul>
      
      <p>
        Note that when the value of the specified field is an array, the
        array-values are all indexed and searched individually: no special
        configuration is required.
      </p>
      
      <p>
        The dialog, when completed, might look as follows:
      </p>
      
      <p>
        <image href="./images/fts-type-mappings-child-field-dialog-complete.png" id="fts_type-mappings_child_field_dialog_complete" align="left" width="700"/>
      </p>
      
      <p>
        Left-click on <uicontrol>OK</uicontrol>. The field is saved, and its principal attributes
        displayed on a new row:
      </p>
      
      <p>
        <image href="./images/fts-type-mappings-child-field-saved.png" id="fts_type-mappings_child_field_saved" align="left" width="700"/>
      </p>
      
      <p>
        Note that when this row is hovered over with the mouse, an <uicontrol>Edit</uicontrol> button appears,
        whereby updates to the definition can be made.
      </p>
      
    </section>
    
    <section id="inserting-a-child-mapping">
      
      <title>
        Inserting a Child Mapping
      </title>
      
      <p>
        The option <uicontrol>insert child mapping</uicontrol> specifies a document-field
        whose value is a JSON object. Selecting this option
        displays the following:
      </p>
      
      <p>
        <image href="./images/fts-type-mappings-child-mapping-dialog.png" id="fts_type_mappings_child_mapping_dialog" align="left" width="700"/>
      </p>
      
      <p>
        The following interactive field and checkbox are displayed:
      </p>
      
      <ul>
        <li>
          <uicontrol>{}</uicontrol>: The name of a field whose value is a JSON object. Note that
          an analyzer can be specified for the field, by means of the pull-down menu.
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <uicontrol>only index specified fields</uicontrol>: When checked, only fields explicitly
          specified are added to the index. Note that the JSON object specified as the value for 
          <uicontrol>{}</uicontrol> has multiple fields of its own. Checking this
          box ensures that all or a subset of these can be selected for indexing.
          
          <p>
            
          </p>
          
        </li>
        
      </ul>
      
      <p>
        When completed, this panel might look as follows (note that <codeph>reviews</codeph> is
        a field within the <codeph>hotel</codeph>-type documents of the <codeph>travel-sample</codeph> bucket
        whose value is a JSON object):
      </p>
      
      <p>
        <image href="./images/fts-type-mappings-child-mapping-dialog-complete.png" id="fts_type_mappings_child_mapping_dialog_complete" align="left" width="700"/>
      </p>
      
      <p>
        Save by left-clicking <uicontrol>OK</uicontrol>. The field is now displayed as part of the
        <codeph>hotel</codeph> type mapping. Note that by hovering over the <codeph>reviews</codeph>
        row with the mouse, the <uicontrol>Edit</uicontrol> and <uicontrol>+</uicontrol> buttons
        are revealed: the <uicontrol>+</uicontrol> is present because <codeph>reviews</codeph> is
        an object that contains child-fields; which can now themselves be individually indexed. Left-click on
        this, and a child-field, such as <codeph>content</codeph>, can be specified:
      </p>
      
      <p>
        <image href="./images/fts-type-mappings-child-mapping-add-field.png" 
          id="fts_type_mappings_child_mapping_add_field.png" align="left" width="700"/>
      </p>
      
    </section>
    
    <section id="creating-analyzers">
      
      <title>
        Creating Analyzers
      </title>
      
      <p>
        Analyzers increase search-awareness by transforming input text into token-streams, which
        permit the management of richer and more finely controlled forms of text-matching. An 
        analyzer consists of modules, each of
        which performs a particular role in the transformation (for example, removing
        undesirable characters; transforming standard words into <i>stemmed</i> or otherwise modified forms,
        referred to as
        <i>tokens</i>; and performing miscellaneous post-processing activities). 
        For more information on analyzers, see
        <xref href="./fts-using-analyzers.dita" scope="local" format="dita">Understanding Analyzers</xref>.
      </p>
      
      <p>
        A default selection of analyzers is made available from the pull-down menu provided by the
        <uicontrol>Type Mappings</uicontrol> interface, discussed above. Additional analyzers can
        be custom-created, by means of the <uicontrol>Analyzers</uicontrol> panel, which appears
        as follows:
      </p>
      
      <p>
        <image href="./images/fts-analyzers-panel-initial.png" id="fts_analyzers_panel_initial" align="left" width="620"/>
      </p>
      
      <p>
        To create a new analyzer, left-click on the <uicontrol>+ Add Analyzer</uicontrol> button. The
        <b>Custom Analyzer</b> dialog appears:
      </p>
      
      <p>
        <image href="./images/fts-custom-analyzer-dialog-initial.png" id="fts_custom_analyzer_dialog_initial" align="left" width="380"/>
      </p>
      
      <p>
        The dialog contains four interactive panels.
      </p>
      
      <ul>
        <li>
          <b>Name</b>: A suitable, user-defined name for the analyzer.
          
          <p>
            
          </p>
        </li>
        
        <li>
          <b>Character Filters</b>: One or more available character filters. (These
          strip out undesirable characters from input: for example, the <codeph>html</codeph> 
          character filter removes HTML tags, and indexes HTML text-content alone.) To select from the
          list of available character filters, use the pull-down menu:
          
          <p>
            <image href="./images/fts-analyzers-panel-select-char-filter.png" id="fts_custom_analyzer_panel_select_char_filter" align="left" width="460"/>
          </p>
          
          <p>
            Following addition of one character filter, to add another, left-click
            on the <uicontrol>+ Add</uicontrol> button, to the right of the field.
          </p>
          
          <p>
            For an explanation of character filters, see the section in
            <xref href="./fts-using-analyzers.dita#topic_o23_j34_1v/character-filters" scope="local" format="dita">Understanding Analyzers</xref>.
          </p>
        </li>
        
        <li>
          <b>Tokenizer</b>: One of the available tokenizers. (These
          split input-strings into individual 
          <i>tokens</i>, which together are made into a <i>token stream</i>. Typically, 
          a token is established for each word.) The default value is
          <codeph>unicode</codeph>. To select from a list of all tokenizers available,
          use the pull-down menu:
          
          <p>
            <image href="./images/fts-add-tokenizer-pulldown.png" id="fts_add_tokenizer_pulldown" align="left" width="460"/>
          </p>
          
          <p>
            For more information on tokenizers, see the section in 
            <xref href="./fts-using-analyzers.dita#topic_o23_j34_1v/character-filters/tokenizers" scope="local" format="dita">Understanding Analyzers</xref>.
          </p>
          
        </li>
        
        <li>
          <b>Token Filter</b>: One or more of the available token filters. (When specified, these
          are chained together, to perform additional post-processing on the token stream.) To select
          from the list of available filters, use the pull-down menu:
          
          <p>
            <image href="./images/fts-analyzers-panel-select-token-filter.png" id="fts_custom_analyzer_panel_select_token_filter" align="left" width="460"/>
          </p>
          
          <p>
            Following addition of one token filter, to add another, left-click
            on the <uicontrol>+ Add</uicontrol> button, to the right of the field.
          </p>
          
          <p>
            For more information on token filters, see the section in 
            <xref href="./fts-using-analyzers.dita#topic_o23_j34_1v/character-filters/token-filters" scope="local" format="dita">Understanding Analyzers</xref>.
          </p>
        </li>
        
      </ul>
      
      <p>
        When these fields have been appropriately completed, save; by left-clicking
        on the <uicontrol>Save</uicontrol> button. On the <b>Edit Index</b> screen,
        the newly defined analyzer now appears in the <b>Analyzers</b> panel, with
        available options displayed for further editing, and deleting. For
        example:
      </p>
      
      <p>
        <image href="./images/fts-analyzers-panel-subsequent.png" id="fts_analyzers_panel_subsequent" align="left" width="700"/>
      </p>
      
    </section>
    
    <section id="adding-custom-filters">
      
       <title>
         Adding Custom Filters
       </title>
      
      <p>
        <i>Custom Filters</i> can be added, by means of the <b>Custom Filters</b>
        panel. When opened, this appears as follows:
      </p>
      
      <p>
        <image href="./images/fts-custom-filters-panel-initial.png" id="fts_custom_filters_panel_initial" align="left" width="700"/>
      </p>
      
      <p>
        The following four options are provided:
      </p>
      
      <ul>
        
        <li>
          <b>character filter</b>: Adds a new character filter to the list of those available. The new
          filter becomes available for inclusion in custom-created analyzers. Left-clicking on the
          <uicontrol>+ Add Character Filter</uicontrol> button displays the <b>Custom Character Filter</b>
          dialog:
          
          <p>
            <image href="./images/fts-custom-character-filter-dialog-initial.png" id="fts_custom_character_filter_dialog_initial" align="left" width="380"/>
          </p>
          
          <p>
            The following interactive fields are provided:
          </p>
          
          <ul>
            <li>
              <b>Name</b>: A suitable, user-defined name for the new character filter.
              
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Type</b>: The type of filtering to be performed. Available options can be accessed
              from the pull-down menu, at the right of the field. (Currently, only <codeph>regexp</codeph>
              is available.)
              
              <p>
                
              </p>
              
            </li>
            
            <li>
              <b>Regular Expression</b>: The specific <i>regular expression</i> that the new character filter
              is to apply. Character-strings that match the expression will be affected, others will not.
              
              <p>
                
              </p>
              
            </li>
            
            <li>
              <b>Replacement</b>: The replacement text that will be substituted for each character-string match
              returned by the regular expression. If no replacement text is specified, the matched character-string
              will be omitted.
              
              <p>
                
              </p>
            </li>
            
          </ul>
          
          
          <p>
            The following, completed fields define a character filter for deleting leading whitespace:
          </p>
          
          <p>
            <image href="./images/fts-custom-character-filter-dialog-filled.png" id="fts_custom_character_filter_dialog_filled" align="left" width="380"/>
          </p>
          
          <p>
            When saved, the new character filter is displayed on its own row, with 
            options for further editing, and deleting:
          </p>
           
          <p>
            <image href="./images/fts-custom-filters-panel-new-character-filter.png" 
              id="fts_custom_filters_panel_new_character_filter.png" align="left" width="700"/>
          </p>
          
        </li>
        
        <li>
          
          <b>tokenizer</b>: Adds a new tokenizer to the list of those available. The new
          tokenizer becomes available for inclusion in custom-created analyzers. Left-clicking on the
          <uicontrol>+ Add Tokenizer</uicontrol> button displays the <b>Custom Tokenizer</b>
          dialog:
          
          <p>
            <image href="./images/fts-custom-filters-tokenizer-dialog-initial.png" id="fts_custom_filters_tokenizer_dialog_initial" align="left" width="380"/>
          </p>
          
          <p>
            The following interactive fields are provided:
          </p>
          
            <ul>
              <li>
                <b>Name</b>: A suitable, user-defined name for the new tokenizer.
                
                <p>
                  
                </p>
                
              </li>
              
              <li>
                <b>Type</b>: The process used in tokenizing. Available options can be accessed from the pull-down menu, at the right of the field.
                (Currently, <codeph>regexp</codeph> and <codeph>exception</codeph> are available.)
                
                <p>
                  
                </p>
                
              </li>
              
              <li>
                <b>Regular Expression</b>: The specific <i>regular expression</i> used by the tokenizing process. 
                
              </li>
              
            </ul>
           
            <p>
              The following, completed fields define a tokenizer that removes uppercase characters:
            </p>
          
            <p>
              <image href="./images/fts-custom-filters-tokenizer-dialog-completed.png" id="fts_custom_filters_tokenizer_dialog_completed" align="left" width="380"/>
            </p>
          
            <p>
              When saved, the new tokenizer is displayed on its own row, with options for 
              further editing, and deleting:
            </p>
          
            <p>
              <image href="./images/fts-custom-filters-panel-new-tokenizer.png" id="fts_custom_filters_panel_new_tokenizer.png" align="left" width="700"/>
            </p>
          
        </li>
        
        <li>
          
          <b>token filter</b>: Adds a new token filter to the list of those available. The new token filter becomes avalable for inclusion in custom-created
          analyzers. Left-clicking on the <uicontrol>+ Add Token Filter</uicontrol> displays the <b>Custom Token Filter</b> dialog:
          
          <p>
            <image href="./images/fts-custom-filters-token-filter-dialog-initial.png" id="fts_custom_filters_token_filter_dialog_initial" align="left" width="380"/>
          </p>
          
          <p>
            The following interactive fields are provided:
          </p>
          
          <ul>
            <li>
              <b>Name</b>: A suitable, user-defined name for the new token filter.
            </li>
            
            <li>
              <b>Type</b>: The type of post-processing to be provided by the new token filter. The default is <codeph>length</codeph>, which
              creates tokens whose minimum number of characters is specified by the integer provided in the <b>Min</b> field, and whose
              maximum by the integer provided in the <b>Max</b>. Additional post-processing types can be selected from the pull-down menu
              at the right of the field: 
              
              <p>
                <image href="./images/fts-custom-filters-token-filter-types.png" id="fts_custom_filters_token_filter_types" align="left" width="420"/>
              </p>
              
              <p>
                Note that type-selection determines which interactive fields appear in the <b>Custom Token Filter</b> dialog, following <b>Name</b>
                and <b>Type</b>. The pull-down menu displays a list of available types. For descriptions, see the
                section
                <xref href="./fts-using-analyzers.dita#topic_o23_j34_1v/token-filters" scope="local" format="dita">Token Filters</xref>,
                on the page
                <xref href="./fts-using-analyzers.dita" scope="local" format="dita">Understanding Analyzers</xref>.
              </p>
              
            </li>
            
            <li>
              <b>Min</b>: The minimum length of the token, in characters. Note that this interactive field is displayed for the <codeph>length</codeph>
              type, and may not appear, or be replaced, when other types are specified. The default value is 3.
            </li>
            
            <li>
              <b>Max</b>: The maximum length of the token, in characters. Note that this interactive field is displayed for the <codeph>length</codeph>
              type, and may not appear, or be replaced, when other types are specified. The default value is 255.
            </li>
            
          </ul>
          
          <p>
            The following, completed fields define a token filter that restricts token-length to a minimum of 3, and a maximum of 255 characters:
          </p>
          
          <p>
            <image href="./images/fts-custom-filters-token-filter-dialog-complete.png" id="fts_custom_filters_token_filter_dialog_complete" align="left" width="380"/>
          </p>
          
          <p>
            When saved, the new token filter is displayed on its own row, with options for 
            further editing, and deleting:
          </p>
          
          <p>
            <image href="./images/fts-custom-filters-panel-new-token-filter.png" id="fts_custom_filters_panel_new_token_filter.png" align="left" width="700"/>
          </p>
          
        </li>
        
        <li>
          
          <b>wordlist</b>: Adds a list of words to be removed from the current search. Left-clicking on the
          <uicontrol>+ Add Word List</uicontrol> button displays the <b>Custom Word List</b> dialog:
          
          <p>
            <image href="./images/fts-custom-wordlist-dialog-initial.png" id="fts_custom_wordlist_dialog_initial" align="left" width="380"/>
          </p>
          
          <p>
            To create a custom word list, first, type a suitable name into the <b>Name</b> field. Then, add words
            by typing each individually into the field that bears the placeholder text, <codeph>word to be added</codeph>. After
            each word has been added, left-click on the <uicontrol>+ Add</uicontrol>
            button, at the lower-right. The word is added to the central <b>Words</b> panel. Continue adding as many words as are required. For 
            example: 
          </p>
          
          <p>
            <image href="./images/fts-custom-wordlist-dialog-complete.png" id="fts_custom_wordlist_dialog_complete" align="left" width="380"/>
          </p>
          
          <p>
            To remove a word, select the word within the <b>Words</b> panel, and left-click on the <uicontrol>Remove</uicontrol> button. To
            save, left-click on <uicontrol>Save</uicontrol>. The new word list is displayed on its own row, with 
            options for further editing,
            and deleting:
          </p>
          
          <p>
            <image href="./images/fts-custom-filters-panel-new-word-list.png" id="fts_custom_filters_panel_new_word_list.png" align="left" width="700"/>
          </p>
          
        </li>
        
      </ul>

    </section>
    
    <section id="date-time-parsers">
      
      <title>
        Date/Time Parsers
      </title>
      
      <p>
        <i>Date/Time Parsers</i> can be specified, to allow matches to be made across different
        formats:
      </p>
      
      <p>
        <image href="./images/fts-date-time-parser-initial.png" id="fts_date_time_parser_initial" align="left" width="720"/>
      </p>
      
      <p>
        When the <b>+ Add Date/Time Parser</b> button is left-clicked on, the 
        <b>Customer Date/Time Parser</b> dialog appears:
      </p>
      
      <p>
        <image href="./images/fts-custom-date-time-parser-dialog.png" id="fts_custom_date_time_parser_dialog" align="left" width="420"/>
      </p>
      
      <p>
        Enter a suitable name for the custom parser into the <b>Name</b> field. Then, successively add the
        <i>layouts</i> for the parser in the interactive field below the <b>Layouts</b> field, left-clicking on
        the <b>+ Add</b> button after each one: this adds the layout to a list of layouts displayed in the
        <b>Layouts</b> field. To remove any of these, select its name in the <b>Layouts</b> field, and
        left-click on the <b>Remove</b> button. When the list is complete, left-click on the <b>Save</b>
        button, to save.
      </p>
      
      <p>
        Documentation on using the <i>Go Programming Lanaguage</i> to specify <i>layouts</i> is provided on the page
        <xref href="http://golang.org/pkg/time/" scope="external" format="html">Package time</xref>. In particular,
        see the section
        <xref href="http://golang.org/pkg/time/#Parse" scope="external" format="html">func Parse</xref>.
      </p>
      
    </section>
    
    <section id="specifying-advanced-settings">
      
      <title>
        Specifying Advanced Settings
      </title>
      
      <p>
        Advanced settings can be specified by means of the <b>Advanced</b> panel. When opened, this appears as follows:
      </p> 
      
      <p>
        <image href="./images/fts-advanced-panel.png" id="fts_advanced_panel" align="left" width="420"/>
      </p>
      
      <p>
        The following, interactive fields are displayed:
      </p>
      
      <ul>
        
        <li>
          
         <b>Type Field</b>: The default type for documents in this bucket. The default value of this field is <codeph>type</codeph>.
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          
          <b>Default Type</b>: The default type for documents in this bucket. The default value for this field is <codeph>_default</codeph>.
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <b>Default Analyzer</b>: The default analyzer to be used for this bucket. The default value is <codeph>standard</codeph>. A list of
          available options can be displayed and selected from, by means of the pull-down menu at the right-hand side of the field.
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <b>Default Date/Time Parser</b>: The default date/time parser to be used for this bucket. The default value is <codeph>dateTimeOptional</codeph>.
          A list of
          available options can be displayed and selected from, by means of the pull-down menu at the right-hand side of the field.
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <b>Default Field</b>: The default field for this bucket. the default value is <codeph>_all</codeph>. 
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <b>Store Dynamic Fields</b>: When checked, ensures inclusion of field-content in returned results. When unchecked, no such
          inclusion occurs.
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <b>Index Dynamic Fields</b>: When checked, ensures dynamic fields are indexed. When unchecked, they are not indexed.
          
          <p>
            
          </p>
        </li>
        
      </ul>
        
    </section><section id="index-replicas">
      
      <title>
        Index Replicas
      </title>
      
      <p>
        The <b>Index Replicas</b> interface allows up to three index replicas to be selected, from
        a pull-down menu:
      </p>
      
      <p>
        <image href="./images/fts-index-replicas-interface.png" id="fts_index_replicas_interface" align="left" width="220"/>
      </p>
      
      <p>
        Index Replicas support availability: if an Index Service-node is lost from the cluster, its
        indexes may exist as replicas on another cluster-node that runs the Index Service. If an
        active index is lost, a replica is promoted to active status, and use of the index is
        uninterrupted.
      </p>
      
      <p>
        Each replica must exist on a node separate from its active index, and from any other
        replica of that active index. Attempts to add more than the number of replicas permitted
        by the current cluster-configuration is not permitted, and results in an error message:
      </p>
      
      <p>
        <image href="./images/fts-index-replicas-error-message.png" id="fts_index_replicas_error_message" align="left" width="220"/>
      </p>
      
      
    </section>
    
    
    
    <section id="index-type">
      
      <title>
        Index Type
      </title>
      
      <p>
        The <b>Index Type</b> interface provides a pull-down menu, from which the
        appropriate index type can be selected:
      </p>
      
      <p>
        <image href="./images/fts-index-type-interface.png" id="fts_index_type_interface" align="left" width="300"/>
      </p>
      
      <p>
        Two options are available: <b>Version 5.0 (Moss)</b> is the standard form of index,
        to be used in test, development, and production;
        <b>Version 6.0 Preview (Scorch)</b> is a preview of technology currently available
        for test and development only. The <b>Version 6.0</b> index reduces the size of
        the index-footprint on disk, and provides enhanced performance for indexing and mutation-handling.
      </p>
      
      <p>
        Note that the type of an index is saved in its JSON definition, which can
        be previewed in the 
        <xref href="./fts-creating-indexes.dita#topic_ksl_wwk_1v/index-definition-preview" scope="local" format="dita">Index Definition Preview</xref> 
        panel, at the right-hand side.
        <b>Version 5.0</b> contains the following value for the <codeph>store</codeph>
        attribute:
      </p>
      
      <codeblock outputclass="language-javascript">"store": {
  "kvStoreName": "mossStore"
  },</codeblock>
      
      <p>
        <b>Version 6.0</b> contains a different value:
      </p>
      
      <codeblock outputclass="language-javascript">"store": {
  "kvStoreName": "",
  "indexType": "scorch"
},</codeblock>
      
    </section>
    
    <section id="using-index-aliases">
      
      <title>Using Index Aliases</title>
      
      <p>
        An <i>index alias</i> points to one or more Full Text Indexes, or to additional aliases:
        its purpose is therefore somewhat comparable to that of a symbolic link in a filesystem. Queries 
        on an index alias
        are performed on all ultimate targets, and merged results are provided. 
      </p>
      
      <p>
        The use of index aliases permits 
        <i>indirection</i> in naming, whereby applications refer to an alias-name that never changes,
        leaving administrators free periodically to change the identity of the real index pointed
        to by the alias. This may be particularly useful when an index needs to be updated: to avoid down-time, 
        while the current index remains in service, a clone of
        the current index can be created, modified, and tested. Then, when
        the clone is ready, the existing alias can be retargeted, 
        so that the clone becomes the current
        index; and the (now) previous index can be removed.
      </p>
      
      <p>
        To create an Index Alias, access the <b>Full Text Search</b> screen, by left-clicking on the <uicontrol>Search</uicontrol>
        tab, in the navigation bar at the left of the console. The <b>Full Text Aliases</b> panel is displayed in the lower section
        of the page: 
      </p>
      
      <p>
        <image href="./images/fts-full-text-aliases-panel.png" id="fts_full_text_aliases_panel" align="left" width="700"/>
      </p>
      
      <p>
        Left-clicking on the <uicontrol>Add Alias</uicontrol> button displays the <b>Add Alias</b> screen: 
      </p>
      
      <p>
        <image href="./images/fts-add-alias-screen.png" id="fts_add_alias_screen" align="left" width="620"/>
      </p>
      
      <p>
        The <b>Name</b> field allows an appropriate name for the alias to be entered. The <b>Target Indexes</b> pane displays the
        defined indexes available to be included in the alias. To select indexes within this pane, left-click on each: when the
        index-name is highlighted, the index has been selected.
      </p>
      
      <p>
        To create the alias, left-click on the <uicontrol>Create Index Alias</uicontrol> button. The saved index now appears on its
        own row in the <b>Full Text Aliases</b> area of the <b>Full Text Search</b> screen: 
      </p>
      
      <p>
        <image href="./images/fts-full-text-aliases-page-with-alias.png" id="fts_add_alias_page_with_alias" align="left" width="700"/>
      </p>
      
      <p>
        Note that when the <b>Add Alias</b> screen is again accessed, by left-clicking the
        <uicontrol>Add Alias</uicontrol> button, the <codeph>travelSampleIndexesAlias</codeph> appears
        in the <b>Target Indexes</b> panel, along with the two existing indexes.
      </p>
      
    </section>
    
    
    
    <section id="using-the-index-definition-preview">
      
      <title>
        Using the Index Definition Preview
      </title>
      
      <p>
        The <i>Index Definition Preview</i> appears to the right-hand side of the <b>Edit Index</b> screen. Following
        index-definition, the upper portion may appear as follows: 
      </p>
      
      <p>
        <image href="./images/fts-index-definition-preview.png" id="fts_index_definition_preview" align="left" width="380"/>
      </p>
      
      <p>
        The preview consists of the JSON document that describes the current index-configuration, 
        as created by means of the user interface. By left-clicking on the 
        tab <uicontrol>copy to clipboard</uicontrol>, the
        definition can be saved. By means of the REST API, the saved index definition (potentially after
        modification) can be re-used in creation of an additional index: see the section immediately below.
      </p>
      
    </section>
    
    <section id="index-creation-with-the-rest-api">
      
      <title>
        Index-Creation with the REST API
      </title>
      
      <p>
        The REST API can be used to create indexes. Each call requires the following:
      </p>
      
      <ul>
        
        <li>
          An appropriate username and password.
          
          <p>
            
          </p>
        </li>
        
        <li>
          Use of the verb <codeph>PUT</codeph>.
          
          <p>
            
          </p>
        </li>
        
        <li>
          An endpoint referring to the Full Text Search service, on port <codeph>8094</codeph>; and including the appropriate
          endpoint for index-creation as defined by the 
          <xref href="../rest-api/rest-fts.dita" scope="local" format="dita">Full Text Search REST API</xref>, 
          including the name of the new index.
          
          <p>
            
          </p>
        </li>
        
        <li>
          Headers to specify settings for <codeph>cache-control</codeph> (<codeph>no-cache</codeph>) and <codeph>application-type</codeph>
          (<codeph>application/json</codeph>).
          
          <p>
            
          </p>
        </li>
        
        <li>
          A body containing the JSON document that defines the index to be created. This must include the name of the bucket on which
          the index is to be created.
          
          <p>
            
          </p>
          
        </li>
        
      </ul>
      
      <p>
        The simplest way to create the appropriate JSON index-definition for the body is to create an index by means of the Couchbase Web Console, make a copy
        of the JSON index-definition thereby produced (by accessing the 
        <xref href="./fts-creating-indexes.dita#topic_ksl_wwk_1v/using-the-index-definition-preview" scope="local" format="dita">Using the Index Definition Preview</xref>,
        explained above), modify the index-definition as appropriate, and finally, add the index-definition to the other, preceding elements required for
        the call. 
        
        Note, however, that this requires modification of the <codeph>uuid</codeph> field; since the re-specifying of an existing field-value 
        is interpreted as an attempted <i>update</i>, to an existing index. Therefore, if the <codeph>uuid</codeph> field for an
        existing index appears in the Index Definition Preview as <codeph>"uuid": "3402702ff3c862c0"</codeph>, it should be edited to appear
        <codeph>"uuid": ""</codeph>. A new ID will be allocated to the new index, and this ID will appear in the Index Definition Preview for the new
        index. Note also that a similar condition applies to the <codeph>sourceUUID</codeph> field, which refers to the targeted bucket: if a new
        index is being created for the same bucket that was referred to in the index-object copied from the UI, the field-value can remain the same. However,
        if a different bucket is now to be targeted, the field should be edited to appear <codeph>"sourceUUID": ""</codeph>
      </p>
      
      <p>
        When specifying the endpoint for the index you are creating, make sure the path-element that concludes the endpoint is the
        same as that specified in the <codeph>name</codeph> field (which is the first field in the object).
      </p>
      
      <p>
        The following <codeph>curl</codeph> example demonstrates the creation of an index named <codeph>demoIndex</codeph>, on the
        <codeph>price</codeph> field of documents of type <codeph>product</codeph>, within the <codeph>travel-sample</codeph> bucket. It
        assumes that Couchbase Server is running on <codeph>localhost</codeph>, and that the required username and password
        are <codeph>Administrator</codeph> and <codeph>password.</codeph>
      </p>
      
      <codeblock outputclass="language-bourne">$ curl -u Administrator:password -XPUT  \
  http://localhost:8094/api/index/demoIndex \
  -H 'cache-control: no-cache' \
  -H 'content-type: application/json' \
  -d '{
"name": "demoIndex",
"type": "fulltext-index",
"params": {
  "doc_config": {
    "docid_prefix_delim": "",
    "docid_regexp": null,
    "mode": "type_field",
    "type_field": "type"
  },
  "mapping": {
    "default_analyzer": "standard",
    "default_datetime_parser": "dateTimeOptional",
    "default_field": "_all",
    "default_mapping": {
      "dynamic": true,
      "enabled": false
    },
    "default_type": "_default",
    "index_dynamic": true,
    "store_dynamic": false,
    "types": {
      "product": {
        "dynamic": true,
        "enabled": true,
        "properties": {
          "price": {
            "enabled": true,
            "dynamic": false,
            "fields": [
              {
                "analyzer": "",
                "include_in_all": true,
                "include_term_vectors": true,
                "index": true,
                "name": "price",
                "store": false,
                "type": "number"
              }
            ]
          }
        }
      }
    }
  },
  "store": {
    "kvStoreName": "mossStore"
  }
},
"sourceType": "couchbase",
"sourceName": "travel-sample",
"sourceUUID": "99e9829898a45ba35f1c9c85dfcdb42b",
"sourceParams": {},
"planParams": {
  "maxPartitionsPerPIndex": 171,
  "numReplicas": 0
  },
"uuid": ""
}'</codeblock>
      
      <p>
        If the call is successful, the following object is returned:
      </p>
      
      <codeblock outputclass="language-bourne">{"status":"ok"}</codeblock>
      
      <p>
        The newly created index can then be inspected in the Couchbase Web Console.
      </p>
      
    </section>
    
    <section id="document-fields-and-data-types">
      
      <title>
        Document-Fields and Data-Types
      </title>
      
      <p>
        During index-creation, for each document-field for which the data-type has not been
        explicitly specified (which is to say, <b>text</b>, <b>number</b>, <b>datetime</b>, <b>boolean</b>, 
        <b>disabled</b>, or <b>geopoint</b>), the field-value is examined, and the best-possible
        determination made, as follows:
      </p>
      
      <table frame="all" rowsep="1" colsep="1"
        id="table_dcs_gl4_1v">
        <tgroup cols="2" align="left">
          <colspec colname="c1" colnum="1" colwidth="1.0*"/>
          <colspec colname="c2" colnum="2" colwidth="1.0*"/>
          <thead>
            <row>
              <entry>Type of JSON value</entry>
              <entry>Indexed as...</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Boolean</entry>
              <entry>Boolean</entry>
            </row>
            <row>
              <entry>Number</entry>
              <entry>Number</entry>
            </row>
            <row>
              <entry>String containing a date</entry>
              <entry>Date</entry>
            </row>
            <row>
              <entry>String (not containing a date)</entry>
              <entry>String</entry>
            </row>
          </tbody>
        </tgroup>
      </table> 
      
      <p>
        Note that the indexer attempts to parse String date-values as dates, and indexes them as such if
        the operation succeeds. Note, however, that on query-execution, Full Text Search expects 
        dates to be in the format specified by 
        <xref href="https://www.ietf.org/rfc/rfc3339.txt" format="html" scope="external">RFC-3339</xref>, 
        which is a specific profile of ISO-8601. 
      </p>
      
      <p>
        Note also that String values such as <codeph>7</codeph> or <codeph>true</codeph> are 
        not respectively indexed as numbers or Booleans: they remain as Strings.
      </p>
      
      <p>
        The number-type is modeled as a 64-bit floating-point value internally.
      </p>    
      
    </section>
    
  </body>
  
</topic>
