<?xml version="1.0" standalone="no"?><!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN" "../../../../dtd/ditabase.dtd"><dita>
  <topic id="couchbaseclibucketcreate1.idm543372567040" outputclass="db.article" xml:lang="en-us">
    <title outputclass="db.title">couchbase-cli-bucket-create</title>
    
    <shortdesc>Create a new Couchbase data bucket</shortdesc><body outputclass="db.article"><section><title outputclass="db.title">SYNTAX</title>
      
      
      <codeblock outputclass="language-bash"><i outputclass="db.emphasis">couchbase-cli bucket-create</i> [--cluster &lt;url&gt;] [--username &lt;user&gt;] [--password &lt;password&gt;] [--bucket &lt;name&gt;] [--bucket-type &lt;type&gt;] [--bucket-ramsize &lt;size&gt;] [--bucket-replica &lt;num&gt;] [--bucket-port &lt;port&gt;] [--bucket-priority &lt;priority&gt;] [--bucket-eviction-policy &lt;policy&gt;] [--enable-flush &lt;num&gt;] [--enable-index-replica &lt;num&gt;] [--conflict-resolution &lt;type&gt;] [--wait]</codeblock></section><section><title outputclass="db.title">DESCRIPTION</title>
      
      
      <p outputclass="db.simpara">Creates a new bucket. This command allows the creation of both Couchbase and
Memcached buckets and supports the various configuration parameters for these
buckets.</p>
      </section><section><title outputclass="db.title">OPTIONS</title>
      
      
      <dl outputclass="db.variablelist">
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
-c
</dt>
            <dt outputclass="db.term">
--cluster
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Specfies the hostname of a node in the cluster. See the HOST FORMATS
        section for more information on specifying a hostname.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
-u
</dt>
            <dt outputclass="db.term">
--user &lt;username&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Specifies the username of the user executing the command. If you do not have
        a user account with permision to execute the command then it will fail with
        an unauthorized error.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
-p
</dt>
            <dt outputclass="db.term">
--password &lt;password&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Specifies the password of the user executing the command. If you do not have
        a user account with permision to execute the command then it will fail with
        an unauthorized error. If this argument is specified, but no password is
        given then the command will prompt the user for a password through
        non-echoed stdin. You may also specify your password by using the
        environment variable CB_REST_PASSWORD.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--bucket &lt;name&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        The name of the bucket to create. The bucket name can only contain
        characters in range A-Z, a-z, 0-9 as well as underscore, period, dash and
        percent and can be a maximum of 100 characters in length.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--bucket-type &lt;type&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        The type of bucket to create. Accepted bucket types are "couchbase",
        "ephemeral", and "memcached". The Couchbase bucket is the standard bucket
        type. It supports data persistence, replication, caching, indexing, views,
        and N1QL queries. The ephemeral bucket is an in-memory bucket similar to the
        Couchbase bucket, but it does not support data persistence or views. The
        Memcached bucket is a cache only bucket that does not support persistence,
        replication, indexing, views or N1QL querying. This bucket type provides the
        same behavior as Memcached Server.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--bucket-ramsize &lt;size&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        The amount of memory to allocate to the cache for this bucket in Megabytes.
        The memory quota of this bucket must fit into the overall cluster memory
        quota. The minimum cache size is 100MB.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--bucket-replica &lt;num&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        The amount of servers to replicate data to. Replicas provide protection
        against data loss by keeping copies of the data in this bucket on multiple
        servers. By default the number of replicas is one even if there is only a
        single server in the cluster. The minimum amount of replicas is zero and the
        maximum number is three. This option is only valid for couchbase buckets.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--bucket-port &lt;num&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Sets the port that the bucket listens on. This parameter is deprecated and
        not recommended for use.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--bucket-priority &lt;priority&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        The disk I/O priority for this bucket. The value of this flag may be set to
        high or low. By default the priority is set to low. This option is only
        valid for couchbase buckets. This setting only has an affect on the disk IO
        if there are other buckets in the cluster.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--bucket-eviction-policy &lt;policy&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        The memory cache eviction policy for this bucket. Couchbase buckets support
        either "valueOnly" eviction or "fullEviction". Specifying the
        "valueEviction" policy means that each key stored in this bucket must be
        kept in memory. This is the default policy and using this policy will
        improve performance of key-value operations, but limits the maximum size of
        the bucket. Using the "fullEviction" policy means that performance will be
        impacted for key-value operations, but the maximum size of the bucket is
        unbounded.
</p>
<pre outputclass="db.literallayout">If you are using an Ephemeral bucket then you can specify either
"noEviction" or "nruEviction". Specifying "noEviction" means that the bucket
will not evict items from the cache if it is full. This type of eviction
policy should be used for in-memory database use cases. Specifying
"nruEviction" means that not recently used items will be evicted from memory
when all memory in the bucket is used. This eviction type should be used for
caching use cases.</pre>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--enable-flush &lt;num&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Specifies whether or not the flush operation is allowed for this bucket. To
        enable flush set this option to "1". To disable flush set this option to
        "0". By default flush is disabled.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--enable-index-replica &lt;num&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Enables replica view indexes for this bucket. There may be at most 1 view
        replica index. To enable replica indexes set the value of this option to
        "1". To disable replica indexes set the value of this option to "0". By
        default replica indexes are disabled.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--conflict-resolution &lt;type&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Specifies the conflict resolution mechanism used for this bucket. Conflict
        resolution is used for resolving conflicts when using cross data center
        replication (XDCR). Couchbase supports sequence and timestamp based conflict
        resolution. Sequence based timestamp conflict resolution works by picking
        the document that has been updated the most times. For example, if one
        cluster has updated a document two times since the last sync and the other
        cluster has updated the document three times then the document that was
        updated three times will win conflict resolution regardless of the specific
        time the updates took place. Timestamp resolution is based on the time that
        a document was recieved. The latest document update will always win conflict
        resolution if timestamp conflict resolution is specified. Keep in mind
        however that if you use timestamp resolution that it is very important that
        the clocks on all of the nodes in all of your clusters are synchronized as
        precisely as possible. If they are not synchronized then you will experince
        behavior with timestamp conflict resolution.
</p>
</dd>
          </dlentry>
        </dl>
        <p outputclass="db.simpara">--wait
        The create bucket command is asynchronous by default. Specifying this flag
        makes this a synchronous operation by waiting for the bucket to be fully
        created before the command returns.</p>
      </section><section><title outputclass="db.title">HOST FORMATS</title>
      
      
      <p outputclass="db.simpara">When specifying a host for the couchbase-cli command the following formats are expected:</p>
        <ul outputclass="db.itemizedlist">
          <li outputclass="db.listitem">
<p outputclass="db.simpara">
<codeph outputclass="db.literal">couchbase://&lt;addr&gt;</codeph>
</p>
</li>
          <li outputclass="db.listitem">
<p outputclass="db.simpara">
<codeph outputclass="db.literal">&lt;addr&gt;:&lt;port&gt;</codeph>
</p>
</li>
          <li outputclass="db.listitem">
<p outputclass="db.simpara">
<codeph outputclass="db.literal">http://&lt;addr&gt;:&lt;port&gt;</codeph>
</p>
</li>
        </ul>
        <p outputclass="db.simpara">It is recommended to use the couchbase://&lt;addr&gt; format for standard
installations. The other two formats allow an option to take a port number which
is needed for non-default installations where the admin port has been set up on
a port other that 8091.</p>
      </section><section><title outputclass="db.title">EXAMPLES</title>
      
      
      <p outputclass="db.simpara">To create a Couchbase bucket named "travel-data" which has a memory cache size
of 1GB run the following command.</p>
        <pre outputclass="db.literallayout">$ couchbase-cli bucket-create -c 192.168.1.5:8091 --username Administrator \
 --password password --bucket travel-data --bucket-type couchbase \
 --bucket-ramsize 1024</pre>
        <p outputclass="db.simpara">To create a Couchbase bucket named "airline-data" with a memory cache size of
1GB, two data replicas, high disk I/O priority, uses full eviction, and has
flush and replica indexes enabled run the following command.</p>
        <pre outputclass="db.literallayout">$ couchbase-cli bucket-create -c 192.168.1.5:8091 --username Administrator \
 --password password --bucket travel-data --bucket-type couchbase \
 --bucket-ramsize 1024 --bucket-replicas 2 --bucket-priority high \
 --bucket-eviction-policy fullEviction --enable-flush 1 \
 --enable-index-replica 1</pre>
        <p outputclass="db.simpara">To create a Memcached bucket named "travel-data" which has a memory cache size
of 1GB run the following command.</p>
        <pre outputclass="db.literallayout">$ couchbase-cli bucket-create -c 192.168.1.5:8091 --username Administrator \
 --password password --bucket travel-data --bucket-type memcached \
 --bucket-ramsize 1024</pre>
      </section><section><title outputclass="db.title">ENVIRONMENT AND CONFIGURATION VARIABLES</title>
      
      
      <p outputclass="db.simpara">CB_REST_PASSWORD
        Specifies the password of the user executing the command. This environment
        variable allows you to specify a default argument for the -p/--password
        argument on the command line. It also allows the user to ensure that their
        password are not cached in their command line history.</p>
        <p outputclass="db.simpara">CB_REST_PASSWORD
        Specifies the password of the user executing the command. This environment
        variable allows you to specify a default argument for the -p/--password
        argument on the command line.</p>
      </section></body>
    <related-links><link href="couchbase-cli-bucket-compact.dita" /><link href="couchbase-cli-bucket-delete.dita" /><link href="couchbase-cli-bucket-edit.dita" /><link href="couchbase-cli-bucket-flush.dita" /><link href="couchbase-cli-bucket-list.dita" /></related-links></topic>
</dita>