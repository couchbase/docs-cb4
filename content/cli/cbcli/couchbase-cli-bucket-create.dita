<?xml version="1.0" standalone="no"?><!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN" "../../../../dtd/ditabase.dtd"><dita>
  <topic id="couchbaseclibucketcreate1.idm78474640" outputclass="db.article" xml:lang="en-us">
    <title outputclass="db.title">bucket-create</title>
    
    <shortdesc>Create a new bucket</shortdesc><body outputclass="db.article"><section><title outputclass="db.title">SYNTAX</title>
      
      
      <codeblock outputclass="language-bash"><i outputclass="db.emphasis">couchbase-cli bucket-create</i> [--cluster &lt;url&gt;] [--username &lt;user&gt;]
          [--password &lt;password&gt;] [--bucket &lt;name&gt;] [--bucket-type &lt;type&gt;]
          [--bucket-ramsize &lt;size&gt;] [--bucket-replica &lt;num&gt;] [--bucket-port &lt;port&gt;]
          [--bucket-priority &lt;priority&gt;] [--bucket-eviction-policy &lt;policy&gt;]
          [--enable-flush &lt;num&gt;] [--enable-index-replica &lt;num&gt;]
          [--conflict-resolution &lt;type&gt;] [--wait]</codeblock></section><section><title outputclass="db.title">DESCRIPTION</title>
      
      
      <p outputclass="db.simpara">Creates a new bucket. Allows creation of Couchbase, Ephemeral, and Memcached
buckets, and supports the various configuration parameters for these
buckets.</p>
      </section><section><title outputclass="db.title">OPTIONS</title>
      
      
      <dl outputclass="db.variablelist">
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
-c
</dt>
            <dt outputclass="db.term">
--cluster
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Specifies the hostname of a node in the cluster. See the HOST FORMATS
        section for more information on specifying a hostname.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
-u
</dt>
            <dt outputclass="db.term">
--user &lt;username&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Specifies the username of the user executing the command. If you do not have
        a user account with permission to execute the command then it will fail with
        an unauthorized error.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
-p
</dt>
            <dt outputclass="db.term">
--password &lt;password&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Specifies the password of the user executing the command. If you do not have
        a user account with permission to execute the command then it will fail with
        an unauthorized error. If this argument is specified, but no password is
        given then the command will prompt the user for a password through
        non-echoed stdin. You may also specify your password by using the
        environment variable CB_REST_PASSWORD.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--bucket &lt;name&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        The name of the bucket to create. The only characters that can be used
        for the bucket-name are those in the ranges of A-Z, a-z, and 0-9; plus the
        underscore, period, dash, and percent characters. The name can be a
        maximum of 100 characters in length.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--bucket-type &lt;type&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        The type of bucket to create. Accepted bucket types are "couchbase",
        "ephemeral", and "memcached". The Couchbase bucket is the standard bucket
        type. It supports data persistence, replication, caching, indexing, views,
        and N1QL queries. The Ephemeral bucket is an in-memory bucket similar to the
        Couchbase bucket; but it does not support data persistence or views. The
        Memcached bucket is a cache-only bucket that does not support persistence,
        replication, indexing, views, or N1QL querying: this bucket type provides
        the same behavior as Memcached Server.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--bucket-ramsize &lt;size&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        The amount of memory to allocate to the cache for this bucket, in Megabytes.
        The memory quota of this bucket must fit into the overall cluster memory
        quota. The minimum cache size is 100MB.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--bucket-replica &lt;num&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        The number of servers to which data is replicated. Replicas provide
        protection against data loss by keeping copies of this bucket’s data on
        multiple servers. By default, the number of replicas is one, even if there
        is only a single server in the cluster. The minimum number of replicas is
        zero, and the maximum three. This option is valid for Couchbase and
        Ephemeral buckets only.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--bucket-port &lt;num&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Sets the port on which the bucket listens. This parameter is deprecated, and
        therefore not recommended for use.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--bucket-priority &lt;priority&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Specifies the priority of this bucket’s background tasks. This option is
        valid for Couchbase and Ephemeral buckets only. For Couchbase buckets,
        background task-types include disk I/O, DCP stream-processing, and
        item-paging. For Ephemeral buckets, background task-types are the same as
        for Couchbase buckets, with the exception of disk I/O, which does not apply
        to Ephemeral buckets. The value of this option may be "high" or "low". The
        default is "low". Specifying "high" may result in faster processing; but
        only when more than one bucket is defined for the cluster, and when
        different priority settings have been established among the buckets. When
        Couchbase and Ephemeral buckets have different priority settings, this
        affects the prioritization only of task-types other than disk I/O.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--bucket-eviction-policy &lt;policy&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        The memory-cache eviction policy for this bucket. This option is valid for
        Couchbase and Ephemeral buckets only.
</p>
<pre outputclass="db.literallayout">Couchbase buckets support either "valueOnly" or "fullEviction". Specifying
the "valueOnly" policy means that each key stored in this bucket must be
kept in memory. This is the default policy: using this policy improves
performance of key-value operations, but limits the maximum size of the
bucket. Specifying the "fullEviction" policy means that performance is
impacted for key-value operations, but the maximum size of the bucket is
unbounded.</pre>
<pre outputclass="db.literallayout">Ephemeral buckets support either "noEviction" or "nruEviction". Specifying
"noEviction" means that the bucket will not evict items from the cache if
the cache is full: this type of eviction policy should be used for in-memory
database use-cases. Specifying "nruEviction" means that items not recently
used will be evicted from memory, when all memory in the bucket is used:
this type of eviction policy should be used for caching use-cases.</pre>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--enable-flush &lt;num&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Specifies whether or not the flush operation is allowed for this bucket. To
        enable flushing, set this option to "1". To disable flushing, set this
        option to "0". By default, flushing is disabled.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--enable-index-replica &lt;num&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Enables view index replication for the current bucket. This option is valid
        for Couchbase buckets only. To enable, set the value of this option to "1".
        To disable, set the value of this option to "0". By default, view index
        replication is disabled. There may be at most one replica view index.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--conflict-resolution &lt;type&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Specifies this bucket’s conflict resolution mechanism; which is to be used
        if a conflict occurs during Cross Data-Center Replication (XDCR).
        Sequence-based and timestamp-based mechanisms are supported.
</p>
<pre outputclass="db.literallayout">    Sequence-based conflict resolution selects the document that has been
    updated the greatest number of times since the last sync: for example, if
    one cluster has updated a document twice since the last sync, and the other
    cluster has updated the document three times, the document updated three
    times is selected; regardless of the specific times at which updates took
place.</pre>
<pre outputclass="db.literallayout">Timestamp-based conflict resolution selects the document with the most
recent timestamp: this is only supported when all clocks on all
cluster-nodes have been fully synchronized.</pre>
</dd>
          </dlentry>
        </dl>
        <p outputclass="db.simpara">--wait
        The create bucket command is asynchronous by default. Specifying this option
        makes the operation synchronous: so that the command returns only after the
        bucket has been fully created.</p>
      </section><section><title outputclass="db.title">HOST FORMATS</title>
      
      
      <p outputclass="db.simpara">When specifying a host for the couchbase-cli command the following formats are expected:</p>
        <ul outputclass="db.itemizedlist">
          <li outputclass="db.listitem">
<p outputclass="db.simpara">
<codeph outputclass="db.literal">couchbase://&lt;addr&gt;</codeph>
</p>
</li>
          <li outputclass="db.listitem">
<p outputclass="db.simpara">
<codeph outputclass="db.literal">&lt;addr&gt;:&lt;port&gt;</codeph>
</p>
</li>
          <li outputclass="db.listitem">
<p outputclass="db.simpara">
<codeph outputclass="db.literal">http://&lt;addr&gt;:&lt;port&gt;</codeph>
</p>
</li>
        </ul>
        <p outputclass="db.simpara">It is recommended to use the couchbase://&lt;addr&gt; format for standard
installations. The other two formats allow an option to take a port number which
is needed for non-default installations where the admin port has been set up on
a port other that 8091.</p>
      </section><section><title outputclass="db.title">EXAMPLES</title>
      
      
      <p outputclass="db.simpara">To create a Couchbase bucket named "travel-data" with a memory cache size
of 1GB, run the following command.</p>
        <pre outputclass="db.literallayout">$ couchbase-cli bucket-create -c 192.168.1.5:8091 --username Administrator \
 --password password --bucket travel-data --bucket-type couchbase \
 --bucket-ramsize 1024</pre>
        <p outputclass="db.simpara">To create a Couchbase bucket named "airline-data" with a memory cache size of
1GB, two data replicas, high background-task priority, full eviction, flushing
enabled, and view index replication enabled, run the following command.</p>
        <pre outputclass="db.literallayout">$ couchbase-cli bucket-create -c 192.168.1.5:8091 --username Administrator \
 --password password --bucket travel-data --bucket-type couchbase \
 --bucket-ramsize 1024 --bucket-replica 2 --bucket-priority high \
 --bucket-eviction-policy fullEviction --enable-flush 1 \
 --enable-index-replica 1</pre>
        <p outputclass="db.simpara">To create a Memcached bucket named "travel-data" with a memory cache size
of 1GB, run the following command.</p>
        <pre outputclass="db.literallayout">$ couchbase-cli bucket-create -c 192.168.1.5:8091 --username Administrator \
 --password password --bucket travel-data --bucket-type memcached \
 --bucket-ramsize 1024</pre>
        <p outputclass="db.simpara">To create an Ephemeral bucket named "hotel-data" synchronously, with a memory
cache size of 256MB, flushing enabled, "nruEviction", and timestamp-based
conflict resolution, run the following command.</p>
        <pre outputclass="db.literallayout">$ couchbase-cli bucket-create -c 192.168.1.5:8091 --username Administrator \
--password password --bucket hotel-data --bucket-type ephemeral \
--bucket-ramsize 256 --enable-flush 1 --bucket-eviction-policy nruEviction \
--conflict-resolution timestamp --wait</pre>
      </section><section><title outputclass="db.title">ENVIRONMENT AND CONFIGURATION VARIABLES</title>
      
      
      <p outputclass="db.simpara">CB_REST_PASSWORD
        Specifies the password of the user executing the command. This environment
        variable allows you to specify a default argument for the -p/--password
        argument on the command line. It also allows the user to ensure that their
        password are not cached in their command line history.</p>
        <p outputclass="db.simpara">CB_REST_PASSWORD
        Specifies the password of the user executing the command. This environment
        variable allows you to specify a default argument for the -p/--password
        argument on the command line.</p>
      </section></body>
    <related-links><link href="couchbase-cli-bucket-compact.dita" /><link href="couchbase-cli-bucket-delete.dita" /><link href="couchbase-cli-bucket-edit.dita" /><link href="couchbase-cli-bucket-flush.dita" /><link href="couchbase-cli-bucket-list.dita" /></related-links></topic>
</dita>