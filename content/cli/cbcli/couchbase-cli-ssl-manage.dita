<?xml version="1.0" standalone="no"?><!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN" "../../../../dtd/ditabase.dtd"><dita>

  <topic id="couchbaseclisslmanage1.idm96131104" outputclass="db.article" xml:lang="en-us">
    <title outputclass="db.title">ssl-manage</title>
    
    <shortdesc>Manage SSL certificates</shortdesc><body outputclass="db.article"><section><title outputclass="db.title">SYNTAX</title>
      
      
      <codeblock outputclass="language-bash"><i outputclass="db.emphasis">couchbase-cli ssl-manage</i> [--cluster &lt;url&gt;] [--username &lt;user&gt;]
          [--password &lt;password&gt;] [--cluster-cert-info] [--node-cert-info]
          [--regenerate-cert &lt;file&gt;] [--set-node-certificate]
          [--upload-cluster-ca &lt;file&gt;]
          [--set-client-auth-state &lt;enable|disable|mandatory&gt;]
          [--set-client-auth-path &lt;subject.cn|san.uri|san.dnsname|san.email&gt;]
          [--set-client-auth-prefix &lt;prefix&gt;]
          [--set-client-auth-delimiter &lt;delimiter&gt;]
          [--client-auth] [--extended]</codeblock></section><section><title outputclass="db.title">DESCRIPTION</title>
      
      
      <p outputclass="db.simpara">This command allows users to manage their SSL and X.509 certificates.</p>
      </section><section><title outputclass="db.title">OPTIONS</title>
      
      
      <dl outputclass="db.variablelist">
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
-c
</dt>
            <dt outputclass="db.term">
--cluster
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Specifies the hostname of a node in the cluster. See the HOST FORMATS
        section for more information on specifying a hostname.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
-u
</dt>
            <dt outputclass="db.term">
--user &lt;username&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Specifies the username of the user executing the command. If you do not have
        a user account with permission to execute the command then it will fail with
        an unauthorized error.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
-p
</dt>
            <dt outputclass="db.term">
--password &lt;password&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Specifies the password of the user executing the command. If you do not have
        a user account with permission to execute the command then it will fail with
        an unauthorized error. If this argument is specified, but no password is
        given then the command will prompt the user for a password through
        non-echoed stdin. You may also specify your password by using the
        environment variable CB_REST_PASSWORD.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--cluster-cert-info
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Retrieves the cluster certificate and prints it to stdout.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--node-cert-info
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Retrieves the node certificate and prints it to stdout.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--regenerate-cert &lt;file&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Regenerates the cluster certificate and saves it to the file specified in
        the value fo this option.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--set-node-certificate
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Sets the node certificate. Before running this command you must copy the
        node certificate into your installation. When this command is invoked the
        cluster will read the node certificate from the node specified and set it
        as the node certificate for that node.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--upload-cluster-ca &lt;file&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Uploads the certificate specified to the cluster. The uploaded certificate
        will replace the cluster certificate in this cluster.
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--set-client-auth &lt;path&gt;
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        Specifies a path to the client auth configuration file. This file should
        contain the state of client auth and one or more prefixes. The state defines
        whether or not client auth should used. The possible values for this field
        are below:
</p>
<ul outputclass="db.itemizedlist"><li outputclass="db.listitem">
<p outputclass="db.simpara">
disabled: no client certification
</p>
</li><li outputclass="db.listitem">
<p outputclass="db.simpara">
enable: if the client presents a valid client certificate then we try
          and validate it. If the validation fails or no certificate is presented we
          fall back to the existing authentication methods
</p>
</li><li outputclass="db.listitem">
<p outputclass="db.simpara">
mandatory: the client has to present valid SSL certificate in order to
          access successfully authorise the connection.
</p>
<pre outputclass="db.literallayout">The prefixes section should contain one or more prefixes and each prefix
should contain a path, prefix, and delimiter. More information about these
sub-fields is below:</pre>
</li><li outputclass="db.listitem">
<p outputclass="db.simpara">
path: The field which will be used to extract the username from the
          certificate. Currently only subject.cn, san.uri, san.email and san.dnsname
          are allowed
</p>
</li><li outputclass="db.listitem">
<p outputclass="db.simpara">
prefix: Optional. Prefix to be ignored from the field value
</p>
</li><li outputclass="db.listitem">
<p outputclass="db.simpara">
delimiter: Optional. The delimiter can either be a string or a character,
          the parsing of the username ends when the delimter value is found.
</p>
<pre outputclass="db.literallayout">Below is an example of what a client auth configuraiton file might look
like:</pre>
<pre outputclass="db.literallayout">{
  "state": "enable",
  "prefixes": [
    {
      "path": "subject.cn",
      "prefix": "www.cb-",
      "delimiter": "."
    }
  ]
}</pre>
</li></ul>
</dd>
          </dlentry>        
        <dlentry outputclass="db.simpara">
          <dt outputclass="db.term">
            --set-client-auth-path &lt;path&gt;
          </dt>
          <dd outputclass="db.listitem">
            <p outputclass="db.simpara">
              The field which will be used to extract the user name from the certificate.
              Currently only subject.cn, san.uri, san.email and san.dnsname are allowed
            </p>
          </dd>
        </dlentry>
        
        <dlentry outputclass="db.simpara">
          <dt outputclass="db.term">
            --set-client-auth-prefix &lt;prefix&gt;
          </dt>
          <dd outputclass="db.listitem">
            <p outputclass="db.simpara">
              Optional. Prefix to be ignored from the field value.
            </p>
          </dd>
        </dlentry>
        
        <dlentry outputclass="db.simpara">
          <dt outputclass="db.term">
            --set-client-auth-delimiter &lt;delimiter&gt;
          </dt>
          <dd outputclass="db.listitem">
            <p outputclass="db.simpara">
              Optional. The delimiter can either be a string or a character, the parsing
              of the username ends when the delimter value is found.
            </p>
          </dd>
        </dlentry>
        <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--client-auth
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        This options used to get the client cert auth value
</p>
</dd>
          </dlentry>
          <dlentry outputclass="db.varlistentry">
            <dt outputclass="db.term">
--extended
</dt>
            <dd outputclass="db.listitem">
<p outputclass="db.simpara">
        This option is used with the --cluster-cert-info and specifies that extended
        cluster certificate information should be printed to stdout.
</p>
</dd>
          </dlentry>
        </dl>
      </section><section><title outputclass="db.title">HOST FORMATS</title>
      
      
      <p outputclass="db.simpara">When specifying a host for the couchbase-cli command the following formats are expected:</p>
        <ul outputclass="db.itemizedlist">
          <li outputclass="db.listitem">
<p outputclass="db.simpara">
<codeph outputclass="db.literal">couchbase://&lt;addr&gt;</codeph>
</p>
</li>
          <li outputclass="db.listitem">
<p outputclass="db.simpara">
<codeph outputclass="db.literal">&lt;addr&gt;:&lt;port&gt;</codeph>
</p>
</li>
          <li outputclass="db.listitem">
<p outputclass="db.simpara">
<codeph outputclass="db.literal">http://&lt;addr&gt;:&lt;port&gt;</codeph>
</p>
</li>
        </ul>
        <p outputclass="db.simpara">It is recommended to use the couchbase://&lt;addr&gt; format for standard
installations. The other two formats allow an option to take a port number which
is needed for non-default installations where the admin port has been set up on
a port other that 8091.</p>
      </section><section><title outputclass="db.title">EXAMPLES</title>
      
      
      <p outputclass="db.simpara">To get cluster certificate information run the following command.</p>
        <pre outputclass="db.literallayout">$ couchbase-cli ssl-manage -c 192.168.1.5 -u Administrator \
 -p password --cluster-cert-info</pre>
        <p outputclass="db.simpara">Note that you can also get extended cluster certificate information by adding the
--extended flag as shown below.</p>
        <pre outputclass="db.literallayout">$ couchbase-cli ssl-manage -c 192.168.1.5 -u Administrator \
 -p password --cluster-cert-info --extended</pre>
        <p outputclass="db.simpara">To get node certificate information run the following command. Note that the
node certificate will be from the node specified by the -c option.</p>
        <pre outputclass="db.literallayout">$ couchbase-cli ssl-manage -c 192.168.1.5 -u Administrator \
 -p password --node-cert-info --extended</pre>
        <p outputclass="db.simpara">To automatically regenerate the cluster certificate and save the new certificate
to a file at /root/new_cluster.cert run the following command.</p>
        <pre outputclass="db.literallayout">$ couchbase-cli ssl-manage -c 192.168.1.5 -u Administrator \
 -p password --regenerate-cert /root/new_cluster.cert</pre>
        <p outputclass="db.simpara">Note that the command above should never be run if you are using X.509
certificates because using the --regenerate-cert command will generate an
unsigned certificate for the cluster to use.</p>
        <p outputclass="db.simpara">To update a node certificate you will first need to copy the new certificate to
the certificate inbox folder on the node you wish to change the certificate.
Once you have done this you can run the command below to tell the server to
begin using the new certificate.</p>
        <pre outputclass="db.literallayout">$ couchbase-cli ssl-manage -c 192.168.1.5 -u Administrator \
 -p password --set-node-certificate</pre>
        <p outputclass="db.simpara">To update the cluster certificate you can run the command below. Note that our
certificate is located at /root/new_cluster.cert in this example.</p>
        <pre outputclass="db.literallayout">$ couchbase-cli ssl-manage -c 192.168.1.5 -u Administrator \
 -p password --upload-cluster-ca /root/new_cluster.cert</pre>
        <p outputclass="db.simpara">To set the client cert auth to mandatory, following command can be run.</p>
        <pre outputclass="db.literallayout">$ couchbase-cli ssl-manage -c 192.168.1.5 -u Administrator \
 -p password --set-client-auth mandatory</pre>
        <p outputclass="db.simpara">To get the client cert auth value, following command should be run.</p>
        <pre outputclass="db.literallayout">$ couchbase-cli ssl-manage -c 192.168.1.5 -u Administrator \
 -p password --client-auth</pre>
      </section><section><title outputclass="db.title">ENVIRONMENT AND CONFIGURATION VARIABLES</title>
      
      
      <p outputclass="db.simpara">CB_REST_PASSWORD
        Specifies the password of the user executing the command. This environment
        variable allows you to specify a default argument for the -p/--password
        argument on the command line. It also allows the user to ensure that their
        password are not cached in their command line history.</p>
        <p outputclass="db.simpara">CB_REST_PASSWORD
        Specifies the password of the user executing the command. This environment
        variable allows you to specify a default argument for the -p/--password
        argument on the command line.</p>
      </section></body>
    <related-links><link href="couchbase-cli-cluster-edit.dita" /></related-links></topic>
</dita>
