<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">

<reference xml:lang="en-us" id="cbstats-timing">
  <title><cmdname>timings</cmdname></title>
  <shortdesc>Provides timing statistics.</shortdesc>
  <refbody>
    <section><title>Syntax</title>
      <p>Request syntax:</p>
      <codeblock>cbstats <varname>host</varname>:11210 [common options] timings</codeblock>
    </section>
    <section><title>Description</title><p>The timing stats provide histogram data from
        high-resolution timers over various operations within the system. This only measures the
        time spent in the front-end thread for each operation, meaning that the timings may not be
        representative if items have to be fetched from disk as part of the operation.</p>
      <p>To retrieve more accurate timing statistics, use <xref href="../mctimings.dita">mctimings</xref>
      instead of <codeph>timings</codeph>.</p>
      <p>The following are the possible return values, which depend on what occurred on the data
        bucket:</p>
      <table><title>Return values</title>
        <tgroup cols="2">
          <colspec colname="col1" colwidth="1*"/>
          <colspec colname="col2" colwidth="3*"/>
          <thead>
            <row>
              <entry>Values</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><codeph>bg_load</codeph></entry>
              <entry>Background fetches waiting for disk.</entry>
            </row>
            <row>
              <entry><codeph>bg_wait</codeph></entry>
              <entry>Background fetches waiting in the dispatcher queue.</entry>
            </row>
            <row>
              <entry><codeph>set_with_meta</codeph></entry>
              <entry><codeph>set_with_meta</codeph> latencies.</entry>
            </row>
            <row>
              <entry><codeph>access_scanner</codeph></entry>
              <entry>Access scanner run times.</entry>
            </row>
            <row>
              <entry><codeph>checkpoint_remover</codeph></entry>
              <entry>Checkpoint remover run times.</entry>
            </row>
            <row>
              <entry><codeph>item_pager</codeph></entry>
              <entry>Item pager run times.</entry>
            </row>
            <row>
              <entry><codeph>expiry_pager</codeph></entry>
              <entry>Expiry pager run times.</entry>
            </row>
            <row>
              <entry><codeph>pending_ops</codeph></entry>
              <entry>Client connections blocked for operations in pending vBuckets.</entry>
            </row>
            <row>
              <entry><codeph>data_age</codeph></entry>
              <entry>Age of data written to disk.</entry>
            </row>
            <row>
              <entry><codeph>disk_commit</codeph></entry>
              <entry>Time waiting for a commit after a batch of updates.</entry>
            </row>
            <row>
              <entry><codeph>disk_del</codeph></entry>
              <entry>Wait for disk to delete an item.</entry>
            </row>
            <row>
              <entry><codeph>disk_vb_del</codeph></entry>
              <entry>Waiting for disk to delete a vBucket.</entry>
            </row>
            <row>
              <entry><codeph>disk_insert</codeph></entry>
              <entry>Wait for disk to store a new item.</entry>
            </row>
            <row>
              <entry><codeph>disk_update</codeph></entry>
              <entry>Wait time for disk to modify an existing item.</entry>
            </row>
            <row>
              <entry><codeph>get_cmd</codeph></entry>
              <entry>Servicing get requests.</entry>
            </row>
            <row>
              <entry><codeph>store_cmd</codeph></entry>
              <entry>Servicing store requests.</entry>
            </row>
            <row>
              <entry><codeph>arith_cmd</codeph></entry>
              <entry>Servicing incr/decr requests.</entry>
            </row>
            <row>
              <entry><codeph>get_stats_cmd</codeph></entry>
              <entry>Servicing <codeph>get_stats</codeph> requests.</entry>
            </row>
            <row>
              <entry><codeph>get_vb_cmd</codeph></entry>
              <entry>Servicing vBucket status requests.</entry>
            </row>
            <row>
              <entry><codeph>set_vb_cmd</codeph></entry>
              <entry>Servicing vBucket set state commands.</entry>
            </row>
            <row>
              <entry><codeph>del_vb_cmd</codeph></entry>
              <entry>Servicing vBucket deletion commands.</entry>
            </row>
            <row>
              <entry><codeph>chk_persistence_cmd</codeph></entry>
              <entry>Waiting for checkpoint persistence.</entry>
            </row>
            <row>
              <entry><codeph>item_alloc_sizes</codeph></entry>
              <entry>Item allocation size counters (in bytes).</entry>
            </row>
            <row>
              <entry><codeph>notify_io</codeph></entry>
              <entry>Time for waking blocked connections.</entry>
            </row>
            <row>
              <entry><codeph>paged_out_time</codeph></entry>
              <entry>Time (in seconds) objects are non-resident.</entry>
            </row>
            <row>
              <entry><codeph>storage_age</codeph></entry>
              <entry>Time since most recently persisted item was initially queued for
                storage.</entry>
            </row>
            <row>
              <entry><codeph>bg_batch_size</codeph></entry>
              <entry>Batch size for background fetches.</entry>
            </row>
            <row>
              <entry><codeph>persistence_cursor_get_all_items</codeph></entry>
              <entry>Time spent in fetching all items by persistence cursor from checkpoint queues.</entry>
            </row>
            <row>
              <entry><codeph>dcp_cursors_get_all_items</codeph></entry>
              <entry>Time spent in fetching all items by all dcp cursors from checkpoint queues.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <note>The most useful stats for understanding get and set timings are <codeph>get_cmd</codeph> and 
      <codeph>store_cmd</codeph>.</note>
    </section>
    
    <section><title>Options</title>
      <p>There are no options for this command. For common <cmdname>cbstats</cmdname> options, see
      <xref href="../cbstats-intro.dita#cbstats-intro"/>.</p>
    </section>
    
    <section><title>Example</title>

      <p><b>Request</b></p>
      <codeblock>cbstats localhost:11210 -u Administrator -p password -b beer-sample timings</codeblock>

      <p><b>Response</b></p>
      <codeblock> checkpoint_remover (101 total)
    2ms - 4ms        : ( 12.87%) 13 █████▌
    4ms - 8ms        : ( 94.06%) 82 ██████████████████████████████████▉
    8ms - 16ms       : ( 98.02%)  4 █▋
    16ms - 32ms      : (100.00%)  2 ▊
    Avg              : (    4ms)
 dcp_cursors_get_all_items (2 total)
    1us - 2us        : ( 50.00%) 1 ██████████████████████ 
    2us - 4us        : ( 50.00%) 0  
    4us - 8us        : (100.00%) 1 ██████████████████████ 
    Avg              : (    2us)
 disk_commit (1 total)
    2ms - 4ms        : (100.00%) 1 ████████████████████████████████████████████ 
    Avg              : (    2ms)
 disk_update (1 total)
    4us - 8us        : (100.00%) 1 ████████████████████████████████████████████ 
    Avg              : (    4us)
 get_cmd (3 total)
    4m:28s - 8m:56s  : (100.00%) 3 ████████████████████████████████████████████ 
    Avg              : ( 4m:28s)
 get_stats_cmd (2220 total)
    16s - 33s        : (  0.50%)   11 ▏
    33s - 1m:07s     : (  4.50%)   89 █▋
    1m:07s - 2m:14s  : ( 14.05%)  212 ███▉
    2m:14s - 4m:28s  : ( 42.12%)  623 ███████████▌
    4m:28s - 8m:56s  : (100.00%) 1285 ███████████████████████▋
    Avg              : ( 3m:20s)
 item_alloc_sizes (1 total)
    512 - 1KB     : (100.00%) 1 ███████████████████████████████████████████████ 
    Avg           : (    512)
 notify_io (4839 total)
    0 - 1us          : ( 17.42%)  843 ███████▏
    1us - 2us        : ( 26.04%)  417 ███▌
    2us - 4us        : ( 42.10%)  777 ██████▌
    4us - 8us        : ( 70.04%) 1352 ███████████▍
    8us - 16us       : ( 78.43%)  406 ███▍
    16us - 32us      : ( 90.80%)  599 █████ 
    32us - 64us      : ( 95.60%)  232 █▉
    64us - 128us     : ( 96.42%)   40 ▎
    128us - 256us    : ( 97.56%)   55 ▍
    256us - 512us    : ( 98.74%)   57 ▍
    512us - 1ms      : ( 99.03%)   14  
    1ms - 2ms        : ( 99.24%)   10  
    2ms - 4ms        : ( 99.48%)   12  
    4ms - 8ms        : ( 99.90%)   20 ▏
    8ms - 16ms       : ( 99.98%)    4  
    16ms - 32ms      : (100.00%)    1  
    Avg              : (   46us)
 persistence_cursor_get_all_items (60416 total)
    0 - 1us          : ( 96.83%) 58501 ██████████████████████████████████████▋
    1us - 2us        : ( 99.33%)  1511 █ 
    2us - 4us        : ( 99.79%)   276 ▏
    4us - 8us        : ( 99.82%)    18  
    8us - 16us       : ( 99.83%)     8  
    16us - 32us      : ( 99.85%)    11  
    32us - 64us      : ( 99.90%)    32  
    64us - 128us     : ( 99.94%)    24  
    128us - 256us    : ( 99.95%)     5  
    256us - 512us    : ( 99.96%)     4  
    512us - 1ms      : ( 99.96%)     1  
    1ms - 2ms        : ( 99.97%)     4  
    2ms - 4ms        : ( 99.98%)     7  
    4ms - 8ms        : ( 99.99%)     7  
    8ms - 16ms       : (100.00%)     6  
    16ms - 32ms      : (100.00%)     1  
    Avg              : (    1us)
 storage_age (1 total)
    0 - 1us          : (100.00%) 1 ████████████████████████████████████████████ 
    Avg              : (      0)
 store_cmd (1 total)
    4m:28s - 8m:56s  : (100.00%) 1 ████████████████████████████████████████████ 
    Avg              : ( 4m:28s)</codeblock>
    </section>
    
    
  </refbody>
</reference>
