<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="index_pushdowns">
    <title>Index Pushdown Optimizations</title>
    <body>
        <p>N1QL Query Engine implements many query processing optimizations to achieve the best
            possible performance for N1QL queries. The GSI Indexes are a vital part of query
            performance and are tightly coupled with the N1QL engine. The following links explain
            the basics of Indexing and how it helps query performance:<ul id="ul_y5t_zvh_vz">
                <li><xref href="../understanding-couchbase/services-and-indexes/indexes/indexes.dita">Indexes</xref></li>
                <li><xref href="../indexes/n1ql-in-couchbase.dita#concept_kfz_ghb_ys">Indexes for
                        N1QL</xref></li>
                <li><xref href="indexing-and-query-perf.dita#topic_ygz_jhp_4x">Indexing JSON
                        Documents and Query Performance</xref></li>
            </ul></p>
        <p>Index Pushdowns are performance optimizations where the N1QL engine pushes more of the
            work down to the Indexer. Query Indexer not only indexes data, it also supports various
            operations such as point scans, range scans, array indexing, sort order, and pagination.
            N1QL tries to leverage the indexer functionality as much as possible by pushing down the
            operations to indexer as part of the index scan. This helps performance, predominantly,
            in two ways:<ol id="ol_hmj_kwh_vz">
                <li>Minimize the amount of data transferred from Indexer nodes to Query nodes.</li>
                <li>Minimize the amount of processing done at Query nodes.</li>
            </ol>Refer to section Understanding <xref
                href="https://developer.couchbase.com/documentation/server/4.6/performance/index-scans.html"
                format="html" scope="external">Index Scans</xref> for more information on various
            index scans supported in N1QL.</p>
        <section id="section_njt_rr3_vz">
            <title>Index Projection</title>
            <p><i>(Introduced in Couchbase Server 5.0)</i></p>
            <p>When processing a SELECT or DML with a where clause, the N1QL engine picks one or
                more qualified indexes to be used for the query. Note that each index will have
                document field names explicitly specified as index-keys, and some metadata fields,
                such as <codeph>meta().id</codeph>, implicitly stored in the index. In earlier
                releases, the Indexer used to return all index-keys available in the index for the
                matching documents. From Couchbase Server 5.0, N1QL requests the exact list of
                fields needed for the query. For a covered query, it is the fields referred in
                projection, predicate, GROUP BY clauses, ORDER BY clauses, HAVING clauses, ON key,
                and subqueries of the query. For non-covered queries, it is just
                    <codeph>META().id</codeph>. </p>
            <p>For example, consider the following index and
                    query:<codeblock outputclass="language-json">C1: CREATE INDEX `def_route_src_dst_day` 
    ON `travel-sample`(`sourceairport`,`destinationairport`,
       (distinct (array (`v`.`day`) for `v` in `schedule` end))) 
    WHERE (`type` = "route") ;

Q1: EXPLAIN SELECT sourceairport FROM `travel-sample` 
    USE INDEX (def_route_src_dst_day)
    WHERE sourceairport = "SFO" 
    AND type = "route" 
    LIMIT 1;

Result:
{
  "plan": {
    "#operator": "Sequence",
    "~children": [
      {
        "#operator": "Sequence",
        "~children": [
          {
            "#operator": "DistinctScan",
            "limit": "1",
            "scan": {
              "#operator": "IndexScan2",
              "covers": [
                "cover ((`travel-sample`.`sourceairport`))",
                "cover ((`travel-sample`.`destinationairport`))",
                "cover ((distinct (array (`v`.`day`) for `v` in (`travel-sample`.`schedule`) end)))",
                "cover ((meta(`travel-sample`).`id`))"
              ],
              "filter_covers": {
                "cover ((`travel-sample`.`type`))": "route"
              },
              "index": "def_route_src_dst_day",
              "index_id": "4e6f8ae011d8efc8",
              "index_projection": {
                "entry_keys": [
                  0
                ],
                "primary_key": true
              },
              "keyspace": "travel-sample",
              "namespace": "default",
              "spans": [
                {
                  "exact": true,
                  "range": [
                    {
                      "high": "\"SFO\"",
                      "inclusion": 3,
                      "low": "\"SFO\""
                    }
                  ]
                }
              ],
              "using": "gsi"
            }
          },
          ...</codeblock><note>The
                    query refers to fields <codeph>sourceairport</codeph> and
                    <codeph>type</codeph>.</note><note>The index is wider in scope, that is, it has
                        <codeph>sourceairport</codeph>, <codeph>destinationairport</codeph>,
                        <codeph>schedule.day</codeph>, and <codeph>type</codeph> fields.<p>So, for
                        each matching document, the query requires only a subset of the data stored
                        in the index. With index-projection support, N1QL indicates the exact data
                        requested as part of the index-scan. In this example,<ul id="ul_gjw_sbj_vz">
                            <li><codeph>entry_keys</codeph> in the EXPLAIN output indicates the
                                exact index-key fields that should be returned in the index-scan
                                result. This has only one entry <codeph>0</codeph> indicating the
                                first index-key <codeph>sourceairport</codeph>.</li>
                            <li>Also, the <codeph>primary_key</codeph> indicates whether the index
                                should return the primary key <codeph>meta().id</codeph> of the
                                matching document. Note that in some cases (such as when
                                    <codeph>distinctScan</codeph> or <codeph>intersectScan</codeph>
                                are used, as in the above example), the <codeph>meta().id</codeph>
                                may be retrieved even though the query doesnâ€™t explicitly specify it
                                in the
                                query:<codeblock outputclass="language-json">"index_projection": {
    "entry_keys": [
         0
    ],
    "primary_key": true
}</codeblock></li>
                        </ul></p>Without this optimization, index-scan would return all the
                    index-keys defined in the index. If the <codeph>index_projection</codeph> field
                    is missing in the EXPLAIN output, then Indexer would return all
                    index-keys.</note></p>
        </section>
        <section id="section_dvs_ncj_vz">
            <title>Predicate Pushdown</title>
            <p>N1QL query engine and GSI indexes support many optimizations for efficiently
                processing predicate push-downs. In general, this performance optimization is
                leveraged when N1QL decides to use an Index-scan for processing a query, and whole
                or partial predicate can be pushed to the indexer to filter documents of interest to
                the query.</p>
            <p>For example, in the above query Q1 with a simple WHERE clause, the predicate
                    (<codeph>sourceairport = "SFO"</codeph>) is pushed to the index C1 with the
                following single <codeph>span</codeph> and <codeph>range</codeph>. These attributes
                exactly define different characteristics of the index scan:<ul id="ul_ckx_jdj_vz">
                    <li>Excerpt from the EXPLAIN output with <codeph>span</codeph> and
                            <codeph>range</codeph>:<codeblock outputclass="language-json">"spans": [
  {
    "exact": true,
    "range": [
      {
        "high": "\"SFO\"",
        "inclusion": 3,
        "low": "\"SFO\""
      }
    ]
  }
]</codeblock></li>
                    <li>Each Span defines details about one index-key summarizing corresponding
                        predicate conditions into a range-scan lookup for the index. In this
                        example, the predicate condition (<codeph>sourceairport = "SFO"</codeph>)
                        translates to one span with one range that specifies both
                            <codeph>low</codeph> and <codeph>high</codeph> values of "SFO" (to imply
                        equals condition).</li>
                    <li>Refer to section <xref href="index-scans.dita#topic_kkx_msp_mx"
                            >Understanding Index Scans</xref> for more information.</li>
                </ul></p>
        </section>
        <section id="section_bjv_h2j_vz">
            <title>Composite Predicate Pushdown</title>
            <p>Compound or composite predicates are those with multiple conditions on different
                fields of the document. When the predicate is conjunctive with multiple AND
                conditions, then a single <codeph>span</codeph> with multiple
                    <codeph>ranges</codeph> are specified in the index-scan request. When the
                predicate is disjunctive, then multiple <codeph>spans</codeph> are specified. See
                    <xref href="index-scans.dita#topic_kkx_msp_mx">Understanding Index Scans</xref>
                for more details and examples on how predicate pushdown works for various types of
                index-scans as well as the conjunctive predicate AND and the disjunctive predicate
                OR.</p>
            <p><b>Index key order and structure</b></p>
            <p>Composite indexes have more than one index key, and the order of the index keys is
                important for any lookup or scan of the index, because the indexes structure all the
                indexed entries in linearized default collation sorted order of all the index-keys.
                For example, consider the following
                index:<codeblock>CREATE INDEX `idx_age_name` ON users(age, name);</codeblock></p>
            <p><image href="../n1ql/n1ql-language-reference/images/IndexKeyOrder.png" width="570"
                    id="image_akt_gpw_vz"/></p>
            <p>Various age and name values are stored in the index in a tree like structure
                (represented by the triangle in the above picture) with all the index key values
                linearly sorted as ordered pairs. For instance,<ul id="ul_xfs_tgj_vz">
                    <li>The above picture shows index-entries with all names in sorted order with an
                        age of 20 followed by the entries for age 21 and related names.</li>
                    <li>The arrowed paths logically depicts how an index lookup or scan would find
                        entries in the index.</li>
                    <li>A point lookup query for <codeph>age=20 AND name="joe"</codeph> may follow
                        arrows labelled <b>p1</b>.</li>
                    <li>Similarly, a range scan for <codeph>(age BETWEEN 20 and 21) AND
                            (name="joe")</codeph> may find entries of interest between the paths
                        labelled <b>p1</b> and <b>p2</b> (highlighted in green). <note>This range
                            may include some unwanted entries (such as "mark", "abby", "anne") which
                            will be filtered subsequently.</note><note>Queries with predicates such
                            as <codeph>(age = 20) AND (name BETWEEN "joe" and "mark")</codeph> will
                            need all the entries found using range scans.</note></li>
                </ul></p>
            <p>In general, when the predicate has a range condition on prefixing index-keys (such as
                    <codeph>age</codeph>) may produce unwanted results from the range-scan
                index-lookups. In couchbase Server 5.0, the N1QL and Indexer are enhanced with
                complete and accurate predicate pushdown to filter such unnecessary results in
                Indexer itself. This improves query performance as it saves the additional overhead
                in transferring the unwanted data/results to query nodes and subsequently filtering
                the results in N1QL. This is explained with an example in the following section
                    <xref
                    href="https://docs.google.com/document/d/1eb7FSZLcZQyNq9QaD45jUlgm6MhpwrPuW9Sm79si-ms/edit?ts=5902615e#heading=h.7i31nrdmvxqv"
                    format="html" scope="external">Composite predicate with range-scan on prefix
                    index-keys</xref>.<note>In couchbase server 4.x, indexer would return such
                    extraneous unwanted results and N1QL would filter them, thus guaranteeing
                    accurate final query results.</note></p>
        </section>
        <p>Composite predicate with range-scan on prefix index-keys</p>
        <p><i>(Introduced in Couchbase Server 5.0)</i></p>
        <p>N1QL supports efficient predicate pushdown to indexes in the cases when the WHERE clause
            has a range predicate on any of the prefixing index-keys. </p>
        <p>Consider the following query which finds all destination airports within 2000 miles of
            LAX.<codeblock outputclass="language-json">CREATE INDEX `def_route_src_dst_dist` 
ON `travel-sample`(`distance`,`sourceairport`,`destinationairport`) 
WHERE (`type` = "route");

EXPLAIN SELECT destinationairport 
FROM `travel-sample`
USE INDEX (def_route_src_dst_dist)
WHERE type = "route" 
AND distance &lt; 2000 AND sourceairport = "LAX";

Results:
{
  "plan": {
    "#operator": "Sequence",
    "~children": [
      {
        "#operator": "IndexScan2",
        "covers": [
          "cover ((`travel-sample`.`distance`))",
          "cover ((`travel-sample`.`sourceairport`))",
          "cover ((`travel-sample`.`destinationairport`))",
          "cover ((meta(`travel-sample`).`id`))"
        ],
        "filter_covers": {
          "cover ((`travel-sample`.`type`))": "route"
        },
        "index": "def_route_src_dst_dist",
        "index_id": "d0f5a70e29f09ca1",
        "index_projection": {
          "entry_keys": [
            0,
            1,
            2
          ]
        },
        "keyspace": "travel-sample",
        "namespace": "default",
        "spans": [
          {
            "exact": true,
            "range": [
              {
                "high": "2000",
                "inclusion": 0,
                "low": "null"
              },
              {
                "high": "\"LAX\"",
                "inclusion": 3,
                "low": "\"LAX\""
              }
            ]
          }
        ],
        "using": "gsi"
      },
      ...
}</codeblock></p>
        <p>In this query:<ul id="ul_eqr_glj_vz">
                <li>The predicate has the range condition on the first index-key
                        <codeph>distance</codeph> and an equality predicate on the 2nd index-key
                        <codeph>sourceairport</codeph>.</li>
                <li>The predicate is accurately represented and pushed-down to indexer, as shown in
                    the <codeph>spans</codeph> attribute of the EXPLAIN query plan output. The
                        <codeph>range[]</codeph> attribute is an array of the predicate bounds for
                    individual index-keys involved in the compound predicate.<ul id="ul_u4j_z44_vz">
                        <li>The first element of <codeph>range[]</codeph> corresponds to the
                            index-key <codeph>distance</codeph> with (<codeph>low</codeph>,
                                <codeph>high</codeph>) values (<codeph>null</codeph>,
                                <codeph>2000</codeph>) respectively.</li>
                        <li>The second element of <codeph>range[]</codeph> corresponds to the
                            index-key <codeph>sourceairport</codeph> with (<codeph>low</codeph>,
                                <codeph>high</codeph>) values (<codeph>"LAX"</codeph>,
                                <codeph>"LAX"</codeph>) representing equals condition.</li>
                    </ul></li>
                <li>Indexer processes the lookup request and exactly returns only the documents
                    matching the predicate conditions. For example, when you <xref
                        href="../monitoring/monitoring-n1ql-query.dita#topic_nvs_ghr_dz">enable
                        monitoring</xref> with the N1QL configuration parameter <codeph>profile =
                        "timings"</codeph> for this query, you can see that indexer returns 165
                    documents which is same as the final result set of the
                    query.<codeblock outputclass="language-json">    "~children": [
          {
            "#operator": "IndexScan2",
            "#stats": {
              "#itemsOut": 165,
              "#phaseSwitches": 663,
              "execTime": "174.449Âµs",
              "kernTime": "22.49046ms"
            },
            "index": "def_route_src_dst_dist",
            "index_id": "d0f5a70e29f09ca1",
            "index_projection": {
              "primary_key": true
            },
            "keyspace": "travel-sample",
            "namespace": "default",
            "spans": [
              {
                "exact": true,
                "range": [
                  {
                    "high": "2000",
                    "inclusion": 0,
                    "low": "null"
                  },
                  {
                    "high": "\"LAX\"",
                    "inclusion": 3,
                    "low": "\"LAX\""
                  }
                ]
              }
            ],
            "using": "gsi",
	...
              {
                "#operator": "FinalProject",
                "#stats": {
                  "#itemsIn": 165,
                  "#itemsOut": 165,
                  "#phaseSwitches": 667,
                  "execTime": "60.055Âµs",
                  "kernTime": "31.413071ms"
                },
	...</codeblock></li>
            </ul></p>
        <section id="section_z25_5p4_vz"><title>Pagination Pushdown</title><p>Pagination in N1QL
                queries is achieved by using the LIMIT and OFFSET clauses, and both of the operators
                can be pushed to indexer whenever possible. <note>These operators may not always be
                    pushed to Indexer, depending on the following factors:<ul id="ul_unj_jq4_vz">
                        <li>Whether or not the whole predicate in the WHERE clause can be completely
                            and accurately pushed to a single index.</li>
                        <li>When using IntersectScan, N1QL uses multiple indexes to process the
                            query. As such, LIMIT/OFFSET will need to be processed in N1QL at a
                            later stage of query processing, and hence cannot be pushed to the
                            Indexer.</li>
                        <li>Whether or not the SELECT query has other clauses that may impact
                            pagination, such as ORDER BY or JOIN. For example,<ul id="ul_vw3_5q4_vz">
                                <li>When ORDER BY key in the query is different from that of the
                                    index order, then the query layer will need to process the sort;
                                    and hence, in those cases, the pagination cannot be pushed to
                                    the indexer as shown in Example 3 below.</li>
                                <li>For JOIN queries, index scans can be used only for the left side
                                    keyspace. Subsequent JOIN phrases may filter some documents,
                                    after which only LIMIT/OFFSET can be applied. Hence, the
                                    pagination operators cannot be pushed when a query has JOIN
                                    clauses.</li>
                            </ul></li>
                    </ul></note>LIMIT pushdown is supported in Couchbase Server 4.5.0
                versions.</p><p>OFFSET pushdown is introduced in Couchbase Server
                    5.0.</p><p><note>Both LIMIT and OFFSET may not be pushed to index in all cases.
                    For example, when pushing to the primary index, only LIMIT is pushed (see
                    Example 2 below). Observe that, in that case, LIMIT is pushed with the value of
                    the sum of the limit and offset specified in the query. This may not be as
                    efficient because N1QL will need to drop the first offset number of
                    documents.</note><b>Example 1</b>: When using secondary index, both LIMIT and
                OFFSET operators are pushed to
                    index.<codeblock outputclass="language-json">EXPLAIN SELECT * FROM `travel-sample` 
WHERE city = "San Francisco"
OFFSET  4000  LIMIT 10000;

Result:
{
  "plan": {
    "#operator": "Sequence",
    "~children": [
      {
        "#operator": "Sequence",
        "~children": [
          {
            "#operator": "IndexScan2",
            "index": "def_city",
            "index_id": "fd399cb179e9ab0a",
            "index_projection": {
              "primary_key": true
            },
            "keyspace": "travel-sample",
            "limit": "10000",
            "namespace": "default",
            "offset": "4000",
            "spans": [
              {
                "exact": true,
                "range": [
                  {
                    "high": "\"San Francisco\"",
                    "inclusion": 3,
                    "low": "\"San Francisco\""
                  }
                ]
              }
            ],
            "using": "gsi"
          }</codeblock><b>Example
                    2</b>: When using a primary index, only LIMIT is
                pushed.<codeblock outputclass="language-json">EXPLAIN SELECT * FROM `travel-sample` 
OFFSET  4000  LIMIT 10000;

Result:
{
  "plan": {
    "#operator": "Sequence",
    "~children": [
      {
        "#operator": "Sequence",
        "~children": [
          {
            "#operator": "PrimaryScan",
            "index": "def_primary",
            "keyspace": "travel-sample",
            "limit": "(10000 + 4000)",
            "namespace": "default",
            "using": "gsi"
          }</codeblock></p><b>Example
                3</b>: LIMIT and OFFSET operators are not pushed to index when index order is
            different from that specified in the ORDER
            BY.<codeblock outputclass="language-json">EXPLAIN SELECT * FROM `travel-sample` 
USE INDEX(def_city)
WHERE city = "San Francisco"
ORDER BY name
OFFSET  4000  LIMIT 10000;

Result:
{
  "plan": {
    "#operator": "Sequence",
    "~children": [
      {
        "#operator": "Sequence",
        "~children": [
          {
            "#operator": "IndexScan2",
            "index": "def_city",
            "index_id": "931a0fae2fe4ef8",
            "index_projection": {
              "primary_key": true
            },
            "keyspace": "travel-sample",
            "namespace": "default",
            "spans": [
              {
                "exact": true,
                "range": [
                  {
                    "high": "\"San Francisco\"",
                    "inclusion": 3,
                    "low": "\"San Francisco\""
                  }
                ]
              }
            ],
            "using": "gsi"
          },
          {
            "#operator": "Fetch",
            "keyspace": "travel-sample",
            "namespace": "default"
          },
          {
            "#operator": "Parallel",
            "~child": {
              "#operator": "Sequence",
              "~children": [
                {
                  "#operator": "Filter",
                  "condition": "((`travel-sample`.`city`) = \"San Francisco\")"
                },
                {
                  "#operator": "InitialProject",
                  "result_terms": [
                    {
                      "expr": "self",
                      "star": true
                    }
                  ]
                }
              ]
            }
          }
        ]
      },
      {
        "#operator": "Order",
        "limit": "10000",
        "offset": "4000",
        "sort_terms": [
          {
            "expr": "(`travel-sample`.`name`)"
          }
        ]
      },
      {
        "#operator": "Offset",
        "expr": "4000"
      },
      {
        "#operator": "Limit",
        "expr": "10000"
      },
      {
        "#operator": "FinalProject"
      }
    ]
  },
  "text": "SELECT * FROM `travel-sample` \nUSE INDEX(def_city)\nWHERE city = 
  \"San Francisco\"\nORDER BY name\nOFFSET  4000  LIMIT 10000;"
}</codeblock></section>
        <section id="section_hy2_dx4_vz">
            <title>Using Index Order</title>
            <p>N1QL may avoid ORDER BY processing in cases where the ordering of entries in the
                index can be leveraged for the query. N1QL carefully evaluates each query to decide
                whether ORDER BY keys are aligned with the index key order. For example, ORDER BY
                may not be pushed down when the ORDER BY fields are not aligned with the index-key
                order defining the index.</p>
            <p>In the following example, you can see that the query Q1 plan does not have an ORDER
                operator before the final projection. That means, order pushdown is being leveraged,
                and the query is relying on the index order. However, for Q2, you can see an
                additional ORDER operator before the final projection, because the ORDER BY field
                    <codeph>meta().id</codeph> is different from the index order key
                    <codeph>city</codeph>.</p>
            <p><b>Q1</b>: Find all cities that start with "San", and sort the results by the city
                name in ascending
                    order.<codeblock outputclass="language-json">EXPLAIN SELECT city FROM `travel-sample` 
WHERE city LIKE "San%"
ORDER BY city;

Result:
{
  "plan": {
    "#operator": "Sequence",
    "~children": [
      {
        "#operator": "Sequence",
        "~children": [
          {
            "#operator": "IndexScan2",
            "covers": [
              "cover ((`travel-sample`.`city`))",
              "cover ((meta(`travel-sample`).`id`))"
            ],
            "index": "def_city",
            "index_id": "fd399cb179e9ab0a",
            "index_projection": {
              "entry_keys": [
                0
              ]
            },
            "keyspace": "travel-sample",
            "namespace": "default",
            "spans": [
              {
                "exact": true,
                "range": [
                  {
                    "high": "\"Sao\"",
                    "inclusion": 1,
                    "low": "\"San\""
                  }
                ]
              }
            ],
            "using": "gsi"
          },
          {
            "#operator": "Parallel",
            "maxParallelism": 1,
            "~child": {
              "#operator": "Sequence",
              "~children": [
                {
                  "#operator": "Filter",
                  "condition": "(cover ((`travel-sample`.`city`)) like \"San%\")"
                },
                {
                  "#operator": "InitialProject",
                  "result_terms": [
                    {
                      "expr": "cover ((`travel-sample`.`city`))"
                    }
                  ]
                },
                {
                  "#operator": "FinalProject"
                }
              ]
            }
          }
        ]
      }
    ]
  },
  "text": "SELECT city FROM `travel-sample` \nWHERE city LIKE \"San%\"\nORDER BY city;"
}</codeblock><b>Q2</b>:
                Find all cities that start with "San", and sort the results by the document primary
                key in ascending
                    order.<codeblock outputclass="language-json">EXPLAIN SELECT city FROM `travel-sample` 
WHERE city LIKE "San%"
ORDER BY meta().id;

Result:
{
  "plan": {
    "#operator": "Sequence",
    "~children": [
      {
        "#operator": "Sequence",
        "~children": [
          {
            "#operator": "IndexScan2",
            "covers": [
              "cover ((`travel-sample`.`city`))",
              "cover ((meta(`travel-sample`).`id`))"
            ],
            "index": "def_city",
            "index_id": "fd399cb179e9ab0a",
            "keyspace": "travel-sample",
            "namespace": "default",
            "spans": [
              {
                "exact": true,
                "range": [
                  {
                    "high": "\"Sao\"",
                    "inclusion": 1,
                    "low": "\"San\""
                  }
                ]
              }
            ],
            "using": "gsi"
          },
          {
            "#operator": "Parallel",
            "~child": {
              "#operator": "Sequence",
              "~children": [
                {
                  "#operator": "Filter",
                  "condition": "(cover ((`travel-sample`.`city`)) like \"San%\")"
                },
                {
                  "#operator": "InitialProject",
                  "result_terms": [
                    {
                      "expr": "cover ((`travel-sample`.`city`))"
                    }
                  ]
                }
              ]
            }
          }
        ]
      },
      {
        "#operator": "Order",
        "sort_terms": [
          {
            "expr": "cover ((meta(`travel-sample`).`id`))"
          }
        ]
      },
      {
        "#operator": "FinalProject"
      }
    ]
  },
  "text": "SELECT city FROM `travel-sample` \nWHERE city LIKE \"San%\"\nORDER BY meta().id;"
}</codeblock><b>Limitation</b>:
                Currently N1QL supports order pushdown only when the ORDER BY keys are aligned with
                the Index order. But reverse-scan of the index is not supported. For example, as
                shown in the EXPLAIN output of Q1 above, an additional "order" operator is not
                required, because the index order is the same as the ascending order specified in
                Q1. Similarly, in the following query Q3, the ORDER BY clause has DESC, and that
                matches with the index order defined by the index C3. However, the ASC order in Q1
                will not be able to leverage the index order in the index
                    <codeph>def_city_desc</codeph>, nor the DESC order in Q3 will be able to
                leverage the index order in the index
                <codeph>def_city</codeph><codeblock><b>C3</b>: CREATE INDEX def_city ON `travel-sample`(`city` DESC);</codeblock></p>
            <p><b>Q3</b>: Descending variation of
                Q1.<codeblock outputclass="language-json">EXPLAIN SELECT city FROM `travel-sample` 
WHERE city LIKE "San%"
ORDER BY meta().id;

Result:
{
  "plan": {
    "#operator": "Sequence",
    "~children": [
      {
        "#operator": "Sequence",
        "~children": [
          {
            "#operator": "IndexScan2",
            "covers": [
              "cover ((`travel-sample`.`city`))",
              "cover ((meta(`travel-sample`).`id`))"
            ],
            "index": "def_city",
            "index_id": "fd399cb179e9ab0a",
            "keyspace": "travel-sample",
            "namespace": "default",
            "spans": [
              {
                "exact": true,
                "range": [
                  {
                    "high": "\"Sao\"",
                    "inclusion": 1,
                    "low": "\"San\""
                  }
                ]
              }
            ],
            "using": "gsi"
          },
          {
            "#operator": "Parallel",
            "~child": {
              "#operator": "Sequence",
              "~children": [
                {
                  "#operator": "Filter",
                  "condition": "(cover ((`travel-sample`.`city`)) like \"San%\")"
                },
                {
                  "#operator": "InitialProject",
                  "result_terms": [
                    {
                      "expr": "cover ((`travel-sample`.`city`))"
                    }
                  ]
                }
              ]
            }
          }
        ]
      },
      {
        "#operator": "Order",
        "sort_terms": [
          {
            "expr": "cover ((meta(`travel-sample`).`id`))"
          }
        ]
      },
      {
        "#operator": "FinalProject"
      }
    ]
  },
  "text": "SELECT city FROM `travel-sample` \nWHERE city LIKE \"San%\"\nORDER BY meta().id;"
}</codeblock></p>
        </section>
        <section id="section_bfn_l2z_vz">
            <title>Operator Pushdowns</title>
            <p>The N1QL query engine tries to avoid unnecessary processing operators such as MIN(),
                MAX(), and COUNT(), which can be processed by Indexer much more efficiently. In such
                cases, N1QL pushes down necessary hints or options to the Indexer to process the
                following operators. </p>
        </section>
        <section id="section_vhq_grr_vz"><title>MAX() Pushdown</title><p><i>(Introduced in Couchbase
          Server 5.0)</i></p><p>This function returns the highest value of the input field based on
        the default collation rules (for details, see <xref
          href="../n1ql/n1ql-language-reference/datatypes.dita#topic_4">Data types</xref> and <xref
          href="../n1ql/n1ql-language-reference/comparisonops.dita#topic_7_2">Comparison
          Operators</xref>)</p><p>MAX() can be pushed to the Indexer only when the index is created
        with matching index keys in descending order. In such cases, the maximum value will be the
        first entry in the Index when keys are in descending order, so the N1QL engine will
        automatically add the hint<codeph> Limit: 1 </codeph>to the index scan. In the EXPLAIN
        output of the query, you can see the<codeph> limit </codeph>hint. </p><b>Example 1</b>: Uses
        the<codeph> def_city </codeph>index that comes pre-installed and can be made by the
      statement:<codeblock outputclass="language-json">USE INDEX def_city ON `travel-sample`(city DESC);</codeblock></section>
    <section id="section_fhg_rqn_xz"><b>Example 1a</b>: MAX of a string field â€“ Finding the
      alphabetically highest city name in
      <codeph>travel-sample</codeph>.<codeblock outputclass="language-json">CREATE INDEX idx_city_desc ON `travel-sample`(city DESC);

EXPLAIN SELECT MAX(city) 
FROM `travel-sample` 
USE INDEX (def_city)
WHERE city is not null;</codeblock></section>
        <section>Result:<codeblock outputclass="language-json">{
  "plan": {
    "#operator": "Sequence",
    "~children": [
      {
        "#operator": "IndexScan2",
        "covers": [
          "cover ((`travel-sample`.`city`))",
          "cover ((meta(`travel-sample`).`id`))"
        ],
        "index": "def_city",
        "index_id": "e0a377e15a408175",
        "index_projection": {
          "entry_keys": [
            0
          ]
        },
        "keyspace": "travel-sample",      
        
        "limit": "1",                       / this line is an added hint
        
        "namespace": "default",           
        "spans": [
          {
            "exact": true,
            "range": [
              {
                "inclusion": 0,
                "low": "null"
              }
            ]
          }
        ],
        "using": "gsi"
      },
      {
        "#operator": "Parallel",
        "~child": {
          "#operator": "Sequence",
          "~children": [
            {
              "#operator": "Filter",
              "condition": "(cover ((`travel-sample`.`city`)) is not null)"
            },
            {
              "#operator": "InitialGroup",
              "aggregates": [
                "max(cover ((`travel-sample`.`city`)))"
              ],
              "group_keys": []
            }
          ]
        }
      },
      {
        "#operator": "IntermediateGroup",
        "aggregates": [
          "max(cover ((`travel-sample`.`city`)))"
        ],
        "group_keys": []
      },
      {
        "#operator": "FinalGroup",
        "aggregates": [
          "max(cover ((`travel-sample`.`city`)))"
        ],
        "group_keys": []
      },
      {
        "#operator": "Parallel",
        "~child": {
          "#operator": "Sequence",
          "~children": [
            {
              "#operator": "InitialProject",
              "result_terms": [
                {
                  "expr": "max(cover ((`travel-sample`.`city`)))"
                }
              ]
            },
            {
              "#operator": "FinalProject"
            }
          ]
        }
      }
    ]
  },
  "text": "SELECT MAX(city) \nFROM `travel-sample` \nuse index (def_city)\nWHERE city is not null;"
}</codeblock></section>
        <section id="section_ojw_5sw_vz"><title>MIN() Pushdown</title><p><i>(Introduced in Couchbase
          Server 5.0)</i></p><p>This function returns the lowest value of the input field based on
        the default collation rules (for details, see <xref
          href="../n1ql/n1ql-language-reference/datatypes.dita#topic_4">Data types</xref> and <xref
          href="../n1ql/n1ql-language-reference/comparisonops.dita#topic_7_2">Comparison
          Operators</xref>)</p><p>MIN() can be pushed to the Indexer only when the index is created
        with matching index keys in ascending order. In such cases, the minimum value will be the
        first entry in the Index when keys are in ascending order, so the N1QL engine will
        automatically add the hint<codeph> Limit: 1 </codeph>to the index scan. In the EXPLAIN
        output of the query, you can see the<codeph> limit </codeph>hint. </p><b>Example 2</b>: Uses
        the<codeph> def_city </codeph>index that comes pre-installed and can be made by the
      statement:<codeblock outputclass="language-json">USE INDEX def_city ON `travel-sample`(city DESC);</codeblock></section>
    <section id="section_ix5_krn_xz"><b>Example 2a</b>: MIN of a string field â€“ Finding the
      alphabetically lowest city name in
      <codeph>travel-sample</codeph>.<codeblock outputclass="language-json">CREATE INDEX idx_city_asc ON `travel-sample`(city DESC);

EXPLAIN SELECT MIN(city) 
FROM `travel-sample` 
USE INDEX (def_city)
WHERE city is not null;</codeblock></section>
        <section>Result:<codeblock outputclass="language-json">{
  "plan": {
    "#operator": "Sequence",
    "~children": [
      {
        "#operator": "IndexScan2",
        "covers": [
          "cover ((`travel-sample`.`city`))",
          "cover ((meta(`travel-sample`).`id`))"
        ],
        "index": "def_city",
        "index_id": "e0a377e15a408175",
        "index_projection": {
          "entry_keys": [
            0
          ]
        },
        "keyspace": "travel-sample",        

        "limit": "1",                          / this line is an added hint
        
        "namespace": "default",             
        "spans": [
          {
            "exact": true,
            "range": [
              {
                "inclusion": 0,
                "low": "null"
              }
            ]
          }
        ],
        "using": "gsi"
      },
      {
        "#operator": "Parallel",
        "maxParallelism": 1,
        "~child": {
          "#operator": "Sequence",
          "~children": [
            {
              "#operator": "Filter",
              "condition": "(cover ((`travel-sample`.`city`)) is not null)"
            },
            {
              "#operator": "InitialGroup",
              "aggregates": [
                "min(cover ((`travel-sample`.`city`)))"
              ],
              "group_keys": []
            }
          ]
        }
      },
      {
        "#operator": "IntermediateGroup",
        "aggregates": [
          "min(cover ((`travel-sample`.`city`)))"
        ],
        "group_keys": []
      },
      {
        "#operator": "FinalGroup",
        "aggregates": [
          "min(cover ((`travel-sample`.`city`)))"
        ],
        "group_keys": []
      },
      {
        "#operator": "Parallel",
        "maxParallelism": 1,
        "~child": {
          "#operator": "Sequence",
          "~children": [
            {
              "#operator": "InitialProject",
              "result_terms": [
                {
                  "expr": "min(cover ((`travel-sample`.`city`)))"
                }
              ]
            },
            {
              "#operator": "FinalProject"
            }
          ]
        }
      }
    ]
  },
  "text": "SELECT MIN(city) \nFROM `travel-sample` \nuse index (def_city)\nWHERE city is not null;"
}</codeblock></section>
        <section id="section_qzp_fzw_vz"><title>COUNT() Pushdown</title><p><i>(Introduced in
          Couchbase Server 5.0)</i></p><p>This function returns the total number of non-Null values
        of an input field from the matching documents of an index scan. </p><p>As shown in Example
        3b, the newly added index operator<codeph> IndexCountScan2 </codeph>counts values so the
        Query Service does not need to do additional processing.</p><b>Example 3</b>:  Uses
        the<codeph> def_city </codeph>index that comes pre-installed and can be made by the
      statement:<codeblock outputclass="language-json">CREATE INDEX def_city ON `travel-sample`(city ASC);</codeblock></section>
    <section id="section_fbv_trn_xz"><b>Example 3a</b>:  Count of a string field -- Finding the
      number of cities entered in
      <codeph>travel-sample</codeph>.<codeblock outputclass="language-json">SELECT COUNT(city) AS NumberOfCities
FROM `travel-sample` 
use index (def_city)
WHERE city is not null;</codeblock></section>
        <section>Result:<codeblock outputclass="language-json">[
  {
    "NumberOfCities": 7341
  }
]</codeblock></section>
        <section><b>Example 3b</b>: The details behind Example
      3.<codeblock outputclass="language-json">EXPLAIN SELECT COUNT(city) AS NumberOfCities
FROM `travel-sample` 
use index (def_city)
WHERE city is not null;</codeblock></section>
        <section>Result:<codeblock outputclass="language-json">{
  "plan": {
    "#operator": "Sequence",
    "~children": [
      {
        "#operator": "IndexCountScan2",                  / newly added
        "covers": [
          "cover ((`travel-sample`.`city`))",
          "cover ((meta(`travel-sample`).`id`))"
        ],
        "index": "def_city",
        "index_id": "e0a377e15a408175",
        "keyspace": "travel-sample",
        "namespace": "default",
        "spans": [
          {
            "exact": true,
            "range": [
              {
                "inclusion": 0,
                "low": "null"
              }
            ]
          }
        ],
        "using": "gsi"
      },
      {
        "#operator": "IndexCountProject",
        "result_terms": [
          {
            "as": "NumberOfCities",
            "expr": "count((`travel-sample`.`city`))"
          }
        ]
      }
    ]
  },
  "text": "SELECT COUNT(city) AS NumberOfCities\nFROM `travel-sample` \nuse index (def_city)\nWHERE city is not null;"
}</codeblock></section>
        <section id="section_qf1_k1x_vz"><title>COUNT(DISTINCT) Pushdown</title><p><i>(Introduced in
          Couchbase Server 5.0)</i></p><p>This function returns the total number of unique non-Null
        values of an input field from the matching documents of an index scan. </p><p>As shown in
        Example 4b, the newly added index operator<codeph> IndexCountScan2 </codeph>counts distinct
        values so the Query Service does not need to do additional processing.</p><b>Example 4</b>:
      Uses the<codeph> def_city </codeph>index that comes pre-installed and can be made by the
        statement:<codeblock outputclass="language-json">CREATE INDEX def_city ON `travel-sample`(city ASC);</codeblock><b>Example
        4a</b>: Count Distinct of a string field -- Finding the number of unique city names in
        <codeph>travel-sample</codeph>.<codeblock outputclass="language-json">SELECT COUNT (DISTINCT city) AS NumberOfDistinctCities
FROM `travel-sample` 
USE index (def_city)
WHERE city is not null;</codeblock></section>
        <section>Result:<codeblock outputclass="language-json">[
  {
    "NumberOfDistinctCities": 2301
  }
]</codeblock></section>
        <section><b>Example 4b</b>: The details behind Example
      5.<codeblock outputclass="language-json">EXPLAIN SELECT COUNT (DISTINCT city) AS NumberOfDistinctCities
FROM `travel-sample` 
use index (def_city)</codeblock></section>
        <section>Result:<codeblock outputclass="language-json">{
  "plan": {
    "#operator": "Sequence",
    "~children": [
      {
        "#operator": "IndexCountDistinctScan2",             / newly added operator
        "covers": [
          "cover ((`travel-sample`.`city`))",
          "cover ((meta(`travel-sample`).`id`))"  
        ],
        "index": "def_city",
        "index_id": "e0a377e15a408175",
        "keyspace": "travel-sample",
        "namespace": "default",
        "spans": [
          {
            "exact": true,
            "range": [
              {
                "inclusion": 0,
                "low": "null"
              }
            ]
          }
        ],
        "using": "gsi"
      },
      {
        "#operator": "IndexCountProject",
        "result_terms": [
          {
            "as": "NumberOfDistinctCities",
            "expr": "count(distinct (`travel-sample`.`city`))"
          }
        ]
      }
    ]
  },
  "text": "SELECT COUNT (DISTINCT city) AS NumberOfDistinctCities\nFROM `travel-sample` \nuse index (def_city)\nWHERE city is not null;"
}</codeblock></section>
    </body>
    
</topic>
