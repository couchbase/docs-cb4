<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="kv-index-diagrams">
 <title>Data service communication</title>
  <shortdesc>This section shows the communication between the Index and Data services.</shortdesc>
 <conbody>
   
   <p>Indexer behavior:</p>
   <ul>
     <li>Indexer maintains high watermark timestamp and stability timestamp at per bucket level on
        each node. In this case, index1 (I1) and index 2 (I2) share watermark and stability
        timestamps as these are from the same bucket. index 2 (I3) has its own copy.</li>
     <li>Index coordinator master maintains stability timestamps for each bucket.</li>
     <li>There is a single mutation queue, catchup queue, and backfill queue per bucket per node.</li>
     <li>The router sends periodic synchronization messages to the master index coordinator.</li>
   </ul>
   
   <section><title>Diagram process flows</title>
  
   <p>The following diagrams show two (2) nodes for the key-value data cluster and two (2) nodes for
        the index cluster. <ul>
          <li>BLACK arrows represent the flow of data messages (key versions)</li>
          <li>RED arrows represent meta messages.</li>
        </ul></p>
  
  <p>In the diagrams, the numbered flow lines represent the following process:</p>
  
  <ol>
  
  <li>Data mutations via DCP are sent to the projector which subscribes for the active vBuckets on a
          node. The projector runs map functions based on index definitions and outputs secondary
          key versions.</li>
  <li>Secondary key versions are sent to the router component. Based on index
          distribution/partitioning topology, it determines which Indexer node  receives the key
          version.</li>
   <li>The router has a guaranteed delivery component, (called transporter) which handles the actual
        network transport. A single mutation can result in multiple messages to be sent to multiple
        index nodes.</li> 
   <li>The router occasionally send synchronization messages to the index manager which enables
          it to calculate the next stability timestamp for all Indexers.</li>
  <li>For normal workflow, the indexer accepts and stores the mutations in a mutation queue. These
        mutations get processed once the index manager generates a stability timestamp.</li> 
   <li>For rollback scenarios, the indexer stores the mutations in the catchup queue. The catchup
        queue is also used by a slow indexer.</li>
   <li>The backfill queue is used by indexer for an initial index build.</li>
  <li>The index coordinator master synchronizes with its replica to synchronously replicate index
        definition metadata, recovery context, and so on.</li>
  <li>The index coordinator master communicates with all indexers to announce new stability
        timestamp, rollback mode init, collect high water timestamps for recovery etc.</li>
  <li>Local persistence for the index coordinator and for the indexer for all secondary key
        versions. All persistent snapshots are stored locally.</li>
  
  </ol>
   </section>
  


  
  <section><title>Multiple buckets and indexes</title>
   <p>The following KV-index system diagram is shown with a multiple buckets and indexes.</p>
   
   <ul>
    <li>Two buckets are shown and labeled B1 and B2.</li>
    <li>Each bucket has 4 vBuckets.</li>
    <li>Two indexes are assigned to each bucket.</li>
    <li>B1 bucket has I1 and I2 index.</li>
    <li>B2 bucket has I3 and I4 index.</li>
   </ul>
   
   <fig><image width="720" href="../images/index-kv-multiple.svg"></image></fig>
   
   
  </section>
  
  <section><title>Single bucket and index</title>
  <p>The following KV-index system diagram is shown with a single bucket and index.</p>
   
   <fig><image width="720" href="../images/index-kv-single.svg"></image></fig>
  
  
  
  
  
  </section>
  
  
  
  
 </conbody>
</concept>
