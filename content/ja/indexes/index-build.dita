<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="index-build">
  <title>Building indexes</title>
  <shortdesc>Short reference description.</shortdesc>
  <refbody>
    <section><title>Description</title>
      
      <p>When creating an index, if the defer_build parameter is set as true, 
        the build process waits until an explicit BUILD INDEXES command that builds the index. 
        If the defer_build parameter is set to false,
        the CREATE INDEX command immediately initiates the index build.</p>
      
      <p>To build an index:</p>
      <codeblock>
BUILD INDEXES `beer-sample`(strongbooze, breweries)
   </codeblock>
      
      <p></p>
      <p>BUILD INDEXES command
        is an extension command that is specific to GSI type indexes. Query team can propose any refined
        command syntax alternative to handle build index step. Query engine should invoke a datastore
        API,</p>
      <p>(Eg. BuildIndex([]string) error ) to execute this command. An indexer can support
        building index groups of different buckets concurrently. If an index build is in progress and a
        build_index request arrives for the same bucket, indexer should return failure for that
        request.</p>
      <p>Indexes can be created successfully immediately after a create-index statement is
        executed, but the build happens at a later time when BUILD command is executed. BUILD INDEXES
        command will not wait until the entire build for indexes are complete. Build command will
        initiate the build and return immediately. If any of the indexes specified are invalid or cannot
        be build, BUILD command should return an error. But, internally indexer will proceed building
        subset of indexes specified for a node during BUILD INDEXES command. Hence, administrator might
        be interested in knowing the state of indexes at any time due since intermediate build step is
        now involved. We propose addition of index status in system:indexes or similar metadata query.
        We could think of adding a new N1QL command to show index status as well.</p>
      <p>Status could be a tuple of status code and status message. Status code helps N1QL
        identify whether index is ready or not by using standard status types such as ONLINE, PENDING,
        ERROR, etc. The status message will provide description of status. This status message can be
        used by administrator to know about whether an index is build or not.</p>
      
      
    </section>
    
    <section><title>Syntax</title>
      <p></p>
      <codeblock></codeblock>
    </section>
    
    <section><title>Example</title>
      <p></p>
      <codeblock></codeblock>
    </section>
    
    <section><title>Response</title>
      <p></p>
      <codeblock></codeblock>
    </section>
    
  </refbody>
</reference>
