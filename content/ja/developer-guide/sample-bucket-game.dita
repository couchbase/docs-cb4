<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic xml:lang="en-us" id="topic3625">
   <title>Game Simulation sample bucket</title>
   <shortdesc>The Game Simulation sample bucket shows a gaming application.</shortdesc>
   <body>
      <p>The Game Simulation sample bucket is designed to showcase a typical gaming application that
         combines records showing individual gamers, game objects and how this information can be
         merged together and then reported on using views.</p>
      <p>For example, a typical game player record looks like the one below:</p>
      <codeblock><codeph>{
    "experience": 14248,
    "hitpoints": 23832,
    "jsonType": "player",
    "level": 141,
    "loggedIn": true,
    "name": "Aaron1",
    "uuid": "78edf902-7dd2-49a4-99b4-1c94ee286a33"
}
</codeph></codeblock>
      <p>A game object, in this case an Axe, is shown below:</p>
      <codeblock><codeph>{
   "jsonType" : "item",
   "name" : "Axe_14e3ad7b-8469-444e-8057-ac5aefcdf89e",
   "ownerId" : "Benjamin2",
   "uuid" : "14e3ad7b-8469-444e-8057-ac5aefcdf89e"
}
</codeph></codeblock>
      <p>In this example, you can see how the game object has been connected to an individual user
         through the <codeph>ownerId</codeph> field of the item JSON.</p>
      <p>Monsters within the game are similarly defined through another JSON object type:</p>
      <codeblock><codeph>{
    "experienceWhenKilled": 91,
    "hitpoints": 3990,
    "itemProbability": 0.19239324085462631,
    "jsonType": "monster",
    "name": "Wild-man9",
    "uuid": "f72b98c2-e84b-4b17-9e2a-bcec52b0ce1c"
}
</codeph></codeblock>
      <p>For each of the three records, the <codeph>jsonType</codeph> field is used to define the
         type of the object being stored.</p>
      <section><title>leaderboard view</title><p>The <codeph>leaderboard</codeph> view is designed
            to generate a list of the players and their current
            score:</p><codeblock><codeph>function (doc) {
  if (doc.jsonType == "player") {
  emit(doc.experience, null);
  }
}
</codeph></codeblock><p>The
            view looks for records with a <codeph>jsonType</codeph> of “player”, and then outputs
            the <codeph>experience</codeph> field of each player record. Because the output from
            views is naturally sorted by the key value, the output of the view will be a sorted list
            of the players by their score. For
            example:</p><codeblock><codeph>{
   "total_rows" : 81,
   "rows" : [
      {
         "value" : null,
         "id" : "Bob0",
         "key" : 1
      },
      {
         "value" : null,
         "id" : "Dustin2",
         "key" : 1
      },
…
      {
         "value" : null,
         "id" : "Frank0",
         "key" : 26
      }
   ]
}
</codeph></codeblock><p>To
            get the top 10 highest scores (and ergo players), you can send a request that reverses
            the sort order (by using <codeph>descending=true</codeph>, for
            example:</p><codeblock><codeph>http://127.0.0.1:8092/gamesim-sample/_design/dev_players/_view/leaderboard?descending=true&amp;connection_timeout=60000&amp;limit=10&amp;skip=0
</codeph></codeblock><p>Which
            generates the
         following:</p><codeblock><codeph>{
   "total_rows" : 81,
   "rows" : [
      {
         "value" : null,
         "id" : "Tony0",
         "key" : 23308
      },
      {
         "value" : null,
         "id" : "Sharon0",
         "key" : 20241
      },
      {
         "value" : null,
         "id" : "Damien0",
         "key" : 20190
      },
…
      {
         "value" : null,
         "id" : "Srini0",
         "key" :9
      },
      {
         "value" : null,
         "id" : "Aliaksey1",
         "key" : 17263
      }
   ]
}
</codeph></codeblock></section>
      <section><title>playerlist view</title><p>The <codeph>playerlist</codeph> view creates a list
            of all the players by using a map function that looks for “player”
            records.</p><codeblock><codeph>function (doc, meta) {
  if (doc.jsonType == "player") {
    emit(meta.id, null);
  }
}
</codeph></codeblock><p>This
            outputs a list of players in the
         format:</p><codeblock><codeph>{
   "total_rows" : 81,
   "rows" : [
      {
         "value" : null,
         "id" : "Aaron0",
         "key" : "Aaron0"
      },
      {
         "value" : null,
         "id" : "Aaron1",
         "key" : "Aaron1"
      },
      {
         "value" : null,
         "id" : "Aaron2",
         "key" : "Aaron2"
      },
      {
         "value" : null,
         "id" : "Aliaksey0",
         "key" : "Aliaksey0"
      },
      {
         "value" : null,
         "id" : "Aliaksey1",
         "key" : "Aliaksey1"
      }
   ]
}
</codeph></codeblock></section>
   </body>
</topic>
