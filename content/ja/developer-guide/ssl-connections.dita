<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_otn_kpv_tt">
 <title>SSL Connections</title>
 <shortdesc>By default connections between applications (SDK) and the cluster are not protected
        against eavesdropping. This means that anyone with access to the network can view items
        being transferred between client and server. Using a password protected bucket only
        restricts programmatic access to authorized clients, but may still allow intruders to
        inspect the traffic.</shortdesc>
 <conbody>
        <p>This is typically not an issue when both client and server are operating on secure
            networks, however larger deployments may have larger networks and tighter security
            requirements.</p>
        <p>Couchbase Server Enterprise edition allows secure SSL connections. When SSL connections
            are used, connections between SDKs and the server are secure and protected against
            eavesdropping, as the traffic is encrypted. When using SSL connections, the SDK will use
            SSL connections to all services (KV, Query, and MapReduce).</p>
        <p>In order to make use of SSL connections, you must first obtain the SSL certificate</p>
        <section>
            <title>Getting the certificate via the REST API</title>
            <p>See <xref href="../security/security-admin-access.dita#security-admin-access"/></p>
        </section>
        <section>
            <title>Getting the certificate via the web UI</title>
            <p>In order for the SDK to connect to the cluster using SSL, the SDK must be aware of
                the serverâ€™s self-signed SSL certificate. Use the Couchbase Web Console to retrieve
                the SSL certificate:</p>
            <ol id="ol_v41_25v_tt">
                <li>Open a browser and navigate to the Couchbase Web Console. </li>
                <li>Click <menucascade>
                        <uicontrol>Settings</uicontrol>
                        <uicontrol>Cluster</uicontrol>
                    </menucascade>.</li>
                <li>In the Configuration section, click <uicontrol>Show</uicontrol> to display the
                    certificate. <image href="images/couchbase-ssl.png" id="image_r1q_vgd_3p"/></li>
                <li>Copy the entire content of the certificate and store it in a file on the
                    application server on which you want to install the certificate, and save it to
                    a file accessible locally to your SDK.<p>For C (libcouchbase-based) SDKs, you
                        will need to pass the path to this file (the path itself does not matter, so
                        long as it exists and is accessible by the SDK) to the connection string
                        using the <codeph>certpath</codeph>
                        <xref href="../sdks/c-2.4/options.dita#topic_k5w_kzt_4r">connection
                            string</xref> option. For other SDKs this may involve <i>installing</i>
                        the certificate to a special kind of <i>certificate repository</i> or
                            <i>store</i>.</p><p>The examples below demonstrate how to configure and
                        connect your SDK to a Couchbase Cluster with SSL encryption in Python:</p><codeblock outputclass="language-python">#!/usr/bin/env python
                        
from couchbase.bucket import Bucket

# Note the `couchbases` in the scheme. This is required for SSL connections!
cb = Bucket('couchbases://10.0.0.31/default?certpath=/tmp/couchbase-ssl-certificate.pem')
print cb.server_nodes</codeblock>
                    <p><xref
                            href="https://github.com/couchbaselabs/devguide-examples/blob/master/c/connecting-ssl.c"
                            format="html" scope="external">C</xref> | Java | .NET | Go |
                    Node.js</p></li>
            </ol>
        </section>
        <section><title>Performance considerations</title>SSL encryption naturally adds overhead: it
            increases the amount of data being transferred (as data must be wrapped in encrypted
            'envelope', which contains additional information) and also adds processing overhead to
            encrypt and decrypt the data.</section>
    </conbody>
</concept>
