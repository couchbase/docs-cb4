<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_bf4_glh_ht">
 <title>Atomic Counters</title>
 <shortdesc>You can atomically increment or decrement the numerical value of special counter
        documents</shortdesc>
 <conbody>
        <section><codeblock>counter(docid, value)
counter(docid, -value)</codeblock>A document may
            be used as a counter if its value is a simple ASCII number, like <codeph>42</codeph>.
            Couchbase allows you to atomically increment and decrement these values using a special
                <apiname>counter</apiname> command. The example below (in Python) shows how to use
            counters:<codeblock>>>> cb.counter('counter_id', delta=20, initial=100).value
100L
>>> cb.counter('counter_id', delta=1).value
101L
>>> cb.counter('counter_id', delta=-50).value
51L</codeblock>A
            counter can be created by using the <apiname>counter()</apiname> function with an
                <parmname>initial</parmname> value. The initial value is the value the counter uses
            if the counter ID does not yet exist.<p>Once created, the counter can be incremented or
                decremented atomically by a given amount or <i>delta</i>. Specifying a positive
                delta increments the value and specifying a negative one decrements it. When a
                counter operation is complete, the application receives the current value of the
                counter, after the increment.</p><p>Couchbase counters are 64-bit unsigned integers
                in Couchbase, and do not wrap around if decremented beyond 0, however they will wrap
                around if incremented past their maximum value (which is the maximum value contained
                within a 64 bit integer). Many SDKs will limit the <i>delta</i> argument to the
                value of a <i>signed</i> 64 bit integer.</p><p><xref
                    href="expiry.dita#concept_o53_kps_zs">Expiration</xref> times can also be
                specified when using counter operations.</p><p><xref
                    href="cas-concurrency.dita#concept_iq4_bts_zs">CAS</xref> values are not used
                with counter operations since counter operations are atomic. The intent of the
                counter operation is to simply increment the current server-side value of the
                document. If you wish to only increment the document if it is at a certain value,
                then you may use a normal <apiname>upsert</apiname> function with
                CAS:<codeblock outputclass="language-python">rv = cb.get('counter_id')
value, cas = rv.value, rv.cas
if should_increment_value(value):
  cb.upsert('counter_id', value + increment_amount, cas=cas)</codeblock></p></section>
        <section><title>Counter in other SDKs</title><xref
                href="https://github.com/couchbaselabs/devguide-examples/blob/master/c/counter.cc"
                format="html" scope="external">C</xref> | <xref
                href="https://github.com/couchbaselabs/devguide-examples/blob/master/python/counter.py"
                format="html" scope="external">Python</xref> | <xref
                href="https://github.com/couchbaselabs/devguide-examples/blob/master/java/src/main/java/com/couchbase/devguide/Counter.java"
                format="html" scope="external">Java</xref> | .NET | <xref
                href="https://github.com/couchbaselabs/devguide-examples/blob/master/go/counter.go"
                format="html" scope="external">Go</xref> | <xref
                href="https://github.com/couchbaselabs/devguide-examples/blob/master/nodejs/counter.js"
                format="html" scope="external">node.js</xref></section>
    </conbody>
</concept>
