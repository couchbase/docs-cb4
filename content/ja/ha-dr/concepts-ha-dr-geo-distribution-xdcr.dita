<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_tld_lys_zs">
 <title>Geographic distribution and XDCR</title>
 <shortdesc>Cross Data Center Replication (XDCR) replicates data between two or more autonomous Couchbase Server clusters. It is typically used to replicate data between clusters in different data centers and geographic regions, and can also be used to sync a second Couchbase Server cluster within the same data center.</shortdesc>
 <conbody>
<p>XDCR serves an important role in high availability / disaster recovery, performance, and load
   distribution. <ul>
    <li>For disaster recovery, one or more clusters can act as hot standbys, enabling cluster-level
     failover by taking over load as soon as a cluster stops responding.</li>
    <li>In case of serious failures, XDCR can also be used to recover data from a remote cluster.
     The result is similar to recovery using a backup but often faster. </li>
    <li>In geographically distributed data centers, XDCR can improve performance by placing data
     close to end users. Users can be routed to the Couchbase Server cluster that serves their
     request with the lowest latency, typically the one that is physically closest to them. XDCR
     with bi-directional replication can create a truly global Couchbase Server deployment by
     allowing full read and write access at every endpoint. <note>XDCR with bi-directional
      replication does not create a global “cluster” of Couchbase Servers. Rather, each cluster is
      autonomous, is managed completely independently, and data is replicated to and/or from each
      cluster. </note></li>
   </ul></p>
  <dl>
   <dlentry>
    <dt>XDCR is simple.</dt>
    <dd>It takes just two clicks to associate two clusters and two more clicks to create a replication stream from one bucket to another.  Additional replication streams can be created with the same simple steps to support bi-directional replication and more complex topologies. There is no restriction on the size of any cluster involved in XDCR replication and the streams are automatically maintained through cluster topology changes and failures.</dd>
   </dlentry>
   <dlentry>
    <dt>XDCR is efficient.</dt>
    <dd>XDCR replicates data directly from RAM-RAM between each node of the source and destination clusters of a stream.  There is no central gateway which greatly reduces complexity and allows for very high parallelization of throughput. Mutations are automatically de-duplicated to cut down on unnecessary transmissions and XDCR can be paused or resumed administratively. In order to recover from situations such as temporary disconnection between clusters, XDCR uses internal checkpoints to keep track of exactly which mutations it was able to stream. XDCR then begins streaming the mutations from the point where it left off.  With regular expression filtering on key names, users can limit what is transferred between clusters, for example to partially replicate regional data from a central, global database.</dd>
   </dlentry>
   <dlentry>
    <dt>XDCR is eventually consistent and features automatic conflict resolution.</dt>
    <dd>In order to determine what the final state of a document should be between two clusters, XDCR will pick the version with the most revisions if there is one. Otherwise, it falls down through the document sequence number, the CAS values, document flags, and TTL expiration value. Because each cluster applies the same logic, document consistency is maintained across the clusters.</dd>
   </dlentry>
   <dlentry>
    <dt>XDCR supports any topology.</dt>
    <dd>XDCR can perform unidirectional or bidirectional replication and supports spoke, circular,
     or star topologies of one-to-one, one-to-many or many-to-one clusters. For example,
     administrators can push from a central data center out to multiple data centers, aggregate data
     from multiple clusters to a central cluster, or make multiple data centers each function as
     masters. XDCR can also be used to synchronize a development or analytics cluster. Finally, XDCR
     is currently used to keep an Elasticsearch or SolR cluster updated for full-text indexing
     requirements.</dd>
   </dlentry>
  </dl>
 </conbody>
</concept>
