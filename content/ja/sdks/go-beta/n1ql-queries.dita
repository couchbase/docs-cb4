<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_bhv_nhq_44">
 <title>Working with N1QL queries</title>
 <shortdesc>You can perform Couchbase Query Language (N1QL) queries via the Go SDK. </shortdesc>
 <conbody>
		<p>The following example shows how to send a N1QL query:</p>
  <codeblock outputclass="language-go">myQuery := gocb.NewN1qlQuery("SELECT * FROM default")
rows, err := myBucket.ExecuteN1qlQuery(myQuery)
if err != nil {
  fmt.Printf("N1QL query error: %s\n", err)
}

var row interface{}
for rows.Next(&amp;row) {
    fmt.Printf("Row: %+v\n", row)
}
if err := rows.Close(); err != nil {
    fmt.Printf("N1QL query error: %s\n", err)
}</codeblock>
     
     <section><title>Read Your Own Writes (RYOW)</title>
     <p>Often you will want to insert or update some data into Couchbase and immediately read
         this data back using a N1QL query. This is referred to as read your own write
         (RYOW).</p>
     <p>This can be achieved by using the <codeph>consistency</codeph> option of the
                    <apiname>N1qlQuery</apiname> structure:</p>
     
         <codeblock outputclass="language-go">myQuery := gocb.NewN1qlQuery("SELECT * FROM default")
myQuery.consistency(gocb.RequestPlus)

rows, err := myBucket.ExecuteN1qlQuery(myQuery)
if err != nil {
    fmt.Printf("N1QL query error: %s\n", err)
}

var row interface{}
for rows.Next(&amp;row) {
    fmt.Printf("Row: %+v\n", row)
}
if err := rows.Close(); err != nil {
    fmt.Printf("N1QL query error: %s\n", err)
}</codeblock>
</section>
     
 </conbody>
</concept>
