<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_z3r_zgq_44">

	<title>Go SDK 1.0</title>
	<shortdesc>The Couchbase Go SDK allows you to connect to a Couchbase cluster from Go. It is a native Go library and uses the high-performance gocbcore to handle
		communicating to the cluster over Couchbaseâ€™s binary protocols.</shortdesc>

	<conbody>
	
		<p>Here's a sampling of what you can do with the Couchbase Go SDK:</p>
		
		<section>
			<title>Connecting</title>
			<p>To connect to a bucket, just instantiate a new <codeph>Cluster</codeph> object to represent
				your cluster, and call the <codeph>OpenBucket()</codeph> method, passing in the name
				of the bucket to which you want to connect. The following example shows how to
				connect to a bucket on localhost:</p><codeblock outputclass="language-go">myCluster, _ := gocb.Connect("couchbase://localhost")
myBucket, _ := myCluster.OpenBucket("default", "")</codeblock></section>
		<section>
			<title>Operations</title>
			<p>In most cases, operations are performed by invoking the relevant method while passing the key,
				any data and meta information that goes with it.</p>
			<p>Here is an example of performing a get operation:</p>
			<codeblock outputclass="language-go">var value interface{}
cas, _ := myBucket.Get("document_name", &amp;value)
fmt.Printf("Got value `%+v` with CAS `%08x`\n", value, cas)</codeblock>
			<p>Additionally, sometimes more information beyond the key is needed for an operation, here we
				perform an insert operation that takes a key, value, as well as an expiry time:</p>
			<codeblock outputclass="language-go">value := "test value"
cas, _ := myBucket.Insert("document_name", &amp;value, 0)
fmt.Printf("Inserted document CAS is `%08x`\n", cas)</codeblock>
		</section>
		<section>
			<title>Performing Queries</title>
			<p>In addition to the basic operations that are available, we additional provide
			methods to perform queries against your data.  These queries allow you to
			ask questions like "What beers start with A?" rather than simply "Give me the
			beer that is called Aaas_Frankl."  This is possible through the use of
			Couchbase's MapReduce views engine.  The following is an example of performing
			a view query.
			</p>
			<codeblock outputclass="language-go">vq := gocb.NewViewQuery("beer", "by_name").Skip(6).Limit(3)
rows,err := myBucket.ExecuteViewQuery(vq)

var row interface{}
for rows.Next(&amp;row) {
  fmt.Printf("Got row `%+v`\n")
}
if err := rows.Close(); err != nil {
  fmt.Printf("View query error: %s\n", err)
}</codeblock>
		</section>
	</conbody>


</concept>
