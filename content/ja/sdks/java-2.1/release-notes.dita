<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_cn2_5ck_r5">
	<title>Release notes</title>
	<shortdesc>Release notes for the 2.1 version of the Java SDK.</shortdesc>

	<concept id="ga216">
		<title>Couchbase Java Client 2.1.6 GA (2 December 2015)</title>
		<shortdesc>Version 2.1.6 is the sixth bug fix release of the 2.1 series.
			It contains bug fixes and stability improvements in bootstrapping, configuration management, view queries and remove with CAS.</shortdesc>
		<conbody>

			<section id="ga216-fixes">
				<title>Fixed issues</title>
				<p>This release fixes the following issues:</p>

				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-864" format="html"
							scope="external"> JCBC-864</xref>:  When used with the durability
						requirements, the <codeph>remove</codeph> operation now properly honors the
						CAS when provided inside the <codeph>Document</codeph>. It now correctly
						throws <codeph>CASMismatchExceptions</codeph> when the CAS does not match
						with the server. Previously, the supplied CAS was ignored, and the
							<codeph>remove</codeph> operation was performed without optimistic
						concurrency checks.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-263" format="html"
							scope="external"> JVMCBC-263</xref>: A bug in the view query parser has
						been uncovered which would make the parser hang when the key, in particular,
						includes a closing <codeph>}</codeph> but no opening <codeph>{</codeph>
						inside a string.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-262" format="html"
							scope="external"> JVMCBC-262</xref>: The logic that performs a proactive
						load of new configurations through the "Carrier Publication" mechanism now
						only targets nodes where the KV-Service is enabled. Such targeting is
						important in multi-dimensional scaling (MDS) scenarios so that it doesn't
						address the nodes where only the query or indexing services are
						enabled.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-102" format="html"
							scope="external"> JVMCBC-102</xref>: The initial bootstrap process has
						been made more resilient to individual node failures, fixing many bugs
						around initial bootstrapping. This improvement especially affects the case
						where one of the nodes was not responding and opening a
							<codeph>memcached</codeph> type bucket. It now works correctly, which
						involves internally skipping over not responding nodes as well as falling
						back from carrier publication to the HTTP bootstrapping approach.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-257" format="html"
							scope="external"> JVMCBC-257</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JVMCBC-265" format="html"
							scope="external">JVMCBC-265</xref>: The configuration management logic
						has been improved in various places, making it more resilient to failed
						bucket open attempts or cleaning up the state properly. The proactive
						configuration loading approach was also optimized when no buckets are open
						or are currently being closed. In particular, one issue has been resolved
						where an asynchronous open bucket attempt with a fallback to a good one did
						not work previously.</li>
				</ul>
			</section>

		</conbody>
	</concept>

	<concept id="ga215">
		<title>Couchbase Java Client 2.1.5 GA (13 October 2015)</title>
		<shortdesc>Version 2.1.5 is the fifth bug fix release of the 2.1 series. It contains bug
			fixes and correctness improvements, especially during bootstrap, shutdown and when
			SSL is enabled.</shortdesc>
		<conbody>

			<section id="ga215-features">
				<title>New features and behavioral changes</title>
				<p>This release contains the following enhancements:</p>

				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-229" format="html"
							scope="external">JVMCBC-229</xref>: In various forum questions we've identified DNS issues as a common problem for timeouts during the open bucket phase. To help with easier debugging, we now proactively perform the DNS lookup in advance and print a WARNING log if it takes much longer than it should (over 1 second).</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-222" format="html"
							scope="external">JVMCBC-222</xref>: Multi Dimensional Scaling (MDS) support for Memcached buckets has been introduced to be forward compatible with Couchbase Server 4.0 and later.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-250" format="html"
							scope="external">JVMCBC-250</xref>: An explicit, lower (configurable) socket connect timeout is now always used when connections are established. This provides more reliable semantics during the socket open phase and allows for faster retrying mechanisms inside the core layer.</li>
				</ul>
			</section>

			<section id="ga215-fixes">
				<title>Fixed issues</title>
				<p>This release fixes the following issues:</p>

				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-834" format="html"
							scope="external">JCBC-834</xref>: The <codeph>query(SpatialView)</codeph> method was using the wrong timeout setting (N1qlQuery instead of ViewQuery). This has been fixed and it is now using the proper view timeout.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-239" format="html"
							scope="external">JVMCBC-239</xref>: A bug in the N1QL response parser has been fixed which was sometimes triggered during server node restarts. The parser would not be able to move on and be stuck in an invalid state of the stream parsing phase, resulting in consistent and non-recovering timeouts on subsequent queries.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-231" format="html"
							scope="external">JVMCBC-231</xref>: A race condition in the reconfiguration logic during shutdown has been fixed which makes this part of the phase much more resilient.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-251" format="html"
							scope="external">JVMCBC-251</xref>: Full cleanup of SDK-owned threads during full shutdown, diagnostics have been made easier through new logs, and cb-io threads are more aggressively cleaned up, leading to more correct behaviour especially when performing redeployments in an application container.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-248" format="html"
							scope="external">JVMCBC-248</xref>: SSL Handshake failures during the connect phase are now more explicitly handled
							and propagate the right error up the call stack.</li>
				</ul>
			</section>

		</conbody>
	</concept>

	<concept id="ga214">
		<title>Couchbase Java Client 2.1.4 GA (7 July 2015)</title>
		<shortdesc>Version 2.1.4 is the fourth bug fix release of the 2.1 series. It contains bug
			fixes and correctness improvements, especially during node failures when durability
			requirements and/or replica read operations are used. Also, reported stuck threads after
			shutdown have been fixed.</shortdesc>
		<conbody>

			<section id="ga214-fixes">
				<title>Fixed issues</title>
				<p>This release fixes the following issues:</p>

				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-766" format="html"
							scope="external">JCBC-766</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JVMCBC-197" format="html"
							scope="external">JVMCBC-197</xref>: If the list of keys passed in for a view
						query exceeds the limit allowed for a HTTP GET request, it will fail. For that
						reason, the keys are now transparently delivered in the body of the HTTP request,
						allowing it to work with an unbounded number of keys.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-790" format="html"
							scope="external">JCBC-790</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JVMCBC-211" format="html"
							scope="external">JVMCBC-211</xref>: When <codeph>ReplicaMode.ALL</codeph> is
						used to perform a replica read on the <b>blocking API</b>, the client now
						transparently drops all partitions which are not available, returning the partial
						responses much more quickly. During a failover transition phase, the behavior
						still depends on the failure mode used. By default it will retry based on the
						timeout before the results are returned, if the fail fast mode is used the results
						will return more quickly. While we are planning to add a blocking
							<codeph>Iterator</codeph> API in the future, right now you can easily fallback
						to the asynchronous API to fetch the responding items as they come along. See the
						documentation for the <codeph>getFromReplica</codeph> for more information.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-202" format="html"
							scope="external">JVMCBC-202</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JVMCBC-204" format="html"
							scope="external">JVMCBC-204</xref>: When durability requirements are used, the
						underlying observe poll mechanism is now more resilient to node failures.
						Previously, it was possible that those observe poll cycles got stuck, either
						because the underlying operations were timing out (and made the whole batch to
						time out as well), or the logic suffered from a condition where the operations
						were written, but not flushed (which caused them to be stuck in the write queue
						and not transmissioned to NIO/the networking subsystem).</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-201" format="html"
							scope="external">JVMCBC-201</xref>: During shutdown, all the Couchbase-owned
						threads are now properly terminated. They were always daemon-threads, but in some
						environments they need to be explicitly closed so that redeploy works without
						issues. With this change the core scheduler threads are properly terminated, but
						this only works if no other scheduler is passed in manually. If this is done, the
						termination of the threads is up to the user, because the client can't control
						where it is needed as well.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-209" format="html"
							scope="external">JVMCBC-209</xref>: A race condition between a socket
						disconnect and its automated reconnect logic could lead to a pathological
						situation where, even if properly instructed to disconnect, the socket will be
						reestablished over and over again. This race condition has been fixed and
						additional guards for the shutdown state transition have been put in place to
						override any other potential race conditions permanently.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-778" format="html"
							scope="external">JCBC-778</xref>: A small change in the DCP code avoids a false
						alarm triggered by an unknown message in the flow. More DCP enhancements are in
						the pipeline and are likely to ship in the 2.2 branch.</li>
				</ul>
			</section>

		</conbody>
	</concept>

	<concept id="ga213">
		<title>Couchbase Java Client 2.1.3 GA (4 May 2015)</title>
		<shortdesc>Version 2.1.3 is the third bug fix release of the 2.1 series. It contains bug fixes and
			correctness improvements, especially when multiple buckets are open or streaming
			connections are used to grab configuration changes (that is for all memcached buckets and
			Couchbase buckets on Server 2.2 and older).</shortdesc>
		<conbody>

			<section id="ga213-features">
				<title>New features and behavioral changes</title>
				<p>This release contains the following enhancements:</p>

				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-188" format="html"
							scope="external">JVMCBC-188</xref>: Authentication headers are now sent to the
						remote node when the <codeph>Query</codeph> service is used, and as a result
						password-protected buckets can now also be used for N1QL queries.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-191" format="html"
							scope="external">JVMCBC-191</xref>: If the server returns unknown status codes,
						they are logged for easier debuggability in support tickets.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-192" format="html"
							scope="external">JVMCBC-192</xref>: When <codeph>KeyValue</codeph> endpoints
						are idle (that is, no key/value traffic is going through to a specific node for
						the configured time), in addition to heartbeats, the client now also proactively
						fetches a new cluster configuration. This avoids undetected cluster topology
						changes during idle load scenarios.</li>
				</ul>
			</section>

			<section id="ga213-fixes">
				<title>Fixed issues</title>
				<p>This release fixes the following issues:</p>

				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-187" format="html"
							scope="external">JVMCBC-187</xref>: Document IDs with special characters (that
						is, when a character takes more than one byte) are now properly encoded and
						decoded. Previously they were not stored correctly and as a result corrupted the
						wire protocol and the IDs ended up in a bad state on the node.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-195" format="html"
							scope="external">JVMCBC-195</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JVMCBC-185" format="html"
							scope="external">JVMCBC-185</xref>: Multiple issues around HTTP config
						streaming have been fixed. The code now properly restores a new HTTP streaming
						connection when the old one gets closed. This is important for all
							<codeph>memcached</codeph> buckets, as well as <codeph>couchbase</codeph>
						buckets on Couchbase Server 2.2 and older.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-184" format="html"
							scope="external">JVMCBC-184</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JVMCBC-194" format="html"
							scope="external">JVMCBC-194</xref>: Multiple issues around configuration
						management when multiple buckets are open at the same time have been fixed.
						Multiple configurations were racing each other in special cases which lead to
						pathological situations where no new config was picked up as a result. This has
						been fixed.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-186" format="html"
							scope="external">JVMCBC-186</xref>: When some of the nodes in the bootstrap
						list are not discoverable through the Java <codeph>InetAddr</codeph>, the code now
						ignores (and logs) the error and keeps moving forward. If at least one of the
						other nodes in the list is correct, the bootstrap wil continue. If all of them
						fail, the bootstrap process will be aborted as before.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-193" format="html"
							scope="external">JVMCBC-193</xref>: All internal RxJava
							<codeph>Subjects</codeph> that can be written from more than one thread are now
						properly serialized, ensuring that no updates are lost. This is especially
						important for the internal configuration stream to not loose any new
						configurations at any point in time or raise errors.</li>

				</ul>
			</section>

		</conbody>
	</concept>

	<concept id="ga212">
		<title>Couchbase Java Client 2.1.2 GA (3 April 2015)</title>
		<shortdesc>Version 2.1.2 is the second bug fix release of the 2.1 series. It contains bug
			fixes and correctness improvements, especially related to durability requirements,
			streaming parsers and unstable cluster behavior.</shortdesc>
		<conbody>

			<section id="ga212-features">
				<title>New features and behavioral changes</title>
				<p>This release contains the following enhancements:</p>

				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-729" format="html"
							scope="external">JCBC-729</xref>: Decoding JSON long numbers has been made more
						performant because it does not go through a catch block on parsing an int value
						anymore.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-724" format="html"
							scope="external">JCBC-724</xref>: The environment configuration dump on startup
						now also includes the settings from the <codeph>CouchbaseEnvironment</codeph>, not
						just the <codeph>CoreEnvironment</codeph>.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-725" format="html"
							scope="external">JCBC-725</xref>: The N1QL metrics are now exposed as a
						strongly typed <codeph>QueryMetrics</codeph> object instead of the more generic
							<codeph>JsonObject</codeph> object. It provides direct method access to
						parameters like <codeph>executionTime</codeph>, <codeph>resultSize</codeph> and
						many more.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-735" format="html"
							scope="external">JCBC-735</xref>: The <codeph>signature</codeph> field returned
						by the server can be more than just a <codeph>JsonObject</codeph>, so the parsing
						has been modified and it is now exposed as a more generic <codeph>Object</codeph>
						type.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-168" format="html"
							scope="external">JVMCBC-168</xref>: Nagle's algorithm is now disabled by
						default, providing slightly better performance especially when lots of small
						packets are sent (for example, under get-heavy workloads).</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-170" format="html"
							scope="external">JVMCBC-170</xref>: A hard minimum pool size for both the I/)
						and computation pools of 3 is now enforced to avoid resource starvation if either
						the operating system returns a very small CPU count or it is configured lower than
						the boundary. An INFO level message is logged as well.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-167" format="html"
							scope="external">JVMCBC-167</xref>: An environment configuration option has
						been added that allows you to disable the buffer pooling. While not recommended in
						general, it can be a helpful switch if there is an indication that the SDK is
						leaking memory. If pooling is disabled, a higher garbage collection pressure is
						expected. It can be disabled like this: <codeblock outputclass="language-java"><![CDATA[CouchbaseEnvironment env = DefaultCouchbaseEnvironment
    .builder()
    .bufferPoolingEnabled(false)
    .build();]]></codeblock></li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-554" format="html"
							scope="external">JCBC-554</xref>: A new experimental utility class is provided
						that greatly simplifies asynchronous retry logic. By using this class, you can
						specify in a builder-like fashion the type of exceptions to retry and the retry
						interval. The following example configures the application to retry
							<codeph>BackpressureException</codeph> exceptions at 10 millisecond intervals
						with a maximum of 8 retries allowed, but lets all other exceptions pass through
						without being retried: <codeblock outputclass="language-java"><![CDATA[import static com.couchbase.client.java.util.retry.RetryBuilder.anyOf;

Observable
    .from(ids)
    .flatMap(id -> bucket.upsert(JsonDocument.create(id, JsonObject.empty())))
    .retryWhen(anyOf(BackpressureException.class).delay(Delay.fixed(10, TimeUnit.MILLISECONDS)).max(8).build())
    .subscribe();]]></codeblock></li>

				</ul>
			</section>

			<section id="ga212-fixes">
				<title>Fixed issues</title>
				<p>This release fixes the following issues:</p>

				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-171" format="html"
							scope="external">JVMCBC-171</xref>: The regression introduced in 2.1.1 has been
						fixed where the SDK tries to connect to <codeph>localhost</codeph>, even when the
						nodes are running on remote servers. The issue only showed up in the combination
						of SDK 2.1.1 with Couchbase Server 3.0.0, 3.0.1 (all platforms) and 3.0.2
						(Windows).</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-154" format="html"
							scope="external">JVMCBC-154</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JVMCBC-163" format="html"
							scope="external">JVMCBC-163</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JVMCBC-177" format="html"
							scope="external">JVMCBC-177</xref>: Multiple fixes for various rebalance and
						failure scenarios have been implemented in the core layer to react more
						deterministically. Especially parallel configuration pulling from various other
						nodes has been improved as well as continuous configuration polling after every
						failed reconnect attempt has been added.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-728" format="html"
							scope="external">JCBC-728</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JCBC-731" format="html"
							scope="external">JCBC-731</xref>: The <codeph>JsonLongDocument</codeph> is now
						fully interoperable when used together on the mutation methods and the counter
						method. Previously, there were issues when a value written by the counter method
						was read by <codeph>get</codeph> and vice versa. In addition, the counter method
						now correctly uses the documented default value of 0 as advertised in the
						Javadocs.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-166" format="html"
							scope="external">JVMCBC-166</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JVMCBC-175" format="html"
							scope="external">JVMCBC-175</xref>: Durability constraints
							(<codeph>ReplicateTo</codeph>, <codeph>PersistTo</codeph>) internals have been
						reworked and are now correct. In particular, they take the returned CAS value into
						account to make sure only success is reported when the document is overwritten on
						the replica. In addition, the active partition is always polled (even when not
						explicitly needed) to correctly determine concurrent modifications of the same
						document.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-723" format="html"
							scope="external">JCBC-723</xref>: When a <codeph>touch</codeph> operation does
						not find the document with the given ID, it now properly throws a
							<codeph>DocumentDoesNotExistException</codeph>. Previously, a generic exception
						was thrown that did not hold the semantical information needed to react properly
						on the application side.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-165" format="html"
							scope="external">JVMCBC-165</xref>: Thanks to a user contribution, the client
						now never adds line breaks on internal HTTP Basic auth requests against the
						configuration or view service (and in the future the N1QL service).</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-176" format="html"
							scope="external">JVMCBC-176</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JCBC-740" format="html"
							scope="external">JCBC-740</xref>: In the <codeph>AsyncViewResponse</codeph>
						errors are now exposed as an <codeph>Observable</codeph> because they can also
						come after the emitted rows in the response. The core layer has been modified to
						take this into account and the java binding reflects the change. The blocking API
						has not changed.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-172" format="html"
							scope="external">JVMCBC-172</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JVMCBC-174" format="html"
							scope="external">JVMCBC-174</xref>: Two parsing issues have been fixed in the
						N1QL streaming parser. It now correctly decodes all possible JSON ways of a
						signature and also it properly waits for the actual last chunk of the query
						response before accepting a new request. This mitigates some errors and a form of
						a race condition that was showing up in continuous N1QL requests.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-173" format="html"
							scope="external">JVMCBC-173</xref>: Internal DCP compatibility has been
						restored which was broken in the last versions. It now uses a special form of a
						transient endpoint and works again.</li>
				</ul>

			</section>

		</conbody>
	</concept>

	<concept id="ga211">
		<title>Couchbase Java Client 2.1.1 GA (2 March 2015)</title>
		<shortdesc>Version 2.1.1 is the first bug fix release of the 2.1 series. It contains bug fixes
			and correctness improvements, especially around <codeph>PersistTo</codeph> and
				<codeph>ReplicateTo</codeph> and query handling.</shortdesc>

		<conbody>

			<section id="ga211-features">
				<title>New features and behavioral changes</title>
				<p>This release contains the following enhancements:</p>

				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-136" format="html"
							scope="external">JVMCBC-136</xref>: A new underlying subject has been
						introduced that makes it possible that even if the user does not subscribe to an
						observable stream (in the view and query cases) the underlying buffers are freed
						and not accidentally leaked. While the developer is in charge to consume all data
						that has been asked for, this is a second line of defense that should prevent
						accidental leaking.<p>To properly implement this, a contract has been established
							that needs to be followed. In general this should never come up, but if you run
							across them there is a good chance your application logic is doing something
							odd and you should reconsider it:</p><ul>
							<li>You need to subscribe to an observable in a specific amount of time. By
								default, this time is 2 seconds and can (but shouldn't) be modified through
								the environmental <codeph>autoreleaseAfter</codeph> setting. If you tune
								this to a high value, many buffers might end up in the old generation before
								being automatically cleaned up, and this will make your garbage collection
								profile worse.</li>
							<li>You cannot subscribe more than once to the observable. If you want to do
								this, use the facilities provided by RxJava (like <codeph>connect</codeph>
								and <codeph>cache</codeph>) to do this.</li>
						</ul>For now, these rules only apply to all observables exposed in the results
						from both view and query requests. All other operations are not affected by this,
						but keep in mind that requesting an operation and not consuming it can always lead
						to bad situations where data is not properly freed or cleaned up. </li>

					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-717" format="html"
							scope="external">JCBC-717</xref>: The <codeph>signature</codeph> field is now
						exposed on a query result.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-707" format="html"
							scope="external">JCBC-707</xref>: We were able to reduce garbage collection
						(GC) pressure a little bit by not going through the intermediary
							<codeph>String</codeph> representation anymore when using the
							<codeph>JsonDocument</codeph> or the <codeph>JsonArrayDocument</codeph>.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-711" format="html"
							scope="external">JCBC-711</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JCBC-709" format="html"
							scope="external">JCBC-709</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JCBC-711" format="html"
							scope="external">JCBC-711</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JCBC-706" format="html"
							scope="external">JCBC-706</xref>: In preparation for our upcoming Apache Spark
						integration, we had to make some classes serializable. This has no impact
						whatsoever on the interfaces, but is mentioned here in case someone also needs
						that functionality independently.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-703" format="html"
							scope="external">JCBC-703</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JCBC-704" format="html"
							scope="external">JCBC-704</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JVMCBC-146" format="html"
							scope="external">JVMCBC-146</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JVMCBC-147" format="html"
							scope="external">JVMCBC-147</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JVMCBC-149" format="html"
							scope="external">JVMCBC-149</xref>: The complete code path used with
							<codeph>PersistTo</codeph> or <codeph>ReplicateTo</codeph> overloads has been
						overhauled and optimized. It also now supports proper fail fast abort mechanisms
						when the fail fast retry strategy is used, properly channels all errors into a
							<codeph>DurabilityException</codeph>, and raises proper errors when the replica
						is not configured on the bucket. All in all, the current code is faster and easier
						to reason about, especially during failure scenarios.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-137" format="html"
							scope="external">JVMCBC-137</xref>: The SDK has been equipped with
						forward-compatible functionality to support a later release of Couchbase Server.
						Information about those features will be announced separately in the future. </li>
				</ul>
			</section>

			<section id="ga211-fixes">
				<title>Fixed issues</title>
				<p>This release fixes the following issues:</p>

				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-150" format="html"
							scope="external">JVMCBC-150</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JVMCBC-148" format="html"
							scope="external">JVMCBC-148</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JCBC-708" format="html"
							scope="external">JCBC-708</xref>: Locking failures are now properly
						distinguishable from temporary failures. The server does not in all cases send
						back the semantically correct error message, so the client does some additional
						guesswork to present the user an accurate error as possible. A new
							<codeph>TemporaryLockFailureException</codeph> has been added that will be
						thrown on double locking attempts as well as when unlock is called with an invalid
							<codeph>cas</codeph>. Refer to the Javadoc API reference about each method for
						the full details and error signatures.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-571" format="html"
							scope="external">JCBC-571</xref>: Certainly an edge case, but possible: when
						too many <codeph>keys</codeph> are passed into a <codeph>ViewQuery</codeph> the
						code now properly converts the underlying request from GET into POST to not risk
						HTTP errors from the view server. </li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-144" format="html"
							scope="external">JVMCBC-144</xref>: 2.1.0 introduced source JAR rewriting of
						dependencies so that breakpoints could be properly set on
						<codeph>core-io</codeph>, but a bug crept in with some of the Netty dependencies.
						This has been fixed and everything should be properly debuggable now.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-138" format="html"
							scope="external">JVMCBC-138</xref>: A fix is in place that prevents node
						connect/disconnect events from happening more than once, resulting in misleading
						but harmless double log messages.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-145" format="html"
							scope="external">JVMCBC-145</xref>: An important bug has been fixed where the
						response flags from an <codeph>Observe</codeph> call were not correctly parsed,
						leading to never completing PersistTo/ReplicateTo calls.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-719" format="html"
							scope="external">JCBC-719</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JCBC-713" format="html"
							scope="external">JCBC-713</xref>: A small leak in the <codeph>flush()</codeph>
						method has been fixed and its internal implementation has been rewritten to be
						more compliant with RX best practices. Also, it now stores marker documents in all
						partitions instead of just one and polls them. This reduces the likelihood of
						prematurely returning to the user that the flush is complete when it isn't
						yet.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-141" format="html"
							scope="external">JVMCBC-141</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JVMCBC-142" format="html"
							scope="external">JVMCBC-142</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JVMCBC-143" format="html"
							scope="external">JVMCBC-143</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JVMCBC-151" format="html"
							scope="external">JVMCBC-151</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JVMCBC-152" format="html"
							scope="external">JVMCBC-152</xref>: Several bugs in the Query streaming handler
						have been fixed. Also, the keep-alive logic on the Query handler has been enhanced
						and now uses the correct endpoint on the server side.</li>
				</ul>

			</section>


			<section id="ga211-known">
				<title>Known issues</title>
				<p>This release has the following known issues:</p>

				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-154" format="html"
							scope="external">JVMCBC-154</xref>: When a failover is performed and there are
						operations in the pipeline, it could be that some of them are not properly cleaned
						up during the cancellation phase. The leak detector might report a leak, but it
						should not affect a long running application very much. This is going to be fixed
						in one of the next versions, but should not harm a production application in a
						blocking fashion.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-171" format="html"
							scope="external">JVMCBC-171</xref>: A regression has been introduced in 2.1.1
						which manifests in a way that when connected to a 3.0 or higher remote cluster the
						SDK still wants to contact <codeph>127.0.0.1/localhost</codeph>. Please upgrade to
						2.1.2 if you hit the issue.</li>
				</ul>

			</section>

		</conbody>
	</concept>


	<concept id="ga210">
		<title>Couchbase Java Client 2.1.0 GA (3 February 2015)</title>
		<shortdesc>Version 2.1.0 GA is the first stable release of the 2.1 series. It brings many
			enhancements and bug fixes over the 2.0 series (since 2.0.3).</shortdesc>

		<conbody>

			<section id="ga210-features">
				<title>New features and behavioral changes</title>
				<p>This release contains the following enhancements:</p>

				<ul>
					<li>Support for N1QL DP4: The <codeph>query()</codeph> methods have been reworked to
						provide closer integration with the new APIs available for N1QL DP4. In
						particular, the <codeph>Statement</codeph> has been introduced and there is no
						support for raw, parameterized and prepared queries. For more information about
						using N1QL, see <xref href="http://blog.couchbase.com/n1ql-dp4-java-sdk"
							format="html" scope="external">Preview using N1QL DP4 from the Java
						SDK</xref>.</li>
					<li>Support for spatial view queries: Support for spatial view queries has been
						added, which work very similar to the regular view queries. Note that at the time
						of release, the current server version still marks its support as experimental.
						Also, because the underlying response has changed since Couchbase Server 3.0, it
						is not backward compatible with the geospatial views on Couchbase Server 2.5 and
						earlier. For more information about spatial view queries, see <xref
							href="querying-views.dita#concept2677" />.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-92" format="html"
							scope="external">JVMCBC-92</xref>: The poll interval for
							<codeph>ReplicateTo</codeph> and <codeph>PersistTo</codeph> can now be
						configured on the environment through the <codeph>observeIntervalDelay</codeph>
						setting. For information about the options and default settings, see <xref
							href="env-config.dita#concepteEnvConfig" />.</li>
					<li>Pluggable request retry strategies: Because of popular demand, pluggable retry
						strategies have been added to the environment. The default strategy is best
						effort, which mirrors the 2.0 behavior of retrying the operation until it
						succeeds. This one now also takes the new maximum request lifetime into account.
							<p>In addition, a fail-fast retry strategy has been added that immediately
							cancels the request if no suitable node in the cluster can be found where the
							request should be dispatched to. This can happen for a variety of reasons
							depending on the request type, but it provides a much closer feedback loop to
							the caller. It can work as a foundation for a user level circuit breaker or
							anyone who is willing to trade user level code (retry) for tighter
							control.</p><p>Finally, these strategies are pluggable through a callback, so a
							custom advanced-user implementation could decide on a request-by-request basis
							whether it should be retried.</p><p>Here is how to configure the fail-fast
							strategy:</p>
						<codeblock outputclass="language-java"><![CDATA[CouchbaseEnvironment env = DefaultCouchbaseEnvironment
    .builder()
    .retryStrategy(FailFastRetryStrategy.INSTANCE)
    .build();]]></codeblock>
					</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-134" format="html"
							scope="external">JVMCBC-134</xref>: A configurable maximum request lifetime has
						been added to the environment, which is used by the best effort retry strategy to
						determine when it is time to not retry the request anymore. This has been added to
						avoid operations circling around infinitely because of either a bug or a not
						stabilizing cluster state. For information about the options and default settings,
						see <xref href="env-config.dita#concepteEnvConfig" />.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-21" format="html"
							scope="external">JVMCBC-21</xref>: Keepalive heartbeats are now available again
						in the Java SDK. By default, every endpoint (socket) sends a heartbeat message to
						the remote server to keep the connection from going completely idle, which can
						cause side effects that firewalls shut them down proactively. The default value is
						set to 30 seconds, but it can be configured on the environment if needed. For
						information about the options and default settings, see <xref
							href="env-config.dita#concepteEnvConfig" />.</li>
					<li>Subscribable event bus: an event bus has been added to the environment where the
						SDK pushes different kinds of events through it. Applications can subscribe to the
						event bus to receive those notifications and react if they want to. Currently,
						bucket open or close and node connect or disconnect events are published, but we
						plan to add much more in the future (especially in the area around profiling and
						monitoring for enhanced field serviceability).<p>Here is a simple example that
							shows how to subscribe and print certain system events:</p>
						<codeblock outputclass="language-java"><![CDATA[couchbaseEnvironment.eventBus().get().subscribe(System.out::println);]]></codeblock>
						<p>The example returns data similar to this:</p>
						<codeblock outputclass="language-java"><![CDATA[NodeConnectedEvent{node=localhost/127.0.0.1}
BucketOpenedEvent{name='beer-sample'}
BucketClosedEvent{name='beer-sample'}
NodeDisconnectedEvent{node=localhost/127.0.0.1}]]></codeblock>
					</li>

					<li>Bootstrap through DNS SRV: It is now possible to fetch the list of bootstrap
						nodes through a DNS SRV record. This allows system administrators to centralize
						their bootstrap node list configuration in a very easy manner. It needs to be
						enabled on the environment to make it work. For more information, see <xref
							href="managing-connections.dita#concept2677" />.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-539" format="html"
							scope="external">JCBC-539</xref>: A stateful helper class called
							<codeph>NodeLocatorHelper</codeph> has been introduced. The class provides a
						cluster-aware way to see which document IDs map to which node in the cluster. Note
						that this functionality is mainly interesting for users who want to log and/or
						pass information to different systems for a variety of reasons. One possible
						scenario is to enrich user level circuit breaker functionality.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-542" format="html"
							scope="external">JCBC-542</xref>: The API now throws semantically correct
						exceptions on nearly all operations affecting the key-value service. This includes
						exceptions such as <codeph>tmpfail</codeph> or <codeph>out of memory</codeph>. To
						get the full list of exceptions thrown by each method, refer to the <xref
							href="download-links.dita#concept553">API Reference</xref>.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-92" format="html"
							scope="external">JVMCBC-92</xref>: The poll interval for
							<codeph>ReplicateTo</codeph> and <codeph>PersistTo</codeph> can now be
						configured on the environment through the <codeph>observeIntervalDelay</codeph>
						setting. For information about the options and default settings, see <xref
							href="env-config.dita#concepteEnvConfig" />.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-129" format="html"
							scope="external">JVMCBC-129</xref>: The delay between reconnect attempts is now
						configurable. For information about the options and default settings, see <xref
							href="env-config.dita#concepteEnvConfig" />.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-83" format="html"
							scope="external">JVMCBC-83</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JVMCBC-84" format="html"
							scope="external">JVMCBC-84</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JVMCBC-128" format="html"
							scope="external">JVMCBC-128</xref>: We've optimized the hot code path quite a
						bit and you should now see lower latency and higher throughput on most of the
						workloads. Also, we slightly reduced the allocation rate on the shared buffer
						pool.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-93" format="html"
							scope="external">JVMCBC-93</xref>: The internal pooling of endpoints has been
						refactored order minimize the time the SDK hooks onto channels. In particular,
						sockets to port 8091 are now immediately closed if not needed anymore.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-633" format="html"
							scope="external">JCBC-633</xref>: The <codeph>ViewResult</codeph> now
						implements the <codeph>Iterator</codeph> interface, which allows iterating over
						the <codeph>ViewRows</codeph> with a for-loop instead of having to use the
						iterator explicitly.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-628" format="html"
							scope="external">JCBC-628</xref>: Both <codeph>JsonArray</codeph> and
							<codeph>JsonObject</codeph> can now be constructed from raw JSON literals
						through new factory methods (see the <codeph>fromJson</codeph> methods for more
						details).</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-127" format="html"
							scope="external">JVMCBC-127</xref>: Similar to spymemcached in the 1.x SDK
						series, the 2.1 SDK now also sets the opaque identifier on the binary requests in
						order to make it easier to correlate requests and responses with tools like
							<codeph>tcpdump</codeph>.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-698" format="html"
							scope="external">JCBC-698</xref>: The disconnect timeout has been increased to
						25 seconds from the quite short 5 seconds by default. Also, the
							<codeph>Bucket#close()</codeph> method now uses this timeout instead of the
						incorrect management one.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-66" format="html"
							scope="external">JVMCBC-66</xref>: Great news for everyone who wants to debug
						the <codeph>core-io</codeph> repackaged dependencies. From now on we also include
						the repackaged dependencies in the source JAR of the core, which means that IDEs
						can pick up the full sources and you can set breakpoints in all places.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-689" format="html"
							scope="external">JCBC-689</xref>: When an incorrect password is used together
						with the <codeph>ClusterManager</codeph>, it now throws a proper exception
							(<codeph>InvalidPasswordException</codeph>) instead of a cryptic error message
						failing the observable.</li>
				</ul>
			</section>

			<section id="ga210-fixes">
				<title>Fixed issues</title>
				<p>This release fixes the following issues:</p>

				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-669" format="html"
							scope="external">JCBC-669</xref>: A bug was fixed on both the
							<codeph>JsonArray</codeph> and <codeph>JsonValue</codeph> where when
							<codeph>toMap</codeph> or <codeph>toList</codeph> was used it did not conver
						the contained maps and lists. Now proper deep conversion is happening
						automatically.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-122" format="html"
							scope="external">JVMCBC-122</xref>, :<xref
							href="https://www.couchbase.com/issues/browse/JVMCBC-123" format="html"
							scope="external">JVMCBC-123</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JCBC-682" format="html"
							scope="external">JCBC-682</xref>, <xref
							href="https://www.couchbase.com/issues/browse/JCBC-684" format="html"
							scope="external">JCBC-684</xref>: ByteBuffer leaks have been fixed in various
						places, especially when on a get request the document is not found, as well as
						during <codeph>Observe</codeph> calls and in the
						<codeph>BucketManager</codeph>.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-126" format="html"
							scope="external">JVMCBC-126</xref>: Several
							<codeph>IndexOutOfBoundsExceptions</codeph> in the streaming parsers for both
						View and Query have been fixed. The code is now more resilient to specific
						arriving chunk boundaries.</li>
				</ul>

			</section>

			<section id="ga210-known">
				<title>Known issues</title>
				<p>This release has the following known issues:</p>

				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-136" format="html"
							scope="external">JVMCBC-136</xref>: Unconsumed <codeph>ByteBuf</codeph>
						Observables are not properly released and will leak memory. To avoid this
						situation, just make sure to consume all observables that you request from the
						SDK. In the future, we are going to improve the situation with auto release
						buffers if no one has subscribed after a specific amount of time.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-138" format="html"
							scope="external">JVMCBC-138</xref>: On a multinode cluster, the SDK will report
						multiple connect and disconnect messages to some nodes in the cluster on startup.
						This is not harmful, just confusing, and will be resolved in a later bug fix
						release.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-154" format="html"
							scope="external">JVMCBC-154</xref>: When a failover is performed and there are
						operations in the pipeline, it could be that some of them are not properly cleaned
						up during the cancellation phase. The leak detector might report a leak, but it
						should not affect a long running application very much. This is going to be fixed
						in one of the next versions, but should not harm a production application in a
						blocking fashion.</li>
				</ul>

			</section>

		</conbody>
	</concept>


</concept>
