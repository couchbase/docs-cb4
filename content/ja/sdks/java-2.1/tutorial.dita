<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="concept2677">
	<title>Java SDK tutorial</title>
	<shortdesc>The Java SDK tutorial introduces some advanced concepts by walking through a complete
		web application.</shortdesc>
	<conbody>

		<section>
			<p>The full source code for the tutorial is available<xref
					href="https://github.com/couchbaselabs/beersample-java2" scope="external"
					format="html"> on GitHub</xref>. The primary focus of the tutorial is to explain
				the function and theory connected to the Couchbase Java client and how it connects
				to Couchbase server. The code that generates the web application is provided with
				the source code but is not discussed in this tutorial.</p>
		</section>

		<section>
			<title>Preview the application</title>
			<p>The complete working source is in the master branch <xref
					href="https://github.com/couchbaselabs/beersample-java2" scope="external"
					format="html">on GitHub</xref>. To build from source and preview the application,
				clone the repository and run the following shell commands from the repository
				folder:</p>
			<codeblock outputclass="language-bash"><![CDATA[mvn clean package
cd target
java -jar beersample-java2.jar]]></codeblock>
			<p>You should see the Spring framework start up and begin logging the application. After it has
				finished initializing, you can navigate to <xref href="http://localhost:8080/"
					format="html">http://localhost:8080/</xref> and view the application or use a
				tool like <codeph>curl</codeph> or <codeph>postman</codeph> to use all REST
				endpoints described in <xref
					href="https://github.com/couchbaselabs/beersample-java2#rest-api"
					scope="external" format="html">the README</xref> file.</p>
		</section>
		<section>
			<title>Preparation</title><p>To get ready to build your first app, you need to install
				Couchbase Server, create a view, and set up your development environment (IDE).</p>
			<b>Installing Couchbase Server</b>
			<p>Download <xref href="http://www.couchbase.com/download" scope="external"
					format="html">Couchbase Server</xref> and install it. As you follow the download
				instructions and setup wizard, make sure you install the sample bucket named
					<codeph>beer-sample</codeph> because it contains the beer and brewery data used
				in this tutorial.</p><p>If you already have Couchbase Server installed but did not
				install the <codeph>beer-sample</codeph> bucket, open the Couchbase Web Console and
				select <menucascade>
					<uicontrol>Settings</uicontrol>
					<uicontrol>Sample Buckets</uicontrol>
				</menucascade>. Select the <codeph>beer-sample</codeph> check box, and then click
					<uicontrol>Create</uicontrol>. A notification box in the upper-right corner
				disappears when the bucket is ready to use.</p>
			<b>Creating a view</b>
			<p>Views enable you to index and query data from your database. The
					<codeph>beer-sample</codeph> bucket comes with a small set of predefined view
				functions, but to add further functionality to the application you need to add an
				additional view. Adding a view offers a very good chance for you to see how you can
				manage views inside the Couchbase Web Console. </p><p>We want our users to be able
				to view a list of both beers and breweries. Therefore, we need to define one view
				function for each type of document that will respond with the relevant information
				for each query. As such we will be creating one view function for beers: </p>
			<ol>
				<li>In Couchbase Web Console, click <uicontrol>Views</uicontrol>.</li>
				<li>From the drop-down list of bucket names, choose the
						<uicontrol>beer-sample</uicontrol> bucket.<p>You should see a design
						document named <codeph>_design/beer</codeph> that has some views already
						defined (<codeph>brewery_beers</codeph> and <codeph>by_location</codeph>).
						If you do not see the views, make sure that Production Views is selected.
						You can toggle between Development Views and Production Views by clicking
						the buttons at the top of the list.</p></li>
				<li>Click <uicontrol>Copy to Dev</uicontrol>, and then in the Copy Design Document
					window click <uicontrol>Copy</uicontrol>.<p>You are now looking at the
						Development Views version of the <codeph>_design/dev_beer</codeph> design
						document, where you can add new views or make changes to existing views in
						the design document.</p></li>
				<li>Click <uicontrol>Add View</uicontrol>.</li>
				<li>In the Create Development View window, enter the following names for the design
					document and the view:<ul>
						<li>Design Document Name: <codeph>_design/dev_beer</codeph></li>
						<li>View Name: <codeph>by_name</codeph></li>
					</ul>
				</li>
				<li>Click the <uicontrol>Edit</uicontrol> button for the <codeph>by_name</codeph>
						view.<p>You are now in the view editor, where you can see sample documents
						and edit map and reduce functions.</p></li>
				<li>Under View Code, insert the following JavaScript map function and click
						<uicontrol>Save</uicontrol>:<codeblock outputclass="language-javascript"><![CDATA[function (doc, meta) {
   if(doc.type && doc.type == "beer") {
	 emit(doc.name, doc.brewery_id);
   }
}]]></codeblock></li>
			</ol>
			<p>Every <codeph>map</codeph> function takes the full document (<codeph>doc</codeph>)
				and its associated metadata (<codeph>meta</codeph>) as the arguments. Your map
				function can then inspect this data and <codeph>emit</codeph> the item to a result
				set to be added to an index. In this case, the name of the beer
					(<codeph>doc.name</codeph>) is emitted when the document has a type field, and
				the type is <codeph>beer</codeph>. We also want to use the brewery associated with
				the beer, so for our value we will emit the <codeph>doc.brewery_id</codeph>.
				</p><p>In general, you should try to keep the index as small as possible. You should
				resist the urge to include the full document with <codeph>emit(meta.id,
					doc)</codeph> because that increases the size of your view indexes and
				potentially impacts application performance. If you need to access the full document
				or large parts of it, use the <codeph>.document()</codeph> method, which does a
					<codeph>get()</codeph> call with the document ID in the background.</p> At this
			point, you could also add a reduce function to perform further computation on the index
			results. This example does not use <codeph>reduce</codeph> functions, but you can play
			around with <codeph>reduce</codeph> functions to see how they work. <p>The final step is
				to push the design documents to production mode for Couchbase Server. While the
				design documents are in development mode, the index is applied only on the local
				node. For more information about design document modes, see <xref
					href="http://docs.couchbase.com/admin/admin/Views/views-development.html"
					format="html" scope="external">Development views</xref> and <xref
					href="http://docs.couchbase.com/admin/admin/Views/views-production.html"
					format="html" scope="external">Production views</xref>.</p><p>To have the index
				on the whole data set, you need to publish the design documents to move them into
				production mode: </p><ol>
				<li>In Couchbase Web Console, click <uicontrol>Views</uicontrol>.</li>
				<li>Click the <uicontrol>Publish</uicontrol> button on the design document.</li>
				<li>Accept any dialog that warns you about overriding the old view function (since
					you copied them).</li>
			</ol><p>For more information about using views for indexing and querying from Couchbase
				Server, see the following resources: </p><ul>
				<li>General Information about views: <xref
						href="http://docs.couchbase.com/admin/admin/Views/views-intro.html"
						format="html" scope="external">Views and indexes</xref>
				</li>
				<li>Examples and patterns you can use for views, including patterns for extracting
					information based on date or time: <xref
						href="http://docs.couchbase.com/admin/admin/Views/views-querySample.html"
						format="html" scope="external">View and query pattern samples</xref></li>
			</ul>
			<b>Setting up your IDE</b>
			<p>This project makes heavy use of <xref href="http://maven.apache.org/"
					scope="external" format="html">Maven</xref> for dependency management, so you
				should familiarize yourself with using Maven for your chosen IDE or from the command
				line. Here is the <filepath>pom.xml</filepath> that you can use for full dependency
				management (included in the example application):</p>
			<codeblock outputclass="language-xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.couchbase</groupId>
	<artifactId>beersample2</artifactId>
	<version>1.0-SNAPSHOT</version>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.1.9.RELEASE</version>
	</parent>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>com.couchbase.client</groupId>
			<artifactId>java-client</artifactId>
			<version>2.1.6</version>

		</dependency>
	</dependencies>

	<build>
		<finalName>beersample-java2</finalName>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
]]></codeblock>
			<p>For reference, here is the directory structure used for this example application:</p>
			<codeblock outputclass="language-java"><![CDATA[
├── src
│   └── main
│  	 ├── java
│  	 │   └── com
│  	 │  	 └── couchbase
│  	 │  		 └── beersample
│  	 │  			 ├── beers
│  	 │  			 ├── breweries
│  	 │  			 └── config
│  	 └── resources
│  		 └── public
└── target
]]></codeblock>
			<b>Download the framework</b>
			<p>The framework/stub for the tutorial can be downloaded from <xref
					href="https://github.com/couchbaselabs/beersample-java2/tree/tutorialStub"
					scope="external" format="html">github</xref>. It includes the <xref
					href="http://projects.spring.io/spring-boot/#quick-start" scope="external"
					format="html">Spring Boot</xref> application framework and the surrounding code
				that takes our Couchbase connections and forms a complete application. The next
				section of the tutorial explains the inner workings of the
					<apiname>CouchbaseService</apiname> class, currently blank, that deals with the
				applications connections with your Couchbase server and implements key data-related
				methods.</p><p>The best way to go is to clone the repository and use the
					<codeph>tutorialStub</codeph> branch:</p><codeblock outputclass="language-shell"><![CDATA[git clone https://github.com/couchbaselabs/beersample-java2.git
cd beersample-java2
git checkout tutorialStub]]>				</codeblock><p>You can then import the project as a Maven project in
				your favorite IDE and start filling in the blanks in
					<apiname>CouchbaseService</apiname>. </p></section>

		<section>
			<title>Couchbase service</title>
			<p>The primary focus of this tutorial is the <apiname>CouchbaseService</apiname> class
				located in the <filepath>src/main/java/com/couchbase/beersample</filepath> directory.
				The class is responsible for dealing with all interactions between the application and
				the Couchbase server. The constructor and <apiname>preDestroy()</apiname> method are the
				part of the class that deals with connecting to and disconnecting from Couchbase.</p>
			<p>The application is parameterized through the
					<filepath>src/main/resources/application.yml</filepath> configuration file, which
				gets injected by Spring Boot into the <apiname>Database</apiname> class. You need to
				customize this to your cluster setup and use the configuration for connection.</p>
			<p>Try to implement them and compare with the code extract below:</p>
			<codeblock outputclass="language-java"><![CDATA[@Service
public class CouchbaseService {

	private final Database config;

	private final Bucket bucket;
	private final Cluster cluster;

	@Autowired
	public CouchbaseService(final Database config) {
		this.config = config;

		//connect to the cluster and open the configured bucket
		this.cluster = CouchbaseCluster.create(config.getNodes());
		this.bucket = cluster.openBucket(config.getBucket(), config.getPassword());
	}

	@PreDestroy
	public void preDestroy() {
		if (this.cluster != null) {
			this.cluster.disconnect();
		}
	}
}]]></codeblock>

			<p>It is important to reuse the Couchbase connections so that the underlying resources are
				not duplicated for each connection. Here the <codeph>@Service</codeph> annotation
				ensures that the Spring framework creates only one instance of the class. The important
				message is that you only create one connection to the Couchbase cluster and one
				connection to each bucket you are using, then statically reference those connections for
				each use.</p>

			<p>The line <codeph>this.cluster = CouchbaseCluster.create(config.getNodes());</codeph> creates a
				new Couchbase connection object and makes the initial connection to the cluster. In
				this example, we supply a list of IP addresses obtained from the
					<apiname>Database</apiname> configuration object, populated by Spring Boot with
				the contents of the <codeph>application.yml</codeph> file. You can supply a string,
				or several strings concatenated with commas so that it can fall back to another node
				should a connection to a single node fail.</p>

			<p>Next, connect to the bucket that is storing the data, in this case, the <b>beer-sample</b>
				bucket provided as part of your Couchbase installation. As with connecting to the
				cluster, it is important to create a single connection and reuse it multiple times
				throughout your code. The line <codeph>this.bucket = cluster.openBucket
					(config.getBucket(), config.getPassword());</codeph> creates a connection to the
				bucket defined in the configuration. The Couchbase Java SDK provides both
				synchronous and asynchronous APIs that allow you to harness easily the power of
				asynchronous computation while maintaining the simplicity of synchronous operations.
				In this case, we are choosing to connect to both the cluster and the bucket
				synchronously as most of our application will be required to be synchronous, loading
				data before a web page can be generated. However, the asynchronous API is explained
				later on for use in creating view queries.</p>

			<p>The disconnect method is included even though it is not explicitly called in this
				example. Spring framework will invoke the method annotated with
					<codeph>PreDestroy</codeph> when destroying the context and shutting down the
				application.</p>

			<p>Now that we have dealt with connecting to the cluster and the bucket we can move onto
				completing some useful operations, beginning with querying the database for a single
				document. We will be using the following code, which connects to the Couchbase server,
				searches for a given key identifier, and returns the associated
					<codeph>JsonDocument</codeph>.</p>
			<codeblock outputclass="language-java"><![CDATA[/**
* READ the document from database
*/
public JsonDocument read(String id) {
	return bucket.get(id);
}
]]></codeblock>

			<p>When data is stored in Couchbase as JSON, it will be converted by the Java SDK into a
					<b>JsonDocument</b> object. This allows you to use a very simple JSON library, built
				into the Couchbase SDK, to access, modify and re-save the data held in the document.
				This makes working with data with Couchbase very simple as you have direct access to the
				data as it is stored in the database, allowing for rapid operations from both the client
				and the server.</p>
			<p>Another important aspect is error management. When the document doesn't exist, the SDK
				simply returns null. But should another error condition arise, a specific exception will
				be thrown (like a <codeph>TimeOutException</codeph> wrapped in a
					<apiname>RuntimeException </apiname> if the server couldn't respond in time). So it
				is important to ensure that your application can handle the errors that the SDK will
				pass up to it.</p>

			<p>Next see if you can complete the very similar methods <codeph>create</codeph>,
					<codeph>delete</codeph> and <codeph>update</codeph>. Their corresponding SDK methods
				are <codeph>insert</codeph> (or <codeph>upsert</codeph>), <codeph>remove</codeph> and
					<codeph>update</codeph>.</p>

			<p>Some methods like the insert method can additionally specify a durability requirement as is
				covered in more detail in the document-updating section of the documentation.
				Briefly, it allows you to control the performance-persistence relationship. By
				default, the server will acknowledge the operation as soon as the document has
				reached its cache layer, this provides the best performance as the client can
				receive a response very quickly. However, in some situations you want or need
				greater assurances that an operation has completed, and so you can specify at what
				point during the persistence process the server will respond that the operation has
				completed.</p>

			<p>Also, it may be confusing that we are returning a <apiname>JsonDocument</apiname> value.
				This is because the operations update the document's metadata. So the returned document
				reflects this, for example by having the <codeph>cas</codeph> field updated.</p>
		</section>

		<section>
			<title>Querying views</title>
			<p>The next section of the <apiname>CouchbaseService</apiname> class is going to handle
				making a view query to the Couchbase cluster to allow us to display a list of all the
				beers ( and potentially limiting that list).</p>
			<p>The first thing to consider when designing a view is the data requirement for the operation.
				Due to the increase in the amount of data being sent, a view query is slower than a
				basic get operation. Therefore, we need to consider what data we need from the view
				so that we only emit the values necessary. For our application, we have written a
				view function for beers that emits the name of the beer and the ID of its associated
				brewery.</p>

			<p>The <codeph>findAllBeers</codeph> method is the first example of querying a view. We need to
				prepare the query, optionally add parameters if a limit or a skip value have been
				provided then execute the query properly. The returned object,
					<apiname>ViewResult</apiname>, has a collection of rows, representing each key
				and value pair emitted by the view function. One can iterate over it by using the
					<apiname>rows()</apiname> method, which is what is used by the
					<apiname>BeerController</apiname> in the <apiname>listBeers()</apiname> method.
				Note that the controller transforms the result into a slightly different JSON object
				that better reflect what we want to expose in our REST API.</p>
			<p>Try to implement <apiname>findAllBeers</apiname> and compare with the solution
				below:</p>
			<codeblock outputclass="language-java"><![CDATA[public ViewResult findAllBeers(Integer offset, Integer limit) {
	ViewQuery query = ViewQuery.from("beer", "by_name");
	if (limit != null && limit > 0) {
		query.limit(limit);
	}
	if (offset != null && offset > 0) {
		query.skip(offset);
	}
	ViewResult result = bucket.query(query);
	return result;
}]]></codeblock>

			<p>As the view query is more complex than a get operation, it is advantageous to leverage
				the asynchronous API in the SDK. To achieve this, we can use the
					<codeph>async()</codeph> method on the bucket, this tells the SDK to use the
				underlying asynchronous operations and not to apply any blocking code to it. This allows
				us far greater control over the execution of the operation. Additionally, we will now be
				dealing with observables (as made more explicit in the API by having the return types
				being prefixed with <codeph>Async</codeph>).</p>
			<p>Try to implement the <apiname>findAllBeersAsync()</apiname> method and compare with the
				solution below:</p>
			<codeblock outputclass="language-java"><![CDATA[/**
* Retrieves all the beers using a view query, returning the result asynchronously.
*/
public Observable<AsyncViewResult> findAllBeersAsync() {
	ViewQuery allBeers = ViewQuery.from("beer", "by_name");
	return bucket.async().query(allBeers);
}]]></codeblock>

			<p>As you can see, going from sync to async is quite easy, by just calling
					<apiname>async()</apiname>. Methods that returned an <codeph>X</codeph> in the
				sync variant now return an <codeph> Observable&lt;X&gt;</codeph>. You can then apply
				Rx transformations to it if necessary, as we'll see in the next section. For now,
				try also to do the simple implementation of <apiname>asyncRead()</apiname>.</p>

			<p>There are two last view-related methods to implement before jumping into more advanced
				asynchronous data flows: <apiname>createQueryBeersForBrewery()</apiname> and
					<apiname>findBeersForBreweryAsync()</apiname>. The second one just executes the query
				produced by the first one in an asynchronous manner. The idea of the query is to use the
					<codeph>brewery_beers</codeph> view to retrieve all beers brewed in a particular
				brewery. This can be done by specifying a very narrow range of keys.</p>
			<p>In this view, note how the key is a JSON array of the brewery identifier and the beer
				identifier for beers. If we provide a <codeph>startKey</codeph> with just the
				brewery identifier BW and an <codeph>endKey</codeph> that would limit us to the last
				[BW, <i>beer Id</i>] pair (included), we would be good. The trick here is to use the
				UTF-8 character <codeph>\uefff</codeph>. This is a big enough char that we're sure
				no beer identifier will come after it, alphabetically speaking. So this results in
				the correct range we're seeking:</p>
			<p>Try to implement <apiname>createQueryBeersForBrewery</apiname> and
					<apiname>FindBeersForBreweryAsync</apiname> and compare with the solution below:</p>
			<codeblock outputclass="language-java"><![CDATA[public static ViewQuery createQueryBeersForBrewery(String breweryId) {
	ViewQuery forBrewery = ViewQuery.from("beer", "brewery_beers");
	forBrewery.startKey(JsonArray.from(breweryId));
	//the trick here is that sorting is UTF8 based, uefff is the largest UTF8 char
	forBrewery.endKey(JsonArray.from(breweryId, "\uefff"));
	return forBrewery;
}

public Observable<AsyncViewResult> findBeersForBreweryAsync(String breweryId) {
	return bucket.async().query(createQueryBeersForBrewery(breweryId));
}
					]]></codeblock>
		</section>

		<section>
			<title>More advanced asynchronous flow</title>
			<p>Let's have a look at a more advanced data flow coded in
				<apiname>BreweriesController</apiname>'s <apiname>getBrewery()</apiname> method. The
				idea of this method is to display a brewery's details (as obtained from the
				database), but with the addition of a <codeph>beers</codeph> field that contains an
				array of all the beers produced by this brewery. Prepare two asynchronous
				observables to retrieve the relevant data: : one to retrieve the brewery's document
				itself, the other to list this brewery's beers and assemble them into a
					<codeph>List</codeph> (using the <codeph>findBeersForBreweryAsync()</codeph>
				query we just did).</p>
			<p>So far, only <apiname>Observable</apiname> have been produced, and there's not been any
				consumption of data by calling <apiname>subscribe()</apiname> with an
					<apiname>Observer</apiname>. This means the flow hasn't been started, we are
				just describing what it will do. Next step needs to combine each item in these two
				streams to result in a stream of JSON as we want it presented to the user ( combine
				a brewery document with a list of beers documents and produce a JSON object similar
				to the brewery document with an additional <i>beers</i> field). This is the role of
				the <codeph>concatBeerInfoToBrewery()</codeph> method, that we now need to
				implement.</p>
			<p>Notice that the controller uses the <apiname>singleOrDefault</apiname> Rx operator to specify
				a default JSON value to return to the user if the brewery document is not found (or
				no list of beers could be compiled). Notice as well that in the case of exceptions
				being detected, they are trapped and transformed into a JSON object emitted to the
				user by the <apiname>onErrorReturn</apiname> Rx operator.</p>
			<p>The resulting stream is subscribed to a few lines below by waiting for a single
				emission, getting the JSON content and returning it as the REST API call's result.
				Subscription and blocking is done by calling
					<codeph>fullBeers.toBlocking().single()</codeph>.</p>
			<p>Try to implement <codeph>concatBeerInfoToBrewery()</codeph> and compare with the
				solution below:</p>
			<codeblock outputclass="language-java"><![CDATA[public static Observable<JsonDocument> concatBeerInfoToBrewery(Observable<JsonDocument> brewery,
	Observable<List<JsonDocument>> beers) {
		return Observable.zip(brewery, beers,
		new Func2<JsonDocument, List<JsonDocument>, JsonDocument>() {
			@Override
			public JsonDocument call(JsonDocument breweryDoc, List<JsonDocument> beersDoc) {
				JsonArray beers = JsonArray.create();
				for (JsonDocument beerDoc : beersDoc) {
					JsonObject beer = JsonObject.create()
					.put("id", beerDoc.id())
					.put("beer", beerDoc.content());
					beers.add(beer);
				}
				breweryDoc.content().put("beers", beers);
				return breweryDoc;
			}
		});
	}]]></codeblock>

			<p>Last data flow is the one used for searching beers by partial name. In
					<codeph>searchBeer</codeph> we'll try to start from the stream of all beers, rework
				the data to stick to the REST API return format and filter to find only beers that match
				the search token.</p>
			<p>The REST controller will then subscribe to the resulting flow and send the collected
				data to the user. The expected format is a JSON object with the beer's
					<codeph>id</codeph>, <codeph>name</codeph> and the full beer document content under
				the <codeph>detail</codeph> attribute. This must be done for every beer (and so the
				input of the method is a stream of every beer obtained by calling
					<apiname>findAllBeersAsync</apiname>).</p>
			<p>The first step is to transform each query result row in the stream into the expected JSON
				object format. One can use the <apiname>map</apiname> Rx operator to do that, but
				this is done on the row's <apiname>document()</apiname> method, which returns an
					<codeph>Observable</codeph>. So we have a nested Observable (the document one in
				the observable of rows) and need to flatten it. This can be achieved by wrapping the
				mapping in a <apiname>flatMap</apiname> Rx operator call.</p>
			<p>Try to code the first part of <apiname>searchBeer</apiname> and compare to the solution
				below:</p>
			<codeblock outputclass="language-java"><![CDATA[allBeers
//extract the document from the row and carve a result object using its content and id
.flatMap(new Func1<AsyncViewRow, Observable<JsonObject>>() {
	@Override
	public Observable<JsonObject> call(AsyncViewRow row) {
		return row.document().map(new Func1<JsonDocument, JsonObject>() {
			@Override
			public JsonObject call(JsonDocument jsonDocument) {
				return JsonObject.create()
				.put("id", jsonDocument.id())
				.put("name", jsonDocument.content().getString("name"))
				.put("detail", jsonDocument.content());
			}
		});
	}
})]]></codeblock>
			<p>Then comes the filtering, only keeping beers which name contains the search token,
				ignoring case. This can be achieved using the <apiname>filter</apiname> Rx operator. Try
				to code this second part of <apiname>searchBeer</apiname> and compare to the solution
				below:</p>
			<codeblock outputclass="language-java"><![CDATA[//reject beers that don't match the partial name
.filter(new Func1<JsonObject, Boolean>() {
	@Override
	public Boolean call(JsonObject jsonObject) {
		String name = jsonObject.getString("name");
		return name != null && name.toLowerCase().contains(token.toLowerCase());
	}
})]]></codeblock>
			<p>Finally, since what we want to output is a big JSON array of all the matching rows, we
				need to collect each transformed item that passed the filter into a single
					<codeph>JsonArray</codeph>. The <apiname>collect</apiname> Rx operator does just
				that. It needs a "factory function" to create the initial collecting structure (here an
				empty <codeph>JsonArray</codeph>) and a section function that populates the collecting
				structure, called for each emitted upstream item.</p>
			<p>Try to apply the <codeph>collect</codeph> operator to our case in the third part of
					<apiname>searchBeer</apiname> and compare with the solution below:</p>
			<codeblock outputclass="language-java"><![CDATA[//collect results into a JSON array (one could also just use toList() since a List would be
// transcoded into a JSON array)
.collect(new Func0<JsonArray>() { //this creates the array (once)
	@Override
	public JsonArray call() {
		return JsonArray.empty();
	}
}, new Action2<JsonArray, JsonObject>() { //this populates the array (each item)
	@Override
	public void call(JsonArray objects, JsonObject jsonObject) {
		objects.add(jsonObject);
	}
});]]></codeblock>
		</section>
	</conbody>
</concept>
