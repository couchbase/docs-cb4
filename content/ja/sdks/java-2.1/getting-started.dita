<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="concept227">
	<title>Getting started with the Java SDK</title>
	<shortdesc>This guide provides a foundational introduction to the Couchbase Java SDK. It shows you
		how to install the SDK and write a basic sample application that highlights important
		aspects. After you install the SDK, you can start exploring it on your own or proceed with a
		tutorial to build a complete, production-grade application.</shortdesc>

	<conbody>

		<section>
			<title>Installing the Couchbase Java SDK</title>
			<p>At a minimum, Java 6 is required, but any newer version is also supported (including
				Java 8).</p>
			<p>To use the Java SDK, point your application project object model (POM) to the library,
				which is available on Maven Central. Here is a typical <filepath>pom.xml</filepath> that
				you can copy and paste into your Java project:</p>
			<codeblock outputclass="language-xml"><![CDATA[<dependencies>
    <dependency>
        <groupId>com.couchbase.client</groupId>
        <artifactId>java-client</artifactId>
        <version>2.1.6</version>
    </dependency>
</dependencies>
]]></codeblock>
			<p>You can also download an archive that has all JARs and dependencies included. In general,
				using a package manager is strongly recommended. See the "Download and API
				Reference" section for more details.</p>
			<p>If you import the dependency, the following transitive dependencies are also added:</p>
			<ul>
				<li><xref href="https://github.com/couchbase/couchbase-jvm-core" format="html"
						scope="external">core-io</xref>: our internal core library, which abstracts lots
					of Couchbase-specific behavior in a message-oriented way.</li>
				<li><xref href="https://github.com/ReactiveX/RxJava" format="html" scope="external"
						>RxJava</xref>: a foundational library to build powerful reactive and asynchronous
					applications.</li>
			</ul>

			<p>The SDK itself depends on more packages (like Netty, the Disruptor RingBuffer and
				Jackson), but they are repackaged into the distributed JAR to reduce the risk of
				dependency clashes in your environment.</p>
		</section>
	</conbody>
</concept>
