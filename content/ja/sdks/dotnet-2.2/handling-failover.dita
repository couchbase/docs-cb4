<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_ewl_x1b_4t">
 <title>Handling Failover and Re-balancing</title>
 <shortdesc>Failover are performed on a node in Couchbase cluster that is unhealthy and perhaps no
  longer reachable. The purpose is to put the cluster into consistent state by removing the
  unhealthy node and making the replica data available in the other nodes.</shortdesc>
 <conbody>
  <p>When a failover occurs, the Couchbase .NET SDK will receive an updated cluster map with the new
   topology of the cluster and will "adapt" to the new configuration. The SDK will do this on it's
   own without manual intervention as a result of the Server failover being triggered. The cluster
   map will be compared with the current active configuration and determine what TCP connections and
   resources need to be terminated and removed. While this is happening the SDK will continue to
   function with most operations successfully be completed.</p>
  <section>
   <title>How the SDK handles IO errors</title>
   <p>When a node is removed from the cluster during failover, it's possible for operations to be in
    mid-flight as a request or response from the server or being processed on the server. This means
    that the underlying TCP connection executing the operation may be closed by the server or the
    client which would result. In most cases this will result in that operation failing with either
    a with a client or server IO exception. In certain cases the operation will be retried up until
    it's configured operation "lifespan". It may be retried multiple times and fail multitple times
    until it either succeeds to or times out. In the event of a timeout, an
    OperationTimeoutException will returned in the Exception field of the IOperationResult.</p>
   <p>For an operation to be retried, it must meet certain criteria:</p>
   <ul>
    <li>Read operations (Get, etc) are always re-tried</li>
    <li>Write operations (Upsert, Remove, etc) if it has a CAS value</li>
    <li>Insert is always retried</li>
    <li>Increment, Decrement, Append and Prepend are never retried</li>
   </ul>
   <p>The ResponseStatus from the server also is considered when determining if an operation should
    be retried. For example, if VBucketBelongsToAnother server is returned, then the operation will
    be retried if it meets the criteria above, but first it will check for a cluster map topology
    has changed. Also, if the server returns TemporaryFailure (which means the process is still
    initializing) the operation will be retried as well if the error occurred before the client
    actual sent the packet over the network.</p>
  </section>
  <section>
   <title>Exceptions and Errors returned during failover</title>
   <p>There are a number of different exceptions that are returned in the Exception field of the
    IOperationResult or are logged if logging is enabled. The following exceptions are what you
    could see during a failover:</p>
   <ul>
    <li>OperationTimeoutException</li>
    <li>NodeUnavailableException</li>
    <li>ConnectionUnavailableException</li>
   </ul>
   <p>Note that the SDK will never "throw" these exceptions; they will always be returned back to
    the caller in the Exception field of the IOperationResult implementation. The only time the SDK
    will throw exceptions is during bootstrapping if the SDK cannot successfully bootstrap.</p>
   <ul>
    <li><b>OperationTimeoutException:</b>
     <p>This exception is returned as a generic exception when the time allotted for the operation
      has been exceeded. This value is defined by the ClientConfiguration.DefaultOperationLifespan
      and the default 2500ms or 2.5 seconds. Couchbase is fast-enough that multiple retries can
      occur within 2.5 seconds. If you commonly encounter this exception, you can try increasing the
      DefaultOperationTimeout so that more retry attempts will happen which will give a higher
      likelihood of a successful operation. Also, you can always have a retry strategy at the
      application level as well if this makes sense for your use-case.</p>
    </li>
    <li><b>NodeUnavailableException:</b>
     <p>The client is always behind the server in terms of state. For example, if a node is failed
      over, it may take some time for the SDK to timeout any in-flight operations, receive a new
      cluster map and update it's configuration. If the node is simply dropped from the network,
      this is even worse as the client will not know that the cluster topology has changed will
      continue to route operations to the down node which will all fail or timeout. Since this takes
      resources away from the other healthy nodes, the client may simple flag the node as "down" and
      will always return a NodeUnavailableException when operations are attempted on them. </p>
     <p>When the node enters a "down" state, it will start a background thread that tries to
      re-establish connectivity with the cluster. If it can then the node will be put back into
      rotation. In which case, the NodeUnavailableException should stop be returned. Note that when
      a node is "down" other nodes are still active and can process operations.</p></li>
    <li><b>ConnectionUnavailableException: </b><p>This is a slightly misleading name as it implies that the
      number of server connections has been exhausted, but that is not the case. The SDK uses a
      connection pool of sockets; each operation uses a socket for an operation and returns it back
      to the pool. If the number of queued operations is high, instead of waiting for a socket, the
      sdk will loop trying acquire a socket for use. If it cannot do it within the default five (5)
      attempts specified by ClientConfiguration.MaxAcquireIterationCount then it will return or log
      this exception. Note that this behavior will likely change in future versions of the SDK.
     </p></li>
   </ul>
  </section>
 </conbody>
</concept>
