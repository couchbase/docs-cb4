<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_tyn_1fb_4t">
 <title>Geo Spatial View Queries</title>
 <shortdesc>Geo Spatial Views are a new feature in Couchbase Server 4.0. With them it is possible to
  perform queries using two-dimensional geometries stored with fields in your documents. To perform
  Geo Spatial queries, the View REST API is used or more likely an SDK. Similar to how regular Views
  are queried, the Couchbase Server.NET SDK 2.2.0 provides a wrapper API around the REST API making
  it easy to compose and execute queries. Note that to use Geo spatial queries, you documents must
  follow the GeoJSON specification. </shortdesc>
 <conbody>
  <section><title>Querying the "points" Spatial View</title>
   <p>In the beer-sample Sample data bucket, you can create a Map function that emits a "Point" type
    document from the "Brewery" documents and contains the latitude and longitude field called
    "coordinates":</p>
   <codeblock outputclass="language-csharp">
    function (doc) {
     if (doc.type == "brewery" &amp;&amp; doc.geo.lon &amp;&amp; doc.geo.lat) {
         emit({ "type": "Point", "coordinates": [doc.geo.lon, doc.geo.lat]}, null);
     }
    }
    </codeblock>
   <p>To query this view, similar to a regular View, we will use query request object which exposes
    the REST API's parameters as a fluent interface called SpatialViewQuery. Here is an example of
    using this class to construct a query which we execute against the bucket:</p>
   <codeblock outputclass="language-csharp">
    using (var cluster = new Cluster(ClientConfigUtil.GetConfiguration()))
    {
        using (var bucket = cluster.OpenBucket("beer-sample"))
        {
            var query = new SpatialViewQuery().From("beer_ext_spatial", "points")
                 .Stale(StaleState.False)
                 .StartRange(-10.37109375, 33.578014746143985)
                 .EndRange(43.76953125, 71.9653876991313)
                 .ConnectionTimeout(60000)
                 .Limit(1)
                 .Skip(0);
    
            var result = bucket.Query&lt;dynamic&gt;(query);
            foreach (var viewRow in result.Rows)
            {
                Console.WriteLine(viewRow.Value);
            }
        }
    }
  </codeblock> 
   <p>Here we are providing a start range between -10.37109375 and 33.578014746143985 and an end
    range between 43.76953125 and 71.96533876991313 which will return all breweries for an area over
    Europe. </p>
  </section>
 </conbody>
</concept>
