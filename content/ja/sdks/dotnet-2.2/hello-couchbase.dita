<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="concept2677">
	<title>Hello Couchbase example</title><shortdesc>This topic shows how to create a simple “Hello World” application using the SDK. </shortdesc>
	<conbody>
		<p>A 5-minute introduction to the Couchbase .NET SDK covers the basics and doesn’t go
			over advanced features of the client.</p>
		<p>Before starting this tutorial make sure you are comfortable creating a Visual Studio
			project.</p>
		<section><title>Prerequisites</title>
			<p>To complete the “Hello World” tutorial, you need the following prerequisites installed:
			</p>
			<p>
				<ul>
					<li>Microsoft Visual Studio 2013 or later</li>
					<li>Microsoft .NET Framework 4.5 or later</li>
					<li>Couchbase Server 2.5 or later installed locally (localhost/127.0.0.1)</li>
					<li>A Couchbase bucket called <codeph>default</codeph> installed</li>
				</ul>
			</p>

		</section>
		<section><title>Tutorial</title><p>This tutorial creates a simple console application using Visual
				Studio that illustrates the most basic usage of the Couchbase .NET SDK. </p><p>To
				begin, open Visual Studio and create a new Console Application Project called
				Couchbase.HelloCouchbase: </p>
			<p>
				<image href="images/hello-couchbase-visual-studio.png" id="image_i31_yqb_3p"/>
			</p><p>This creates a simple executable with a <codeph>main()</codeph> method that you
				can use to try reading and writing from a Couchbase Cluster.</p><p>Next, use the
				NuGet Package Manager to reference the Couchbase .NET SDK and its dependencies: </p>
			<image href="images/hello-couchbase-nuget.png" id="image_rmn_hsb_3p"/>
			<p>At this point, you should be ready to go. </p><p>Add a <codeph>Cluster</codeph>
				object, which represents a factory and resource manager for Couchbase buckets. This
				is added to the <filepath>Program.cs</filepath> file that was added automatically by
				Visual Studio when the project was created.</p><p>The default
					<codeph>OpenBucket()</codeph> overload with no parameters opens the
					<codeph>default</codeph> bucket. Additionally, because the default constructor
				is used to create the <codeph>Cluster</codeph> object, the app connects to the
					<codeph>localhost</codeph> (<codeph>127.0.0.1</codeph>) instance of Couchbase
				Server. </p><p>The <codeph>CouchbaseBucket</codeph> object (as well as the
					<codeph>Cluster</codeph> object) implements the <codeph>dispose</codeph>
				pattern. Because of this, the instance is wrapped in a <codeph>using</codeph>
				statement, which means that the internal resources allocated by the instance will be
				reclaimed as the bucket instance goes out of scope. Managing the lifetime or scope
				of these objects is critical to developing high-performing, robust applications with
				the .NET SDK.</p><p>After you have connected to a Couchbase bucket, create a
				document and add it to the database: </p>
			<p>
				<codeblock outputclass="language-csharp" spectitle="Storing a document">
			using System;
			using Couchbase;
			internal class Program
			{
				private static readonly Cluster Cluster = new Cluster();
				private static void Main(string[] args)
				   {
					 using (var bucket = Cluster.OpenBucket())
					 {
					   var document = new Document&lt;dynamic&gt;
					   {
						 Id = "Hello",
						 Content = new
						 {
						   name = "Couchbase"
						 }
					  };
					  var upsert = bucket.Upsert(document);
					  if (upsert.Success)
					  {
						 var get = bucket.GetDocument&lt;dynamic&gt;(document.Id);
						 document = get.Document;
						 var msg = string.Format("{0} {1}!", document.Id, document.Content.name);
						 Console.WriteLine(msg);
					  }
					  Console.Read();
				       }
				  }
			 }</codeblock>
			</p><p>First, the code creates a new <codeph>Document</codeph> object, types it as
					<codeph>dynamic</codeph> and provides an <codeph>Id</codeph> value. Then, it
				creates the actual value that will be stored as JSON in Couchbase and assigns it to
				the <codeph>Content</codeph> property. After the <codeph>Document</codeph> object is
				created, it uses the <codeph>Upsert()</codeph> method to store it into the database.
				</p><p>Finally, the code checks whether the operation was successful. If it was, it
				performs the <codeph>GetDocument()</codeph> operation to retrieve the document and
				formats a string with the <codeph>Id</codeph> of the document and the
					<codeph>Name</codeph> property from the <codeph>Content</codeph> field (the
				actual JSON document).</p><p>If you build and run this from Visual Studio, you
				should see the following message output: </p><p>
				<codeblock outputclass="language-bourne">Hello Couchbase!</codeblock>
			</p><p>Congratulations, you have successfully created the Hello Couchbase Tutorial! The
				full source can be found on <xref
					href="https://github.com/couchbaselabs/couchbase-net-examples/tree/master/Src/Couchbase.HelloCouchbase"
					format="html" scope="external">GitHub</xref>.</p>
		</section>
	</conbody>
</concept>
