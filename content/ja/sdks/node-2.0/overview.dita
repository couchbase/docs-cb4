<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_z3r_zgq_44">
	<title>Overview</title>
	<shortdesc>The Couchbase Node.js SDK, previously known as Couchnode, enables you to interact
		with Couchbase Server from a Node.js application.</shortdesc>
	<conbody>
		<p>The Node.js SDK consists of a native JavaScript library and a C/C++ add-on that uses the
			Couchbase C SDK (libcouchbase) internally. The SDK includes the following
			components:</p>
		<ul>
			<li>Couchnode client</li>
			<li>Developer guide (you're reading it now!)</li>
			<li>Couchnode API reference</li>
			<li>Sample applications (<xref href="https://github.com/couchbaselabs/beersample-node"
					format="html" scope="external">beer database</xref>, <xref
					href="https://github.com/couchbaselabs/node-couch-qa" format="html"
					scope="external">CouchQA</xref>) </li>
		</ul>

		<section>
			<title>Architecture</title>
			<p>To debug errors, you must be familiar with the Couchnode architecture to understand
				where problems might originate. The following components participate in typical
				operations: </p>
			<ul>
				<li><p><b>Couchbase Server</b></p>
					<p>This is the server itself, which stores your data. Errors can happen here if
						your data does not exist, or if there are connectivity issues with one or
						more nodes in the server. While Couchbase Server is scalable and fault
						tolerant, there are naturally some conditions that cause failures (for
						example, if all nodes are unreachable).</p></li>

				<li><p><b>libcouchbase</b></p>
					<p>libcouchbase, our C client library, provides the underlying layer that
						handles network communication and protocol handling between a client and a
						Couchbase node. Network connectivity issues tend to happen here.</p></li>

				<li><p><b>Node.js C++ binding layer</b></p>
					<p>The binding layer contains the C++ code that provides the bulk of the SDK. It
						interfaces with the libcouchbase component, handles marshaling of
						information between libcouchbase and your application, performs input
						validation, and encoding and decoding of keys and values.</p>
				</li>
				<li><p><b>Node.js layer</b></p>
					<p>The Node.js layer is written in pure JavaScript. Simple key-value operations
						are normally just dispatched to the C++ layer. Most of the view operations
						are handled here as well, with the C++ binding layer just performing the
						lower-level network handling.</p></li>
			</ul>
		</section>

		<section>
			<title>Compatibility</title>
			<p>To take advantage of all features offered by Couchbase Server, you need to know what
				version of Couchnode provides compatibility for the features you want to use. The
				following matrix shows which versions of Couchnode support the major features of
				each version of Couchbase Server.</p>
			<table frame="all" rowsep="1" colsep="1" id="table_qpl_ttq_44">
				<title>Couchbase Server and SDK Supported Version Matrix</title>
				<tgroup cols="6">
					<colspec colname="c1" colnum="1" colwidth="1.01*"/>
					<colspec colname="c2" colnum="2" colwidth="1.01*"/>
					<colspec colname="c3" colnum="3" colwidth="1.01*"/>
					<colspec colname="c4" colnum="4" colwidth="1.01*"/>
					<colspec colname="c5" colnum="5" colwidth="1.02*"/>
					<colspec colname="newCol6" colnum="6" colwidth="1*"/>
					<thead>
						<row>
							<entry/>
							<entry>Server 1.8</entry>
							<entry>Server 2.0</entry>
							<entry>Server 2.5</entry>
							<entry>Server 3.0</entry>
							<entry>Server 4.0</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry namest="c1" nameend="newCol6"><b>Basic Features</b></entry>
						</row>
						<row>
							<entry>CRUD Operations</entry>
							<entry namest="c2" nameend="newCol6">Since 1.0</entry>
						</row>
						<row>
							<entry>View Querying APIs</entry>
							<entry namest="c2" nameend="newCol6">Since 1.0</entry>
						</row>
						<row>
							<entry namest="c1" nameend="newCol6"><b>Advanced Features</b></entry>
						</row>
						<row>
							<entry>Durability Requirements</entry>
							<entry namest="c2" nameend="newCol6">Since 1.0</entry>
						</row>
						<row>
							<entry>Fast (CCCP) Bootstrapping</entry>
							<entry namest="c2" nameend="c3">Not Supported</entry>
							<entry namest="c4" nameend="newCol6">Since 1.2</entry>
						</row>
						<row>
							<entry>SSL Connectivity</entry>
							<entry namest="c2" nameend="c4">Not Supported</entry>
							<entry namest="c5" nameend="newCol6">Since 2.0</entry>
						</row>
						<row>
							<entry>Transparent Compression</entry>
							<entry namest="c2" nameend="c4">Not Supported</entry>
							<entry namest="c5" nameend="newCol6">Since 2.0</entry>
						</row>
						<row>
							<entry>Bulk Operations</entry>
							<entry namest="c2" nameend="newCol6">Since 1.0</entry>
						</row>
						<row>
							<entry>Cross-SDK Data types</entry>
							<entry>Not Supported</entry>
							<entry namest="c3" nameend="newCol6">Since 2.0</entry>
						</row>
						<row>
							<entry>N1QL Querying</entry>
							<entry namest="c2" nameend="newCol6">Since 1.2</entry>
						</row>
						<row>
							<entry namest="c1" nameend="newCol6"><b>Administrative
								Features</b></entry>
						</row>
						<row>
							<entry>Administrative API</entry>
							<entry namest="c2" nameend="newCol6">Since 1.0</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</section>

		<section>
			<title>Contributing</title>
			<p>Couchbase welcomes community contributions to the Node.js SDK. The <xref
					href="https://github.com/couchbase/couchnode" format="html" scope="external"
					>Couchnode source code</xref> is available on GitHub. If you would like to
				contribute code, read the <xref
					href="https://github.com/couchbase/couchnode/blob/master/CONTRIBUTING.md"
					format="html" scope="external">contributor's guide</xref> for details.</p>
		</section>
	</conbody>


</concept>
