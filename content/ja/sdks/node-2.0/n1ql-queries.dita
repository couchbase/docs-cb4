<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_bhv_nhq_44">
 <title>Working with N1QL queries</title>
 <shortdesc>You can perform Couchbase Query Language (N1QL) queries via Couchnode. </shortdesc>
 <conbody>
  <p>To send N1QL queries, you must specify a list of application query hosts through the
				<codeph>enableN1ql</codeph> method (a temporary necessity). After you have done this,
			you can perform a N1QL query by using the <codeph>query()</codeph> method, which accepts a
			query created through the N1qlQuery class. You receive an array of objects representing the
			results through your specified callback.</p>
		<p>The following example shows how to send a N1QL query:</p>
  <codeblock outputclass="language-javascript">var N1qlQuery = require('couchbase').N1qlQuery;
var myBucket = myCluster.openBucket();
var query = N1qlQuery.fromString('SELECT * FROM default');
myBucket.query(query, function(err, res) {
  if (err) {
    console.log(‘query failed’, err);
    return;
  }
  console.log(‘success!’, res);
});</codeblock>
 	
 	<p>Sample output from the example:</p>
 	<codeblock outputclass="language-javascript">success! [
  { field_name: ‘value’ },
  { field_name: ‘value’ }
]</codeblock>
    <note>Unlike <codeph>ViewQuery</codeph> type queries, the <codeph>N1qlQuery</codeph> type
			queries are not currently capable of streaming rows individually, and instead you must
			always receive the full result once the query has fully completed.</note>
   
   
   
   <section>
     <title>Adhoc Queries vs Frequent Queries</title>
     <p>
       When you often execute a <codeph>N1qlQuery</codeph> it can be interesting to let the SDK and the query engine attempt additional optimizations.
     </p>
     <p>
       By default, a <codeph>N1qlQuery</codeph> will be considered "ad hoc" (no additional optimization is done). By calling <codeph>.adhoc(false)</codeph> on your query you can mark it for further optimization by the SDK and the query engine. It will be prepared on the server and all subsequent invocations of this query will benefit from the prepared execution plan.
     </p>
     <note type="tip">
       Other <codeph>N1qlQuery</codeph> instances with the <b>same statement</b> (but different placeholder values for example) will also benefit from the optimization, as long as they are marked as <codeph>adhoc(false)</codeph>.
     </note>
     <p>
       The SDK will retry to prepare a plan once if the server is unable to execute the cached plan. It will cache plans for up to 5000 statements locally.
     </p>
   </section>
 </conbody>
</concept>
