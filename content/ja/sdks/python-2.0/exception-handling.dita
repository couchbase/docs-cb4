<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_ibc_p1w_tt">
    <title>Handling Exceptions</title>
    <shortdesc>Python exceptions are thrown when an error is encountered. In the Couchbase Python
        SDK, exceptions are structured in a class hierarchy, with each exception belonging to one or
        more categories (in the form of base classes):</shortdesc>
    <conbody>
        <p>All Couchbase exceptions are derived from <apiname>CouchbaseError</apiname>. Exceptions
            may be caught via <codeph>except</codeph>. You may catch specific exceptions for
            specific handling, or you may catch the <codeph>CouchbaseError</codeph> and handle
            exceptions based on their status codes.</p>
        <section>
            <title>CouchbaseDataError</title>
            <p>This error category is raised when there is a data logic error (for example, a
                missing document ID). Handling of this error depends on application logic (for
                example, either perform corrective action to insert the document, or return an error
                up the stack indicating the specified resource does not exist).<note>Read more about
                    data errors here: <xref
                        href="../../developer-guide/error-handling.dita#concept_ybj_tqs_zs/devguide-data-errors"
                    /></note></p>
        </section>
        <section><title>ArgumentError</title>This type of exception is thrown during argument/input
            validation. It indicates that one or more arguments passed to a method are invalid. You
            should determine how and why the application is passing invalid input to the
            SDK</section>
        <section><title>CouchbaseNetworkError and CouchbaseTransientError</title>This error category
            indicates a connectivity issue between the SDK and the Couchbase Cluster. This error
            might be a result of a temporary condition or a systematic infrastructure failure. See
                <xref
                href="../../developer-guide/error-handling.dita#concept_ybj_tqs_zs/devguide-transient-errors"
                    />.<p><apiname>TimeoutError</apiname> and <apiname>NetworkError</apiname> are
                subclasses of these error types.</p><p>One noteworthy corrective action is
                performing a <xref
                    href="../../developer-guide/error-handling.dita#concept_ybj_tqs_zs/devguide-replica-read"
                    >replica read</xref> if attempting to retrieve a document from an unreachable
                server.</p></section>
        <section><title>ObjectThreadError</title>This error is thrown when access is detected from
            multiple concurrent threads. See <xref href="threads.dita#topic_xwh_pdq_3q"/> for
            information on configuring the SDK in a threaded Python application.</section>
        <section><title>Anatomy of an exception object</title><p>The Python SDK makes full use of
                the fact that a Python exception is just an object. In addition to catching the
                exception itself, the exception object may be analyzed for more information
                regarding the failure, and in the case of batched operations, may be inspected to
                determine which operations failed and which succeeded.</p>Applications may use the
                <apiname>is_data</apiname> property on a <apiname>CouchbaseError</apiname> instance
            to determine if the error is a negative reply from the server; the property will
            evaluate to <codeph>True</codeph> for situations where a key is not found, already
            exists, and so on. Likewise applications may use the <apiname>is_network</apiname>
            property to determine if the exception is a result of a potential network issue (and is
            thus not an issue with the data, but rather an issue concerning the connectivity between
            client and server).<p>All exceptions which are either data errors or network errors will
                contain a non-zero status code from the underlying C library; this status code may
                be obtained using the <apiname>rc</apiname> property of the exception. Exceptions
                which contain an <apiname>rc</apiname> value of 0 are typically
                    <apiname>ArgumentErrors</apiname> which are thrown when a method was supplied
                with an invalid parameter, or an invalid combination of parameters.</p></section>
    </conbody>
</concept>
