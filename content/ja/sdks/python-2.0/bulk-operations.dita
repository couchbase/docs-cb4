<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_emk_nhq_44">
    <title>Bulk operations</title>
    <shortdesc>You can perform many operations at once by using the <codeph>_multi</codeph> family
        of methods. </shortdesc>
    <conbody>
        <note>See Couchbase Developer documentation: <xref
                href="../../developer-guide/batching-operations.dita#concept_qfq_5jg_1t"/></note>
        <p>Most API functions have both single and multi-key (batched) variants. The batched variant
            has the same name as the single-key variant, but its method name has
                <codeph>_multi</codeph> appended to it. The <i>twisted</i> module also accepts the
                <i>camelCased</i> variants of <codeph>getMulti</codeph>,
                <codeph>upsertMulti</codeph> and the like to conform with standard Twisted naming
            conventions.</p>
        <p>The batched operations are significantly quicker and more efficient, especially when
            dealing with many small values, because they allow pipelining of requests and responses,
            saving on network latency.</p>
        <p>Batched operations tend to accept an iterable of keys (or a dict of keys, depending on
            the method) and return a dictionary of the following format:</p>
        <codeblock outputclass="language-python">c.get_multi(["key1", "key2", "key3"])

{
    "key1" : ValueResult(...),
    "key2" : ValueResult(...),
    "key3" : ValueResult(...)
}</codeblock>
        <section><title>Storing and retriving multiple items</title><p>To store multiple items, use
                the <codeph>upsert_multi</codeph> method. This accepts a dictionary of document IDs
                and their values. To retrieve multiple IDs, pass a Python <codeph>list</codeph>,
                    <codeph>tuple</codeph>, or <codeph>set</codeph> containing the document IDs to
                retrieve.</p><codeblock outputclass="language-python">from couchbase.bucket import Bucket
from pprint import pprint

bkt = Bucket('couchbase://192.168.33.101/default')
rvs = bkt.upsert_multi({
    'foo': 'foovalue',
    'bar': 'barvalue',
    'baz': 'bazvalue'
})
pprint(rvs)

print ""
print "Getting items"
rvs = bkt.get_multi(('foo', 'bar', 'baz'))
pprint(rvs)</codeblock>Outputs:<screen>{u'bar': OperationResult&lt;RC=0x0, Key=u'bar', CAS=0xd8b0c8ba8960aa13>,
 u'baz': OperationResult&lt;RC=0x0, Key=u'baz', CAS=0xb02b02bb8960aa13>,
 u'foo': OperationResult&lt;RC=0x0, Key=u'foo', CAS=0x183e87bb8960aa13>}

Getting items
{u'bar': ValueResult&lt;RC=0x0, Key=u'bar', Value=u'barvalue', CAS=0xd8b0c8ba8960aa13, Flags=0x2000000>,
 u'baz': ValueResult&lt;RC=0x0, Key=u'baz', Value=u'bazvalue', CAS=0xb02b02bb8960aa13, Flags=0x2000000>,
 u'foo': ValueResult&lt;RC=0x0, Key=u'foo', Value=u'foovalue', CAS=0x183e87bb8960aa13, Flags=0x2000000>}</screen></section>
        <section><title>Handling errors in bulk operations</title>Like their single item
            counterparts, the client will raise exceptions if they are encountered during a bulk
            operation. You can simply catch and handle the exception normally, just as in the
            single-item methods. Sometimes however, you may wish to determine which specific item
            failed and take action upon it. A <apiname>CouchbaseError</apiname> instance contains an
                <codeph>all_results</codeph> property which contains the dictionary which
                <i>would</i> have been returned, had the operation not failed. In the case of an
            exception, you can iterate over the items in the dictionary and handle only those whose
                <codeph>success</codeph> method is
            <codeph>False</codeph><codeblock outputclass="language-python">c.insert("foo", "foo value")

try:
    c.insert_multi({
        "foo" : "foo value",
        "bar" : "bar value",
        "baz" : "baz value"
    })
except CouchbaseError as exc:
    for k, res in exc.all_results.items():
        if res.success:
            # Handle successful operation
        else:
            print "Key {0} failed with error code {1}".format(k, res.rc)
            print "Exception {0} would have been thrown".format(
                CouchbaseError.rc_to_exctype(res.rc))</codeblock>In
            the example above, we <codeph>insert</codeph> the <codeph>foo</codeph> ID; then we
            attempt to <codeph>insert</codeph> the items of <codeph>foo, bar, baz</codeph>. In this
            case, the first item will fail but the others may succeed.<p>For retrieval operations
                you may use the <codeph>quiet=True</codeph> keyword argument to suppress
                    <codeph>NotFoundError</codeph> exceptions. In this case you will need to iterate
                over the returned dictionary object to determine which items failed or not. As an
                added convenience, the dictionary object is actually a <codeph>MultiResult</codeph>
                object which inherits from <codeph>dict</codeph>. You may query the
                    <codeph>all_ok</codeph> property of the returned object to determine if all
                items succeeded or not, which may be more efficient than iterating over all the
                items<codeblock outputclass="language-python">rvs = bkt.get_multi(('foo', 'bar', 'baz'), quiet=True)
if not rvs.all_ok:
    # Some items failed:
    for k, v in rvs.iteritems():
        if not v.success:
            # Handle failure</codeblock></p></section>
        <section><title>Bulk operations in the Twisted API</title>The Twisted API contains the
                <apiname>getMulti</apiname> and <apiname>upsertMulti</apiname> family of methods,
            however the need for these calls is typically not as great as it is within the
            synchronous API. Items are efficiently pipelined in an internal queue and are only sent
            to the cluster (in bulk) once control is returned back to the underlying
                <codeph>reactor</codeph>. Using bulk operations may still help decrease CPU usage
            and may be more intuitive for your application to handle if the items are treated as a
                collection.<p>As in their synchronous counterparts, the <codeph>callback</codeph>
                for a <codeph>Deferred</codeph> returned from a multi method contains the
                    <apiname>MultiResult</apiname> dictionary subclass, and may be used like
            so:</p><codeblock outputclass="language-python">from twisted.internet import reactor
from txcouchbase.bucket import Bucket
from pprint import pprint

def on_store_ok(results):
    print "Stored results"
    pprint(results)

def on_get_ok(results):
    print "Retrieve results:"
    pprint(results)

bkt = Bucket('couchbase://192.168.33.101/default')
bkt.upsertMulti({
    'foo': 'foovalue',
    'bar': 'barvalue',
    'baz': 'bazvalue'
}).addCallback(on_store_ok)

bkt.getMulti(('foo', 'bar', 'baz')).addCallback(on_get_ok)
reactor.run()</codeblock><screen>Stored results
{u'bar': OperationResult&lt;RC=0x0, Key=u'bar', CAS=0x28f307217e61aa13>,
 u'baz': OperationResult&lt;RC=0x0, Key=u'baz', CAS=0xe8f9d7207e61aa13>,
 u'foo': OperationResult&lt;RC=0x0, Key=u'foo', CAS=0x505a50217e61aa13>}
Retrieve results:
{u'bar': ValueResult&lt;RC=0x0, Key=u'bar', Value=u'barvalue', CAS=0x28f307217e61aa13, Flags=0x2000000>,
 u'baz': ValueResult&lt;RC=0x0, Key=u'baz', Value=u'bazvalue', CAS=0xe8f9d7207e61aa13, Flags=0x2000000>,
 u'foo': ValueResult&lt;RC=0x0, Key=u'foo', Value=u'foovalue', CAS=0x505a50217e61aa13, Flags=0x2000000>}</screen></section>
    </conbody>
</concept>
