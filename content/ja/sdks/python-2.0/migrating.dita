<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_skf_b4r_2r">
	<title>Migrating from the 1.x SDK</title>
	<shortdesc>Version 2.0 of the Couchbase Python SDK offers a slightly different API from its
		predecessors. This section explains how to migrate an application from the 1.x to the 2.x
		SDK.</shortdesc>
	<body>

		<p>Older code using the more common APIs will still continue to function properly (though
			depending on the Python version, might print various deprecation warnings to the screen).
			However, it is recommended for clarity that even if the application functions using the
			older API, it should be migrated to the newer API (because it is more concise and
			consistent).</p>

		<section><title>C Library Dependencies</title>The Python 2.0 SDK requires the C SDK
			(libcouchbase) version 2.4.7 or greater.</section>

		<section>
			<title>Connecting</title>
			<p>The initial connection process has been changed to use a <xref
					href="managing-connections.dita#concept_ppz_lhq_44">connection string</xref> rather
				than discrete keyword arguments. Additionally, the <codeph>Couchbase</codeph> class is
				deprecated. Here is a summary of the key differences:</p>
			<ul>
				<li>The main class, which is used as the object that represents a connection to a
					bucket, has been renamed to <codeph>Bucket</codeph> (specifically,
						<codeph>couchbase.bucket.Bucket</codeph>) from <codeph>Connection</codeph>
						(<codeph>couchbase.connection.Connection)</codeph>.</li>
				<li>Creating a new connection to a bucket is done by invoking the
						<codeph>Bucket</codeph> constructor directly, and providing it with a connection
					string.</li>
			</ul>
			<p>The following code snippets show how to connect to a bucket named
					<codeph>someBucket</codeph> using hosts <codeph>cb1</codeph>, <codeph>cb2</codeph>
				and <codeph>cb3</codeph> with a password of <codeph>s3cr3t</codeph>:</p>
			<codeblock spectitle="Connecting using 1.x" outputclass="language-python">from couchbase import Couchbase
cb = Couchbase.connect(bucket='someBucket', hosts=['cb1','cb2','cb3'], password='s3cr3t')</codeblock>
			<codeblock spectitle="Connecting using 2.x" outputclass="language-python">from couchbase.bucket import Bucket
cb = Bucket('couchbase://cb1,cb2,cb3/someBucket', password='s3cr3t')</codeblock>
		</section>

		<section>
			<title>CRUD Operations</title>
			<p>CRUD (key-value) operations retain the same semantics. However, some of the names have
				been modified to be consistent with other 2.x-versioned SDKs.</p>
			<table frame="all" rowsep="1" colsep="1" id="table_xl2_gqr_2r">
				<title>CRUD Methods</title>
				<tgroup cols="2">
					<colspec colname="c1" colnum="1" colwidth="1.0*" colsep="1"/>
					<colspec colname="c2" colnum="2" colwidth="1.0*" colsep="1"/>
					<thead>
						<row>
							<entry>1.x Name</entry>
							<entry>2.x Name</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry><codeph>set</codeph></entry>
							<entry><codeph>upsert</codeph></entry>
						</row>
						<row>
							<entry><codeph>add</codeph></entry>
							<entry><codeph>insert</codeph></entry>
						</row>
						<row>
							<entry><codeph>incr</codeph></entry>
							<entry><codeph>counter(key, <i>amount=1</i>)</codeph></entry>
						</row>
						<row>
							<entry><codeph>decr</codeph></entry>
							<entry><codeph>counter(key, <i>amount=<b>-</b>1)</i></codeph></entry>
						</row>
					</tbody>
				</tgroup>
			</table>Note that the same conversion rules apply for any of the <i>multi</i> methods. For
			example, <codeph>set_multi</codeph> becomes <codeph>upsert_multi</codeph> and so
			on.</section>

		<section>
			<title>Design Document Management</title>
			<p>Design document management methods are now accessible via the
					<codeph>BucketManager</codeph> class. A <codeph>BucketManager</codeph> class is
				obtained via the <codeph>bucket_manager()</codeph> method. For example, to create a new
				design document:</p>
			<codeblock spectitle="Creating a design document with 1.x" outputclass="language-python">cb.design_create('user_profiles', design_json)</codeblock>
			<codeblock spectitle="Creating a design document with 2.x" outputclass="language-python">cb.bucket_manager().design_create('user_profiles', design_json)</codeblock>
		</section>

		<section><title>Exception Classes</title>2.x adds some new exception classes and semantics. Thus,
			in 2.x, the library attempts to be more detailed about various errors (mainly network
			failures) and throw an appropriate error class (usually subclassed from
				<codeph>CouchbaseNetworkError</codeph>) indicating what error actually occurred. You can
			use the (private) <codeph>bucket._cntlstr("detailed_errcodes", "0")</codeph> to disable
			this feature and revert back to 1.x exception semantics.</section>

		<section>
			<title>View Queries</title>
			<p>The view query system has remained largely compatible with its 1.x predecessor. Here are
				the main differences:</p>
			<ul>
				<li>The streaming option is now deprecated. All views are now effectively streaming.
					Specifying this option will not throw an exception, but will be silently ignored by
					the SDK.</li>
				<li>The <codeph>include_docs</codeph> parameter is no longer propagated to the
						<codeph>RowProcessor</codeph> class. Rather, it is handled internally by
					libcouchbase. Each raw JSON row will have a field named
						<codeph>__DOCRESULT__</codeph> if the library has retrieved its associated
					document. Using the <codeph>RowProcessor</codeph> class in general is discouraged
					because its main use case (efficiently fetching associated documents) is largely
					assumed by the underlying C library.</li>
			</ul>
		</section>

		<section>
			<title>Twisted API</title>
			<p>The Twisted framework largely follows the same API as the synchronous client, so the changes mentioned above are also applicable to applications that use the Twisted API.
				In addition, the
				preferred way for connecting is by using <codeph>txcouchbase.bucket</codeph> (similar to
					<codeph>couchbase.bucket</codeph>), rather than
					<codeph>txcouchbase.txconnection</codeph>.</p>
		</section>

		<section>
			<title>gevent API</title>
			<p>The gevent framework largely follows the same API as the synchronous client, so the changes mentioned above are also applicable to applications that use the gevent API.
				In addition, the preferred
				way for connecting is by using <codeph>gcouchbase.bucket</codeph> (similar to
					<codeph>couchbase.bucket</codeph>) rather than
				<codeph>gcouchbase.connection</codeph>.</p>
		</section>
	</body>
</topic>
