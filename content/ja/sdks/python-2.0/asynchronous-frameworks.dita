<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_ojz_1hg_2r">
	<title>Using asynchronous frameworks</title>
	<shortdesc>In addition to the simple synchronous API, the Python SDK supports native integration
		with <i>gevent</i> and <i>twisted</i> asynchronous frameworks for high network
		performance.</shortdesc>

	<conbody>
        <note>See <xref href="../../developer-guide/async-clients.dita#concept_lln_jlg_1t"/> for a
            general overview on asynchronous/reactive programming and the performance benefits
            possible when used with Couchbase.</note>

		<section>
			<title>gevent API</title>
			<p><xref href="http://www.gevent.org" format="html" scope="external">gevent</xref> is a
				high performance asynchronous framework. It is very powerful in that it allows for a
				(mostly) traditional synchronous coding style. It accomplishes this by using coroutines
				known as <term>greenlets</term> or <term>eventlets</term>.</p>
			<p>The gevent API is almost identical to the simple synchronous API, though it requires
				that a different module be imported to properly integrate with
				gevent.<codeblock outputclass="language-python">from gcouchbase.bucket import Bucket
bucket = Bucket('couchbase://localhost/default')
bucket.upsert('id', {'some':['value']})
print bucket.get('id').value</codeblock></p>
		</section>
		<section>
			<title>Twisted API</title>
			<p><xref href="http://twistedmatrix.com" format="html" scope="external">Twisted</xref> is a
				high performance and very mature Python asynchronous
				framework.</p>
<codeblock outputclass="language-python">from twisted.internet import reactor
from txcouchbase.bucket import Bucket
bucket = Bucket('couchbase://localhost/default')

def on_ok(result):
    print "Operation succeeded"
    if hasattr(result, 'value'):
        print "Value is", result.value

def on_err(err):
    print "Operation failed", err

bucket.upsert('id', {'some':['value']}).addBoth(on_ok, on_err)
bucket.get('id').addBoth(on_ok, on_err)</codeblock>
		</section>

	</conbody>
</concept>
