<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_bhv_nhq_44">
 <title>Working with N1QL
      queries</title>
 <shortdesc>Pronounced “nickel”, N1Ql is Couchbase’s next generation language for querying JSON
		documents. </shortdesc>
 <conbody>
   <p>Similar in syntax to traditional SQL found in all relational databases, N1QL is an
     extended non-first normal form variation that allows you to query nested structures commonly
     found within the document domain. SDK support for N1QL can be found at these levels: low-level
     support for ad hoc N1QL queries and at a higher-level abstraction as a Language-Integrated Query (LINQ) provider (currently
     in development).</p>
   <p>At the time of writing, N1QL is available as part of Couchbase Server 4.0 developer preview. The client currently only supports N1QL when all nodes in the cluster are running it.</p>
   <p>For running ad hoc N1QL queries the client has a single method, which takes a string that must be a valid N1QL query. Here is an example of executing a simple query using the SDK:
   </p>
   <codeblock outputclass="language-csharp">
 const string query = "SELECT c FROM tutorial as c";
 var result = bucket.Query&lt;dynamic>(query);
 foreach (var row in result.Rows)
 {
     Console.WriteLine(row);
 }
   </codeblock>
   <p>The example creates a query that targets the tutorial bucket, aliases it as <codeph>c</codeph>
			and returns all of the child elements from the documents in that bucket. Then it executes
			the query using the <apiname>IBucket.Query(...)</apiname> method, typing it as a common
			language runtime (CLR) dynamic type. The result of the query is then iterated over and
			displayed to <codeph>stdout</codeph>.</p>
   <p>The return type of the <apiname>IBucket.Query</apiname> method is an object implementing the
				<apiname>IQueryResult&lt;T></apiname> interface and contains the following properties: </p>
    <p>
        <table id="table_c5m_svd_3p">
          <tgroup cols="2">
            <colspec colnum="1" colname="col1"/>
            <colspec colnum="2" colname="col2"/>
            <thead>
              <row>
                <entry >Name</entry>
                <entry >Description</entry>
              </row>
            </thead>
            <tbody>

              <row>
                <entry><codeph>Error</codeph></entry>
                <entry >The error message returned by the N1QL engine</entry>
              </row>
              <row>
                <entry><codeph>Rows</codeph></entry>
                <entry>A <codeph>List&lt;T&gt;</codeph> of T, which is the result of the
								query</entry>
              </row>
              <row>
                <entry><codeph>Success</codeph></entry>
                <entry >true if the query completed successfully</entry>
              </row>

            </tbody>
          </tgroup>
        </table>
      </p>

      <p>
          You can also construct a query via the <codeph>IQueryRequest</codeph> interface, which allows more parameters to be set for the N1QL service.
      </p>

      <section>
          <title>Reading your own writes (RYOW)</title>
          <p>
              To read your own writes, you need to use the <codeph>IQueryRequest</codeph> API. There's an <codeph>ScanConsistency</codeph> method that can be used for that, with the <codeph>REQUEST_PLUS</codeph> value:
              <codeblock outputclass="language-csharp">
var request = QueryRequest.Create("SELECT * FROM default");
request.ScanConsistency(ScanConsistency.REQUEST_PLUS);
bucket.Query(request);
              </codeblock>
          </p>
      </section>

 </conbody>
</concept>
