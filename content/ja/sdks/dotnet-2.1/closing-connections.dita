<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_c5w_ppk_3p">
 <title>Closing the connection</title>
    <shortdesc>Both <codeph>Cluster</codeph> and <codeph>IBucket</codeph> objects implement the
		IDisposable pattern and also have finalizers. </shortdesc>
 <conbody>
     <p>Managing the lifetime of the objects <codeph>Cluster</codeph> and <codeph>IBucket</codeph> is critical for developing robust, high
            performance applications. In a typical application, you would create a single, static
                <codeph>Cluster</codeph> object that would live for the duration of the application
            or the process’s lifetime—create the <codeph>Cluster</codeph> object when the
            application starts and call it’s <apiname>Dispose</apiname> method when the application
            shuts down. Depending upon finalization is not suggested, but admissible in certain
            applications.</p>
        <section>
            <title>Closing the bucket</title>
            <p>You can close a bucket and release the internal connections by using one of the
                following methods: </p>
            <ul>
                <li>Through finalization and garbage collection (GC)</li>
                <li>Calling <codeph>Dispose</codeph> explicitly or implicitly via the
                        <codeph>using</codeph> statement</li>
                <li>By calling <codeph>Cluster.CloseBucket()</codeph> and passing the bucket
                    reference</li>
            </ul>
            <p>Using finalization and garbage collection is the least dependable method and relies
                on a certain amount of nondeterminism because you are relying on the common language
                runtime (CLR) finalization mechanism; just let the object go out of scope. The other
                methods are preferred because you deterministically control the object's lifetime.
                Here is an example that uses the <codeph>Cluster.CloseBucket()</codeph> method: </p>
            <codeblock outputclass="language-csharp">
  using (var cluster = new Cluster(config))
  {
      IBucket bucket = null;
      try
      {
          bucket = cluster.OpenBucket();
          //use the bucket here
      }
      finally
      {
          if (bucket != null)
          {
              cluster.CloseBucket(bucket);
          }
      }
  }
		</codeblock>
            <note type="important">References to the <apiname>CouchbaseBucket</apiname> (or
                    <apiname>MemcachedBucket</apiname>) are reference counted because multiple
                threads might be using the same object. If multiple threads are using the bucket and
                each calls <apiname>Cluster.CloseBucket()</apiname> or <apiname>Dispose()</apiname>,
                either implicitly through the <codeph>using</codeph> statement or explicitly, the
                instance will not be disposed until the reference count reaches zero.</note>
        </section>
    </conbody>
</concept>
