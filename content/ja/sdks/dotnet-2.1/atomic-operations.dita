<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_iqn_nhq_44">
 <title>Atomic operations</title>
	<shortdesc>Besides the basic CRUD operations such as <apiname>Insert()</apiname>,
			<apiname>Replace()</apiname> and <apiname>Remove()</apiname>, the Couchbase SDK also
		supports atomic operations on a document.</shortdesc>
 <conbody>
		<p>The following table lists the atomic operations that are supported:</p>
		<p>
				<table id="table_sht_2nd_3p">
					<tgroup cols="2">
					<colspec colnum="1" colname="col1" colwidth="1*"/>
					<colspec colnum="2" colname="col2" colwidth="4*"/>
					<thead>
						<row>
							<entry>Name</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry><apiname>Increment</apiname></entry>
							<entry>Increments the value of a key by a given delta</entry>
						</row>
						<row>
							<entry><apiname>Decrement</apiname></entry>
							<entry>Decrements the value of a key by a given delta</entry>
						</row>
						<row>
							<entry><apiname>Append</apiname></entry>
							<entry>Appends to the back of the value of a given key</entry>
						</row>
						<row>
							<entry><apiname>Prepend</apiname></entry>
							<entry>Prepends to the front of the value of a given key</entry>
						</row>
					</tbody>
				</tgroup>
				</table>
			</p>
 	<p>Increment and decrement are often used as counters for game statistics or perhaps for tallying
 		likes or up votes in a social media application. Here is an example of using <apiname>Increment()</apiname>
 		and <apiname>Decrement()</apiname>:</p>
 	<codeblock outputclass="language-csharp">
 	static Cluster _cluster = new Cluster();

        static void Main(string[] args)
        {
            using (var bucket = _cluster.OpenBucket())
            {
                var key = "stats::counter1";
                Increment(bucket, key);
                Increment(bucket, key);
                Decrement(bucket, key);
                Decrement(bucket, key);
                Decrement(bucket, key);
            }
            _cluster.Dispose();
            Console.Read();
        }

        static void Increment(IBucket bucket, string key)
        {
            var result = bucket.Increment(key);
            if (result.Success)
            {
                Console.WriteLine(result.Content);
            }
        }

        static void Decrement(IBucket bucket, string key)
        {
            var result = bucket.Decrement(key);
            if (result.Success)
            {
                Console.WriteLine(result.Content);
            }
        }
 	</codeblock>
 	<p>The <apiname>Increment()</apiname> or <apiname>Decrement()</apiname> operation will return the current value of the counter key after being called. Additional overloads allow a time-to-live (TTL) to be associated with a key and others allow you to control the delta of the increase or decrease and an optional starting point.</p>
 	<note>The key you are incrementing or decrementing should be created by calling the
				<apiname>Increment()</apiname> or <apiname>Decrement()</apiname> themselves, not by
			using one of the other creational operations, such as <apiname>Insert()</apiname> or
				<apiname>Upsert()</apiname>. The reason is that the server stores the value as the ASCII
			representation and not as a 64-bit integer. </note>
 	<p>Decrementing the counter will not result in a negative value, instead it will be set to zero.
			Incrementing the counter might cause the counter to wrap.</p>
	</conbody>
</concept>
