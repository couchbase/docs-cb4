<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_zrc_p5b_r5">
  <title>Atomic operations</title><shortdesc>The <codeph>CouchbaseBucket</codeph> class provides atomic operations such as
    <codeph>counter()</codeph>, <codeph>append()</codeph>, and <codeph>prepend()</codeph>.</shortdesc>
  <body>
    <section>
      <title>Counter</title>


      <p>The <codeph>counter()</codeph> method allows you to increment or decrement a document with
        a numerical content atomically. The method only accepts and returns a
          <codeph>JsonLongDocument</codeph>. The value stored in the document is incremented or
        decremented depending on the given <codeph>delta</codeph>: if the delta value is a positive
        number, the value is incremented, and if it is a negative number, the value is decremented.
        You can also pass in an initial value and an expiration time.</p>


      <codeblock outputclass="language-java"><![CDATA[// Increase the counter by 5 and set the initial value to 0 if it does not exist
JsonLongDocument doc = bucket.counter("id", 5, 0);]]></codeblock>

      <p>The resulting document contains the new counter value. A very common use case is to implement
        an increasing <codeph>AUTO_INCREMENT</codeph> like counter, where every new user just
        gets a new ID (here using the asynchronous API):</p>

      <codeblock outputclass="language-java"><![CDATA[bucket.async()
    .counter("user::id", 1, 1)
    .map(new Func1<JsonLongDocument, String>() {
        @Override
        public String call(JsonLongDocument counter) {
            return "user::" + counter.content();
        }
    })
    .flatMap(new Func1<String, Observable<JsonDocument>>() {
        @Override
        public Observable<JsonDocument> call(String id) {
            return bucket.insert(JsonDocument.create(id, JsonObject.empty()));
        }
    }).subscribe();]]></codeblock>


      <p>This code increases the counter by one, and then maps the returned number onto a custom
        document ID (here the code prefixes <codeph>user::</codeph>). Afterward, the
          <codeph>insert</codeph> method is executed with the generated ID and an empty document
        content. Because a <codeph>counter</codeph> operation is atomic, the code is guaranteed to
        deliver different user IDs, even when called at the same time from multiple threads.</p>

      <p>The counter always needs to be
        greater than or equal to zero because negative values are not allowed. If you want to
        decrement a counter, make sure to set it to a value greater than zero initially.</p>



      <p>If the initial value is omitted and the counter doesn't exists, this is signaled to the
        user by propagating a <codeph>DocumentDoesNotExistException</codeph> (since 2.2.0). You can
        avoid that by providing an explicit initial value, which could be the same as the delta or
        even an arbitrary initial value (the delta won't be added to it at counter creation):</p>

      <codeblock outputclass="language-java"><![CDATA[// Increase the counter by 5 or create the counter with a value of 4 if it does not exist
JsonLongDocument doc = bucket.counter("id", 5, 4);]]></codeblock>

      <p>If you want to set an expiration time, you need to provide both the initial value and the
        expiration time. This constraint is imposed by the API because just exposing the expiration
        time would be ambiguous with the initial value (<codeph>long</codeph> and
          <codeph>int</codeph>).</p>


      <codeblock outputclass="language-java"><![CDATA[// Increment by 5, initial 5 and 3 second expiration
JsonLongDocument doc = bucket.counter("id", 5, 5, 3);]]></codeblock>

    </section>

    <section>
      <title>Append &amp; Prepend</title>

      <p>Appending and prepending values to existing documents is also possible. Both the
          <codeph>append</codeph> and <codeph>prepend</codeph> operation are atomic so that they can
        be used without further synchronization.</p>


      <p>
        <note>Both operations only work on binary documents, ideally strings or byte arrays. It does not
          work on JSON documents because it doesn't do any further inspection. Applying
          one of those operations on a JSON document will render it invalid.</note>
      </p>

      <p>A <codeph>Document</codeph> needs to be created before values can be appended or prepended.
        Here is an example that creates a document and then appends a string to it:</p>

      <codeblock outputclass="language-java"><![CDATA[bucket
    .insert(LegacyDocument.create("doc", "Hello, "))
    .flatMap(doc ->
        bucket.append(LegacyDocument.create("doc", "World!"))
    )
    .flatMap(bucket::get)
    .toBlocking()
    .forEach(doc -> System.err.println(doc.content()));]]></codeblock>

      <p>When executed, this code prints <codeph>Hello, World!</codeph>.</p>
    </section>

    <section>
      <title>Durability Requirements</title>


      <p>If no durability requirements are set on the <codeph>append</codeph>, <codeph>prepend</codeph>
        or <codeph>counter</codeph> methods, the operation will succeed when the server
        acknowledges the document in its managed cache layer. While this is a performant
        operation, there might be situations where you want to make sure that your document
        has been persisted or replicated so that it survives power outages and other node
        failures.</p>


      <p>All atomic operations provide overloads to supply such durability requirements:</p>

      <codeblock outputclass="language-java"><![CDATA[D append(D document, PersistTo persistTo);
D append(D document, ReplicateTo replicateTo);
D append(D document, PersistTo persistTo, ReplicateTo replicateTo);

D prepend(D document, PersistTo persistTo);
D prepend(D document, ReplicateTo replicateTo);
D prepend(D document, PersistTo persistTo, ReplicateTo replicateTo);

JsonLongDocument counter(String id, long delta, PersistTo persistTo);
JsonLongDocument counter(String id, long delta, ReplicateTo replicateTo);
JsonLongDocument counter(String id, long delta, PersistTo persistTo, ReplicateTo replicateTo);

JsonLongDocument counter(String id, long delta, long initial, PersistTo persistTo);
JsonLongDocument counter(String id, long delta, long initial, ReplicateTo replicateTo);
JsonLongDocument counter(String id, long delta, long initial, PersistTo persistTo, ReplicateTo replicateTo);

JsonLongDocument counter(String id, long delta, long initial, int expiry, PersistTo persistTo);
JsonLongDocument counter(String id, long delta, long initial, int expiry, ReplicateTo replicateTo);
JsonLongDocument counter(String id, long delta, long initial, int expiry, PersistTo persistTo, ReplicateTo replicateTo);]]></codeblock>

      <p>You can configure either just one or both of the requirements. From an application point of view nothing needs to be
        changed when working with the response, although there is something that need to be kept in mind:</p>

      <p>The internal implementation first performs a regular operation and afterward starts polling
        the specifically affected cluster nodes for the state of the document. If something
        fails during this operation (and failing the <codeph>observable</codeph>), the
        original operation might have succeeded nonetheless.</p>

    </section>
  </body>
</topic>
