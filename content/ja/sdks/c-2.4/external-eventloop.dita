<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<dita>
  <concept id="concept_nf3_kz4_p4">
    <title>Using external event loops</title>
    <shortdesc>You can use the library in a non-blocking fashion through
			integrating with an existing event loop created by your application.</shortdesc>
    <conbody>
      <p>The C SDK makes use of its own I/O abstraction layer known as <ph>IOPS</ph> (I/O
        OperationS) to communicate with the underlying platform and I/O frameworks. This abstraction
        layer provides an API which is used to perform common event loop operations, such as:<ul
          id="ul_qcl_yz4_p4">
          <li>Creating a new socket</li>
          <li>Performing reads and writes from and to the socket</li>
          <li>Scheduling a callback to be invoked when a socket is available for writing or
            reading</li>
          <li>Scheduling a callback to be invoked after a certain period has elapsed</li>
        </ul></p>
      <section>
        <title>Using a Built-In I/O implementation</title>
      <p>The library contains predefined implementations of this API for common event libraries,
          such as <i>libevent</i>, <i>libev</i>, and <i>libuv</i>. If your application makes use of
          any of these libraries for its purposes, integrating with the library is as simple as
          providing an instance of such an implementation to the <codeph>lcb_create_st</codeph>
          structure. Here is an example using
          <apiname>libevent</apiname>:<codeblock outputclass="language-c">#include &lt;stdio.h>
#include &lt;stdlib.h>
#include &lt;string.h>
#include &lt;event2/event.h>
#include &lt;libcouchbase/couchbase.h>

static void bootstrap_callback(lcb_t instance, lcb_error_t err)
{
    lcb_store_cmd_t cmd = { 0 };
    const lcb_store_cmd_t *cmdlist = &amp;cmd;

    if (err != LCB_SUCCESS) {
        fprintf(stderr, "ERROR: %s\n", lcb_strerror(instance, err));
        exit(EXIT_FAILURE);
    }

    // The client is now connected. We may start performing operations
    cmd.v.v0.key = "foo";
    cmd.v.v0.nkey = 3;
    cmd.v.v0.bytes = "bar";
    cmd.v.v0.nbytes = 3;
    cmd.v.v0.operation = LCB_SET;
    lcb_store(instance, NULL, 1, &amp;cmdlist);
}

static void get_callback(lcb_t instance, const void *cookie, lcb_error_t error,
                         const lcb_get_resp_t *resp)
{
    if (error != LCB_SUCCESS) {
        fprintf(stderr, "Failed to get key: %s\n", lcb_strerror(instance, error));
        exit(EXIT_FAILURE);
    }

    fprintf(stdout, "I stored and retrieved the key 'foo'. Terminate program\n");
    event_base_loopbreak((void *)lcb_get_cookie(instance));
}

static void store_callback(lcb_t instance, const void *cookie, lcb_storage_t operation,
                           lcb_error_t error, const lcb_store_resp_t *resp)
{
    lcb_get_cmd_t cmd = { 0 };
    const lcb_get_cmd_t *cmdlist = &amp;cmd;

    if (error != LCB_SUCCESS) {
        fprintf(stderr, "Failed to store key: %s\n", lcb_strerror(instance, error));
        exit(EXIT_FAILURE);
    }

    cmd.v.v0.key = "foo";
    cmd.v.v0.nkey = 3;
    lcb_get(instance, NULL, 1, cmds);
}

static lcb_io_opt_t create_libevent_io_ops(struct event_base *evbase)
{
    struct lcb_create_io_ops_st ciops;
    lcb_io_opt_t ioops;
    lcb_error_t error;

    memset(&amp;ciops, 0, sizeof(ciops));
    ciops.v.v0.type = LCB_IO_OPS_LIBEVENT;
    ciops.v.v0.cookie = evbase;

    error = lcb_create_io_ops(&amp;ioops, &amp;ciops);
    if (error != LCB_SUCCESS) {
        fprintf(stderr, "Failed to create IOPS: %s\n", lcb_strerror(NULL, error));
        exit(EXIT_FAILURE);
    }

    return ioops;
}

static lcb_t create_libcouchbase_handle(lcb_io_opt_t ioops)
{
    lcb_t instance;
    lcb_error_t error;
    struct lcb_create_st copts = { 0 };

    copts.version = 3;
    copts.v.v3.connstr ;
    copts.v.v3.io = ioops;
    lcb_create(&amp;instance, &amp;copts);
    lcb_connect(instance);
    lcb_set_bootstrap_callback(instance, bootstrap_callback);
    lcb_set_get_callback(instance, get_callback);
    lcb_set_store_callback(instance, store_callback);
    return instance;
}

int main(void)
{
    struct event_base *evbase = event_base_new();
    lcb_io_opt_t ioops = create_libevent_io_ops(evbase);
    lcb_t instance = create_libcouchbase_handle(ioops);

    // Store the evbase structure as the 'cookie' for this instance
    lcb_set_cookie(instance, evbase);

    // Run the event loop. The rest of the program will be executed from this
    // function.
    event_base_loop(evbase, 0);

    // Cleanup
    event_base_free(evbase);
    lcb_destroy(instance);
    exit(EXIT_SUCCESS);
}
</codeblock></p>
      <p><note>The previous example has some error checking left out for brevity. A fuller example
						can be found inside the <filepath>example/ibeventdirect</filepath> directory
						within the source tree.</note>In the above example, the
						<apiname>lcb_create_io_opts()</apiname> function is used to instantiate the
					built-in <i>libevent</i> implementation of the <ph>IOPS</ph> API. Note that the
						<codeph>lcb_create_io_ops_st</codeph> structure contains a <codeph>cookie</codeph>
					field which should contain a pointer to an implementation-defined object; in the case
					of the <i>libevent</i> implmentation this should be a pointer to an existing
						<codeph>struct event_base</codeph> (which is an instance of the libevent loop
					itself). Each of the built-in implementations contains its own header file that
					provides more detail about what the cookie field is supposed to contain. The header
					files are named in the form of <codeph>${TYPE}_io_opts.h</codeph>, where
						<codeph>${TYPE}</codeph> is the name of the implementation. They are located
					inside the <filepath>libcouchbase</filepath> include directory upon installation, and
					are located in the <filepath>plugins</filepath> directory within the source tree.</p>
      <p>After the IOPS instance has been created, it is set in the <codeph>io</codeph> field of the
						<codeph>lcb_create_st</codeph> structure and the <codeph>lcb_t</codeph> object is
					created.</p></section>
      <section>
				<title>Creating a custom I/O implementation</title>
				<note>The I/O interface is a work in progress and subject to change</note> A custom I/O
				implementation can be created by implementing the interface, featured in
					<filepath>&lt;libcouchbase/iops.h></filepath>. The interface is a work in progress
				and is considered to be volatile.</section>
      <section>
        <title>Usage Differences in Non-Blocking mode</title>
        <p>For the most part, programming with libcouchbase is the same regardless of whether you're
          using it in a blocking or non-blocking application. There are some key differences to
          note, however:<ul id="ul_t5m_vdp_p4">
            <li>l<apiname>cb_wait()</apiname> should not be called in non-blocking mode. By
							definition, the <apiname>lcb_wait()</apiname> routine will block the
							application until all pending I/O completes. In non-blocking mode the pending
							I/O is completed when control is returned back to the event loop.</li>
            <li>You must not schedule operations until the bootstrap callback,
								<apiname>lcb_set_bootstrap_callback()</apiname>, has been invoked. This is
							because operations must be forwarded to a destination node in the cluster
							depending on the key specified within the operation. Until the client has been
							bootstrapped it does not know how to forward keys to any nodes.<p>Unlike
								blocking mode where you may simply
								do:<codeblock outputclass="language-c">lcb_connect(instance);
lcb_wait(instance);
if (lcb_get_bootstrap_status(instance) == LCB_SUCCESS)) {
  // Start operations
}</codeblock>You
								need to use the callback variant that notifies your application when the
								library is ready.</p></li>
            <li>You are responsible for ensuring that the <codeph>iops</codeph> structure passed to
							the library remains valid until <apiname>lcb_destroy</apiname> is invoked.
							Likewise, you are responsible for freeing the <codeph>iops</codeph> structure
							via <apiname>lcb_destroy_io_opts()</apiname> when it is no longer
							required.</li>
            <li>Currently the library does blocking DNS lookups via the standard
								<apiname>getaddrinfo()</apiname> call. Typically this should not take a long
							time but may potentially block your application if an invalid host name is
							detected or the DNS server in use is slow to respond.</li>
          </ul></p>
      </section>
    </conbody>
  </concept>
</dita>
