<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_wtt_2jq_44">
 <title>Tuning and configuring</title>
 <shortdesc>You can change library defaults and behavior to better adapt to your application.</shortdesc>
 <conbody>
    <p>In addition to the initial settings passed to the client via the connection string, you can
			adjust properties of the client to better function in your specific environment. The
				<apiname>lcb_cntl()</apiname> function is used to retrieve or modify library settings on
			a per-instance basis. The general syntax for retrieving a setting
			is:<codeblock outputclass="language-c">lcb_U32 curval;
lcb_cntl(instance, LCB_CNTL_GET, LCB_CNTL_OPTIMEOUT, &amp;curval);</codeblock>And
			the general syntax for modifying a setting
			is:<codeblock outputclass="language-c">lcb_U32 newval = 4000000; // Set to 4 seconds
lcb_cntl(instance, LCB_CNTL_SET, LCB_CNTL_OPTIMEOUT, &amp;newval);</codeblock>By
			design, this API works similarly to the <codeph>setsockopt()</codeph>,
				<codeph>getsockopt()</codeph>, and <codeph>ioctl()</codeph> interfaces. It is passed an
			instance to operate on, a <i>mode</i> constant (what sort of access to perform), a
				<i>setting</i> constant (which setting to access) and finally the <i>value</i>, which is
			either written to or read from depending on whether the <i>mode</i> indicates a
			modification or a retrieval, respectively.</p>
    <p>The <apiname>lcb_cntl()</apiname> function returns an error code of
				<codeph>LCB_SUCCESS</codeph> if successful, <codeph>LCB_NOT_SUPPORTED</codeph> (or
				<codeph>LCB_ECTL_UNKNOWN</codeph>) if the <i>setting</i> is not known. Always check the
			return code and be prepared to take action if the specific operation is not supported in
			the specific version of the library.</p>
    <p>The constants are well defined and do not change between versions. Thus, if you intend to
			modify an optional setting and also intend to compile against a possibly older version of
			the library where the constant is not defined, you can use the raw numeric literal (for
			example, <codeph>0x1E</codeph>) rather than the symbolic name.</p>
    <p>The most recent settings are always found in the
				<filepath>&lt;libcouchbase/cntl.h></filepath> header file.</p>
        <p>Some options are also available in a simplified string format, in which the option names
			and values are strings. These may be set with the <apiname>lcb_cntl_string()</apiname>
			function or directly embedded into the connection string. The <xref
				href="options.dita#topic_k5w_kzt_4r" /> page lists some of the options.</p>
		<p>For best performance, keep in mind the following points:</p>
    <p>
      <ul id="ul_rkp_njq_44">
        <li>Only open a bucket once per application.</li>
        <li>Connections are expensive to establish (bootstrap period) and expensive to maintain
          (connection count). </li>
      </ul>
    </p>
   
  </conbody>
</concept>
