<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<!---->
<!---->
<concept id="concept_d1t_2wf_xt">
 <title>Preempting errors from bad servers</title>
 <shortdesc>If a server is known to be down by the application, the application may utilize some of
        the library's APIs to avoid sending keys mapped to that server.</shortdesc>
 <conbody>
        <p>In Couchbase architecture, keys are mapped to [vBuckets], which in turn are mapped to
            cluster nodes. When an operation is scheduled for a given key, the key is placed in a
            queue to be sent to a specific server. If you know that a certain server is down or
            unavailable, you can avoid scheduling the operation and fail the request immediately by
            determining if the key's destination server is indeed a failed server.</p>
        <p>In the C SDK the following steps should be used to determine the target host of a given
                key:<ol id="ol_zwx_t3v_xt">
                <li>Get the vBucket configuration object (via <apiname>lcb_cntl()</apiname>)</li>
                <li>Map the key to a server index (via <apiname>lcbvb_map_key()</apiname>)</li>
                <li>Get the <codeph>host:port</codeph> of the data node hosting the given key (via
                        <apiname>lcb_get_node()</apiname> or
                    <apiname>lcbvb_get_hostport()</apiname>)</li>
                <li>Strip the <codeph>:port</codeph> from the string to yield the hostname of the
                    target server.</li>
            </ol></p>
        <p>The following snippet shows how to do this in a single function (in
            C++)<codeblock outputclass="language-cpp">    std::string hostForKey(lcb_t instance, const void *key, size_t nkey) {
        lcbvb_CONFIG *vbc;
        lcb_cntl(instance, LCB_CNTL_GET, LCB_CNTL_VBCONFIG, &amp;vbc);
        int vbid, server_index;
        lcbvb_map_key(vbc, key, nkey, &amp;vbid, &amp;server_index);

        if (server_index &lt; 0) {
            return ""; // We want to trigger a config refresh
        }

        // Find the server:
        const char *server = lcb_get_node(instance, LCB_NODE_DATA, server_index);
        const char *endp = strchr(server, ':');
        std::string host(server, endp);
        return host;
    }</codeblock></p>
    </conbody>
</concept>
