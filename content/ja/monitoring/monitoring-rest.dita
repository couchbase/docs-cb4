<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_jg3_fmg_1t">
  <title>Monitor using the REST API</title> <shortdesc>Accessing the REST API (<codeph>http://&lt;ip&gt;:8091/pools/default</codeph>) gives an
    insight into computing resources consumed per node.</shortdesc>
  <body>
  
    <section><title>Node monitoring</title>
   
      <dl>
        <dlentry>
          <dt>Node status</dt>
          <dd>As a part of the JSON returned by the <codeph>nodeStatuses</codeph> statistics
            end-point, the state of the node is returned via <codeph>clusterMembership</codeph>.
            This allows you, on a per node basis, to monitor the <codeph>active</codeph> status to
            guarantee the nodes are participating in the cluster. Critical events are defined by the
            status <codeph>inactiveFailed</codeph>, meaning that the node has failed, and
            administrator intervention is needed.</dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>System statistics</dt>
          <dd>JSON also provides the additional basic capacity consumption statistics for CPU
              (<codeph>cpu_utilization</codeph>), swap (<codeph>swap_used</codeph>), and free memory
              (<codeph>mem_free</codeph>). If any of these resources shows constraints for any node
            in the cluster, address the individual node and evaluate if additional nodes are
            merited.</dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>Couchbase specific statistics</dt>
          <dd>The final section provides additional insight into resources consumed by the
            individual node. The individual node disk consumed by Couchbase Server is defined by the
            following: <ul>
              <li><codeph>couch_docs_actual_disk_size</codeph>, the physical memory used in the
                node</li>
              <li>The number of background fetches <codeph>ep_bg_fetched</codeph> (data not in the
                cache and pulled from disk).</li>
            </ul></dd>
        </dlentry>
      </dl>
   
      
    </section> 
   
    
    <section><title>Bucket monitoring</title>
      <p>The REST API<codeph> /stats</codeph> end-point
        <codeblock>http://&lt;ip&gt;:8091/pools/default/buckets/&lt;bucket_name&gt;/stats</codeblock>provides
        insight in the bucket health. Keeping tabs on the bucket statistics will provide good
        insight into your overall application health.</p>
      
      
      <dl>
        <dlentry>
          <dt>Operations Per Second (<codeph>ops</codeph>)</dt>
          <dd>This is a fundamental measure of the total number of <cmdname>get</cmdname>,
              <cmdname>set</cmdname>, <cmdname>increment</cmdname>, and <cmdname>decrement</cmdname>
            operations that occur for a given bucket. While <codeph>views</codeph> operations are
            not factored into the metric, they provide a very quick measure of the load per
            application.</dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>Cache Miss (<codeph>ep_cache_miss_rate</codeph>)</dt>
          <dd>This metric counts the ratio of requested objects found in the cache compared to what
            is needed to be fetched from the disk. For example, if ten requests entered the database
            and one request needed to be retrieved from disk, the miss rate would be 10%. What is
            the right cache miss rate for a given cluster? It depends on how much the application
            expects the database to hold in memory.</dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>Fragmentation (<codeph>couch_docs_fragmentation</codeph>) </dt>
          <dd>Couchbase Server stores data in an append-only format on disk. As a result, monitoring
            fragmentation within a cluster is important especially if auto-compaction is set on a
            scheduled basis. This metric can provide insight into the running schedule to estimate
            whether it is running long enough and on a frequent enough basis to keep your database
            healthy.</dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>Working Set (<codeph>ep_bg_fetched and vb_active_resident_items_ratio</codeph>)</dt>
          <dd>You can use the <codeph>ep_cache_miss_ratio</codeph>  in conjunction with the resident
            items ratio and memory headroom metrics to understand if your bucket has enough capacity
            to store your datasetâ€™s most requested objects in memory. More importantly, you can
            forecast the need for additional nodes to expand memory capacity to the cluster.</dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>Disk Drain (<codeph>ep_queue_size</codeph>)</dt>
          <dd>One of the most important metrics to monitor, regardless of what your application is
            doing, is the <term>queue drain rate</term>. Keep careful and watch the amount of
            changes pending in the queues, particularly the <term>disk write queue</term>.
            Additional related information can be found with the <xref
              href="../cli/cbstats-intro.dita#cbstats-intro">cbstats</xref> command line utility.
              <p>From the REST standpoint,  we can monitor both how the queue fills
                (<codeph>ep_diskqueue_fill</codeph>) and how quickly the queue is draining
                (<codeph>ep_diskqueue_drain</codeph>) to track the trend over time.</p></dd>
        </dlentry>
      </dl>
    </section>
  </body>
 
</topic>

