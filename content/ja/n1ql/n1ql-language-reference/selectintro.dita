<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_11_7" xml:lang="en-US">
  <title id="title__Toc272567428">SELECT</title>
  <conbody >
 
    <p>SELECT statements let you retrieve data from specified keyspaces. A simple query in N1QL has
      three parts to it:</p>
    <ul>
    <li>SELECT - Parts of the document to return in an array.</li>
    <li>FROM - The keyspace, or datastore with which to work. </li>
    <li >WHERE - Conditions the data must satisfy to be retrieved.</li>
    </ul>
    
    <p>Only a SELECT clause is required in a query. </p>
    <p >Because the data is stored in documents rather than rigidly structured tables, queries can return a collection 
      of different document structures or fragments. The one requirement is that the retrieved data will match the 
      conditions in the WHERE clause, if one is provided.</p>
    <p>Exercising the full power of the SELECT statement is more complex. With the SELECT statement,
      you can retrieve any data from a keyspace. Once retrieved you can specify how you want the
      data returned. You can also manipulate the data in the result set, and, using data
      manipulation statements, you can modify the data in the actual keyspace.</p>
   
    <section><title>SELECT Statement Processing</title>
      <p>The SELECT statement queries a keyspace. A JSON array is returned that contains zero or more
        result objects. SELECT behaves as a sequence of steps in a process. Each step in the process
        produces result objects that are then used as inputs in the next step until all steps in the
        process are complete. The possible elements and operations in a query include: </p>
      
      <ul>
        <li><b>Specifying the Keyspace:</b> You specify the keyspace that is queried. This is the
          from-path parameter in a FROM clause. You can also provide a path as keyspace.</li>
        <li><b>Filtering the Results:</b> You can filter result objects from the SELECT by specifying a condition in the WHERE clause.</li>
        <li><b>Generating a Result Set:</b> You can generate a set of result objects with GROUP BY or
          HAVING clauses along with a result expression list, result-expression-list.</li>
        <li><b>Removing Duplicates:</b> You can remove duplicate result objects from the result set by using the DISTINCT clause.</li>
        <li><b>Ordering Items in the Result Set:</b> You can sort items in the order specified by the ORDER BY expression list.</li>
        <li><b>Skipping Results:</b> You can skip the first <i>n</i> items as specified by the OFFSET clause</li>
        <li><b>Limiting the Number of Results:</b> You can specify the maximum number of items returned with the LIMIT clause.</li> </ul>
    </section>
    
    <section><title>SELECT Statement Syntax</title>
      <p>SELECT statements can begin with either SELECT or FROM. The behavior is the same in either case.</p>
      <p><i>select:</i></p>
      
      
      <codeblock><varname>subselect</varname> [ <varname>set-op</varname> ( [ ALL ] )  <varname>subselect</varname> ]* 
          [ <varname>order-by-clause</varname> ] 
          [ <varname>limit-clause</varname> ]  
          [ <varname>offset-clause</varname> ]</codeblock>
      
      <p><i>set-op:</i></p>
      <codeblock>UNION | INTERSECT | EXCEPT  </codeblock>
      
      <p><i>subselect:</i></p>
      <codeblock><varname>select-from</varname> | <varname>from-select</varname>     </codeblock>
      
      <p><i>select-from:</i></p>
      <codeblock><varname>select-clause</varname> [ <varname>from-clause</varname> ] 
                 [ <varname>let-clause</varname> ] 
                 [ <varname>where-clause</varname> ] 
                 [ <varname>group-by-clause</varname> ] </codeblock>
      
      <p><i>from-select:</i></p>
      <codeblock><varname>from-clause</varname> [ <varname>let-clause</varname> ] 
            [ <varname>where-clause</varname> ] 
            [ <varname>group-by-clause</varname> ] 
<varname>select-clause</varname>      </codeblock>
  
      <p><i>select-clause:</i></p>
      <codeblock>SELECT ( [ ALL | DISTINCT ]  ( <varname>result-expression</varname> [, <varname>result-expression</varname> ]* ) | 
       ( RAW | ELEMENT ) expression )     </codeblock>
      
      <p><i>result-expression:</i></p>
      <codeblock>[ ( path . ) ] * | expression [ ( [ AS ] alias ) ]   </codeblock>
      
      <p><i>path:</i></p>
      <codeblock>identifier [ <b>[</b> expression <b>]</b> ]  [ . path ]    </codeblock>
      
      <p><i>alias:</i></p>
      <codeblock>identifier    </codeblock>
      <p><b>ALL</b></p>
      <p>SELECT ALL retrieves all of the data specified. ALL displays "all" of the specified columns
        including all of the duplicates. The ALL keyword is the default if nothing is specified.</p>
      <p><b>DISTINCT</b></p>
      <p>The DISTINCT clause removes duplicate result objects from the query's result set. If the
        DISTINCT clause is not used, the query returns all objects that meet the query conditions in a
        result set, which might include duplicates.</p>
      <codeblock spectitle="Example">SELECT DISTINCT orderlines[0].productId FROM orders    </codeblock>
      <codeblock spectitle="Result">{
  "results": [
    {
      "productId": "coffee01"
    },
    {
      "productId": "tea111"
    }
  ]
}  </codeblock>
      <p>If you run the same query with no DISTINCT clause against orders, the result set is as
        follows:</p>
      <codeblock spectitle="Example">SELECT  orderlines[0].productId
        FROM orders</codeblock>
      <codeblock spectitle="Result">{
  "results": [
    {
      "productId": "coffee01"
    },
    {
      "productId": "coffee01"
    },
    {
      "productId": "tea111"
    },
    {
      "productId": "coffee01"
    }
  ]
}</codeblock>
      <p><b>RAW/ELEMENT</b></p>
      <p> Specifies a raw expression. </p>    
      
      <p><i><xref href="from.dita">from-clause</xref>:</i></p>
      <codeblock>FROM <varname>from-term</varname>    </codeblock>
      
      <p><i>from-term:</i></p>
      <codeblock><varname>from-path</varname> [ ( [ AS ] alias ) ] [ <varname>use-keys-clause</varname> ] | 
  <varname>from-term</varname> <varname>join-clause</varname> | 
  <varname>from-term</varname> <varname>nest-clause</varname> | 
  <varname>from-term</varname> <varname>unnest-clause</varname>     </codeblock>
      
      <p><i>from-path:</i></p>
      <codeblock>[ ( namespace : ) ] path    </codeblock>
      
      <p><i>namespace:</i></p>
      <codeblock>identifier     </codeblock>
      
      <p><i>use-keys-clause:</i></p>
      <codeblock>USE [ PRIMARY ] KEYS expression    </codeblock>
      
      <p><i>join-clause:</i></p>
      <codeblock>[ <varname>join-type</varname> ] JOIN <varname>from-path</varname> [ ( [ AS ] alias ) ] <varname>on-keys-clause</varname>      </codeblock>
      
      <p><i>join-type:</i></p>
      <codeblock>INNER | LEFT [ OUTER ]      </codeblock>
      
      <p><i>on-keys-clause:</i></p>
      <codeblock>ON [ PRIMARY ] KEYS expression    </codeblock>
      
      <p><i>nest-clause:</i></p>
      <codeblock>[ <varname>join-type</varname> ] NEST <varname>from-path</varname> [ ( [ AS ] alias ) ] <varname>on-keys-clause</varname>    </codeblock>
      
      <p><i>unnest-clause:</i></p>
      <codeblock>[ <varname>join-type</varname> ] [ UNNEST | FLATTEN ] expression [ ( [ AS ] alias ) ]   </codeblock>

      <p><i><xref href="let.dita">let-clause</xref></i></p>
      <codeblock>LET ( alias = expression ) [, ( alias = expression ) ]*   </codeblock>
      <p><i><xref href="where.dita">where-clause</xref>:</i></p>
      <codeblock>WHERE condition   </codeblock>
      
      <p><i>cond:</i></p>
      <codeblock>expression     </codeblock>
      
      <p><i><xref href="groupby.dita">group-by-clause</xref>:</i></p>
      <codeblock>GROUP BY expression [ , expression ]* [ <varname>letting-clause</varname> ] [ <varname>having-clause</varname> ] ] | 
                    [ <varname>letting-clause</varname> ]     </codeblock>
      
      <p><i>letting-clause:</i></p>
      <codeblock>LETTING  alias = expression [ (, alias = expression ) ]*  </codeblock>
      
      <p><i>having-clause:</i></p>
      <codeblock>HAVING condition   </codeblock>
      
      <p><i><xref href="orderby.dita">order-by-clause</xref>:</i></p>
      <codeblock>ORDER BY <varname>ordering-term</varname> [ , <varname>ordering-term</varname> ]*    </codeblock>
      
      <p><i>ordering-term:</i></p>
      <codeblock>expression [ ASC | DESC ]</codeblock>
      
      <p><i><xref href="limit.dita">limit-clause</xref></i></p>
      <codeblock>LIMIT expression   </codeblock>
      
      <p><i><xref href="offset.dita">offset-clause</xref></i></p>
      <codeblock>OFFSET expression   </codeblock>
      </section>
  </conbody>
</concept>
