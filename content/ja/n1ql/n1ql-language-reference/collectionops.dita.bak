<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_7_1" xtrc="/w:document/w:body[1]/w:p[627]" xml:lang="en-US">
	<title>Collection operators</title>
	<conbody xtrc="/w:document/w:body[1]/w:p[628]">
		<p>Collection operators allow you to evaluate expressions over collections or objects. These
			include ANY, EVERY, ARRAY, FIRST, EXISTS, IN and WITHIN.</p>

		<codeblock>exists-expression | in-expression | within-expression | ANY | EVERY | ARRAY | FIRST</codeblock>

		<section>
			<title>ANY</title>
			<codeblock> ANY variable ( IN  | WITHIN ) expression 
     [  ,  variable ( IN | WITHIN ) expression  ]* 
     [ SATISFIES condition ]  END </codeblock>

			<p>Any is a range predicate that allows you to test a Boolean condition over the elements
				or attributes of a collection, object, or objects. It uses the IN and WITHIN operators
				to range through the collection.</p>
			<p>If at least one item in the array satisfies the ANY expression, then returns TRUE,
				otherwise returns FALSE.</p>

			<p>Example</p>
			<p>In the following query, all contacts who have one or more children over the age of 14
				are retrieved. This query returns one item for 'dave' because one of his children is
				17.</p>
			<codeblock>
SELECT name
  FROM contacts
  WHERE ANY child IN children
  SATISFIES child.age > 14 END   
  </codeblock>
			<p>Results:</p>
			<codeblock>"results": [ { "name": "dave" }, .... ] </codeblock>

			<p>Sometimes the conditions you want to filter need to be applied to the arrays nested
				inside the document. The SATISFIES keyword is used to specify the filter condition. The
				expression after the ANY clause allows us to assign an identifier to an element in the
				array that we are searching through. </p>
			<p>Example</p>
			<codeblock>
 SELECT fname, children
    FROM tutorial 
        WHERE ANY child IN tutorial.children SATISFIES child.age > 10  END
</codeblock>
			<p>Returns</p>
			<codeblock>{"resultset":[
  {"children":[{"age":17,"fname":"Aiden","gender":"m"},{"age":2,"fname":"Bill","gender":"f"}],"fname":"Dave"},
  {"children":[{"age":17,"fname":"Xena","gender":"f"},{"age":2,"fname":"Yuri","gender":"m"}],"fname":"Earl"},
  {"children":[{"age":17,"fname":"Abama","gender":"m"},{"age":21,"fname":"Bebama","gender":"m"}],"fname":"Ian"}
]}</codeblock>
		</section>

		<section>
			<title>EVERY</title>
			<codeblock>
EVERY variable ( IN  | WITHIN ) expression 
   [  ,  variable ( IN | WITHIN ) expression  ]* 
   [ SATISFIES condition ]  END   
</codeblock>
			<p>EVERY is a range predicate that allows you to test a Boolean condition over the elements
				or attributes of a collection, object, or objects. It uses the IN and WITHIN operators
				to range through the collection.</p>
			<p>If every array element satisfies the EVERY expression, returns TRUE. Otherwise returns
				FALSE. If the array is empty, returns TRUE. </p>
			<p>Example</p>
			<p>EVERY returns TRUE if all items meet the condition. For example, this query is almost
				identical to the preceding one except EVERY is used instead of ANY. This query scans all
				contacts and returns the name of any contact that has children over the age of 10. The
				result tells us that out of all of the contacts only 'ian' has children who are all over
				the age 10. </p>
			<codeblock>
 SELECT name
    FROM contacts
    WHERE EVERY child IN children
    SATISFIES child.age > 10 END
</codeblock>
			<p>Results</p>
			<codeblock>
  { "name": "ian" }
 </codeblock>
			<p>Sometimes the conditions you want to filter need to be applied to the arrays nested
				inside the document. The SATISFIES keyword is used to specify the filter condition. The
				expression after the EVERY clause allows us to assign a name to an element in the array
				that we are searching through. </p>
			<p> Example </p>
			<codeblock>
 SELECT fname, children
    FROM tutorial 
        WHERE EVERY child 
        IN tutorial.children SATISFIES child.age > 10  END  
  </codeblock>
			<p>Returns</p>
			<codeblock>{"resultset":[
   {"children":[{"age":17,"fname":"Aiden","gender":"m"},{"age":2,"fname":"Bill","gender":"f"}],"fname":"Dave"},
   {"children":[{"age":17,"fname":"Xena","gender":"f"},{"age":2,"fname":"Yuri","gender":"m"}],"fname":"Earl"},
   {"children":[{"age":17,"fname":"Abama","gender":"m"},{"age":21,"fname":"Bebama","gender":"m"}],"fname":"Ian"}]}
</codeblock>
		</section>

		<section>
			<title>ARRAY</title>
			<p>
				<i>array-expression:</i>
			</p>
			<codeblock>
ARRAY expression FOR variable ( IN |  WITHIN ) expression
   [ ,  variable ( IN | WITHIN ) expression ]* [ ( WHEN  condition) ] END</codeblock>
			<p> The ARRAY operator lets you map and filter the elements or attributes of a collection,
				object, or objects. It evaluates to an array of the operand expression, that satisfies
				the WHEN clause, if provided. </p>
		</section>

		<section>
			<title>FIRST</title>
			<p>
				<i>first-expression:</i>
			</p>
			<codeblock>FIRST expression FOR variable ( IN |  WITHIN ) 
  expression [ ,  variable ( IN | WITHIN ) expression]* 
  [ ( WHEN  condition) ] END</codeblock>

			<p>The FIRST operator lets you map and filter the elements or attributes of a collection,
				object, or objects. It evaluates to a single element based on the operand expression
				that satisfies the WHEN clause, if provided.</p>

		</section>

		<section>
			<title>EXISTS</title>
			<p>
				<i>exists-expression:</i>
			</p>
			<codeblock>EXISTS expression</codeblock>

			<p>EXISTS evaluates to TRUE if the value is an array and contains at least one element.</p>

		</section>

		<section>
			<title>IN</title>
			<p>
				<i>in-expression:</i>
			</p>
			<codeblock>expression [ NOT ] IN expression</codeblock>

			<p>IN evaluates to TRUE if the right-side value is an array and directly contains the
				left-side value. NOT IN evaluates to TRUE if the right-side value is an array and does
				not directly contain the left-side value.</p>
		</section>

		<section>
			<title>WITHIN</title>
			<p>
				<i>within-expr:</i>
			</p>
			<codeblock>expression [NOT] WITHIN expression</codeblock>

			<p>WITHIN evaluates to TRUE if the right-side value contains the left-side value as a child
				or descendant. NOT WITHIN evaluates to TRUE if the right-side value does not contain the
				left-side value as a child or descendant.</p>
		</section>

	</conbody>
</concept>
