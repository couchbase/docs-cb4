<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_n3j_dsb_mq">
 <title>Key features of N1QL</title>
 
 <conbody>
  <p>
   N1QL provides a rich set of features that let you retrieve, 
   manipulate, transform, and create JSON document data. Here is a summary of the key features:
     </p>
 
 <ul>
  <li><b>SELECT Statement</b>: N1QL’s SELECT statement has the functionality of the SQL SELECT statement, 
   but extends it to work with JSON documents. This lets you use your knowledge of SQL to work with 
   the powerful NoSQL features of Couchbase that let you work with big data, big users, and cloud computing.</li>
  <li><b>Data Manipulation Language (DML)</b>: N1QL provides DELETE, INSERT, UPDATE, and UPSERT
                statements. These statements allow you to create, delete, and modify the data stored
                in JSON documents by specifying and executing simple commands.</li>
  <li><b>Indexes</b>: You can use the CREATE and DROP INDEX statements to easily create, and delete
                indexes.</li>
  <li><b>Primary Key Access</b>: Data can be stored in key-value pairs, providing primary key access to any data. </li>
  <li><b>Aggregation</b>:  N1QL provides standard SQL aggregation operators, such as MIN, MAX, COUNT as well as grouping operators, 
   the GROUP BY clause, and the group filter, HAVING.</li>
  <li><b>Joins</b>: N1QL lets you retrieve data from multiple documents with joins specified in the
                FROM clause. </li>
  <li><b>Nesting</b>: Nests let you retrieve sub-records for a record. That is, for each left hand input, the matching right hand inputs 
   are collected into an array, which is then embedded in the result. For example, you can nest each item in a customer’s order. Nests 
   can be performed on multiple documents.</li>
  <li><b>Unnesting</b>: Unnesting is the opposite of nesting. It extracts nested sub-records from a record, making each extraction 
   a separate record. Unnesting is performed on a single document. Here is an example:
  <codeblock>
   SELECT Name, Job
 FROM HRData
 UNNEST HRData.History AS Job

{
     'Name': Jamie
     'Job': ['Yahoo', 2005, 2006]
 }
 {
     'Name': Jamie
     'Job': ['Oracle', 2006, 2012]
 }
 {
     'Name': Jamie
     'Job': ['Couchbase', 2012]
 } 

  </codeblock>
  
  </li>
  <li><b>Subqueries</b>: N1QL lets you ask multiple-part queries by using subqueries. A subquery is
                a query that is nested inside a SELECT, INSERT, or UPSERT statement. It can also be
                contained inside another subquery. When used with the SELECT statement or nested
                within another subquery, subqueries let you continue to refine the results of
                preceding queries.</li>
  <li><b>UNION, INTERSECT, and EXCEPT</b>: N1QL provides the UNION, INTERSECT, and EXCEPT operations
                that let you compare two or more queries. UNION combines the results of two or more
                queries into a single result set that includes all the rows that belong to all
                queries in the union. EXCEPT returns any distinct values from the left query that
                are not found on the right query. INTERSECT returns any distinct values that are
                returned by both the query on the left and right sides of the INTERSECT
                operand.</li>  
 </ul>
  
 </conbody>
</concept>
