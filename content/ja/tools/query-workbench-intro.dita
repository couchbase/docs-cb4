<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_mjc_fzs_nt">
 <title>Query workbench [Developer Preview]</title>
 <shortdesc> The query workbench provides a rich graphical user interface to prepare and execute simple to complex N1QL queries. It provides a convenient way to perform query development by enabling you to browse, create, and run N1QL statements, and view results. </shortdesc>
 <conbody>
  <section>
   <note type="important">The query workbench works with Couchbase Server 4.0. The feature is still considered experimental and the UI or the functionality may change. 
    </note>
   <p>The query workbench is the graphical version of the command line tool <codeph>cbq</codeph>. It
        addresses some of the limitations seen when using the command line tool: <ul>
          <li>Provides a better way to view and edit complex queries by supporting features such as
            multi-line formatting, copy and paste, and easy cursor movement. </li>
          <li>Enables you to choose to view the results in a more compact and readable format such
            as a table or a tree, in addition to the default JSON format.</li>
          <li>Supports a preview of the N1QL <cmdname>describe</cmdname> command, which returns the
            structure of documents in a bucket which will help write better queries. You no longer
            have to select the documents at random and then guess the structure of the document. </li>
        </ul></p>
   <p><b>Supported platforms</b></p>
    <p>The query workbench is supported on Windows, Linux, and Mac OS X platforms. </p>
  </section>
  
  <section><title>Installing the query workbench</title>
   <p><ol>
    <li>Access the <xref href="http://www.couchbase.com/nosql-databases/downloads" format="html"
              scope="external">Downloads</xref> page and select the <uicontrol>Tools</uicontrol> tab
            under Couchbase Server. Download the query workbench archive file
                <codeph>couchbase-query-workbench_dp1-&lt;<varname>os</varname>&gt;</codeph> by
            choosing the appropriate
              package.<p><!--<table>
                <tgroup cols="2">
                  <colspec colnum="1" colname="c1" colwidth="1*"/>
                  <colspec colnum="2" colname="c2" colwidth="5*"/>
                  <thead>
                    <row>
                      <entry>Platform</entry>
                      <entry>Repository</entry>
                    </row>
                  </thead>
                  <tbody>
                    <row>
                      <entry>Linux_x86_641 (md5)</entry>
                      <entry><codeph>http://packages.couchbase.com/releases/query-workbench/dp1/couchbase-query-workbench_dp1.0.1-linux_x86_64.tar.gz</codeph></entry>
                    </row>
                    <row>
                      <entry>MacOS_x86_644 (md5)</entry>
                      <entry><codeph>http://packages.couchbase.com/releases/query-workbench/dp1/couchbase-query-workbench_dp1.0.1-macos_x86_64.tar.gz</codeph></entry>
                    </row>
                    <row>
                      <entry>Windows_amd64 (md5)</entry>
                      <entry><codeph>http://packages.couchbase.com/releases/query-workbench/dp1/couchbase-query-workbench_dp1.0.1-windows_amd64.zip</codeph></entry>
                    </row>
                    <row>
                      <entry>Windows_x861 (md5)</entry>
                      <entry><codeph>http://packages.couchbase.com/releases/query-workbench/dp1/couchbase-query-workbench_dp1.0.1-windows_x86.zip</codeph></entry>
                    </row>
                  </tbody>
                </tgroup>
              </table>--></p></li>
    <li>Extract the query workbench archive. The necessary files are contained in an inner folder,
              <filepath>couchbase-query-workbench</filepath>, which may be optionally copied
            elsewhere. </li>
   </ol></p></section>
  
  <section><title>Running the query workbench</title>
   <p><ol>
    <li>Open a terminal and navigate to the <filepath>couchbase-query-workbench</filepath> folder. </li>
    <li>The query workbench is configured to connect to your local datastore at
       <codeph>127.0.0.0:8091</codeph> using the default credentials. To connect to a different
      datastore, edit the <filepath>launch-cbq-gui.sh</filepath> file located in the extracted
      folder and update the variable <varname>COUCHBASE_URL</varname>. </li>
    <li>To launch the query workbench, run the following command:
      <codeblock>./launch-cbq-gui.sh</codeblock></li>
    <li>After the query web server starts successfully, you can now access query workbench UI from
                <filepath>http://<varname>COUCHBASE_URL</varname>:8094</filepath>. Look for a
            console message similar to the following:
            <codeblock>Go to /ui to use the query UI.
Running: ./cbq-gui -datastore=http://127.0.0.1:8091 -localPort=:8094 -user= -pass=
Launching query web service.
    Using CB Server at: http://127.0.0.1:8091
    Using N1QL query service on: 127.0.0.1:8093
    Using memcached service on: 127.0.0.1:11210
    Using web content at: ./static
Launching UI server, to use, point browser at http://localhost:8094
Hit enter to stop server:</codeblock></li>
   </ol>
    </p>
  </section>
  <section><title>Query workbench reference</title>
    <p>The query workbench has three main sections: <xref
          href="#concept_mjc_fzs_nt/query-workbench-metadata" format="dita">Metadata panel</xref>,
          <xref href="#concept_mjc_fzs_nt/query-workbench-n1ql" format="dita">N1QL query
          panel</xref>, and <xref href="#concept_mjc_fzs_nt/query-workbench-results" format="dita"
          >Results panel</xref>, as seen in the following image. <fig id="fig_vwg_vrp_4t">
          <title>Query workbench</title>
          <image placement="break" href="images/query-workbench-ui.png" width="6in"
            id="image_wwg_vrp_4t"/>
        </fig></p>
    <p id="query-workbench-metadata"><b>Metadata panel</b> (on the left side of the web page)</p>
    <p>The metadata panel lists all the buckets available on the datastore. The buckets are grouped into the following categories: <ul>
      <li><b>Fully Queryable Buckets</b>, which lists all the buckets that have a primary index or
        primary and secondary index. These buckets support queries with no where clause, like
        "<cmdname>select * from `beer-sample`</cmdname>", or with a where clause on any field,
        like "<cmdname>select * from `beer-sample` where city = `Seattle`</cmdname>".</li>
      <li><b>Queryable on Indexed Fields</b>, which lists buckets that only have a secondary index.
        These buckets support queries with a where clause on the indexed fields.</li>
      <li><b>Non-Indexed Buckets</b>, which lists buckets that do not have any indexes. These
        buckets do not support queries. You must first define an index before querying these
        buckets.</li>
    </ul></p><p>You can expand the buckets in the metadata panel to view the schema for the JSON documents including the different types of documents and their attributes. This information is inferred by examining a random sample of documents in the bucket. The tool also learns the field names when you expand a bucket and uses this information to support auto-completion in the N1QL query panel. </p>
    <p id="query-workbench-n1ql"><b>N1QL query panel</b> (located at the top of the web page)</p>
    <p>The N1QL query panel is the query area where you can type a N1QL query. It supports the same N1QL as <codeph>cbq</codeph> and
      provides the following additional features: <ul>
        <li><b>Auto-completion</b><p>When entering a word in the query panel, if you enter the <userinput>tab</userinput> key or <userinput>Ctrl+Space</userinput>, the
          tool offers a list of matching N1QL keywords and bucket names that are close to what you have typed so far. For
          names that have a space or a hyphen (-), the auto-complete option includes the back-quotes around the name. If
          you expand a bucket in the Metadata panel, the tool learns and includes the field names from the schema of the
          expanded bucket.</p></li>
        <li><b>Query history</b>
            <p>The up and down arrows, <image placement="inline"
                href="images/query-workbench-history.png" width="1.2in" id="image_lbs_ns5_4t"/> , at
              the top of the N1QL query panel enable you to walk through the history of queries
              executed since the web page was loaded. If you edit a previous query and then execute
              it, the new query is stored at the end of the history.</p></li>
        <li><b>Result limit</b>
            <p>You can limit the size of the result by specifying the value for this field. This
              ensures that the result set is not larger than the specified value. Note that large
              result sets can slow the responsiveness of the interface.</p></li>
        <li><b>Support for N1QL <cmdname>describe</cmdname> queries</b>
            <p>The query workbench supports a preview of the N1QL <cmdname>describe</cmdname>
              command. This command infers a "schema" for a bucket by examining a random sample of
              documents. Because this command is based on a random sample, the results may vary
              slightly from run to run. The default sample size is 1000 documents. The syntax for
              the command is:
              <codeblock>describe &lt;bucket_name> [ limit &lt;sample size> ]</codeblock></p></li>
      </ul></p>
    <p id="query-workbench-results"><b>Results panel</b> (located at the bottom of the web page)</p>
    <p>The results panel displays the results of a query or the error message in case the query failed in your chosen format.
      You can choose to view the results in one of the following formats: <ul>
        <li><b>Raw JSON</b> (default), where the results are formatted to make the data more
            readable. You can also expand and collapse objects and array values using the little
            arrow icons next to the line numbers. <image placement="break"
              href="images/query-workbench-results-json.png" id="image_ksh_255_4t" width="6in"
            /></li>
          <li><b>Table</b>, where the data is presented in a tabular format. It converts the JSON
            arrays to HTML tables, and presents sub-objects or sub-arrays as sub-tables. This format
            works well for queries that return an array of objects, like "<cmdname>select
              `beer-sample`.* from `beer-sample`</cmdname>". It is not suitable for queries that
            return an array of objects where each object has a sub-object, like "<cmdname>select *
              from `beer-sample`</cmdname>".  <image placement="break"
              href="images/query-workbench-results-table-2.png" width="5.5in" id="image_lkr_5w5_4t"
            /></li>
          <li><b>Tree</b> (or list), where the JSON data is presented in an outline form and each
            sub-array or sub-object is displayed as a sub-list. <image placement="break"
              href="images/query-workbench-results-tree.png" width="6in" id="image_zmb_j55_4t"
            /></li>
        <li>The <uicontrol>Save</uicontrol> button saves the raw JSON text to a file. <note>When
              using Safari, clicking <uicontrol>Save</uicontrol> loads the data into a new window.
              You have to save the file manually using the <menucascade>
                <uicontrol>File</uicontrol>
                <uicontrol>Save As</uicontrol>
              </menucascade> menu. </note></li>
      </ul></p>
  </section>
  
 </conbody>
</concept>
