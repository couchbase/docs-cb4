<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept
PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="download">
	<title>Java API</title>
	<shortdesc>In addition to the primary Scala API, the connector provides convenience APIs when
		accessed from Java.</shortdesc>

	<conbody>

		<section>
			<title>Java APIs</title>

			<p>To use the Java API in spark, you need to initialize a <codeph>JavaSparkContext</codeph>:</p>

<codeblock outputclass="language-java"><![CDATA[SparkConf conf = new SparkConf()
    .setAppName("javaSample")
    .setMaster("local[*]")
    .set("com.couchbase.bucket.travel-sample", "");

JavaSparkContext sc = new JavaSparkContext(conf);]]></codeblock>

    		<p>Since Java doesn't have the implicit imports like Scala, the connector provides a helper
				class to achieve similar functionality:</p>

<codeblock outputclass="language-java"><![CDATA[// The Couchbase-Enabled spark context
CouchbaseSparkContext csc = couchbaseContext(sc);]]></codeblock>

			<p>The context is a static import. In general you want to statically import the following:</p>

<codeblock outputclass="language-java"><![CDATA[import static com.couchbase.spark.japi.CouchbaseDocumentRDD.couchbaseDocumentRDD;
import static com.couchbase.spark.japi.CouchbaseSparkContext.couchbaseContext;]]></codeblock>

			<p>Now you can create RDDs through Key/Value, Views or N1QL:</p>

<codeblock outputclass="language-java"><![CDATA[// Load docs through K/V
List<JsonDocument> docs = csc
    .couchbaseGet(Arrays.asList("airline_10226", "airline_10748"))
    .collect();

System.out.println(docs);]]></codeblock>


<codeblock outputclass="language-java"><![CDATA[// Perform a N1QL query
List<CouchbaseQueryRow> results = csc
    .couchbaseQuery(N1qlQuery.simple("SELECT * FROM `travel-sample` LIMIT 10"))
    .collect();

System.out.println(results);]]></codeblock>

		<p>If you want to store Documents in Couchbase, use the <codeph>couchbaseDocumentRDD</codeph>
				method:</p>

<codeblock outputclass="language-java"><![CDATA[couchbaseDocumentRDD(
    sc.parallelize(Arrays.asList(JsonDocument.create("doc1", JsonObject.empty())))
).saveToCouchbase();]]></codeblock>

		</section>
	</conbody>
</concept>
