<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_cn2_5ck_r5">
    <title>Release Notes</title><shortdesc>Release notes for the 2.0 version of the Kafka connector.</shortdesc>
    <conbody>
    <section>
        <title>Couchbase Kafka Connector 2.0.0 GA (30 March 2016)</title>
        <p>Version 2.0.0 is the general availability (GA) release of the Kafka connector.
            It contains important stability fixes, and also new API.
        </p>

        <p><b>New features and behavioral changes</b></p>
                <p>This release contains the following features:</p>
                <ul>
                    <li>
                    <xref href="https://www.couchbase.com/issues/browse/KAFKAC-27" format="html"
                        scope="external">KAFKAC-27</xref>, <xref
                        href="https://www.couchbase.com/issues/browse/KAFKAC-29" format="html"
                        scope="external">KAFKAC-29</xref>, <xref
                        href="https://www.couchbase.com/issues/browse/KAFKAC-32" format="html"
                        scope="external">KAFKAC-32</xref>, <xref
                        href="https://www.couchbase.com/issues/browse/KAFKAC-30" format="html"
                        scope="external">KAFKAC-30</xref>, <xref
                        href="https://www.couchbase.com/issues/browse/KAFKAC-33" format="html"
                        scope="external">KAFKAC-33</xref>: <p>All these issues share a common
                        root cause. If the Kafka consumer handles new events at a slower rate than the DCP
                        producer emits them, then all additional messages are dropped silently.
                        Eventually, because most of these messages carry native buffers that cannot be freed by
                        GC, the connector eventually dies from out-of-memory exceptions.
                        </p><p>Fixing these issues required a new implementation of the DCP handler inside the JVM Core. Some classes were removed (such as
                            <codeph>BucketStreamAggregator</codeph> and
                            <codeph>BucketStreamAggregatorState</codeph>) and new, cleaner
                        alternatives were introduced (such as <codeph>ConnectorState</codeph>
                        and <codeph>StreamState</codeph>). These new classes encapsulate only one point in
                        history, in contrast to the old classes that carried a starting and an ending sequence number. These alternatives
                        replace the unintuitive direction and run-mode API with
                        a method that accepts two states plus some helper methods that make it easier
                        to initialize <codeph>ConnectorState</codeph>. For example, the following
                        code: <codeblock outputclass="language-java"><![CDATA[BucketStreamAggregatorState state = connector.buildState(Direction.TO_CURRENT);
connector.run(state, RunMode.RESUME);
]]></codeblock> can be simplified as <codeblock outputclass="language-java"><![CDATA[ConnectorState startState = connector.startState();
ConnectorState currentState = connector.currentState();
connector.run(startState, currentState);
]]></codeblock> and the snippet <codeblock outputclass="language-java"><![CDATA[BucketStreamAggregatorState state = connector.buildState(Direction.FROM_CURRENT);
connector.run(state, RunMode.LOAD_AND_RESUME);
]]></codeblock> becomes <codeblock outputclass="language-java"><![CDATA[ConnectorState loadedState = connector.loadState();
ConnectorState endState = connector.endState();
connector.run(loadedState, endState);
]]></codeblock></p>
                </li>
                    <li>
                    <xref href="https://www.couchbase.com/issues/browse/KAFKAC-32" format="html"
                        scope="external">KAFKAC-32</xref>: <p>Zookeeper state serializer now uses the forward slash
                            <codeph>/</codeph> as a path separator, which makes it
                        platform independent. Before this change, a  connector running on Windows used a backward slash and other platforms used a forward slash.</p>
                </li>
                </ul>

        <p><b>Known issues</b></p>
        <p>This release does not handle cluster topology changes. For example, it does not
                add streams for partitions that are migrated between nodes during a rebalance.
                The API for the necessary enhancements to handle cluster topology changes is still under discussion. Corresponding Jira tickets are:
                    <xref href="https://www.couchbase.com/issues/browse/JVMCBC-307" format="html"
                    scope="external">JVMCBC-307</xref> and <xref
                    href="https://www.couchbase.com/issues/browse/KAFKAC-7" format="html"
                    scope="external">KAFKAC-7</xref>.</p>
            </section>
    </conbody>
</concept>
