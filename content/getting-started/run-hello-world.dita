<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
  
<topic xml:lang="en-us" id="runHelloWorld">
	
	<title>
		Run <i>Hello World!</i>
	</title>
	
	<shortdesc>
		You can run queries on Couchbase Server <i>programmatically</i>, as well as manually. A 
		Software Development Kit (<i>SDK</i>) is provided in support of commonly used programming
		languages, to enable the execution of queries against Couchbase Server. This section provides
		a brief introduction to this area; and also features an off-the-shelf program that you can study and run. 
	</shortdesc>
	
	<body> 
		
		<section>
			
			<title>
				Understand the Couchbase SDK
			</title>
			
			<p>
				Couchbase provides a <i>Software Development Kit</i> (SDK), to make it
				easy to create applications that use Couchbase Server as a data-repository.
				The SDK comes in different versions, each of which supports a popular
				programming language. Supported languages are <i>node.js</i>, <i>Java</i>,
				<i>.NET</i>, <i>PHP</i>, <i>Python</i>, <i>Go</i>, and <i>C</i>.
			</p>
			
			<p>
				Using the SDK, you make N1QL queries programmatically. For example, your
				application might provide a client-side UI, whereby the user selects one or more values:
				the application passes these values
				to a server-side program that is supported by the Couchbase SDK. The server-side
				program puts the values into a N1QL query-string: it then uses the string to make a N1QL query 
				against Couchbase Server; and returns what it retrieves to your client-side.
			</p>
			
			<p>
				This section provides a simple, off-the-shelf example, which works in the way 
				just described. The
				example uses <i>node.js</i>: this may or may not be the SDK-version you choose
				to use in the long term; but it allows creation of a server-side program that is easy to
				read and run, and is therefore a good example with which to start.
			</p>
			
		</section>
		
		<section>
			
			<title>
				Install node.js
			</title>
			
			<p>
				To install node.js, use the appropriate installer for your platform; which
				is available from 
				<xref href="https://nodejs.org/en/download/" scope="external" format="html">nodejs.org</xref>.
			</p>
			
		</section>
		
		<section>
			
			<title>
				Install the Couchbase SDK for node.js
			</title>
			
			<p>
				Bring up a command tool. Then, on all platforms, against the prompt, type the following:
			</p>
			
			<codeblock outputclass="language-bash">$ npm install couchbase</codeblock>
			
			<p>
				Then, on non-Windows platforms, add <codeph>node-gyp</codeph>:
			</p>
			
			<codeblock outputclass="language-bash">$ npm install node-gyp</codeblock>
			
		</section>
			
		<section>
			<title>
				Obtain the <i>Hello World!</i> Example
			</title>
		
			<p>
				The program you are to run is located 
				<xref href="https://github.com/couchbaselabs/helloWorldCouchbaseQueryDemo" scope="external" format="html">here</xref>. 
				It consists of only two program files, and
				you can save them anywhere you want. There are also five supportive graphics files: these must be
				saved in the same directory as the html file. 
			</p>
			
			<p>
				The file <codeph>nodeJSQueryAgent.js</codeph> is
				the server-side program that runs queries on Couchbase Server. The file
				<codeph>helloWorldCouchbaseQuery.html</codeph> is the html client that you
				bring up in your browser.
			</p>
			
			<p>
				We refer to this program as <i>Hello World!</i> simply because it fits an established
				tradition of introductory code examples.
				In fact, the words "Hello World" do not appear: instead, you see
				data retrieved from Couchbase Server's <codeph>travel-sample</codeph>
				bucket.
			</p>
		
		</section>
		
		<section>
			
			<title>
				Examine the Code
			</title>
			
			<p>
				Before running the program, take a look at the principal elements within the code.
			</p>
			
			<p>
				<b>
					helloWorldCouchbaseQuery.html
				</b>
			</p>
			
			<p>
				Bring up <codeph>helloWorldCouchbaseQuery.html</codeph> in a text editor. As you inspect the file, 
				note that the user makes a selection on strings to be searched on, by
				means of radio-buttons:
			</p>
			
			<codeblock outputclass="language-javascript">if (selectedCountryValue == 0)
{
    selectedCountry = "United States";
} 
else 
{
    if (selectedCountryValue == 1)
    {
        selectedCountryStyle = "United Kingdom";
    }
    else
    {
        if (selectedCountryValue == 2)
        {
            selectedCountryStyle = "France";
        }
    }	
}</codeblock>
			
			<p>
				The selected value will be made part of a query-string that returns all documents
				within the <codeph>travel-sample</codeph> bucket that provide a match. This query-string
				is concatenated on the client-side, solely for the purpose of display:
			</p>
			
			<codeblock outputclass="language-javascript">var selectedQuery = 'SELECT * FROM `travel-sample` WHERE country = ' + '\"' + selectedCountryName + '\"';</codeblock>
			
			<p>
				Only the country-value will be passed to the server. This value is appended to a URL, which features the
				hostname and port-number at which the node.js server-side program listens:
			</p>
			
			<codeblock outputclass="language-javascript">var nodeJsAddress = "http://localhost:8082/";
				
var nodeJsTargetURL = nodeJsAddress + '?' + "myCountryValue=" + selectedCountryName;</codeblock>
			
			<p>
				A <codeph>getJSON</codeph> call passes the query-string to the server-side
				program, and receives a return-value that contains documents:
			</p>
			
			<codeblock outputclass="language-javascript">$.getJSON(nodeJsTargetURL, function(dataReturnedFromCouchbase) 
    {</codeblock>
			
			<p>
				Returned documents, up to a specified numeric maximum (configurable, but here 100), are added to a display-string,
				which is then shown in the dedicated pane:
			</p>
			
			<codeblock outputclass="language-javascript">for (var currentKeyPosition = 0; currentKeyPosition &lt; 100; currentKeyPosition++)
{					
    $.each(dataReturnedFromCouchbase[currentKeyPosition], function(key, val) 
    {					
        $.each(val, function(newKey, newVal)
        {			
            cbDataDisplayString = cbDataDisplayString + \"&lt;i&gt;\" + JSON.stringify(newKey) + "&lt;/i&gt;" + " : " 
                + "&lt;b&gt;" + JSON.stringify(newVal) + "&lt;/b&gt;" + '&lt;/p&gt;' + '&lt;p&gt;';
        });
    });
				
    cbDataDisplayString = cbDataDisplayString + '&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;';
}
				
document.getElementById('CouchbaseRetrievalsContent').innerHTML = cbDataDisplayString;</codeblock>
			
			<p>
				<b>
					nodeJsQueryAgent.js
				</b>
			</p>
			
			<p>
				Now bring up <codeph>nodeJsQueryAgent.js</codeph> in your text editor. Note
				that the node.js <codeph>require</codeph> construct is used, to ensure that the
				program has access to the right supportive modules. These include the one
				for Couchbase Server:
			</p>
			
			<codeblock outputclass="language-javascript">var http = require('http');
var url = require('url');
.
.
var couchbase = require("couchbase");</codeblock>
			
			<p>
				Variables are initialized for referencing the Couchbase Server-cluster and
				the <codeph>travel-sample</codeph> bucket:
			</p>
			
			<codeblock outputclass="language-javascript">var myCluster = new couchbase.Cluster('couchbase://localhost');
var myBucket = myCluster.openBucket('travel-sample');</codeblock>
			
			<p>
				The country-value, passed by the client, is retrieved from the URL:
			</p>
			
			<codeblock outputclass="language-javascript">var queryObject = url.parse(request.url, true).query
var countryValueString = queryObject.myCountryValue;</codeblock>
			
			<p>
				The Couchbase SDK is now used to query Couchbase Server. A <i>parameterized</i> N1QL query is made, whereby the
				country-value received from the html client is specified as the value for a placeholder. Returned values are
				then passed back to the client, as a JSON string.
			</p>
			<codeblock outputclass="language-javascript">var queryTemplate = couchbase.N1qlQuery.fromString('SELECT * FROM `travel-sample` WHERE country=$1');
				
myBucket.query(queryTemplate, [countryValueString], 
    function (err, rows) 
    {
        console.log("Got rows: %j", rows);	
				
        response.writeHead(200, {"Content-Type": "application/json", 
                                    "Access-Control-Allow-Origin": "*"});
        console.log("Returning...");
        response.end(JSON.stringify(rows));
    });							    
}).listen(8082);</codeblock>
			
			<p>
				<b>Note:</b> The node.js program is specified to listen on port 8082. If you should
				happen already to have a program listening on that port, change this
				number to specify a port that is free. You must change the number both here
				and in the client html file.
			</p>
		</section>
		
		<section>
			<title>
				Run the Program
			</title>
			
			<p>
				In a command tool, navigate to the folder that contains the file
				<codeph>nodeJsQueryAgent.js</codeph>. Then, type the following:
			</p>
			
			<codeblock outputclass="language-bash">$ node nodeJsQueryAgent.js</codeblock>
			
			<p>
				This starts the node.js server: output will appear in this console, as the
				program runs. Now, bring up the file 
				<codeph>helloWorldCouchbaseQuery.html</codeph> in a browser. The initial
				appearance is as follows:
			</p>
			
			<p>
				<image href="./images/helloWorldInitial.png" id="hello_world_initial" align="left" width="660"/>
			</p>
			
			<p>
				Select a string to be queried on, by means of the radio buttons in the 
				<uicontrol>Airline Countries</uicontrol> panel. Then, left-click on the
				<uicontrol>Query Couchbase</uicontrol> button. The query is executed, and
				the returned values are displayed in the 
				<uicontrol>Travel-Sample Retrievals</uicontrol> panel:
			</p>
			
			<p>
				<image href="./images/helloWorldSubsequent.png" id="hello_world_subsequent" align="left" width="660"/>
			</p>
			
		</section>
		<section>	
			
			<title>
				Next
			</title>
			
			<p>
				The program you've just run, and the other activities provided throughout
				the <i>Getting Started</i> sequence, 
				have given you an initial indication of the rich array of features offered by Couchbase
				Server. You can learn more about all aspects of the system from the
				Couchbase documentation-set: and in the final stage of this <i>Getting Started</i>
				sequence, 
				<xref href="./choose-your-next-steps.dita" scope="local" format="dita">Choose Your Next Steps</xref>
				suggestions are provided as to locations you can visit next.
			</p>
			
		</section>
		
	</body>
	
</topic>


	

