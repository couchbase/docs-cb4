<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
  
<topic xml:lang="en-us" id="runHelloWorld">
	
	<title>
		Run <i>Hello World!</i>
	</title>
	
	<shortdesc>
		You can run queries on Couchbase Server <i>programmatically</i>, as well as <i>manually</i>. A number
		of Software Development Kits (<i>SDKs</i>) are provided in support of commonly used programming
		languages: these enable the execution of queries against Couchbase Server. This section provides
		a brief introduction to this area, using an off-the-shelf program, which you can run
		with just a little preparation. 
	</shortdesc>
	
	<body> 
		
		<section>
			
			<title>
				Understand the Couchbase SDK
			</title>
			
			<p>
				Couchbase provides a <i>Software Development Kit</i> (SDK), to make it
				easy to create applications that use Couchbase Server as a data-repository.
				The SDK comes in different versions, each of which supports a popular
				programming language. The supported languages are <i>node.js</i>, <i>Java</i>,
				<i>.NET</i>, <i>PHP</i>, <i>Python</i>, <i>Go</i>, and <i>C</i>.
			</p>
			
			<p>
				Using the SDK, you make make N1QL queries programmatically. For example, your
				application might provide a client-side UI, whereby the user selects one or more values:
				the application arranges the values as a N1QL query-string, and passes this
				to a server-side program, supported by the Couchbase SDK. The server-side
				program queries Couchbase Server, and returns values to your client-side.
			</p>
			
			<p>
				This section provides a simple, off-the-shelf example, which works in the way 
				just described. The
				example uses <i>node.js</i>: this may or may not be the SDK-version you choose
				to use in the long term; but provides a server-side program that is easy to
				read and run, and is therefore a good example with which to start.
			</p>
			
		</section>
		
		<section>
			
			<title>
				Install node.js
			</title>
			
			<p>
				To install node.js, use the appropriate installer for your platform; which
				is available from 
				<xref href="https://nodejs.org/en/download/" scope="external" format="html">nodejs.org</xref>.
			</p>
			
		</section>
		
		<section>
			
			<title>
				Install the Couchbase SDK for node.js
			</title>
			
			<p>
				Bring up a command tool. Then, against the prompt, type the following:
			</p>
			
			<codeblock outputclass="language-bash">$ npm install couchbase</codeblock>
			
			<p>
				Then, add <codeph>node-gyp</codeph>:
			</p>
			
			<codeblock outputclass="language-bash">$ npm install node-gyp</codeblock>
			
		</section>
			
		<section>
			<title>
				Obtain the <i>Hello World!</i> Example
			</title>
		
			<p>
				The program you will now run is located 
				<xref href="https://github.com/couchbaselabs/helloWorldCouchbaseQueryDemo" scope="external" format="html">here</xref>. 
				It consists of only two program files, and
				you can save them anywhere you want. There are five supportive graphics files, and these must be
				saved in the same directory as the html file. 
			</p>
			
			<p>
				The file <codeph>nodeJSQueryAgent.js</codeph> is
				the server-side program that will run queries on Couchbase Server. The file
				<codeph>helloWorldCouchbaseQuery.html</codeph> is the html client that you will
				bring up in your browser.
			</p>
			
			<p>
				Note that we refer to this program as <i>Hello World!</i>, because it fits the
				tradition of an elementary code activity that is used as an introduction, for the new user.
				In fact, the words "Hello World" do not appear in this particular program! Instead, you will see
				information retrieved from the Couchbase Server's <codeph>travel-sample</codeph>
				bucket.
			</p>
		
		</section>
		
		<section>
			
			<title>
				Examine the Code
			</title>
			
			<p>
				Before running the program, take a look at the key elements within the code.
			</p>
			
			<p>
				<b>
					helloWorldCouchbaseQuery.html
				</b>
			</p>
			
			<p>
				Bring up <codeph>helloWorldCouchbaseQuery.html</codeph> in a text editor.
			</p>
			
			<p>
				This file contains a fair amount of JavaScript and html in support of the UI.
				However, the most essential elements, which relate to running queries on Couchbase Server,
				are actually quite simple. The user makes a selection on strings to be searched on, by
				means of radio-buttons:
			</p>
			
<codeblock outputclass="language-javascript">if (selectedCountryValue == 0)
{
	selectedCountry = "United States";
} 
else 
{
	if (selectedCountryValue == 1)
	{
		selectedCountryStyle = "United Kingdom";
	}
	else
	{
		if (selectedCountryValue == 2)
		{
			selectedCountryStyle = "France";
		}
	}	
}</codeblock>
			
			<p>
				The selected value is made part of a query-string that returns all documents
				within the <codeph>travel-sample</codeph> bucket that provide a match &#8212; with an
				upper limit of 10:
			</p>
			
			<codeblock outputclass="language-javascript">var selectedQuery = 'SELECT * FROM `travel-sample` LIMIT 10';
	
var selectedQuery = 'SELECT * FROM `travel-sample` WHERE country = ' + '\"' + selectedCountryStyle + '\"';</codeblock>
			
			<p>
				The query-string is then itself appended to a URL, which features the
				hostname and port-number at which the node.js server-side program will
				be listening:
			</p>
			
			<codeblock outputclass="language-javascript">var nodeJsAddress = "http://localhost:8082/";
				
var nodeJsTargetURL = nodeJsAddress + '?' + "myQuery=" + selectedQuery;</codeblock>
			
			<p>
				A <codeph>getJSON</codeph> call passes the query-string to the server-side
				program, and receives a value response:
			</p>
			
			<codeblock outputclass="language-javascript">$.getJSON(nodeJsTargetURL, function(dataReturnedFromCouchbase) 
{</codeblock>
			
			<p>
				Each document in the returned value, to maximum of 10, is added to a display-string,
				which is then displayed in the appropriate pane:
			</p>

			<codeblock outputclass="language-javascript">for (var currentKeyPosition = 0; currentKeyPosition &lt; 10; currentKeyPosition++)
{	
					
	$.each(dataReturnedFromCouchbase[currentKeyPosition], function(key, val) 
	{	
						
		$.each(val, function(newKey, newVal)
		{			
			cbDataDisplayString = cbDataDisplayString + \"&lt;i&gt;\" + JSON.stringify(newKey) + "&lt;/i&gt;" + " : " 
				+ "&lt;b&gt;" + JSON.stringify(newVal) + "&lt;/b&gt;" + '&lt;/p&gt;' + '&lt;p&gt;';
		});
	});

	cbDataDisplayString = cbDataDisplayString + '&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;';
}

document.getElementById('CouchbaseRetrievalsContent').innerHTML = cbDataDisplayString;</codeblock>

			
			<p>
				<b>
					nodeJsQueryAgent.js
				</b>
			</p>
			
			<p>
				The node.js <codeph>require</codeph> construct is used to ensure that the
				program has access to the right supportive modules. These include the one
				for Couchbase Server:
			</p>
			
			<codeblock outputclass="language-javascript">var http = require('http');
var url = require('url');
.
.
var couchbase = require("couchbase");</codeblock>
			
			<p>
				Variables are initialized for referencing the Couchbase Cluster and
				the <codeph>travel-sample</codeph> bucket:
			</p>
			
			<codeblock outputclass="language-javascript">var myCluster = new couchbase.Cluster('couchbase://localhost');
var myBucket = myCluster.openBucket('travel-sample');</codeblock>
			
			<p>
				The Couchbase SDK is now used to query Couchbase Server. A <i>Primary
				Index</i> is created, to allow a N1QL query to access the data that
				the cluster contains. Then, a N1QL query is made, specifying the
				query-string received from the html client. The values returned are
				passed back to the client, as a JSON string.
			</p>
			<codeblock outputclass="language-javascript">myBucket.get(theQueryString, function(err, res)  
{
	myBucket.manager().createPrimaryIndex(function()
	{
		myBucket.query(
			couchbase.N1qlQuery.fromString(theQueryString),
			function (err, rows) 
			{
				console.log("Got rows: %j", rows);	

				response.writeHead(200, {"Content-Type": "application/json", 
							"Access-Control-Allow-Origin": "*"});
				console.log("Returning...");	
				response.end(JSON.stringify(rows));
			});
		});
	});		

}).listen(8082);</codeblock>
			
			<p>
				Note that the program is specified to listen on port 8082. If you should
				happen already to have a program listening on that port, change this
				number to specify a port that is free. You must change the number both here
				and in the client html file.
			</p>
		</section>
		
		<section>
			<title>
				Run the Program
			</title>
			
			<p>
				In a command tool, navigate to the folder that contains the file
				<codeph>nodeJsQueryAgent.js</codeph>. Then, type the following:
			</p>
			
			<codeblock outputclass="language-bash">$ node nodeJsQueryAgent.js</codeblock>
			
			<p>
				This starts the node.js server. Now, bring up the file 
				<codeph>helloWorldCouchbaseQuery.html</codeph> in a browser. The initial
				appearance is as follows:
			</p>
			
			<p>
				<image href="./images/helloWorldInitial.png" id="hello_world_initial" align="left" width="660"/>
			</p>
			
			<p>
				Select a string to be queried on, by means of the radio buttons in the 
				<uicontrol>Airline Countries</uicontrol> panel. Then, left-click on the
				<uicontrol>Query Couchbase</uicontrol> button. The query is executed, and
				the returned values are displayed in the 
				<uicontrol>Travel-Sample Retrievals</uicontrol> panel:
			</p>
			
			<p>
				<image href="./images/helloWorldSubsequent.png" id="hello_world_subsequent" align="left" width="660"/>
			</p>
			
		</section>
		<section>	
			
			<title>
				Next
			</title>
			
			<p>
				The program you have just run, and the other activities provided throughout
				the <i>Getting Started</i> sequence, 
				have allowed you an initial glance at the rich array of features within Couchbase
				Server. You can learn more about all aspects of the system from the
				Couchbase documentation-set: and in the final stage of this <i>Getting Started</i>
				sequence, 
				<xref href="./choose-your-next-steps.dita" scope="local" format="dita">Choose Your Next Steps</xref>
				we suggest specific locations within the documentation-set for you to visit.
			</p>
			
		</section>
		
	</body>
	
</topic>


	

