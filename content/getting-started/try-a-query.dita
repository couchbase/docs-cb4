<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
  
<topic xml:lang="en-us" id="tryAQuery">
	
	<title>Run Your First N1QL Query</title>
	
	<shortdesc> Now that you have a basic understanding of buckets and documents, you can try querying
		them using N1QL (pronounced "nickel"), the Couchbase Server query language.</shortdesc>
	
	<body> 
		
		<section>
			
			<title>About N1QL</title>
			
			<p>N1QL embraces the JSON document model and uses SQL-like syntax. In N1QL, you operate on JSON
				documents, and the result of your operation is another JSON document. You can run
				N1QL queries from the command line, using the <codeph>cbq</codeph> tool; or from the
				Query Workbench in the Couchbase Server Web Console.</p>
			
			<p>A basic N1QL query has the following parts:</p>
			
			<ul>
				<li><codeph>SELECT</codeph> &#8212; The fields of each document to return.</li>
				<li><codeph>FROM</codeph> &#8212; The data bucket in which to look.</li>
				<li><codeph>WHERE</codeph> &#8212; The conditions that the document must satisfy.</li>
			</ul>
			
			<p>Here's an example of a basic N1QL query and the JSON document it returns. The query asks for
				the country that is associated with the airline <i>Excel Airways</i>: </p>
			
			<codeblock outputclass="language-sql">SELECT country FROM `travel-sample` WHERE name = "Excel Airways";</codeblock>
			<p>Note that for all identifiers (bucket names) that contain a hyphen character, you need
				to enclose the name with backtick (`) characters.</p>
			
			<p>The results:</p>
			
			<codeblock outputclass="language-json">{
    "requestID": "9e1cd084-f45e-4059-9e7a-edec30f60dd2",
    "signature": {
        "country": "json"
	},
    "results": [
        {
            "country": "United Kingdom"
        }
    ],
    "status": "success",
	"metrics": {
        "elapsedTime": "7.42097249s",
        "executionTime": "7.420925841s",
        "resultCount": 1,
        "resultSize": 51
    }
}</codeblock>
			
			<p>The country is thus specified as <codeph>United Kingdom</codeph>.</p>
			
		</section>
		
		<section>
			
			<title>Try the Interactive Query Shell</title>
			
				<p id="run-cbq">To run the interactive query shell, <codeph>cbq</codeph>, open a console window
				on your computer and enter the following:</p>
			
				<codeblock outputclass="bash">bash -c "clear &amp;&amp; docker exec -it db sh"</codeblock> 
				
				<p>Then, navigate to the Couchbase <codeph>bin</codeph> directory, and start
					<codeph>cbq</codeph>:</p>
			
				<codeblock outputclass="bash">cd /opt/couchbase/bin
./cbq -u Administrator -p password -engine=http://127.0.0.1:8091/</codeblock>	
			
				<p>This displays the <codeph>cbq</codeph> shell prompt, against which you can enter N1QL
				commands, specifying your currently installed buckets. For example, the following
				query returns the different values that are used by the documents in the
					<codeph>travel-sample</codeph> bucket for the <codeph>callsign</codeph> field,
				limiting the number of results to five:</p>
						
				<codeblock outputclass="language-sql">cbq> SELECT callsign FROM `travel-sample` LIMIT 5;</codeblock>
			
				<p>The results:</p>
				
				<codeblock outputclass="language-sql">{
    "requestID": "ae6fcd5b-e7f0-4725-ae1d-a38678c13a3e",
    "signature": {
        "callsign": "json"
    },
    "results": [
        {
            "callsign": "MILE-AIR"
        },
        {
            "callsign": "TXW"
        },
        {
            "callsign": "atifly"
        },
        {
             "callsign": null
        },
        {
             "callsign": "LOCAIR"
        }
    ],
    "status": "success",
    "metrics": {
        "elapsedTime": "33.748019ms",
        "executionTime": "33.673901ms",
        "resultCount": 5,
        "resultSize": 215
    }
}</codeblock>
			
			<p>The results thus contain five <codeph>callsign</codeph> values. A <codeph>callsign</codeph> is
				associated with an <codeph>airline</codeph>; and <codeph>airline</codeph> is one of
				the document types that the <codeph>travel-sample</codeph> bucket contains. Others
				are <codeph>airport</codeph> and <codeph>hotel</codeph>.</p>
			<p>You can also search on a type. For example, the following query returns a maximum of
				one <codeph>airport</codeph> document, and lists all of the fields that it
				contains:</p>
						
				<codeblock outputclass="language-sql">cbq> SELECT * FROM `travel-sample` WHERE type="airport" LIMIT 1;</codeblock>
				
				<p>The results:</p>
				
				<codeblock outputclass="language-sql">{
    "requestID": "c49a5885-9fde-40e3-871f-699f211078cc",
    "signature": {
        "*": "*"
    },
    "results": [
        {
            "travel-sample": {
                "airportname": "Calais Dunkerque",
                "city": "Calais",
                "country": "France",
                "faa": "CQF",
                "geo": {
                    "alt": 12,
                    "lat": 50.962097,
                    "lon": 1.954764
                },
                "icao": "LFAC",
                "id": 1254,
                "type": "airport",
                "tz": "Europe/Paris"
            }
        }
    ],
    "status": "success",
    "metrics": {
        "elapsedTime": "16.272029ms",
        "executionTime": "16.216091ms",
        "resultCount": 1,
        "resultSize": 489
    }
}</codeblock>
							
				<p>The following query returns the names of (at a maximum) ten hotels that accept pets, in the
				city of
				Medway:<codeblock>cbq> SELECT name FROM `travel-sample` WHERE type="hotel" AND city="Medway" and pets_ok=true LIMIT 10;</codeblock></p>
			<p>The results:</p>
								
				<codeblock outputclass="language-sql">{
    "requestID": "b6dc75dd-4ed2-40de-83c8-9aebb3820ad8",
    "signature": {
        "name": "json"
    },
    "results": [
        {
            "name": "Medway Youth Hostel"
        }
    ],
    "status": "success",
    "metrics": {
        "elapsedTime": "45.380072ms",
        "executionTime": "45.326531ms",
        "resultCount": 1,
        "resultSize": 53
    }
}</codeblock>
								
				<p>The following query returns the <codeph>name</codeph> and <codeph>phone</codeph> fields for
				up to 10 documents for hotels in Manchester, where directions are not missing, and
				orders the results by name:</p>
			<p>
				<codeblock>cbq> SELECT name,phone FROM `travel-sample` WHERE type="hotel" AND city="Manchester" and directions IS NOT MISSING ORDER BY name LIMIT 10;</codeblock>
			</p>
			<p>The results:</p>
				
				<codeblock outputclass="language-sql">{
    "requestID": "a3561cba-2377-4282-9c0f-68fc627950f6",
    "signature": {
        "name": "json",
        "phone": "json"
    },
    "results": [
    	{
            "name": "Hilton Chambers",
            "phone": "+44 161 236-4414"
    	},
        {
            "name": "Sachas Hotel",
            "phone": null
    	},
        {
            "name": "The Mitre Hotel",
            "phone": "+44 161 834-4128"
        },

    ],
    "status": "success",
    "metrics": {
        "elapsedTime": "22.211069ms",
        "executionTime": "22.108582ms",
        "resultCount": 3,
        "resultSize": 253,
        "sortCount": 3
    }
}</codeblock>
				
			</section>
		
		<section>
			
			<title>Try the Query Workbench</title>
		
			<p>The Couchbase Server Web Console includes the Query Workbench, an interactive tool that lets
				you compose and execute N1QL queries. To use the Query Workbench, log into the
				Couchbase Server Web Console, and then click <uicontrol>Query</uicontrol>:</p>
			
			<p>
				<image href="./images/queryWorkbench.png" id="query_workbench" align="left" width="720"/>
			</p>
			
			<p>The Query Workbench has three principal areas:</p>
			
			<ul>
				<li><uicontrol>Query Editor</uicontrol>: Where you will type your N1QL query</li>
				
				<li><uicontrol>Bucket Insights</uicontrol>: Provides information on the buckets that are
					currently maintained by your system. Right now, it shows that just one exists;
					the bucket <codeph>travel-sample</codeph>.  </li>
				
				<li><uicontrol>Query Results</uicontrol>: Shows query results and provides a number of options
					for their display. To start with, you will use the default option, which is
					selectable by the <uicontrol>JSON</uicontrol> button, and duly displays results
					in JSON-format.  </li>
			</ul>
			
			<p>Use the Query Workbench to enter the following N1QL query:</p>
			<codeblock>SELECT name FROM `travel-sample` WHERE callsign = "MILE-AIR";</codeblock>
			
			<p>
				<image href="./images/firstQuery.png" id="first_query" align="left" width="660"/>
			</p>
			
			<p> To execute your query, click <uicontrol>Execute</uicontrol>.</p>
			
			<p> The results now appear in the <uicontrol>Query Results</uicontrol> panel:</p>
			
			<p>
				<image href="./images/queryResultsJSON.png" id="query_results_json" align="left" width="660"/>
			</p>
			
			<p>As you can see, a single document was found to match your specified criterion &#8212; the
				document whose <codeph>name</codeph> value is <codeph>40-Mile Air</codeph> (which
				is, in fact, the document you took an initial look at during the previous step in
				this <i>Getting Started</i> sequence).</p>
			
		</section>

					
		<section>	
			
			<title>Next</title>
			
			<p>The final step in the <i>Getting Started</i> sequence, <xref
					href="./choose-your-next-steps.dita" scope="local" format="dita">Choose Your
					Next Steps</xref>, offers suggestions for learning more about Couchbase and
				using it for production use-cases.</p>
			
		</section>
		
		<section>
			
			<title>
				Other Destinations
			</title>
			
			<ul>
				<li><xref href="../sdk/nodejs/n1ql-queries-with-sdk.dita#topic_esq_3td_5v">N1QL from
						the SDK</xref>: Explains how to execute N1QL queries programmatically using
					the official Couchbase SDKs.</li>
				<li><xref href="https://query-tutorial.couchbase.com/tutorial/#1" format="html" scope="external"
						>N1QL Query Language Tutorial</xref>: Provides interactive web modules where
					you can learn about N1QL without having Couchbase Server installed in your own
					environment. The modules are self-contained and let you modify and run sample
					queries. The tutorial covers <codeph>SELECT</codeph> statements in detail,
					including examples of <codeph>JOIN</codeph>, <codeph>NEST</codeph>,
						<codeph>GROUP BY</codeph>, and other typical clauses.</li>
				
				<li><xref href="http://docs.couchbase.com/files/Couchbase-N1QL-CheatSheet.pdf" format="pdf"
						scope="external">N1QL Cheat Sheet</xref>: Provides a concise summary of the
					basic syntax elements of N1QL. Print it out and keep it on your desk where it'll
					be handy for quick reference.</li>
				
				<li><xref href="../n1ql/n1ql-language-reference/index.dita#n1ql-lang-ref"/>: Describes the N1QL
					language structure, including syntax and usage.</li>
				
				<li><xref href="https://www.couchbase.com/resources/webinars" format="html" scope="external"
						>Couchbase Webinars</xref>: Live and recorded presentations by Couchbase
					engineers and product managers that highlight features and use-cases of
					Couchbase Server, including N1QL.</li>
				
				<li><xref href="https://blog.couchbase.com/" format="html" scope="external">Couchbase
						Blog</xref>: Regularly-posted technical articles and announcements written
					by Couchbase employees, including SDK developers.</li>
				
				<li><xref href="https://forums.couchbase.com/c/n1ql" format="html" scope="external">Couchbase
						Forum</xref>: A community resource where you can ask questions, find
					answers, and discuss N1QL with other developers and the Couchbase team.</li>
			</ul>

		</section>
		
	</body>
	
</topic>


	

