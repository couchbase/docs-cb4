<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
  
<topic xml:lang="en-us" id="tryAQuery">
	
	<title> Your First N1QL Query </title>
	
	<shortdesc>
		N1QL (pronounced "nickel") is the Couchbase Server query language.
	</shortdesc>
	
	<body> 
		
		<section>
			
			<title>
				About N1QL
			</title>
			
			<p>
				N1QL embraces the JSON document model and uses SQL-like syntax. In N1QL, you operate on JSON
				documents, and the result of your operation is another JSON document. N1QL queries can
				be run from the command line, using the <codeph>cbq</codeph>
				tool; or by means of the Query Workbench, provided by the Couchbase Web Console.
			</p>
			
			<p>
				A basic N1QL query has the following parts:
			</p>
			
			<ul>
				<li>
					<codeph>SELECT</codeph> &#8212; The fields of each document to return.</li>
				<li>
					<codeph>FROM</codeph> &#8212; The data bucket in which to look.</li>
				<li>
					<codeph>WHERE</codeph> &#8212; The conditions that the document must satisfy.</li>
			</ul>
			
			<p>
				Here's an example of a basic N1QL query and the JSON document it returns. 
				The query asks for the country associated with the airline
				<i>Excel Airways</i> &#8212; note that for all identifiers (bucket names) that contain a hyphen character, you
				need to enclose the name with backtick (`) characters:
			</p>
			
			<codeblock outputclass="language-sql">SELECT country FROM `travel-sample` WHERE name = "Excel Airways";</codeblock>
			
			<p>
				The result is as follows:
			</p>
			
			<codeblock outputclass="language-json">[
  {
    "country": "United Kingdom"
  }
]</codeblock>
			
			<p> </p>
			
		</section>
			
		<section>
				
			<title>
				Making N1QL queries
			</title>
				<p>
					After you install Couchbase Server, you can start using N1QL right away; either with
					the interactive query shell, <codeph>cbq</codeph>; or with the Query Workbench, 
					which is provided by the Couchbase Web Console.
				</p>
			
		</section>
		
		<section>
			
			<title>
				Try the Interactive Query Shell
			</title>
			
				<p id="run-cbq">
					To run the interactive query shell, <codeph>cbq</codeph>, bring up a console window 
					on your machine, and enter
					the following against the prompt:
				</p>
			
				<codeblock outputclass="bash">$ bash -c "clear &amp;&amp; docker exec -it db sh"</codeblock> 
				
				<p>
					Then, navigate to the Couchbase <codeph>bin</codeph> directory, and start <codeph>cbq</codeph>:
				</p>
			
				<codeblock outputclass="bash"># cd /opt/couchbase/bin
# ./cbq -u Administrator -p password -engine=http://127.0.0.1:8091/</codeblock>	
			
				<p>
					This displays the <codeph>cbq</codeph> shell prompt, against which you can enter N1QL
					commands, specifying your currently installed buckets. 
					For example, the following query returns
					the different values used by documents in the <codeph>travel-sample</codeph> bucket 
					for the <codeph>callsign</codeph>
					field, limiting the number of results to 5:
				</p>
						
				<codeblock outputclass="language-sql">cbq> SELECT callsign FROM `travel-sample` LIMIT 5;</codeblock>
			
				<p>
					The result is as follows:
				</p>
				
				<codeblock outputclass="language-sql">{
    "requestID": "ae6fcd5b-e7f0-4725-ae1d-a38678c13a3e",
    "signature": {
        "callsign": "json"
    },
    "results": [
        {
            "callsign": "MILE-AIR"
        },
        {
            "callsign": "TXW"
        },
        {
            "callsign": "atifly"
        },
        {
             "callsign": null
        },
        {
             "callsign": "LOCAIR"
        }
    ],
    "status": "success",
    "metrics": {
        "elapsedTime": "33.748019ms",
        "executionTime": "33.673901ms",
        "resultCount": 5,
        "resultSize": 215
    }
}</codeblock>
			
			<p> The result thus contains five <codeph>callsign</codeph> values. A <codeph>callsign</codeph>
				is associated with an airline; and <codeph>airline</codeph> is one of the document
				types that the <codeph>travel-sample</codeph> bucket contains; other types include
					<codeph>airport</codeph> and <codeph>hotel</codeph>. You can search on a type;
				for example, the following query returns a maximum of one <codeph>airport</codeph>
				document, and lists all the fields it contains. </p>
						
				<codeblock outputclass="language-sql">cbq> SELECT * FROM `travel-sample` WHERE type="airport" LIMIT 1;</codeblock>
				
				<p>
					The query-result is as follows:
				</p>
				
				<codeblock outputclass="language-sql">{
    "requestID": "c49a5885-9fde-40e3-871f-699f211078cc",
    "signature": {
        "*": "*"
    },
    "results": [
        {
            "travel-sample": {
                "airportname": "Calais Dunkerque",
                "city": "Calais",
                "country": "France",
                "faa": "CQF",
                "geo": {
                    "alt": 12,
                    "lat": 50.962097,
                    "lon": 1.954764
                },
                "icao": "LFAC",
                "id": 1254,
                "type": "airport",
                "tz": "Europe/Paris"
            }
        }
    ],
    "status": "success",
    "metrics": {
        "elapsedTime": "16.272029ms",
        "executionTime": "16.216091ms",
        "resultCount": 1,
        "resultSize": 489
    }
}</codeblock>
							
				<p>
					The following query returns the names of (at a maximum) ten hotels that accept pets,
					in the city of Medway.
				</p>
								
				<codeblock outputclass="language-sql">cbq> SELECT name FROM `travel-sample` WHERE type="hotel" AND city="Medway" and pets_ok=true LIMIT 10;
{
    "requestID": "b6dc75dd-4ed2-40de-83c8-9aebb3820ad8",
    "signature": {
        "name": "json"
    },
    "results": [
        {
            "name": "Medway Youth Hostel"
        }
    ],
    "status": "success",
    "metrics": {
        "elapsedTime": "45.380072ms",
        "executionTime": "45.326531ms",
        "resultCount": 1,
        "resultSize": 53
    }
}</codeblock>
								
				<p>
					The
					following query returns the <codeph>name</codeph> and
					<codeph>phone</codeph> fields for up to 10 documents for hotels in Manchester, where
					directions are not missing; and orders the results by name:
				</p>
				
				<codeblock outputclass="language-sql">cbq> SELECT name,phone FROM `travel-sample` WHERE type="hotel" AND city="Manchester" and directions IS NOT MISSING ORDER BY name LIMIT 10;
{
    "requestID": "a3561cba-2377-4282-9c0f-68fc627950f6",
    "signature": {
        "name": "json",
        "phone": "json"
    },
    "results": [
    	{
            "name": "Hilton Chambers",
            "phone": "+44 161 236-4414"
    	},
        {
            "name": "Sachas Hotel",
            "phone": null
    	},
        {
            "name": "The Mitre Hotel",
            "phone": "+44 161 834-4128"
        },

    ],
    "status": "success",
    "metrics": {
        "elapsedTime": "22.211069ms",
        "executionTime": "22.108582ms",
        "resultCount": 3,
        "resultSize": 253,
        "sortCount": 3
    }
}</codeblock>
				
			</section>
		
		<section>
			
			<title>
				Try the Query Workbench
			</title>
		
			<p>
				The Couchbase Web Console
				provides a <i>Query Workbench</i>, at which you can compose and execute N1QL queries.
				Left-click on the <uicontrol>Query</uicontrol> tab, located on the horizontal control-bar, near
				the top of the Couchbase Web Console:
			</p>
			
			<p>
				<image href="./images/queryButton.png" id="query_button" align="left" width="100"/>
			</p>
			
			<p>
				This brings up the Query Workbench. 
			</p>
			
			<p>
				<image href="./images/queryWorkbench.png" id="query_workbench" align="left" width="720"/>
			</p>
			
			<p>
				The workbench has three principal areas, which are:
			</p>
			
			<ul>
				<li>
					An upper <uicontrol>Query Editor</uicontrol> panel, which is 
					where you will type your N1QL query. 
					
					<p>
						<!-- Vertical space -->
					</p>
					
				</li>
				
				<li>
					A <uicontrol>Bucket Insights</uicontrol> panel, at the right. This provides information on the
					buckets currently maintained by your system. Right now, it shows that just one exists; the
					bucket <codeph>travel-sample</codeph>. 
					
					<p>
						<!-- Vertical space -->
					</p>
					
				</li>
				
				<li>
					A <uicontrol>Query Results</uicontrol> panel, at the bottom-left. This shows query-results; and provides
					a number of options for their display. To start with, you will use the default option, which is
					selectable by the <uicontrol>JSON</uicontrol> button, and duly displays results in JSON-format.
					
					<p>
						<!-- Vertical space -->
					</p>
					
				</li>
			</ul>
			
			<p>
				You can now use the Query Workbench to enter a N1QL query. In the upper panel, enter the following:
			</p>
			
			<p>
				<image href="./images/firstQuery.png" id="first_query" align="left" width="660"/>
			</p>
			
			<p>
				To execute your query, left-click on the <uicontrol>Execute</uicontrol> button, at the upper-left:
			</p>
			
			<p>
				<image href="./images/executeButton.png" id="execute_button" align="left" width="100"/>
			</p>
			
			<p>
				Query-results now appear in the <uicontrol>Results</uicontrol> panel:
			</p>
			
			<p>
				<image href="./images/queryResultsJSON.png" id="query_results_json" align="left" width="660"/>
			</p>
			
			<p>
				As you can see, a single document was found to match your specified criterion: which was the document
				whose <codeph>name</codeph> value is <codeph>40-Mile Air</codeph> (which is, in fact, the document you took an initial
				look at, during the previous stage of the <i>Getting Started</i> sequence).
			</p>
			
		</section>

					
		<section>	
			
			<title>
				Next
			</title>
			
			<!-- Removed for 5.0 beta1
			
			<p>
				You can execute N1QL queries programmatically, as well as manually. This is demonstrated by means of
				an off-the-shelf code example in the next section,
				<xref href="./run-hello-world.dita" scope="local" format="dita">Run Hello World!</xref>.
			</p>
			
			-->
			
			<!-- Substitute, for 5.0 beta1 -->
			
			<p>
				In the final stage of this <i>Getting Started</i>
				sequence, 
				<xref href="./choose-your-next-steps.dita" scope="local" format="dita">Choose Your Next Steps</xref>
				suggestions are provided as to locations you can visit next.
			</p>
			
		</section>
		
		<section>
			
			<title>
				Other Destinations
			</title>
			
			<p>
				In addition to following this brief tutorial, you can learn more about N1QL by looking
				at these in-depth resources:
			</p>
			
			<ul>
				<li>
					The <xref href="http://query.pub.couchbase.com/tutorial/#1" format="html"
						scope="external">online interactive tutorial</xref> allows you to learn about N1QL
					without having Couchbase Server installed in your own environment. It's a
					self-contained tutorial that runs in a web browser and lets you modify the sample
					queries. The tutorial covers SELECT statements in detail, including examples of JOIN,
					NEST, GROUP BY, and other typical clauses. 
				</li>
				
				<li>
					The <xref href="http://docs.couchbase.com/files/Couchbase-N1QL-CheatSheet.pdf"
						format="pdf" scope="external">N1QL cheat sheet</xref> provides a concise summary
					of the basic syntax elements. Print it out and keep it on your desk where it'll be
					handy for quick reference.
				</li>
				
				<li>
					The <xref href="../n1ql/n1ql-language-reference/index.dita#n1ql-lang-ref"/> contains
					details about N1QL syntax and usage.
				</li>
				
				<li>
					Live and recorded <xref href="http://www.couchbase.com/nosql-resources/webinar"
						format="html" scope="external">Webinars</xref> presented by Couchbase engineers
					and product managers highlight features and use cases of Couchbase Server, including
					N1QL. Here are some links to webinars devoted entirely to N1QL: <xref
						href="https://event.on24.com/eventRegistration/EventLobbyServlet?target=reg20.jsp&amp;eventid=962567&amp;sessionid=1&amp;key=00929333AAF46D0054877324FBC3CB85&amp;sourcepage=register"
						format="html" scope="external">Couchbase 103: Querying</xref> and <xref
							href="http://info.couchbase.com/webinar-N1QL-ad-hoc-querying-for-NoSQL-applications.html"
							format="html" scope="external">Ad hoc Querying for NoSQL</xref>.
				</li>
				
				<li>
					<xref href="http://blog.couchbase.com" format="html" scope="external">Couchbase
						blogs</xref> include articles written by Couchbase SDK developers.
				</li>
				
				<li>The <xref href="https://forums.couchbase.com/c/n1ql" format="html" scope="external"
					>Couchbase forum</xref> is a community resource where you can ask questions, find
					answers, and discuss N1QL with other developers and the Couchbase team.
				</li>
			</ul>

		</section>
		
	</body>
	
</topic>


	

