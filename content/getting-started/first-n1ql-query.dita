<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="first-n1ql">
	<title>Running Your First N1QL Query</title>
	<shortdesc>N1QL (pronounced "nickel") is the Couchbase Server query language. </shortdesc>
	<conbody>
		<p>N1QL embraces the JSON document model and uses SQL-like syntax. In N1QL, you operate on JSON
			documents, and the result of your operation is another JSON document. N1QL queries can
			be run on the web from the Couchbase Web Console, or from the command line using the cbq
			tool.</p>
		<p>A basic N1QL query has these parts:</p>
		<ul>
			<li><codeph>SELECT</codeph>—the fields of each document to return</li>
			<li><codeph>FROM</codeph>—the data bucket to look in</li>
			<li><codeph>WHERE</codeph>—conditions the document must satisfy</li>
		</ul>

		<p>Here's an example of a basic N1QL query and the JSON document it returns. The following
			query asks for the names of beers produced by the Mishawaka Brewing Company:</p>
		<codeblock outputclass="language-sql" spectitle="Query">SELECT name FROM `beer-sample` WHERE  brewery_id ="mishawaka_brewing";</codeblock>
		<note>Remember that for all identifiers (bucket names) that contain a hyphen character, you
			need to enclose the name with backtick (`) characters.</note>
		<codeblock outputclass="language-json" spectitle="Result">{
    "requestID": "fb844e2b-0f9a-422c-bda5-1f81cebd7a72",
    "signature": {
        "name": "json"
    },
    "results": [
        {
            "name": "Wall Street Wheat Ale"
        },
        {
            "name": "Lake Effect Pale Ale"
        },
        {
            "name": "Raspberry Wheat Ale"
        },
        {
            "name": "Kolsch"
        },
        {
            "name": "Four Horsemen Ale"
        },
        {
            "name": "INDIAna Pale Ale"
        }
    ],
    "status": "success",
    "metrics": {
        "elapsedTime": "474.080629ms",
        "executionTime": "474.045631ms",
        "resultCount": 6,
        "resultSize": 303
    }
}</codeblock>
		<section>
			<title>Making N1QL queries</title>
			<p>After you install Couchbase Server, you can start using N1QL right away. You can make N1QL
				requests in your applications or run N1QL queries against your database using either
				the Query Workbench on the Couchbase Web Console or the interactive query shell,
					<cmdname>cbq</cmdname>.</p>
			<p>The <xref href="../tools/query-workbench.dita#topic_prr_nyh_t5">Query Workbench</xref> is
				integrated with the Couchbase Web console and is available on the
					<uicontrol>Query</uicontrol> tab. <note>The Query Workbench only runs on nodes
					which are running the Query service. If the Query service is <i>not </i>running
					on the current node, it provides a link to the nodes in the cluster which
						<i>are</i> running the Query service.</note></p>
			<p id="run-cbq">The <cmdname>cbq</cmdname> shell is available in your installation directory. To
				run the cbq shell: </p>
			<ol>

				<li>Open a command window on a Couchbase Server node that has the query service
					enabled.</li>
				<li>Enter the command to start the interactive query shell: <ul>
						<li>On Linux systems: $ <userinput>/opt/couchbase/bin/cbq</userinput></li>
					<li>On OS X systems: $ <userinput>/Applications/Couchbase\ Server.app/Contents/Resources/couchbase-core/bin/cbq</userinput>
							</li>
						<li>On Windows systems: $ <userinput>C:\Program Files\Couchbase\Server\bin\cbq.exe</userinput></li>
					</ul></li>
			</ol>
			<p>Before you can run your first query, create a primary index on the bucket, for example
				`travel-sample`. The primary index contains a list of every document within the
				database, with the document ID as the key.
				<codeblock>CREATE PRIMARY INDEX ON `travel-sample` USING GSI;</codeblock></p>
			<p>To learn how to send N1QL queries from an application, read the N1QL topic in the SDK for the language you are using.</p>
		</section>

		<section>
			<title>Trying out N1QL with the <codeph>beer-sample</codeph> bucket</title>
			<p>Try N1QL and use <cmdname>cbq</cmdname> to run queries against the
					<codeph>beer-sample</codeph> bucket you installed earlier. </p>
			<p>Use the hostname of the machine running the query service: if you installed Couchbase
				Server on your local machine, the host name is <codeph>localhost</codeph>.</p>
			<ol>
				<li>Verify that the <codeph>beer-sample</codeph> bucket is installed: <ol>
						<li>Open the Couchbase Web Console and log in.</li>
						<li> Choose <menucascade>
								<uicontrol>Settings</uicontrol>
								<uicontrol>Sample Buckets</uicontrol>
							</menucascade> and verify whether the <codeph>beer-sample</codeph>
							bucket is installed. </li>
						<li>If it is not available, follow the on-screen instructions to install
							it.</li>
					</ol></li>
			
			
				<li>Start <cmdname>cbq</cmdname> on your system (Linux, Mac OSX, or Windows) to to run some
					queries against the <codeph>beer-sample</codeph> bucket. <dl>
						<dlentry>
							<dt>On Linux systems</dt>
							<dd>
								<codeblock>$ /opt/couchbase/bin/cbq</codeblock>
							</dd>
						</dlentry>
					</dl><dl>
						<dlentry>
							<dt>On OS X systems</dt>
							<dd>
								<codeblock>$ /Applications/Couchbase\ Server.app/Contents/Resources/couchbase-core/bin/cbq </codeblock>
							</dd>
						</dlentry>
					</dl><dl>
						<dlentry>
							<dt>On Windows systems</dt>
							<dd>
								<codeblock>$ C:\Program Files\Couchbase\Server\bin\cbq.exe </codeblock>
							</dd>
						</dlentry>
					</dl><p>You are now at the <cmdname>cbq</cmdname> command prompt and can start
						running N1QL queries. Remember to end each query with a semicolon.</p></li>
				<li>Run the following command to create the primary index:
					<codeblock outputclass="language-sql">cbq> CREATE PRIMARY INDEX ON `beer-sample` USING GSI;</codeblock></li>
				<li>Now that your bucket is indexed, you can run some queries to explore the data it contains.
					Here are few sample queries to get you started.<p>The following query returns
						the different values used for the <codeph>type</codeph>
						field:</p><codeblock outputclass="language-sql">cbq> SELECT DISTINCT type FROM `beer-sample`;</codeblock><p>Each
						document in the bucket contains a <codeph>type</codeph> field that indicates
						the kind of data the document contains. The <codeph>beer-sample</codeph>
						bucket contains two kinds of documents—documents that describe breweries
						(the value for <codeph>type</codeph> is <codeph>brewery</codeph>) and
						documents that describe beers (the value for <codeph>type</codeph> is
							<codeph>beer</codeph>). </p><p>The following query returns one
							<codeph>brewery</codeph> document and lists all the fields it
						contains:</p><codeblock outputclass="language-sql">cbq> SELECT * FROM `beer-sample` WHERE type="brewery" LIMIT 1;</codeblock><p>The
							<codeph>beer-sample</codeph> bucket contains over 7000 documents, so the
						queries shown here contain a <codeph>LIMIT</codeph> clause to minimize the
						number of rows returned. </p><p>The following query returns all fields in
						one <codeph>beer</codeph> document. The <codeph>IS NOT MISSING</codeph>
						clause on the <codeph>brewery_id </codeph>field tells N1QL to return only
						documents that have a <codeph>brewery_id</codeph>
						field.<codeblock outputclass="language-sql">cbq> SELECT * FROM `beer-sample` WHERE brewery_id IS NOT MISSING 
     AND type="beer" LIMIT 1;</codeblock></p><p>The
						following query returns the <codeph>brewery_id</codeph> and
							<codeph>name</codeph> fields from 5 beer
						documents:<codeblock outputclass="language-sql">cbq> SELECT brewery_id, name FROM `beer-sample` 
     WHERE brewery_id IS NOT MISSING AND type="beer" LIMIT 5;</codeblock></p><p>The
						following query returns 5 beer documents, but includes only the
							<codeph>brewery_id</codeph> field for each document. It orders them
						alphabetically by the <codeph>brewery_id</codeph> field and does not include
						any documents that do not have a <codeph>brewery_id</codeph>
					field.</p><codeblock outputclass="language-sql">cbq> SELECT DISTINCT brewery_id FROM `beer-sample` 
     WHERE brewery_id IS NOT MISSING ORDER BY brewery_id LIMIT 5;</codeblock></li>
				<li>When you are finished, type <uicontrol>control-D</uicontrol> to exit
						<cmdname>cbq</cmdname> and return to the command prompt.</li>
			</ol>
		</section>
		<section>
			<title>Learning more about N1QL</title>
			<p>In addition to following this brief tutorial, you can learn more about N1QL by looking
				at these in-depth resources:</p>
			<ul>
				<li>The <xref href="http://query.pub.couchbase.com/tutorial/#1" format="html"
					scope="external">online interactive tutorial</xref> allows you to learn about N1QL
					without having Couchbase Server installed in your own environment. It's a
					self-contained tutorial that runs in a web browser and lets you modify the sample
					queries. The tutorial covers SELECT statements in detail, including examples of JOIN,
					NEST, GROUP BY, and other typical clauses. </li>
				<li>The <xref href="http://docs.couchbase.com/files/Couchbase-N1QL-CheatSheet.pdf"
					format="pdf" scope="external">N1QL cheat sheet</xref> provides a concise summary
					of the basic syntax elements. Print it out and keep it on your desk where it'll be
					handy for quick reference.</li>
				<li>The <xref href="../n1ql/n1ql-language-reference/index.dita#n1ql-lang-ref"/> contains
					details about N1QL syntax and usage.</li>
				<li>Live and recorded <xref href="http://www.couchbase.com/nosql-resources/webinar"
					format="html" scope="external">Webinars</xref> presented by Couchbase engineers
					and product managers highlight features and use cases of Couchbase Server, including
					N1QL. Here are some links to webinars devoted entirely to N1QL: <xref
						href="https://event.on24.com/eventRegistration/EventLobbyServlet?target=reg20.jsp&amp;eventid=962567&amp;sessionid=1&amp;key=00929333AAF46D0054877324FBC3CB85&amp;sourcepage=register"
						format="html" scope="external">Couchbase 103: Querying</xref> and <xref
							href="http://info.couchbase.com/webinar-N1QL-ad-hoc-querying-for-NoSQL-applications.html"
							format="html" scope="external">Ad hoc Querying for NoSQL</xref>.</li>
				<li><xref href="http://blog.couchbase.com" format="html" scope="external">Couchbase
					blogs</xref> include articles written by Couchbase SDK developers.</li>
				<li>The <xref href="https://forums.couchbase.com/c/n1ql" format="html" scope="external"
					>Couchbase forum</xref> is a community resource where you can ask questions, find
					answers, and discuss N1QL with other developers and the Couchbase team.</li>
			</ul>
			
		</section>
	</conbody>
</concept>
