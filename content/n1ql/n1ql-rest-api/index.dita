<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_djt_2pj_kr">
	<title>N1QL REST API</title>
	<shortdesc>N1QL provides a REST API to enable clients to execute N1QL statements. The REST API runs
		synchronously, so once execution of the statement in the request is started, results are
		streamed back to the client, terminating when execution of the statement finishes. In this
		section, you will find information about the REST endpoints, request and response
		parameters, and examples.  </shortdesc>
	<conbody>
		<p>The REST endpoints are:</p>

		<ul>
			<li>
				<codeph>http://<varname>node</varname>:8093/query/service</codeph></li>
			<li>
				<codeph>https://<varname>node</varname>:18093/query/service</codeph> (for secure
				access)</li>
		</ul>
		<p>where <varname>node</varname> is the host name or IP address of a computer running the N1QL
			query engine.</p>

		<p>The N1QL REST API query service allows you to execute a N1QL statement.</p>
		<p>See  <xref href="examplesrest.dita"/> for REST API samples.</p>
<section> <title>Request specification</title>
			<p>This section describes how to specify requests.</p>
			<dl>
				<dlentry>
					<dt>Request format</dt>
					<dd>Here is the format for GET and POST requests. <p>
							<codeblock>GET /query/service</codeblock>
					</p><p><codeblock>POST /query/service</codeblock></p></dd>
				</dlentry>
				<dlentry>
					<dt>Request parameters</dt>
					<dd>For a table of request parameters that can be passed in a request to the /query/service
						endpoint with examples, see <xref
							href="../../settings/query-settings.dita#topic_wk1_5v3_t5/section_nnj_sjk_k1b"
							>Request-Level Parameters</xref>.</dd>
				</dlentry>
				<dlentry>
					<dt>Named parameters</dt>
					<dd>If the statement in a request contains named parameters, the request should contain the
						parameters described in the following table. <p><b>Example 1:</b> A
							statement containing named parameters.</p><codeblock> SELECT detail FROM emp WHERE name = $nval AND age > $aval						</codeblock>
						<table>
							<tgroup cols="2">
								<colspec colname="col1" colwidth="1*"/>
								<colspec colname="col2" colwidth="5*"/>
								<thead>
									<row>
										<entry>Parameter Name</entry>
										<entry>Value</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<codeph>statement</codeph>
										</entry>
										<entry>
											<codeph>SELECT detail FROM emp WHERE name = $nval AND
												age > $aval</codeph>
										</entry>
									</row>
									<row>
										<entry>
											<codeph>$nval</codeph>
										</entry>
										<entry>"smith"</entry>
									</row>
									<row>
										<entry>
											<codeph>$aval</codeph>
										</entry>
										<entry>45</entry>
									</row>
								</tbody>
							</tgroup>
						</table>  There should be a named parameter in the request for each query
						parameter in the requestâ€™s statement parameter. </dd>
					<dd><note>The <b>%</b> symbol is the escape character in URIs, so when using %
							as a wildcard in a query, we need to escape that by replacing it with
							its corresponding ASCII code <b>%25</b>.</note><b>Example 2:</b> A
						statement containing a wildcard parameter.</dd>
					<dd><codeblock>$ curl -v http://172.23.99.98:8093/query/service  -d 'statement=SELECT meta().id FROM `travel-sample`  WHERE type = "hotel" and meta().id LIKE $1 &amp;args=["hotel_1002%25"]'</codeblock>Results:</dd>
					<dd>
						<codeblock>[
  {
    "id": "hotel_10026"
  },
  {
    "id": "hotel_10025"
  }
]</codeblock>
					</dd>
				</dlentry>
				<dlentry>
					<dt>Positional parameters</dt>
					<dd>If the statement in a request contains positional parameters, the request should contain
						the parameters described in the following table. <p>Here is an example of a
							statement containing positional
							parameters:</p><codeblock> SELECT detail FROM emp WHERE name = $1 AND hiredate > $2 						</codeblock>
						
						
						
						
						<table>
							
							<tgroup cols="2">
								<colspec colname="col1" colwidth="1*"/>
								<colspec colname="col2" colwidth="5*"/>
								
								<thead>
							<row>
								<entry> Parameter Name</entry>
								<entry> Value</entry>
							</row>
								</thead>
								<tbody>
									<row>
										<entry><codeph>statement</codeph>
										</entry>
										<entry><codeph>SELECT detail FROM emp WHERE name = $1 AND
												age > $2</codeph>
										</entry>
									</row>
									
								<row>
								<entry>
									<codeph>args</codeph>
								</entry>
								<entry>[ "smith", 45 ]</entry>
							</row></tbody></tgroup>
						</table>
						
						
						<p> Positional parameters can also be specified in a statement
							using the question mark (?), so the following statement is an
							alternative way to specify the same query: </p>
						
						
						
						<table>
							<tgroup cols="2">
								<colspec colname="col1" colwidth="1*"/>
								<colspec colname="col2" colwidth="5*"/>
								
								<thead>	
							
						<row>
							
									<entry>Parameter Name</entry>
								<entry>Value</entry>
						</row>
								</thead>
								<tbody>
									
								<row>
								<entry>
									<codeph>statement</codeph>
								</entry>
								<entry>
									<codeph>SELECT detail FROM emp WHERE name = ? AND age >
										?</codeph>
								</entry>
							</row>
							<row>
								<entry>
									<codeph>args</codeph>
								</entry>
								<entry>[ "smith", 45 ]</entry>
							</row></tbody></tgroup></table>
						</dd>
				</dlentry>
				<dlentry>
					<dt>Consistency parameters</dt>
					<dd><p><b>scan_consistency</b></p>
						<p>This parameter specifies the consistency guarantee or constraint for index scanning using
							one of the values listed in the following table. </p><p>
						
								
								<table>
								<title>scan_consistency parameters</title>
									<tgroup cols="2">
										<colspec colname="col1" colwidth="1*"/>
										<colspec colname="col2" colwidth="4*"/>
										
										<thead>	
									
								
										<row>
											<entry>Value</entry>
											<entry>Description</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry><codeph>not_bounded</codeph></entry>
											<entry>Default value for single-statement requests. <p>No timestamp vector is used in the
												index scan. This is also the fastest mode as we
												eliminate the cost of obtaining the vector and any
												wait time for the index to catch up with the
												vector.</p></entry>
										</row>
										<row>
											<entry><codeph>at_plus</codeph></entry>
											<entry>This implements bounded consistency. The request includes a
												<codeph>scan_vector</codeph> parameter and a
												value, which is used as a lower bound. This can be
												used to implement read-your-own-writes
												(RYOW).</entry>
										</row>
										<row>
											<entry><codeph>request_plus</codeph></entry>
											<entry>This implements strong consistency per request. Before processing the request, a
												current vector is obtained. The vector is used as a
												lower bound for the statements in the request. If
												there are DML statements in the request, RYOW is
												also applied within the request. <p>If
												<codeph>request_plus</codeph> is specified in a
												query that runs during a failover of an index
												node, the query waits until the rebalance
												operation completes and the index data has
												rebalanced before returning a result.</p></entry>
										</row>
										<row>
											<entry><codeph>statement_plus</codeph></entry>
											<entry>This implements strong consistency per statement. Before processing each
												statement, a current vector is obtained and used as
												a lower bound for that statement.</entry>
										</row>
										<row>
											<entry>Default behavior</entry>
											<entry>The default behavior for a single statement is <codeph>not_bounded</codeph>. For
												multi-statement requests, the default behavior is
												<codeph>not_bounded</codeph> for the request
												overall, and RYOW within the request. <p>Optional:
												If you want to disable RYOW within a request, add
												a separate <codeph>request_consistency</codeph>
												parameter and set it to
												<userinput>not_bounded</userinput>. </p></entry>
										</row>
									</tbody>
								</tgroup>
							</table></p>
						<p><b>scan_vector</b></p>
						<p>See <codeph>at_plus</codeph> parameter in the previous table <xref
								href="executen1ql.dita#table_xmr_grl_lt"/>.</p>
					<p><b>scan_wait</b></p>
					<p>This parameter is a duration value (units of time) that specifies how much time the indexer
							is allowed to wait until it can satisfy the required
								<codeph>scan_consistency</codeph> and<codeph> scan_vector</codeph>
							criteria. After receiving the scan request, if the indexer is unable to
							catch up within that duration and initiate the scan, the indexer aborts
							with an error and the scan fails. </p></dd>
				</dlentry><dlentry>
					<dt>Authentication parameters</dt>
					<dd>The Query API supports two types of credentials: local (or bucket) and admin. The format is
						an identity and password:
							<codeblock>[local:] &lt;bucket-name&gt;
[admin:] &lt;admin-name&gt;
&lt;password&gt;</codeblock><p>Note
							that identities can be optionally qualified. Clients passing in bucket
							names as the identity can prefix them with
							<userinput>local:</userinput>. This is to provide clarity and
							future-proofing for all current and future clients of query services.
						</p></dd><dd><p><b>Providing credentials in a request</b></p> <p>Credentials can be passed via HTTP headers (HTTP basic authentication) or via the <parmname>creds</parmname> request parameter. If a request contains both HTTP basic authentication header and a <parmname>creds</parmname> parameter, the HTTP basic authentication header is ignored and only the <parmname>creds</parmname> parameter is used for authenticating.</p><p>HTTP headers (HTTP basic authentication) can only be used to provide a single credential. The <parmname>creds</parmname> request parameter contains a JSON array of user/pass objects: <codeblock>creds=[{"user":"...","pass":"..."},{"user":"...","pass":"..."},...] </codeblock> The <parmname>creds</parmname> request parameter is the only way to provide multiple credentials for a request.</p></dd>
				</dlentry>
				<dlentry>
					<dt>Request content type</dt>
					<dd>For POST requests, you can specify the parameters in the request body in URL-encoded
						format or JSON format. For GET requests, you specify the parameters in the request
						URL in URL-encoded format. For URL-encoded parameters, the format is consistent with
						the syntax for variables according to the RFC 6570.</dd>
				</dlentry>
			</dl>
			
		</section>
		<section> <title>Response</title>
			<p>This section has two subsections: Response HTTP Status Codes and Response Body.</p>
			<dl>
				<dlentry>
					<dt>Response HTTP status code</dt>
					<dd><p>
						<b>Normal status code:</b>
					</p>
						<p><b>200 OK</b>- The request completed with or without errors. Any errors or warnings
							that occurred during the request will be in the response body. </p>
						
						<p>
							<b>Possible error codes:</b>
						</p>
						
						<p><b>400 Bad Request</b>- The request cannot be processed for one of the following
							reasons: </p>
						<ul>
							<li>The statement contains a N1QL syntax error.</li>
							<li>The request has a missing or unrecognized HTTP parameter.</li>
							<li>The request is badly formatted (for example, the request body contains a JSON syntax
								error).</li>
						</ul>
						<p><b>401 Unauthorized</b>- The credentials provided with the request are missing or
							invalid.</p>
						<p><b>403 Forbidden</b>- There is a read-only violation. Either there was an attempt to create
							or update in a GET request or a POST request where <codeph>readonly</codeph> is set
							or the client does not have the authorization to modify an object (index, keyspace or
							namespace) in the statement.</p>
						<p><b>404 Not Found</b>- The statement in the request references an invalid namespace or
							keyspace.</p>
						<p><b>405 Method Not Allowed</b>- The REST method type in the request is
							unsupported.</p>
						<p><b>409 Conflict</b>- There is an attempt to create an object (keyspace or index) that
							already exists.</p>
						<p><b>410 Gone</b>- The server is shutting down gracefully. Previously made requests are
							being completed, but no new requests are being accepted.</p>
						<p><b>500 Internal Server Error</b>- There was an unforeseen problem processing the
							request.</p>
						<p><b>503 Service Unavailable</b>- There is an issue (that is possibly temporary)
							preventing the request being processed; the request queue is full or the data store
							is not accessible.</p></dd>
				</dlentry>
				<dlentry>
					<dt>Response body</dt>
					<dd><p>The response body has the following structure: </p>
						<codeblock>{
"requestID": UUID,
"clientContextID": string,
"signature": 
{ 
	*.* |
	( field_name:    field_type,
	...
	)
	},

"results": 
	[
	json_value,
	...    
	],
"errors":  
	[ 
	{ "code": int, "msg":  string }, ... 
	],
"warnings":    
	[ 
	{ "code": int, "msg": string }, â€¦ 
	],
"status":  "success",
"metrics":  
	{ 
	"elapsedTime": string, 
	"executionTime": string,
	"resultCount": unsigned int, 
	"resultSize": unsigned int,
	"mutationCount": unsigned int, 
	"sortCount": unsigned int, 
	"errorCount": unsigned int,
	"warningCount": unsigned int
	}
}</codeblock>
						
						<table>
							
							
							<tgroup cols="3">
								<colspec colname="col1" colwidth="1.45*"/>
								<colspec colname="col2" colwidth="1*"/>
								<colspec colname="col3" colwidth="6.25*"/>
								<thead>
									<row>
										<entry>
											<codeph>requestID</codeph>
										</entry>
										<entry>UUID</entry>
										<entry>A unique identifier for the response.</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<codeph>clientContextID</codeph>
										</entry>
										<entry>string</entry>
										<entry>The clientContextID of the request, if one was
											supplied (see client_context _id in Request
											Parameters).</entry>
									</row>
									<row>
										<entry>
											<codeph>signature</codeph>
										</entry>
										<entry>object</entry>
										<entry>The schema of the results. Present only when the
											query completes successfully.</entry>
									</row>
									<row>
										<entry>
											<codeph>results</codeph>
										</entry>
										<entry>list</entry>
										<entry>A list of all the objects returned by the query. An
											object can be any JSON value.</entry>
									</row>
									<row>
										<entry>
											<codeph>status</codeph>
										</entry>
										<entry>enum</entry>
										<entry>The status of the request. Possible values are:
											success, running, errors, completed, stopped, timeout,
											fatal.</entry>
									</row>
									<row>
										<entry>
											<codeph>errors</codeph>
										</entry>
										<entry>list</entry>
										<entry>A list of 0 or more error objects. If an error
											occurred during processing of the request, it will be
											represented by an error object in this list.</entry>
									</row>
									<row>
										<entry>
											<codeph>error.code</codeph>
										</entry>
										<entry>int</entry>
										<entry>A number that identifies the error.</entry>
									</row>
									<row>
										<entry>
											<codeph>error.msg</codeph>
										</entry>
										<entry>string</entry>
										<entry>A message describing the error in detail.</entry>
									</row>
									<row>
										<entry>
											<codeph>warnings</codeph>
										</entry>
										<entry>list </entry>
										<entry>A list of 0 or more warning objects. If a warning
											occurred during processing of the request, it is
											represented by a warning object in this list.</entry>
									</row>
									<row>
										<entry>
											<codeph>warning.code</codeph>
										</entry>
										<entry>int</entry>
										<entry>A number that identifies the warning.</entry>
									</row>
									<row>
										<entry>
											<codeph>warning.msg</codeph>
										</entry>
										<entry>string</entry>
										<entry>A message describing the warning in full.</entry>
									</row>
									<row>
										<entry>
											<codeph>metrics</codeph>
										</entry>
										<entry>object</entry>
										<entry>An object containing metrics about the
											request.</entry>
									</row>
									<row>
										<entry>
											<codeph>metrics.elapsedTime</codeph>
										</entry>
										<entry>string</entry>
										<entry>The total time taken for the request, that is the
											time from when the request was received until the
											results were returned.</entry>
									</row>
									<row>
										<entry>
											<codeph>metrics.executionTime</codeph>
										</entry>
										<entry>string</entry>
										<entry>The time taken for the execution of the request, that
											is the time from when query execution started until the
											results were returned.</entry>
									</row>
									<row>
										<entry>
											<codeph>metrics.resultCount</codeph>
										</entry>
										<entry>unsigned int</entry>
										<entry>The total number of objects in the results.</entry>
									</row>
									<row>
										<entry>
											<codeph>metrics.resultSize</codeph>
										</entry>
										<entry>unsigned int</entry>
										<entry>The total number of bytes in the results.</entry>
									</row>
									<row>
										<entry>
											<codeph>metrics.mutationCount</codeph>
										</entry>
										<entry>unsigned int</entry>
										<entry>The number of mutations that were made during the
											request.</entry>
									</row>
									<row>
										<entry><codeph>metrics.sortCount</codeph></entry>
										<entry>unsigned int</entry>
										<entry>The number of objects that were sorted. Present only
											if the request includes ORDER BY. <p>If a query includes
												ORDER BY, LIMIT, or OFFSET clauses, an application
												can use the <codeph>sortCount</codeph> value to give
												the overall number of results in a message such as
												"<systemoutput>page 1 of
											N</systemoutput>".</p></entry>
									</row>
									<row>
										<entry>
											<codeph>metrics.errorCount</codeph>
										</entry>
										<entry>unsigned int</entry>
										<entry>The number of errors that occurred during the
											request.</entry>
									</row>
									<row>
										<entry>
											<codeph>metrics.warningCount</codeph>
										</entry>
										<entry>unsigned int</entry>
										<entry>The number of warnings that occurred during the
											request.</entry>
									</row>
								</tbody>
							</tgroup></table>
								
							
</dd>
				</dlentry>
			</dl>
		</section>
		<section><title>Request error and warning format</title>
			<p>Errors and warnings have the following format:</p>
			<codeblock>{
	"code" : int,
	"msg" : string,
	"name": string,
	"sev" : int,
	"temp" : bool
}			</codeblock>
			<p><b>code:</b> A unique number for the error or warning. The code ranges are partitioned
				by component. The codes can also include parts that indicate severity and transience.
				<b>code</b> is always present in every condition returned in the Query REST API or
				captured in a log.</p>
			<p><b>msg:</b>A detailed description of the condition. <b>msg</b> is always present in
				every condition returned in the Query REST API or captured in a log. </p>
			<p> The following elements are optional and can be present in a condition returned in the
				Query REST API or captured in a log. Additional elements not listed here might also be
				present. Clients and consumers of the REST API or the logs must accommodate any
				additional elements. </p>
			<p><b>name:</b>Unique name that has a 1:1 mapping to the <b>code</b>. Uniquely identifies
				the condition. <b>name</b> is helpful for pattern matching and can have meaning making
				it more memorable than the code). The name should be fully qualified. Here are some
				examples:</p>
			<ul>
				<li>
					<codeph>indexing.scan.io_failure</codeph>
				</li>
				<li>
					<codeph>query.execute.index_not_found</codeph>
				</li>
			</ul>
			
			<p><b>sev:</b>One of the following N1QL severity levels (listed in order of severity):</p>
			<ol>
				<li>Severe</li>
				<li>Error</li>
				<li>Warn</li>
				<li>Info</li>
			</ol>
			<p><b>temp:</b>Indicates if the condition is transient (for example, the queue is full). If the
				value is <b>false</b>, it tells clients and users that a retry without modification
				produces the same condition.</p>
			
		</section>		
	</conbody>
</concept>
