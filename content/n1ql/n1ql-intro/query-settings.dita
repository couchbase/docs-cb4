<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_wk1_5v3_t5">
  <title>Query Settings</title>
  <shortdesc>You can set the following query settings. </shortdesc><body>
    <note>If the <codeph>profile</codeph> setting value is not set as one of the following values,
      then the <codeph>profile</codeph> setting does not change.</note>
    <p>
      <table frame="all" rowsep="1" colsep="1" id="table_kgw_2lr_hz">
        <title>Query Settings</title>
        <tgroup cols="3">
          <colspec colname="c1" colnum="1" colwidth="1*"/>
          <colspec colname="c2" colnum="2" colwidth="1.33*"/>
          <colspec colname="c3" colnum="3" colwidth="2.93*"/>
          <thead>
            <row>
              <entry>Setting</entry>
              <entry>Value</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry morerows="2"><codeph>profile</codeph></entry>
              <entry><codeph>off</codeph></entry>
              <entry>The default value is set to<codeph> off</codeph>. In this case, no profiling
                information added to the query response.<p/>Example:<codeph> cbq> \SET -profile
                  "off";</codeph></entry>
            </row>
            <row>
              <entry><codeph>phases</codeph></entry>
              <entry>When set to<codeph> phases</codeph>, the query response includes a profile
                section with stats and details about various phases of the query plan &amp;
                execution. Three phase times will be included in the system:active_requests and
                system:completed_requests monitoring keyspaces.<p/>Example:<codeph> cbq> \SET
                  -profile "phases";</codeph></entry>
            </row>
            <row>
              <entry><codeph>timings</codeph></entry>
              <entry>When set to<codeph> timings</codeph>, besides the phase times, the profile
                section of the query response document will include a full query plan with timing
                and information about the number of processed documents at each phase. This
                information will be included in the<codeph> system:active_requests
                  </codeph>and<codeph> system:completed_requests
                  </codeph>keyspaces.<p/>Example:<codeph> cbq> \SET -profile
                "timings";</codeph></entry>
            </row>
            <row>
              <entry><codeph>controls</codeph></entry>
              <entry><codeph>false, true</codeph></entry>
              <entry>The default value is set to<codeph> false</codeph>. <p dir="ltr">When set
                    to<codeph> true</codeph>, the query response document includes a controls
                  section with runtime information provided along with the request, such as
                  positional and named parameters or settings.</p>Example:<codeph> cbq> \SET
                  -controls true;</codeph></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </p>
    <section>
      <title>N1QL REST API Request specification</title>
      <p>This section describes how to specify requests with the N1QL REST API.</p>
      <dl>
        <dlentry>
          <dt>Request format</dt>
          <dd>Here is the format for GET and POST requests. <p>
              <codeblock>GET /query/service</codeblock>
            </p><p>
              <codeblock>POST /query/service</codeblock>
            </p></dd>
        </dlentry>
        <dlentry>
          <dt>Request parameters</dt>
          <dd>This table contains details of all the parameters that can be passed in a request to
            the /query/service endpoint: <table id="table_d1v_tjj_c1b">
              <tgroup cols="3">
                <colspec colname="col1" colwidth="1.35*"/>
                <colspec colname="col2" colwidth="1*"/>
                <colspec colname="col3" colwidth="5.92*"/>
                <thead>
                  <row>
                    <entry>Parameter name</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <codeph>statement</codeph>
                    </entry>
                    <entry>String</entry>
                    <entry>Required if <codeph>prepared</codeph> is not provided. Any valid N1QL
                      statement for a POST request, or a read-only N1QL statement (such as SELECT or
                      EXPLAIN) for a GET request. If both the <codeph>prepared</codeph> and
                        <codeph>statement</codeph> parameters are present and non-empty, an error is
                      returned.</entry>
                  </row>
                  <row>
                    <entry>
                      <codeph>prepared</codeph>
                    </entry>
                    <entry>String</entry>
                    <entry>Required if statement is not provided. The prepared form of the N1QL
                      statement to be executed. If both the prepared and statement parameters are
                      present and non-empty, an error is returned.</entry>
                  </row>
                  <row>
                    <entry>
                      <codeph>timeout</codeph>
                    </entry>
                    <entry>String (duration format)</entry>
                    <entry>Optional. Maximum time to spend on the request before timing out. The
                      default value is "0s", which means no timeout is applied. That is, the request
                      runs until completion regardless of how long it takes. Its format includes an
                      amount and a unit. Valid units are "ns", "us", "ms", "s", "m", "h", for
                      nanoseconds, microseconds, milliseconds, seconds, minutes and hours,
                      respectively. The unit is mandatory. Examples are "10ms" (which means 10
                      milliseconds), "1m" (which means 1 minute), and "0.5s" (which means half a
                      second). There is also a server-wide <codeph>timeout</codeph> parameter. If
                      both the server-wide <codeph>timeout</codeph> parameter and the
                        <codeph>timeout</codeph> parameter in the request are specified, the minimum
                      of the two timeout values is applied. </entry>
                  </row>
                  <row>
                    <entry><codeph>namespace</codeph></entry>
                    <entry>String</entry>
                    <entry>Optional. Specifies the namespace to use. If a request does not specify a
                      namespace, the server wide <codeph>namespace</codeph> parameter is
                      used.</entry>
                  </row>
                  <row>
                    <entry>
                      <codeph>readonly</codeph>
                    </entry>
                    <entry>Boolean</entry>
                    <entry>Optional. Always true for GET requests. By default, false for POST
                      requests. If the server-wide <codeph>readonly</codeph> parameter is set to
                      true, its setting supersedes the request <codeph>readonly</codeph>
                      parameter.</entry>
                  </row>
                  <row>
                    <entry>
                      <codeph>metrics</codeph>
                    </entry>
                    <entry>Boolean</entry>
                    <entry>Optional. Specifies that metrics should be returned with query results.
                      Default value is true.</entry>
                  </row>
                  <row>
                    <entry><codeph>pretty</codeph></entry>
                    <entry>Boolean</entry>
                    <entry><i>Added in version 4.5.1.</i>
                      <p>Optional. Specifies if the query results are to be returned in a pretty
                        format. When set to false, the white space characters are stripped from the
                        query results, thus reducing the number of bytes transferred over the
                        network. The performance benefits are significantly visible when executing
                        queries that produce large result sets.</p></entry>
                  </row>
                  <row>
                    <entry><codeph>max_parallelism</codeph></entry>
                    <entry>String</entry>
                    <entry>Optional. Specifies the maximum parallelism for the query. When zero or a
                      negative value is specified, the number of logical CPUs is used as the
                      parallelism for the query. The server wide<codeph> max_parallelism
                      </codeph>parameter has a default value of 1. If a request includes<codeph>
                        max_parallelism</codeph>, it is capped by the server<codeph>
                        max_parallelism</codeph>. If a request does not include<codeph>
                        max_parallelism</codeph>, the server wide<codeph> max_parallelism</codeph>
                      parameter is used.</entry>
                  </row>
                  <row>
                    <entry>
                      <codeph>$&lt;<i>identifier</i>&gt;</codeph>
                    </entry>
                    <entry>json_value</entry>
                    <entry>Optional. If the <codeph>statement</codeph> has one or more <i>named
                        parameters</i>, there should be one or more named parameters in the request.
                      A named parameter consists of the $ character followed by an identifier. An
                      identifier is an alphabetical character followed by one or more alphanumeric
                      characters. Named parameters apply to <codeph>prepared</codeph> also.</entry>
                  </row>
                  <row>
                    <entry>
                      <codeph>args</codeph>
                    </entry>
                    <entry>list</entry>
                    <entry>Optional. If the statement has one or more positional parameters, this
                      parameter is required in the request. This is a list of JSON values, one for
                      each positional parameter in the statement. Positional parameters apply to
                        <codeph>prepared</codeph> also. </entry>
                  </row>
                  <row>
                    <entry>
                      <codeph>signature</codeph>
                    </entry>
                    <entry>Boolean</entry>
                    <entry>Optional. Include a header for the results schema in the response.
                      Default value is true.</entry>
                  </row>
                  <row>
                    <entry><codeph>scan_consistency</codeph></entry>
                    <entry>enum</entry>
                    <entry>Optional. Specify the consistency guarantee or constraint for index
                      scanning using one of the following values:<userinput> not_bounded
                        </userinput>(default),<userinput> request_plus</userinput>,<userinput>
                        statement_plus</userinput>, and<userinput> at_plus</userinput>. Values are
                      case insensitive.</entry>
                  </row>
                  <row>
                    <entry>
                      <codeph>creds</codeph>
                    </entry>
                    <entry>list</entry>
                    <entry>Optional. A list of credentials in the form of user/password objects. If
                      credentials are supplied in the request header (that is, using HTTP basic
                      authentication), then<codeph> creds </codeph>is ignored. See Authentication
                      Parameters section for full specification.</entry>
                  </row>
                  <row>
                    <entry>
                      <codeph>client_context_id</codeph>
                    </entry>
                    <entry>string</entry>
                    <entry>Optional. A piece of data supplied by the client that is echoed in the
                      response, if present. N1QL makes no assumptions about the meaning of this data
                      and just logs and echoes it. Maximum allowed size is 64 characters. A<codeph>
                        client_context_id </codeph>longer than 64 characters is cut off at 64
                      characters.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table></dd>
        </dlentry>
        <dlentry>
          <dt>Named parameters</dt>
          <dd>If the statement in a request contains named parameters, the request should contain
            the parameters described in the following table. <p><b>Example 1</b>: A statement
              containing named
              parameters:</p><codeblock outputclass="language-sql">SELECT detail FROM emp WHERE name = $nval AND age > $aval						</codeblock><table
              id="table_e1v_tjj_c1b">
              <tgroup cols="2">
                <colspec colname="col1" colwidth="1*"/>
                <colspec colname="col2" colwidth="4*"/>
                <thead>
                  <row>
                    <entry>Parameter Name</entry>
                    <entry>Value</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <codeph>statement</codeph>
                    </entry>
                    <entry>
                      <codeph>SELECT detail FROM emp WHERE name = $nval AND age > $aval</codeph>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <codeph>$nval</codeph>
                    </entry>
                    <entry>"smith"</entry>
                  </row>
                  <row>
                    <entry>
                      <codeph>$aval</codeph>
                    </entry>
                    <entry>45</entry>
                  </row>
                </tbody>
              </tgroup>
            </table> There should be a named parameter in the request for each query parameter in
            the request’s statement parameter. <p/></dd>
        </dlentry>
        <dlentry>
          <dt>Positional parameters</dt>
          <dd>If the statement in a request contains positional parameters, the request should
            contain the parameters described in the following table. <p><b>Example 2</b>:  A
              statement containing positional
              parameters:</p><codeblock outputclass="language-sql"> SELECT detail FROM emp WHERE name = $1 AND age > $2 						</codeblock><table
              id="table_f1v_tjj_c1b">
              <tgroup cols="2">
                <colspec colname="col1" colwidth="1*"/>
                <colspec colname="col2" colwidth="4*"/>
                <thead>
                  <row>
                    <entry>Parameter Name</entry>
                    <entry> Value</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <codeph>statement</codeph>
                    </entry>
                    <entry><codeph>SELECT detail FROM emp WHERE name = $1 AND age > $2</codeph>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <codeph>args</codeph>
                    </entry>
                    <entry>[ "smith", 45 ]</entry>
                  </row>
                </tbody>
              </tgroup>
            </table><p> Positional parameters can also be specified in a statement using the
              question mark (?), so the following statement is an alternative way to specify the
              same query:
            </p><codeblock outputclass="language-sql"> SELECT detail FROM emp WHERE name = ? AND age > ? 						</codeblock>
          </dd>
        </dlentry>
        <dlentry>
          <dt>Consistency parameters</dt>
          <dd>
            <p><b>scan_consistency</b></p>
            <p>This parameter specifies the consistency guarantee or constraint for index scanning
              using one of the values listed in the following table. </p>
            <p>
              <table id="table_h1v_tjj_c1b">
                <title>scan_consistency parameters</title>
                <tgroup cols="2">
                  <colspec colname="col1" colwidth="1*"/>
                  <colspec colname="col2" colwidth="4*"/>
                  <thead>
                    <row>
                      <entry>Value</entry>
                      <entry>Description</entry>
                    </row>
                  </thead>
                  <tbody>
                    <row>
                      <entry><codeph>not_bounded</codeph></entry>
                      <entry>Default value for single-statement requests. <p>No timestamp vector is
                          used in the index scan. This is also the fastest mode as we eliminate the
                          cost of obtaining the vector and any wait time for the index to catch up
                          with the vector.</p></entry>
                    </row>
                    <row>
                      <entry><codeph>at_plus</codeph></entry>
                      <entry>This implements bounded consistency. The request includes a<codeph>
                          scan_vector </codeph>parameter and a value, which is used as a lower
                        bound. This can be used to implement read-your-own-writes (RYOW).</entry>
                    </row>
                    <row>
                      <entry><codeph>request_plus</codeph></entry>
                      <entry>This implements strong consistency per request. Before processing the
                        request, a current vector is obtained. The vector is used as a lower bound
                        for the statements in the request. If there are DML statements in the
                        request, RYOW is also applied within the request. <p>If<codeph> request_plus
                          </codeph>is specified in a query that runs during a failover of an index
                          node, the query waits until the rebalance operation completes and the
                          index data has rebalanced before returning a result.</p></entry>
                    </row>
                    <row>
                      <entry><codeph>statement_plus</codeph></entry>
                      <entry>This implements strong consistency per statement. Before processing
                        each statement, a current vector is obtained and used as a lower bound for
                        that statement.</entry>
                    </row>
                    <row>
                      <entry>Default behavior</entry>
                      <entry>The default behavior for a single statement is<codeph>
                          not_bounded</codeph>. For multi-statement requests, the default behavior
                          is<codeph> not_bounded </codeph>for the request overall, and RYOW within
                        the request. <p>Optional: If you want to disable RYOW within a request, add
                          a separate<codeph> request_consistency </codeph>parameter and set it
                            to<userinput> not_bounded</userinput>. </p></entry>
                    </row>
                  </tbody>
                </tgroup>
              </table>
            </p>
            <p><b>scan_vector</b></p>
            <p>See<codeph> at_plus </codeph>parameter in the previous table.</p>
            <p><b>scan_wait</b></p>
            <p>This parameter is a duration value (units of time) that specifies how much time the
              indexer is allowed to wait until it can satisfy the required<codeph> scan_consistency
                </codeph>and<codeph>  scan_vector </codeph>criteria. After receiving the scan
              request, if the indexer is unable to catch up within that duration to initiate the
              scan, the indexer aborts with an error and the scan fails. </p>
          </dd>
        </dlentry>
        <dlentry>
          <dt>Authentication parameters</dt>
          <dd>The Query API supports two types of credentials: local (or bucket) and admin. The
            format is an identity and password:
              <codeblock>[local:] &lt;bucket-name&gt;
[admin:] &lt;admin-name&gt;
&lt;password&gt;</codeblock><p>Note
              that identities can be optionally qualified. Clients passing in bucket names as the
              identity can prefix<userinput> local: </userinput> with them. This is to provide
              clarity and future-proofing for all current and future clients of query services.
            </p></dd>
          <dd>
            <p><b>Providing credentials in a request</b></p>
            <p>Credentials can be passed via HTTP headers (HTTP basic authentication) or via the
                <parmname>creds</parmname> request parameter. If a request contains both HTTP basic
              authentication header and a <parmname>creds</parmname> parameter, the HTTP basic
              authentication header is ignored and only the <parmname>creds</parmname> parameter is
              used for authenticating.</p>
            <p>HTTP headers (HTTP basic authentication) can only be used to provide a single
              credential. The <parmname>creds</parmname> request parameter contains a JSON array of
              user/pass objects:
              <codeblock>creds=[{"user":"...","pass":"..."},{"user":"...","pass":"..."},...] </codeblock>
              The <parmname>creds</parmname> request parameter is the only way to provide multiple
              credentials for a request.</p>
          </dd>
        </dlentry>
        <dlentry>
          <dt>Request content type</dt>
          <dd>For POST requests, you can specify the parameters in the request body in URL-encoded
            format or JSON format. For GET requests, you specify the parameters in the request URL
            in URL-encoded format. For URL-encoded parameters, the format is consistent with the
            syntax for variables according to the RFC 6570.</dd>
        </dlentry>
      </dl>
    </section>
    <p>
      <table frame="all" rowsep="1" colsep="1" id="table_o1l_v3j_c1b">
        <title>N1QL REST API Request Parameters</title>
        <tgroup cols="3">
          <colspec colname="c1" colnum="1" colwidth="1*"/>
          <colspec colname="c2" colnum="2" colwidth="1.33*"/>
          <colspec colname="c3" colnum="3" colwidth="2.93*"/>
          <thead>
            <row>
              <entry>Setting</entry>
              <entry>Value</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry morerows="2"><codeph>profile</codeph></entry>
              <entry><codeph>off</codeph></entry>
              <entry>The default value is set to<codeph> off</codeph>. In this case, no profiling
                information added to the query response.<p/>Example:<codeph> cbq> \SET -profile
                  "off";</codeph></entry>
            </row>
            <row>
              <entry><codeph>phases</codeph></entry>
              <entry>When set to<codeph> phases</codeph>, the query response includes a profile
                section with stats and details about various phases of the query plan and execution.
                Three phase times will be included in the<codeph> system:active_requests
                  </codeph>and<codeph> system:completed_requests </codeph>monitoring
                  keyspaces.<p/>Example:<codeph> cbq> \SET -profile "phases";</codeph></entry>
            </row>
            <row>
              <entry><codeph>timings</codeph></entry>
              <entry>When set to<codeph> timings</codeph>, besides the phase times, the profile
                section of the query response document will include a full query plan with timing
                and information about the number of processed documents at each phase. This
                information will be included in the<codeph> system:active_requests
                  </codeph>and<codeph> system:completed_requests
                  </codeph>keyspaces.<p/>Example:<codeph> cbq> \SET -profile
                "timings";</codeph></entry>
            </row>
            <row>
              <entry><codeph>controls</codeph></entry>
              <entry><codeph>false, true</codeph></entry>
              <entry>The default value is set to<codeph> false</codeph>. <p dir="ltr">When set
                    to<codeph> true</codeph>, the query response document includes a controls
                  section with runtime information provided along with the request, such as
                  positional and named parameters or settings.</p>Example:<codeph> cbq> \SET
                  -controls true;</codeph></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </p>
  </body>
</topic>
