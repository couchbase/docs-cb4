<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_1_2">
	<title>N1QL Queries and Results</title>
	<shortdesc>In N1QL, you submit queries using any of the DML statements.</shortdesc>

	<conbody>
		<p> As with SQL, you can have nested sub-queries. N1QL queries run on JSON documents, and you can
			query over multiple documents by using the <codeph>JOIN</codeph> clause.</p>
		<p>Because data in N1QL can be nested , there are operators and functions that let you navigate
			through nested arrays. Because data can be irregular, you can specify conditions in the
				<codeph>WHERE</codeph> clause to retrieve data.</p>
		<p>You can use standard <codeph>GROUP BY</codeph>, <codeph>ORDER BY</codeph>,
				<codeph>LIMIT</codeph>, and <codeph>OFFSET</codeph> clauses as well as a rich set of
			functions to transform the results as needed.</p>


		<section>
			<title>Queries</title>
			<p>In N1QL, a query returns a set of documents. The returned document set is not required to be
				uniform, though it can be. A <codeph>SELECT</codeph> statement that specifies a
				fixed set of attribute (column) names results in a uniform set of documents and a
					<codeph>SELECT</codeph> statement that specifies the wild card (*) results in a
				non-uniform result set. The only guarantee is that every returned document meets the
				query criteria.</p>
			<p>Here's a sample query and the result returned:</p>
			<codeblock spectitle="Query:">SELECT name, brewery_id from `beer-sample` WHERE brewery_id IS NOT MISSING LIMIT 2; </codeblock>
			<codeblock spectitle="Result:">{
    "requestID": "fbea9e79-a2e2-4ab8-9fdc-14e098838cc1",
    "signature": {
        "brewery_id": "json",
        "name": "json"
    },
    "results": [
        {
            "brewery_id": "big_horn_brewing_the_ram_2",
            "name": "Schaumbergfest"
        },
        {
            "brewery_id": "ballast_point_brewing",
            "name": "Wahoo Wheat Beer"
        }
    ],
    "status": "success",
    "metrics": {
        "elapsedTime": "131.492184ms",
        "executionTime": "131.261322ms",
        "resultCount": 2,
        "resultSize": 205
    }
}			</codeblock>
		</section>

		<section id="paths">
			<title>Paths</title>
			<p>N1QL provides <term>paths</term> to support nested data. Paths use dot notation syntax
				to identify the logical location of an attribute within a document. For example, to get
				the street from a customer order, use the path <codeph>orders.billTo.street</codeph>.
				This path refers to the value for <codeph>street</codeph> in the <codeph>billTo</codeph>
				object. A path is used with arrays or nested objects to get to attributes within the
				data structure. </p>
			<p>Array syntax in the path can also be used to get to information. For example, the path
					<codeph>orders.items[0].productId</codeph> evaluates to the
					<codeph>productId</codeph> value for the first array element under the order item,
					<codeph>items</codeph>.</p>
			<p>Paths provide a method for finding data in document structures without having to
				retrieve the entire document or handle it within an application. Any document data can
				be requested and returned to an application. When only relevant information is returned
				to an application, querying bandwidth is reduced.</p>
			<p>See <xref
					href="../n1ql-language-reference/index.dita#n1ql-lang-ref/nested-path-expressions"
					>Nested Path Expressions</xref> for more details. </p>
		</section>

	</conbody>
</concept>
