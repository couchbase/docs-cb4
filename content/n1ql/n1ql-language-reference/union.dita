<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_iy2_fgk_np">
 <title>UNION, INTERSECT, and EXCEPT</title>
  <shortdesc>The <codeph>UNION</codeph>, <codeph>INTERSECT</codeph>, and <codeph>EXCEPT</codeph>
    operators combine the resultsets of two or more <codeph>SELECT</codeph> statements.</shortdesc>
 
 <body>
    <p><b>Syntax</b></p>
    <codeblock>SELECT <varname>query1</varname> UNION <varname>query2</varname>
|
SELECT <varname>query1</varname> INTERSECT <varname>query2</varname>
|
SELECT <varname>query1</varname> EXCEPT <varname>query2</varname></codeblock>
    <image scale="50" href="images/Union_Intersect_Except.png" id="image_k24_bdh_2cb"/>
    <dl>
      <dlentry>
        <dt>Arguments</dt>
        <dd>
          <dl>
            <dlentry>
              <dt><codeph>UNION</codeph></dt>
              <dd>Returns all values from both the first and second <codeph>SELECT</codeph>
                statements.</dd>
            </dlentry>
          </dl>
        </dd>
        <dd>
          <dl>
            <dlentry>
              <dt><codeph>INTERSECT</codeph></dt>
              <dd>Returns only values present in both the first and second <codeph>SELECT</codeph>
                statements.</dd>
            </dlentry>
          </dl>
        </dd>
        <dd>
          <dl>
            <dlentry>
              <dt><codeph>EXCEPT</codeph></dt>
              <dd>Returns values from the first <codeph>SELECT</codeph> statement that are absent
                from the second <codeph>SELECT</codeph> statement.</dd>
            </dlentry>
          </dl>
        </dd>
        <dd>
          <dl>
            <dlentry>
              <dt>query1, query2</dt>
              <dd>Strings or expressions that represent valid <codeph>SELECT</codeph>
                statements.</dd>
            </dlentry>
          </dl>
        </dd>
      </dlentry>
    </dl>
    <p>
      <dl>
        <dlentry>
          <dt>Return Values</dt>
          <dd><codeph>UNION</codeph>, <codeph>INTERSECT</codeph>, and <codeph>EXCEPT</codeph> return
            distinct results, such that there are no duplicates.</dd>
          <dd><codeph>UNION ALL</codeph>, <codeph>INTERSECT ALL</codeph>, and <codeph>EXCEPT
              ALL</codeph> return all applicable values, including duplicates. These queries are
            faster, because they do not compute distinct results.</dd>
        </dlentry>
      </dl>
    </p>
    <p/>
    <p>You can improve the performance of a query by using covering indexes, where the index
      includes all the information needed to satisfy the query. For more information, see <xref
        href="../../indexes/covering-indexes.dita"/>.</p>
    <p><b>Examples</b></p>
    <p>For the following examples, consider these queries and
      results.<codeblock>Q1: SELECT DISTINCT city FROM `travel-sample` WHERE type = "airport";      (1641 results)

Q2: SELECT DISTINCT city FROM `travel-sample` WHERE type = "hotel";        (274 results)</codeblock></p>
    <p><b>Example 1: <codeph>UNION</codeph> of Q1 and
      Q2.</b><codeblock>SELECT DISTINCT city FROM `travel-sample` WHERE type = "airport"
UNION SELECT DISTINCT city FROM `travel-sample` WHERE type = "hotel";</codeblock>This
      gives 1871
        results:<codeblock>[
  {
    "city": "Calais"
  },
  {
    "city": "Peronne"
  },
  {
    "city": "Nangis"
  },
  {
    "city": "Bagnole-de-l'orne"
  },
...</codeblock><b>Example
        2: <codeph>INTERSECT</codeph> of Q1 and
      Q2.</b><codeblock>SELECT DISTINCT city FROM `travel-sample` WHERE type = "airport"
INTERSECT SELECT DISTINCT city FROM `travel-sample` WHERE type = "hotel";</codeblock>This
      gives 44
        results:<codeblock>[
  {
    "city": "Cannes"
  },
  {
    "city": "Nice"
  },
  {
    "city": "Orange"
  },
  {
    "city": "Avignon"
  },
...</codeblock><b>Example
        3: <codeph>EXCEPT</codeph> of Q1 and
      Q2.</b><codeblock>SELECT DISTINCT city FROM `travel-sample` WHERE type = "airport"
EXCEPT SELECT DISTINCT city FROM `travel-sample` WHERE type = "hotel";</codeblock>This
      gives 1597
        results:<codeblock>[
  {
    "city": "Calais"
  },
  {
    "city": "Peronne"
  },
  {
    "city": "Nangis"
  },
  {
    "city": "Bagnole-de-l'orne"
  },
...</codeblock><b>Example
        4: <codeph>EXCEPT</codeph> of Q2 and
      Q1.</b><codeblock>SELECT DISTINCT city FROM `travel-sample` WHERE type = "hotel"
UNION SELECT DISTINCT city FROM `travel-sample` WHERE type = "airport";</codeblock>This
      gives 230
      results:<codeblock>[
  {
    "city": "Medway"
  },
  {
    "city": "Gillingham"
  },
  {
    "city": "Giverny"
  },
  {
    "city": "Highland"
  },
...</codeblock></p>
  </body>
</topic>
