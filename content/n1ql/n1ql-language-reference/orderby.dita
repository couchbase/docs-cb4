<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_x1g_ggk_np">
 <title>ORDER BY clause</title>
  <shortdesc>The <codeph>ORDER BY</codeph> clause sorts the result-set by one or more columns, in
    ascending or descending order.</shortdesc>

 <body>
    <section id="section_Purpose">
      <title>Purpose</title>
      <p>In a <codeph>SELECT</codeph> statement, the <codeph>ORDER BY</codeph> clause sorts the
        result-set in ascending or descending order, based on one or more fields or expressions of
        those fields in the projection.</p>
    </section>
    <section id="section_Prerequisites">
      <title>Prerequisites</title>
      <p>For you to select data from a document or keyspace, you must have the
          <parmname>query_select</parmname> privilege on the document or keyspace. For more details
        about user roles, see <xref href="../../security/security-authorization.dita#authorization"
        />.</p>
    </section>
    <section id="section_Syntax"><title>Syntax</title>In the below <codeph>SELECT</codeph>
      statement, the <codeph>ORDER BY</codeph> clause is boldfaced:<p>
        <codeblock>SELECT <varname>select_clause</varname>
[FROM <varname>from_clause</varname>] [JOIN <varname>join_clause</varname>]
[USE INDEX <varname>useindex_clause</varname>]
[LET <varname>let_clause</varname>]
[WHERE <varname>where_clause</varname> ( [AND <varname>where_clause2</varname>] )* ]
[GROUP BY <varname>groupby_clause</varname>] [LETTING|HAVING <varname>letting_clause</varname>]
[UNION|INTERSECT|EXCEPT <varname>union_clause</varname>]
<b>[ORDER BY <varname>orderby_clause</varname>]</b>
[LIMIT <varname>limit_int</varname>]
[OFFSET <varname>offset_clause</varname>]
;</codeblock>
      </p><b>Syntax of the
        <varname>orderby_clause</varname></b><codeblock><codeph>ORDER BY</codeph> <varname>expr</varname> [ASC|DESC] [, <varname>expr2</varname> [ASC|DESC] ]*</codeblock><image
        scale="50" href="images/order-by-clause.png" id="image_fxr_gr3_2cb"/></section>
    <section id="section_usf_fp3_2cb">
      <title>Arguments</title>
      <p>
        <dl>
          <dlentry>
            <dt>expr</dt>
            <dd>[Required] This identifier or expression can be document fields, new expressions, or
              an alias in the SELECT clause.</dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt><codeph>ASC</codeph> | <codeph>DESC</codeph></dt>
            <dd>[Optional; default is <codeph>ASC</codeph>] </dd>
            <dd><codeph>ASC</codeph> orders in ascending order.</dd>
            <dd><codeph>DESC</codeph> orders in descending order.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="section_sdj_qt3_2cb">
      <title>Return Values</title>
      <p>If no <codeph>ORDER BY</codeph> clause is specified, the order in which the result objects
        are returned is undefined.</p>
      <p>Objects are sorted first by the left-most expression in the list of expressions. Any items
        with the same sort value will be sorted with the next expression in the list. This process
        repeats until all items are sorted and all expressions in the list are evaluated.</p>
      <p>When a field has a mix of data types, the different JSON types are sorted in the following
        order (from lowest to highest):<ul id="ul_lhp_h53_2cb">
          <li><codeph>MISSING</codeph></li>
          <li><codeph>NULL</codeph> (including JSON NULL)</li>
          <li><codeph>FALSE</codeph></li>
          <li><codeph>TRUE</codeph></li>
          <li>number</li>
          <li>string (string comparison is done using a raw byte collation of UTF8 encoded
            strings)</li>
          <li>array (element by element comparison is performed until the end of the shorter array;
            if all the elements so far are equal, then longer arrays sort after)</li>
          <li>object (larger objects sort after; for objects of equal length, key/value by key/value
            comparison is performed; keys are examined in sorted order using the normal ordering for
            strings)</li>
        </ul></p>
      <note>Among string values, the ascending order is lowercase, then uppercase, then accented
        letters.</note>
    </section>
    <section id="section_pyc_n53_2cb">
      <title>Examples</title>
      <ul id="ul_e4t_1fx_xdb">
        <li><xref href="#topic_x1g_ggk_np/Ex1" format="dita">Ex 1: List cities in descending order
            and then landmarks in ascending order.</xref></li>
        <li><xref href="#topic_x1g_ggk_np/Ex2" format="dita">Ex 2: List names resulting from a UNION
            clause.</xref></li>
      </ul>
      <p><b id="Ex1">Example 1:</b> List cities in descending order and then landmarks in ascending
        order.<codeblock>SELECT city, name 
FROM `travel-sample` 
WHERE type = "landmark"
ORDER BY city DESC, name ASC;</codeblock>Results:<codeblock>[
  {
    "city": "Évreux",
    "name": "Cafe des Arts"
  },
  {
    "city": "Épinal",
    "name": "Marché Couvert (covered market)"
  },
  {
    "city": "Épinal",
    "name": "Musée de l'Image/Imagerie d'Épinal"
  },
  {
    "city": "Yosemite Valley",
    "name": "Lower Yosemite Fall"
  },
  {
    "city": "Yosemite Valley",
    "name": "Mirror Lake/Meadow"
  },
...</codeblock></p>
    </section>
    <p><b id="Ex2">Example 2:</b> List the names of hotels and landmarks resulting from a UNION
      query.<codeblock>SELECT name
  FROM `travel-sample`
  WHERE type = "landmark"
UNION SELECT name
  FROM `travel-sample`
  WHERE type = "hotel"
ORDER BY name ASC;</codeblock>Results:<codeblock>{
    "name": "'La Mirande Hotel"
  },
  {
    "name": "'The Argyll Arms Hotel"
  },
  {
    "name": "'Visit the Hut of the Shadows and other End of the Road sculptures"
  },
  {
    "name": "02 Shepherd's Bush Empire"
  },
  {
    "name": "101 Coffee Shop"
  },
...</codeblock></p>
    <p/>
  </body>
</topic>
