<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_7_4" xml:lang="en-US">
	<title id="title__Toc272567254">Construction Operators</title>
	<conbody>
		<p> N1QL supports array and object construction operators.</p>

		<section>
			<title>Array construction</title>

			<codeblock><b>[</b> elements [, elements ]* <b>]</b> </codeblock>
			<p>
				<i>Elements</i>
			</p>
			<codeblock>expression</codeblock>

			<p>Arrays are ordered lists with 0 or more values. These values can be one of the defined
				types. Arrays are enclosed in square brackets ([ ] ). Commas separate each value. For
				example: ["one", "two", "three"] and [1, 2, 3].</p>
		</section>

		<section>
			<title>Object construction</title>
			<codeblock><b>{</b> members [ , members ]* <b>}</b></codeblock>
			<p>
				<i>members:</i>
			</p>
			<codeblock>string : expression</codeblock>
			<p> Objects contain name value members. Objects are enclosed in curly braces {}. Commas
				separate each pair (member). The colon (:) character separates the key or name from its
				value within each pair. All keys must be strings and should be distinct from each other
				within that object. The value can be any supported JSON data type.</p>
			<p>Starting from version 4.5.1, you can use dynamic names in the name-value pairs. The names and
				values can both be arbitrary expressions. If a name does not evaluate to a string,
				the result of the object construction is
				NULL.<codeblock spectitle="Example">SELECT { UPPER("foo") : 1, "foo" || "bar" : 2 };
[
  {
    "$1": {
      "FOO": 1,
      "foobar": 2
    }
  }
]</codeblock></p><note>Starting version 4.5.1, member names are optional when constructing dynamic
					objects. </note>
		</section>


	</conbody>

</concept>
