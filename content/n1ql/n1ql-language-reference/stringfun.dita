<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_8_12"  xml:lang="en-US">
  <title>String Functions</title>
  <conbody>
    <p>String functions perform operations on a string input value and returns a string or other
      value. <note>If any arguments to any of the following functions are
          <systemoutput>MISSING</systemoutput> then the result is also
          <systemoutput>MISSING</systemoutput> (i.e. no result is returned). Similarly, if any of
        the arguments passed to the functions are <codeph>NULL</codeph> or are of the wrong type
        (e.g. an integer instead of a string), then <codeph>NULL</codeph> is returned as the result.
      </note></p>
    <section id="fn-str-contains">
      <title>CONTAINS(in_str, search_str)</title>
      <dl>
        <dlentry>
          <dt><b>Description</b></dt>
          <dd>Checks whether or not the specified search string is a substring of the input string
            (i.e. exists within). This returns <codeph>true</codeph> if the substring exists within
            the input string, otherwise <codeph>false</codeph> is returned.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Arguments</b></dt>
          <dd>
            <dl>
              <dlentry>
                <dt>in_str</dt>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that is the string to search within.</dd>
              </dlentry>
              <dlentry>
                <dt>search_str</dt>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that is the string to search for.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Return Value</b></dt>
          <dd>A boolean, representing whether the search string exists within the input string.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Examples</b></dt>
          <dd>
            <codeblock outputclass="language-json">SELECT CONTAINS("N1QL is awesome", "N1QL") as n1ql,
       CONTAINS("N1QL is awesome", "SQL") as no_sql;
              
{
    "results": [
        {
            "n1ql": true,
            "no_sql": false
        }
    ]
}</codeblock>
          </dd>
        </dlentry>
      </dl>
    </section>
    <section id="fn-str-initcap">
      <title>INITCAP(in_str)</title>
      <dl>
        <dlentry>
          <dt><b>Description</b></dt>
          <dd>Converts the string so that the first letter of each word is uppercase and every other
            letter is lowercase (known as 'Title Case').</dd>
        </dlentry>
        <dlentry>
          <dt><b>Arguments</b></dt>
          <dd>
            <dl>
              <dlentry>
                <dt>in_str</dt>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that is the string to convert to title case.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Return Value</b></dt>
          <dd>A string, representing the input string converted to title case.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Limitations</b></dt>
          <dd>This function capitalizes the initial letter of every word in the sentence, this means
            that even short words such as "the" and "or" will be capitalized. This does not strictly
            follow title case conventions used in the writing domain.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Examples</b></dt>
          <dd>
            <codeblock outputclass="language-json">SELECT INITCAP("N1QL is awesome") as n1ql;
              
{
    "results": [
        {
            "n1ql": "N1ql Is Awesome"
        }
    ]
}</codeblock>
          </dd>
        </dlentry>
      </dl>
    </section>
    <section id="fn-str-length">
      <title>LENGTH(in_str)</title>
      <dl>
        <dlentry>
          <dt><b>Description</b></dt>
          <dd>Finds the length of a string, the length is defined as the number of characters within
            the string.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Arguments</b></dt>
          <dd>
            <dl>
              <dlentry>
                <dt><b>in_str</b></dt>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that is the string to find the length of.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Return Value</b></dt>
          <dd>An integer representing the length of the string.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Examples</b></dt>
          <dd>
            <codeblock outputclass="language-json">SELECT LENGTH("") as empty_string,
LENGTH("N1QL is awesome") as n1ql;
              
{    
    "results": [
        {
            "empty_string": 0,
            "n1ql": 15
        }
    ]
}</codeblock>
          </dd>
        </dlentry>
      </dl>
    </section>
    <section id="fn-str-lower">
      <title>LOWER(in_str)</title>
      <dl>
        <dlentry>
          <dt><b>Description</b></dt>
          <dd>Converts all characters in the input string to lower case. This is useful for
            canonical comparison of string values.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Arguments</b></dt>
          <dd>
            <dl>
              <dlentry>
                <dt><b>in_str</b></dt>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that is the string to convert to lower case.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Return Value</b></dt>
          <dd>A string representing the input string converted to lower case.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Examples</b></dt>
          <dd>
            <codeblock outputclass="language-json">SELECT LOWER("N1QL is awesome") as n1ql;
              
{    
    "results": [
        {
            "n1ql": "n1ql is awesome"
        }
    ]
}</codeblock>
          </dd>
        </dlentry>
      </dl>
    </section>
    <section id="fn-str-ltrim">
      <title>LTRIM(in_str [, char])</title>
      <dl>
        <dlentry>
          <dt><b>Description</b></dt>
          <dd>Removes all leading characters from a string. The function removes all consecutive
            characters from the beginning of the string that match the specified characters and
            stops when it encounters a character that does not match any of the specified
            characters.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Arguments</b></dt>
          <dd>
            <dl>
              <dlentry>
                <dt><b>in_str</b></dt>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that is the string to remove the leading characters from.</dd>
              </dlentry>
              <dlentry>
                <dt><b>char</b></dt>
                <dd>[Optional; default is whitespace, i.e. <codeph>" "</codeph>]</dd>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that represents the characters to trim from the input string. Each
                  character in this string will be trimmed from the input string, it is therefore
                  not necessary to delimit the characters to trim. For example, specifying a
                  character value of <codeph>"abc"</codeph> will trim the characters "a", "b" and
                  "c" from the start of the string.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Return Value</b></dt>
          <dd>A string representing the input string with leading characters removed.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Examples</b></dt>
          <dd>
            <codeblock>SELECT LTRIM("...N1QL is awesome", ".") as dots,
       LTRIM("     N1QL is awesome", " ") as explicit_spaces,
       LTRIM("     N1QL is awesome") as implicit_spaces,
       LTRIM("N1QL is awesome") as no_dots;

{
    "results": [
        {
            "dots": "N1QL is awesome",
            "explicit_spaces": "N1QL is awesome",
            "implicit_spaces": "N1QL is awesome",
            "no_dots": "N1QL is awesome"
        }
    ]
}</codeblock>
          </dd>
        </dlentry>
      </dl>
    </section>
    <section id="fn-str-position">
      <title>POSITION(in_str, search_str)</title>
      <dl>
        <dlentry>
          <dt><b>Description</b></dt>
          <dd>Finds the first position of the search string within the string, this position is
            zero-based, i.e., the first position is 0. If the search string does not exist within
            the input string then the function returns -1.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Arguments</b></dt>
          <dd>
            <dl>
              <dlentry>
                <dt>in_str</dt>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that is the string to search within.</dd>
              </dlentry>
              <dlentry>
                <dt>search_str</dt>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that is the string to search for.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Return Value</b></dt>
          <dd>An integer representing the first position of the search string.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Examples</b></dt>
          <dd>
            <codeblock outputclass="language-json">SELECT POSITION("N1QL is awesome", "awesome") as awesome, 
       POSITION("N1QL is awesome", "N1QL") as n1ql,
       POSITION("N1QL is awesome", "SQL") as sql
              
{    
    "results": [
        {
            "awesome": 8,
            "n1ql": 0,
            "sql": -1
        }
    ]
}</codeblock>
          </dd>
        </dlentry>
      </dl>
      <p>Returns </p>
    </section>
    <section id="fn-str-repeat">
      <title>REPEAT(in_str, n)</title>
      <dl>
        <dlentry>
          <dt><b>Description</b></dt>
          <dd>Creates a new string which is the input string repeated the specified number of
            times.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Arguments</b></dt>
          <dd>
            <dl>
              <dlentry>
                <dt>in_str</dt>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that is the string to repeat.</dd>
              </dlentry>
              <dlentry>
                <dt>n</dt>
                <dd>An integer, or any valid <xref href="index.dita">expression</xref> which
                  evaluates to an integer, that is the number of times to repeat the string.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Return Value</b></dt>
          <dd>A string representing the string generated by repeating the input string.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Limitations</b></dt>
          <dd>It is possible to generate very large strings using this function. In some cases the
            query engine may be unable to process all of these and cause excessive resource
            consumption. It is therefore recommended that you first validate the inputs to this
            function to ensure that the generated result is a reasonable size.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Examples</b></dt>
          <dd>
            <codeblock outputclass="language-json">SELECT REPEAT("N1QL", 0) as empty_string,
       REPEAT("N1QL", 3) as n1ql_3;

{    
    "results": [
        {
            "empty_string": "",
            "n1ql_3": "N1QLN1QLN1QL"
        }
    ]
}</codeblock>
          </dd>
        </dlentry>
      </dl>
    </section>
    <section id="fn-str-replace">
      <title>REPLACE(in_str, search_str, replace [, n ])</title>
      <dl>
        <dlentry>
          <dt><b>Description</b></dt>
          <dd>Replaces occurrences of a given substring in an input string. </dd>
        </dlentry>
        <dlentry>
          <dt><b>Arguments</b></dt>
          <dd>
            <dl>
              <dlentry>
                <dt>in_str</dt>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that is the string to search for replacements in.</dd>
              </dlentry>
              <dlentry>
                <dt>search_str</dt>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that is the string to replace.</dd>
              </dlentry>
              <dlentry>
                <dt>replace</dt>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that is the string to replace the search string with.</dd>
              </dlentry>
              <dlentry>
                <dt><b>n</b></dt>
                <dd>[Optional; default is all instances of the search string are replaced]</dd>
                <dd>An integer, or any valid <xref href="index.dita">expression</xref> which
                  evaluates to an integer, which represents the number of instances of the search
                  string to replace. If a negative value is specified then all instances of the
                  search string are replaced.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Return Value</b></dt>
          <dd>A string representing the input string with the specified substring replaced.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Examples</b></dt>
          <dd>
            <codeblock outputclass="language-json">SELECT REPLACE("SQL SQL SQL", "S", "N1", -2) as negative_n,
       REPLACE("SQL SQL SQL", "S", "N1", 2) as replace_2,
       REPLACE("SQL SQL SQL", "S", "N1") as replace_all;
              
{    
    "results": [
        {
            "negative_n": "N1QL N1QL N1QL",
            "replace_2": "N1QL N1QL SQL",
            "replace_all": "N1QL N1QL N1QL"
        }
    ]
}</codeblock>
          </dd>
        </dlentry>
      </dl>
    </section>
    <section id="fn-str-reverse">
      <title>REVERSE(in_str)</title>
      <dl>
        <dlentry>
          <dt><b>Description</b></dt>
          <dd>Reverses the order of the characters in a given string. i.e. The first character
            becomes the last character and the last character becomes the first character etc. This
            is useful for testing whether or not a string is a palindrome.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Arguments</b></dt>
          <dd>
            <dl>
              <dlentry>
                <dt>in_str</dt>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that is the string to reverse.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Return Value</b></dt>
          <dd>A string representing the input string with its characters reversed.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Examples</b></dt>
          <dd>
            <codeblock outputclass="language-json">SELECT REVERSE("N1QL is awesome") as n1ql,
       REVERSE("racecar") as palindrome;
              
{    
    "results": [
        {
            "n1ql": "emosewa si LQ1N",
            "palindrome": "racecar"
        }
    ]
}</codeblock>
          </dd>
        </dlentry>
      </dl>
    </section>
    <section id="fn-str-rtrim">
      <title>RTRIM(in_str [, char])</title>
      <dl>
        <dlentry>
          <dt><b>Description</b></dt>
          <dd>Removes all trailing characters from a string. The function removes all consecutive
            characters from the end of the string that match the specified characters and stops when
            it encounters a character that does not match any of the specified characters.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Arguments</b></dt>
          <dd>
            <dl>
              <dlentry>
                <dt>in_str</dt>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that is the string to convert to remove trailing characters
                  from.</dd>
              </dlentry>
              <dlentry>
                <dt>char</dt>
                <dd>[Optional; default is whitespace, i.e. <codeph>" "</codeph>]</dd>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that represents the characters to trim from the input string. Each
                  character in this string will be trimmed from the input string, it is therefore
                  not necessary to delimit the characters to trim. For example specifying a
                  character value of <codeph>"abc"</codeph> will trim the characters
                    <codeph>"a"</codeph>, <codeph>"b"</codeph> and <codeph>"c"</codeph> from the
                  start of the string.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Return Value</b></dt>
          <dd>A string representing the input string with its trailing characters removed.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Examples</b></dt>
          <dd>
            <codeblock outputclass="language-json">SELECT RTRIM("N1QL is awesome...", ".") as dots,
       RTRIM("N1QL is awesome     ", " ") as explicit_spaces,
       RTRIM("N1QL is awesome     ") as implicit_spaces,
       RTRIM("N1QL is awesome") as no_dots;
              
{    
    "results": [
        {
            "dots": "N1QL is awesome",
            "explicit_spaces": "N1QL is awesome",
            "implicit_spaces": "N1QL is awesome",
            "no_dots": "N1QL is awesome"
        }
    ]
}</codeblock>
          </dd>
        </dlentry>
      </dl>
    </section>
    <section id="fn-str-split">
      <title>SPLIT(in_str [, in_substr])</title>
      <dl>
        <dlentry>
          <dt><b>Description</b></dt>
          <dd>Splits the string into an array of substrings, based on the specified separator
            string. </dd>
        </dlentry>
        <dlentry>
          <dt><b>Arguments</b></dt>
          <dd>
            <dl>
              <dlentry>
                <dt>in_str</dt>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that is the string to split.</dd>
              </dlentry>
              <dlentry>
                <dt>in_substr</dt>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that is the substring to split the input string on.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Return Value</b></dt>
          <dd>An array of strings containing the strings created by splitting the input string.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Examples</b></dt>
          <dd>
            <codeblock outputclass="language-json">SELECT SPLIT("N1QL is awesome", " ") as explicit_spaces,
       SPLIT("N1QL is awesome") as implicit_spaces,
       SPLIT("N1QL is awesome", "is") as split_is
              
{    
    "results": [
        {
            "explicit_spaces": [
                "N1QL",
                "is",
                "awesome"
            ],
            "implicit_spaces": [
                "N1QL",
                "is",
                "awesome"
            ],
            "split_is": [
                "N1QL ",
                " awesome"
            ]
        }
    ]
}</codeblock>
          </dd>
        </dlentry>
      </dl>
    </section>
    <section id="fn-str-substr">
      <title>SUBSTR(in_str, start_pos [, length])</title>
      <dl>
        <dlentry>
          <dt><b>Description</b></dt>
          <dd>Returns the substring (of given length) starting at the provided position. The
            position is zero-based, i.e. the first position is 0. If position is negative, it is
            counted from the end of the string; -1 is the last position in the string.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Arguments</b></dt>
          <dd>
            <dl>
              <dlentry>
                <dt>in_str</dt>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that is the string to convert to extract the substring from.</dd>
              </dlentry>
              <dlentry>
                <dt>start_pos</dt>
                <dd>An integer, or any valid <xref href="index.dita">expression</xref> which
                  evaluates to an integer, that is the start position of the substring.</dd>
              </dlentry>
              <dlentry>
                <dt>length</dt>
                <dd>[Optional; default is to capture to the end of the string]</dd>
                <dd>An integer, or any valid <xref href="index.dita">expression</xref> which
                  evaluates to an integer, that is the length of the substring to extract.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Return Value</b></dt>
          <dd>A string representing the substring extracted from the input string.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Examples</b></dt>
          <dd>
            <codeblock outputclass="language-json">SELECT SUBSTR("N1QL is awesome", 3) as end_of_string,
       SUBSTR("N1QL is awesome", 3, 1) as single_letter,
       SUBSTR("N1QL is awesome", 3, 3) as three_letters
              
{    
    "results": [
        {
            "end_of_string": "L is awesome",
            "single_letter": "L",
            "three_letters": "L i"
        }
    ]
}</codeblock>
          </dd>
        </dlentry>
      </dl>
    </section>
    <section id="fn-str-suffixes">
      <title>SUFFIXES(in_str)</title>
      <dl>
        <dlentry>
          <dt><b>Description</b></dt>
          <dd>Generates an array of all the suffixes of the input string. </dd>
        </dlentry>
        <dlentry>
          <dt><b>Arguments</b></dt>
          <dd>
            <dl>
              <dlentry>
                <dt>in_str</dt>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that is the string to generate the suffixes of.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Return Value</b></dt>
          <dd>An array of strings containing all of the suffixes of the input string.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Examples</b></dt>
          <dd><codeblock outputclass="language-json">SELECT SUFFIXES("N1QL is awesome") as n1ql

{
    "results": [
        {
            "n1ql": [
                "N1QL is awesome",
                "1QL is awesome",
                "QL is awesome",
                "L is awesome",
                " is awesome",
                "is awesome",
                "s awesome",
                " awesome",
                "awesome",
                "wesome",
                "esome",
                "some",
                "ome",
                "me",
                "e"
            ]
        }
    ]
}</codeblock>The
            following example uses the<codeph> SUFFIXES() </codeph>function to index and query the
            airport names when a partial airport name is given.
              <codeblock outputclass="language-sql">CREATE INDEX autocomplete_airport_name 
ON `travel-sample`( DISTINCT ARRAY array_element FOR array_element 
IN SUFFIXES(LOWER(airportname)) END )
WHERE type = "airport";</codeblock><codeblock outputclass="language-sql">SELECT airportname 
FROM `travel-sample`
WHERE ANY array_element 
IN SUFFIXES(LOWER(airportname)) SATISFIES array_element LIKE 'washing%' END
AND type="airport";</codeblock><codeblock outputclass="language-json">{
    "results": [
        {
            "airportname": "Ronald Reagan Washington Natl"
        },
        {
            "airportname": "Washington Dulles Intl"
        },
        {
            "airportname": "Baltimore Washington Intl"
        },
        {
            "airportname": "Washington Union Station"
        }
    ]
}</codeblock><p>This
                <xref
                href="https://dzone.com/articles/a-couchbase-index-technique-for-like-predicates-wi"
                format="html" scope="external">blog</xref> provides more information about this
              example.</p></dd>
        </dlentry>
      </dl>
    </section>
    <section id="fn-str-title">
      <title>TITLE(in_str)</title>
      <p>Alias for <xref href="#topic_8_12/fn-str-initcap" format="dita">INITCAP()</xref>.</p>
    </section>
    <section id="fn-str-token">
      <title>TOKENS(in_str, opt)</title>
      <dl>
        <dlentry>
          <dt><b>Description</b></dt>
          <dd>
            <p>This function tokenizes (i.e. breaks up into meaningful segments) the given input
              string based on specified delimiters, and other options. It recursively enumerates all
              tokens in a JSON value and returns an array of values (JSON atomic values) as the
              result.</p>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Arguments</b></dt>
          <dd>
            <dl>
              <dlentry>
                <dt>in_str</dt>
                <dd>A valid JSON object, this can be anything: constant literal, simple JSON value,
                  JSON key name or the whole document itself.</dd>
                <dd>
                  <p>The following table lists the rules for each JSON type: <table frame="all"
                      rowsep="1" colsep="1" id="table_gy4_jhg_gy">
                      <tgroup cols="2">
                        <colspec colname="c1" colnum="1" colwidth="1.0*"/>
                        <colspec colname="c2" colnum="2" colwidth="1.0*"/>
                        <thead>
                          <row>
                            <entry>JSON Type</entry>
                            <entry>Return Value</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>MISSING</entry>
                            <entry>[]</entry>
                          </row>
                          <row>
                            <entry>NULL</entry>
                            <entry>[NULL]</entry>
                          </row>
                          <row>
                            <entry>false</entry>
                            <entry>[false]</entry>
                          </row>
                          <row>
                            <entry>true</entry>
                            <entry>[true]</entry>
                          </row>
                          <row>
                            <entry>number</entry>
                            <entry>[number]</entry>
                          </row>
                          <row>
                            <entry>string</entry>
                            <entry>SPLIT(string)</entry>
                          </row>
                          <row>
                            <entry>array</entry>
                            <entry>FLATTEN(TOKENS(element) for each element in
                                array<p>(Concatenation of element tokens)</p></entry>
                          </row>
                          <row>
                            <entry>object</entry>
                            <entry>For each name-value pair, name+TOKENS(value)</entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table></p>
                </dd>
              </dlentry>
              <dlentry>
                <dt>opt</dt>
                <dd>A JSON object indicating the options passed to the<codeph> TOKENS()
                  </codeph>function. Options can take the following options, and each invocation
                    of<codeph> TOKENS() </codeph>can choose one or more of the options:<ul
                    id="ul_hy4_jhg_gy">
                    <li><b>{"name": true}</b>: <b>Optional</b>. Valid values are<codeph> true
                        </codeph>or<codeph> false</codeph>. By default, this is set to true and
                        <codeph>TOKENS()</codeph> will include field names. You can choose to not
                      include field names by setting this option to <codeph>false</codeph>.</li>
                    <li><b>{"case":"lower"}</b>: <b>Optional</b>. Valid values are<userinput> lower
                        </userinput>or<userinput> upper</userinput>. Default is neither, as in it
                      returns the case of the original data. Use this option to specify the case
                      sensitivity.</li>
                    <li><b>{"specials": true}</b>:<b>Optional</b>. Use this option to preserve
                      strings with specials characters, such as email addresses, URLs, and
                      hyphenated phone numbers. The default value is
                        <codeph>false</codeph>.<note>The <codeph>specials</codeph> options preserves
                        special characters except at the end of a word.</note></li>
                  </ul></dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Return Value</b></dt>
          <dd>An array of strings containing all of the tokens obtained from the input string.</dd>
          <dd>NOTE: By default, for speed, the results are randomly ordered. To make the difference
            more clear between the two example queries, the <codeph>ARRAY_SORT()</codeph> function
            is used.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Examples</b></dt>
          <dd><b>Example 1a</b>: List the tokens of an array where <codeph>specials</codeph> is
              FALSE.<codeblock outputclass="language-json"><b>SELECT ARRAY_SORT( TOKENS( ['jim@abc.com, kim@abc.com, http://abc.com/, 408-555-1212'],
                 { 'specials': false });</b>

Results:
[
  {
    "$1": [
      "1212",
      "408",
      "555",
      "abc",
      "com",
      "http",
      "jim",
      "kim"
    ]
  }
]</codeblock><b>Example
              1b</b>: List the tokens of an array where <codeph>specials</codeph> is
                TRUE.<codeblock outputclass="language-json"><b>SELECT ARRAY_SORT( TOKENS(['jim@abc.com, kim@abc.com, http://abc.com/, 408-555-1212'],
	           { 'specials': true }));</b>

Results:
[
  {
    "$1": [
      "1212",
      "408",
<b>      "408-555-1212",</b>
      "555",
      "abc",
      "com",
      "http",
<b>      "http://abc.com",</b>
      "jim",
<b>      "jim@abc.com",</b>
      "kim",
<b>      "kim@abc.com"</b>
    ]
  }
]</codeblock><p><b>Example
                2</b>:  Convert all of the URL data into UPPER case and adds the full URL to the
              delimited
              words.</p><codeblock outputclass="language-json"><b>SELECT ARRAY_SORT( TOKENS(url) ) AS defaulttoken, 
       ARRAY_SORT( TOKENS(url, {"specials":true, "case":"UPPER"}) ) AS specialtoken
FROM `travel-sample` WHERE type = 'hotel'
LIMIT 1;</b>
	
[
  {
    "defaulttoken": [
      "co",
      "http",
      "tantallonhouse",
      "uk",
      "www"
    ],
    "specialtoken": [
      "CO",
      "HTTP",
      "HTTP://WWW.TANTALLONHOUSE.CO.UK",
      "TANTALLONHOUSE",
      "UK",
      "WWW"
    ]
  }
]</codeblock><p>You
              can also use<codeph> {"case":"lower"} </codeph>or<codeph> {"case":"upper"} </codeph>to
              have case sensitive search. Index creation and querying can use this and other
              parameters in combination. These parameters should be passed within the query
              predicates as well. The parameters and values must match exactly for N1QL to pick up
              and use the index correctly. </p><p><b>Example 3</b>: Create an index with
                <codeph>case</codeph> and use it your
            application.</p><codeblock outputclass="language-sql">CREATE INDEX idx_url_upper_special on `travel-sample`(
    DISTINCT ARRAY v for v in 
        tokens(url, {"specials":true, "case":"UPPER"}) 
    END ) where type = 'hotel';</codeblock><codeblock outputclass="language-json">SELECT name, address, url
FROM `travel-sample`
WHERE ANY  v in tokens(url, {"specials":true, "case":"UPPER"})
      SATISFIES v = "HTTP://WWW.YHA.ORG.UK" 
      END  
AND type = 'hotel' ;

{
    "results": [
        {
            "address": "Capstone Road, ME7 3JE",
            "name": "Medway Youth Hostel",
            "url": "http://www.yha.org.uk"
        }
    ]
}</codeblock></dd>
        </dlentry>
      </dl>
    </section>
    <section id="fn-str-trim">
      <title>TRIM(in_str [, char])</title>
      <dl>
        <dlentry>
          <dt><b>Description</b></dt>
          <dd>Removes all leading and trailing characters from a string. The function removes all
            consecutive characters from the beginning and end of the string that match the specified
            characters and stops when it encounters a character that does not match any of the
            specified characters. This function is equivalent to calling <codeph>LTRIM()
              </codeph>and<codeph> RTRIM() </codeph>successively.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Arguments</b></dt>
          <dd>
            <dl>
              <dlentry>
                <dt>in_str</dt>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that is the string to convert to remove trailing and leading
                  characters from.</dd>
              </dlentry>
              <dlentry>
                <dt>char</dt>
                <dd>[Optional; default is whitespace, i.e. <codeph>" "</codeph>]</dd>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that represents the characters to trim from the input string. Each
                  character in this string will be trimmed from the input string, it is therefore
                  not necessary to delimit the characters to trim. For example specifying a
                  character value of <codeph>"abc"</codeph> will trim the characters
                    <codeph>"a"</codeph>, <codeph>"b"</codeph> and <codeph>"c"</codeph> from the
                  start of the string.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Return Value</b></dt>
          <dd>A string representing the input string with trailing and leading characters
            removed.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Examples</b></dt>
          <dd>
            <codeblock outputclass="language-json">SELECT TRIM("...N1QL is awesome...", ".") as dots,
       TRIM("     N1QL is awesome     ", " ") as explicit_spaces,
       TRIM("     N1QL is awesome     ") as implicit_spaces,
       TRIM("N1QL is awesome") as no_dots;

{
    "results": [
        {
            "dots": "N1QL is awesome",
            "explicit_spaces": "N1QL is awesome",
            "implicit_spaces": "N1QL is awesome",
            "no_dots": "N1QL is awesome"
        }
    ]
}</codeblock>
          </dd>
        </dlentry>
      </dl>
    </section>
    <section id="fn-str-upper">
      <title>UPPER(in_str)</title>
      <dl>
        <dlentry>
          <dt><b>Description</b></dt>
          <dd>Converts all characters in the input string to upper case.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Arguments</b></dt>
          <dd>
            <dl>
              <dlentry>
                <dt>in_str</dt>
                <dd>A string, or any valid <xref href="index.dita">expression</xref> which evaluates
                  to a string, that is the string to convert to upper case.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Return Value</b></dt>
          <dd>A string representing the input string converted to upper case.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Examples</b></dt>
          <dd>
            <codeblock outputclass="language-json">SELECT UPPER("N1QL is awesome") as n1ql;
              
{    
    "results": [
        {
            "n1ql": "N1QL IS AWESOME"
        }
    ]
}</codeblock>
          </dd>
        </dlentry>
      </dl>
    </section>
  </conbody></concept>
