<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_8_12"  xml:lang="en-US">
  <title>String Functions</title>
  <conbody >
    <p>String functions perform operations on a string input value and returns a string or other value. </p>

    <p><b>CONTAINS(expression, substring)</b></p>
    <p>True if the string contains the substring.</p>

    <p><b>INITCAP(expression), TITLE(expression)</b></p>
    <p>Converts the string so that the first letter of each word is uppercase and every other letter is 
      lowercase.</p>
  
    <p><b>LENGTH(expression)</b></p>
    <p>Returns length of the string value.</p>

    <p><b>LOWER(expression)</b></p>
    <p>Returns lowercase of the string value.</p>

    <p><b>LTRIM(expression [, characters ])</b></p>
    <p>Returns string with all leading characters removed. White space is trimmed by default. The
      function removes leading characters from the expression that match the specified characters
      and stops when it encounters a character that does not match any of the specified characters. </p>

    <p><b>POSITION(expression, substring)</b></p>
    <p>Returns the first position of the substring within the string, or -1. The position is
			zero-based, i.e., the first position is 0.</p>

    <p><b>REPEAT(expression, n)</b></p>
    <p>Returns string formed by repeating expression n times.</p>

    <p><b>REPLACE(expression, substring, repl [, n ])</b></p>
    <p>Returns string with all occurrences of substr replaced with repl. If n is given, at most n replacements
      are performed.</p>

    <p><b>RTRIM(expression, [, characters ])</b></p>
    <p>Returns string with all trailing characters removed. White space is trimmed by default. The
      function removes trailing characters from the expression that match the specified characters
      and stops when it encounters a character that does not match any of the specified characters.
      <codeblock>select rtrim("2013-06-22 18:33:30 330+0300", "+03") ;
 
    "results": [
        {
            "$1": "2013-06-22 18:33:30 "
        }

select rtrim("2013-06-22 18:33:30 330+0300", " +03") ;
 
    "results": [
        {
            "$1": "2013-06-22 18:33:"
        }</codeblock></p>

    <p><b>SPLIT(expression [, sep ])</b></p>
    <p>Splits the string into an array of substrings separated by the specified separator
        <userinput>sep</userinput>. If <userinput>sep</userinput> is not given, any combination of
      white space characters is used.</p>

    <p><b>SUBSTR(expression, position [, length ])</b></p>
    <p>Returns substring from the integer position of the given length, or to the end of the string. 
      The position is zero-based, i.e. the first position is 0. If position is negative, it is counted 
      from the end of the string; -1 is the last position in the string.</p>
    
    <p id="fn-str-suffixes"><b>SUFFIXES(expression)</b></p>
    <p><i>Since Couchbase Server 4.5</i></p>
    <p>Generates an array of all the suffixes of the input string. </p>
    <p>Example</p>
    <p>The following example uses the SUFFIXES() function to query the airport names when a partial
      airport name is given.
      <codeblock spectitle="Create Index">CREATE INDEX autocomplete_airport_name 
  ON `travel-sample`( DISTINCT ARRAY array_element FOR array_element IN SUFFIXES(LOWER(airportname)) END )
  WHERE type = "airport";</codeblock><codeblock spectitle="Query">SELECT airportname 
FROM `travel-sample`
WHERE
  ANY array_element IN SUFFIXES(LOWER(airportname)) SATISFIES array_element LIKE 'washing%' END
  AND type="airport";</codeblock><codeblock spectitle="Results">[
  {
    "airportname": "Washington Dulles Intl"
  },
  {
    "airportname": "Baltimore Washington Intl"
  },
  {
    "airportname": "Ronald Reagan Washington Natl"
  },
  {
    "airportname": "Washington Union Station"
  }
]</codeblock></p>
    <p>The following <xref
        href="https://dzone.com/articles/a-couchbase-index-technique-for-like-predicates-wi"
        format="html" scope="external">blog</xref> provides more information about this example.</p>

    <p><b>TITLE(expression), INITCAP(expression)</b></p>
    <p>Converts the string so that the first letter of each word is uppercase and every other letter is 
      lowercase.</p>

    <p><b>TRIM(expression [, characters ])</b></p>
    <p>Returns string with all leading and trailing chars removed. White space by default.</p>

    <p><b>UPPER(expression)</b></p>
    <p>Returns uppercase of the string value.</p>
    <p>Example</p>
    <p>The following example shows the use of a LOWER string function.</p>
    <codeblock>SELECT product
FROM product
  UNNEST product.categories as categories
WHERE LOWER(categories) = "appliances"   </codeblock>
    </conbody></concept>
