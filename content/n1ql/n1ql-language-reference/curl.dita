<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_8_8" xml:lang="en-US">
  <title id="title__Toc272567350">CURL Function</title>
  <conbody>
    <p>The <codeph>CURL()</codeph> function implements a subset of <xref
        href="https://en.wikipedia.org/wiki/CURL" format="html" scope="external">cURL</xref>
      functionality and enables N1QL queries to interact and integrate with external JSON data
      sources available over HTTP/REST. This allows federated queries against external data sources
      such as <xref href="https://maps.googleapis.com" format="html" scope="external">Google
        geocoding API</xref>, <xref href="https://developer.yahoo.com/yql/guide/yql_url.html"
        format="html" scope="external">Yahoo API</xref>, <xref
        href="../../fts/full-text-intro.dita#topic_kp4_qth_t5">Couchbase Full text service</xref> or
      other Couchbase clusters. The federated queries can leverage full querying capabilities of
      N1QL, including functions, expressions, sub-queries, JOINs, NESTs, UNNESTs etc.</p>
    <p>The <codeph>CURL()</codeph> function can be used in various N1QL expressions and in various
      clauses of the DML statements such as projection, WHERE predicates, FROM data source, and so
      on. For example, you can use the CURL function to integrate with Couchbase FTS and run fuzzy
      text searches in N1QL queries, or INSERT-SELECT statement to import external data into
      Couchbase Server.</p>
    <section id="section_vm2_vcw_1z">
      <title>Syntax</title>
      <p><codeph>CURL(url, [options])</codeph></p>
      <dl>
        <dlentry>
          <dt>Arguments</dt>
          <dd>
            <ul>
              <li><codeph>url</codeph> - is a string representing the URL of the data source. The
                URL needs to point to a JSON endpoint and must be either http:// or https:// only.
                No other protocol is supported. The redirection of URL is not allowed.</li>
              <li><codeph>options</codeph> - is an optional JSON object representing various
                supported options. This includes options and parameters to be sent to the URL source
                endpoint.</li>
            </ul>
          </dd>
        </dlentry>
        <dlentry>
          <dt>Options</dt>
          <dd>
            <table frame="all" rowsep="1" colsep="1" id="table_security_options">
              <title>Security Options</title>
              <tgroup cols="3">
                <colspec colname="c1" colnum="1" colwidth="1.0*"/>
                <colspec colname="c2" colnum="2" colwidth="3.0*"/>
                <colspec colname="c3" colnum="3" colwidth="2.0*"/>
                <thead>
                  <row>
                    <entry>Option</entry>
                    <entry>Description</entry>
                    <entry>Value</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry><codeph>user</codeph></entry>
                    <entry>Server user name and password.</entry>
                    <entry>USERNAME[:PASSWORD]</entry>
                  </row>
                  <row>
                    <entry><codeph>basic</codeph></entry>
                    <entry>Use HTTP Basic Authentication.</entry>
                    <entry>Boolean</entry>
                  </row>
                  <row>
                    <entry><codeph>insecure</codeph></entry>
                    <entry>Allow connections to SSL sites without certificates (H).</entry>
                    <entry>Boolean</entry>
                  </row>
                  <row>
                    <entry><codeph>anyauth</codeph></entry>
                    <entry>CURL to figure out authentication method by itself, and use the most
                      secure one. <note>This supports only basic authentication.</note></entry>
                    <entry>Boolean</entry>
                  </row>
                  <row>
                    <entry><codeph>cacert</codeph></entry>
                    <entry>Specify CA signed certificate file name. Certificates should be stored on
                      the local machine, on each query node within a cluster. <p>
                        <ul id="ul_bjy_wvp_xz">
                          <li>To store certificates, access
                              <filepath>/Couchbase/var/lib/couchbase/n1qlcerts</filepath>. This is
                            not visible to the user.</li>
                          <li>The file name cannot contain a path.</li>
                          <li>If the certificate is not a match to the existing contents of
                              <filepath>n1qlcerts</filepath> directory, the function returns an
                            error. </li>
                          <li>All expired and invalid certificates return an error. </li>
                        </ul>
                      </p></entry>
                    <entry>FILENAME <p>For example, this is the certificate <codeph>.pem</codeph>
                        file for AWS.</p></entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
            <table frame="all" rowsep="1" colsep="1" id="table_transfer_options">
              <title>Transfer-related Options</title>
              <tgroup cols="3">
                <colspec colname="c1" colnum="1" colwidth="1.0*"/>
                <colspec colname="c2" colnum="2" colwidth="2.0*"/>
                <colspec colname="c3" colnum="3" colwidth="3.0*"/>
                <thead>
                  <row>
                    <entry>Option</entry>
                    <entry>Description</entry>
                    <entry>Value</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry><codeph>get</codeph></entry>
                    <entry>The Get request for CURL.</entry>
                    <entry>BOOLEAN <p/><p>Example: <codeph>{"get": true}</codeph></p></entry>
                  </row>
                  <row>
                    <entry><codeph>request</codeph></entry>
                    <entry>Sets the request method. This only accepts GET or POST requests. This is
                      case sensitive.</entry>
                    <entry>String<p/><p>Example: <codeph>{"request":"POST"}</codeph></p></entry>
                  </row>
                  <row>
                    <entry><codeph>connect-timeout</codeph></entry>
                    <entry>The maximum time allowed for connection in seconds.</entry>
                    <entry>Integer<p/><p>Example:
                      <codeph>{"connect-timeout":30}</codeph></p></entry>
                  </row>
                  <row>
                    <entry><codeph>max-time</codeph></entry>
                    <entry>The maximum time allowed for the transfer in seconds.</entry>
                    <entry>Integer<p/><p>Example: <codeph>{"max-time":30}</codeph></p></entry>
                  </row>
                  <row>
                    <entry><codeph>data</codeph></entry>
                    <entry>POST data to be sent to the HTTP/REST service. The string data should be
                      formatted exactly same as HTTP POST data.</entry>
                    <entry>String or [...string, string….]<p/><p>Example:
                          <codeph>{"data":"address=Half+Moon+Bay"}</codeph></p><p><codeph>{"data":"address=Half+Moon+Bay,california"}</codeph></p></entry>
                  </row>
                  <row>
                    <entry><codeph>header</codeph></entry>
                    <entry>Passes custom header line to the server.</entry>
                    <entry>String or [...string, string….]<p/><p>Example:
                          <codeph>{"header":"Content-Type:
                          application/json"}</codeph></p><p><codeph>{"header":["Content-Type:
                          application/json", "Content-Length: 115"]}</codeph></p></entry>
                  </row>
                  <row>
                    <entry><codeph>show-error</codeph></entry>
                    <entry>Displays error message.</entry>
                    <entry>Boolean<p/><p>Example: <codeph>{"show-error": true}</codeph></p></entry>
                  </row>
                  <row>
                    <entry><codeph>silent</codeph></entry>
                    <entry>The silent mode.</entry>
                    <entry>Boolean<p/><p>Example: <codeph>{"silent": false}</codeph></p></entry>
                  </row>
                  <row>
                    <entry><codeph>keepalive-time</codeph></entry>
                    <entry>The number of seconds to wait between the <codeph>keepalive</codeph>
                      probes.</entry>
                    <entry>Integer<p/><p>Example: <codeph>{"keepalive-time":20}</codeph></p></entry>
                  </row>
                  <row>
                    <entry><codeph>user-agent</codeph></entry>
                    <entry>The value for the user-agent to send it to the server.</entry>
                    <entry>String<p/><p>Example: <codeph>{"header":[ "user-agent:
                          bsmith","Content-Type: application/json"]}</codeph></p></entry>
                  </row>
                  <row>
                    <entry><codeph>data-urlencode</codeph></entry>
                    <entry>Encode the data and send it to the server.<p>This is a test =>
                        this%20is%20a%20test </p></entry>
                    <entry>String or [...string, string….]</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
          </dd>
        </dlentry>
        <dlentry>
          <dt>Return Value</dt>
          <dd>The CURL function returns either a single JSON object or multiple objects in an array.
            These objects are returned by the HTTP/REST service at the URL. Note that, the result is
            expected to be JSON, and the function itself doesn’t do any additional processing.
            However, if the query parameter <codeph>pretty=true</codeph>, then the data received is
            in pretty format. If the returned data from the URL is not a well defined JSON, it may
            result in errors or undefined behavior. The errors returned by CURL (such as moved
            permanently), can be in different formats, like HTML, XML, plain strings, and can be a
            large blob. The N1QL function returns a "Not a JSON endpoint" error when it returns any
            other format other than JSON.</dd>
        </dlentry>
      </dl>
    </section>
    <section><title>Security</title><p>It is important to understand the potential security
        implications in using the <codeph>CURL()</codeph> function. Note that
          <codeph>CURL()</codeph> function can connect to any REST end point accessible to the Query
        node (where the function is executed) inside or outside the firewall. To avoid security
        vulnerabilities, multiple security measures have been implemented. These can be used to
        control and minimize the risks associated with using the CURL() function. See <xref
          href="#topic_8_8/table_security_options" format="dita"/> for the list of security options
        that can be used with the CURL() function.</p><p>In addition to the security options, a Full
        Administrator can also whitelist URLs and REST endpoints that can be accessed by the CURL()
        function. The CURL() function can access URLs that satisfy a prefix match, which means only
        URLs specified on the list or the prefixes. </p><p>Consider the following use case where a
        deployment of Couchbase Server and Mobile Sync Gateway exist on the same machine, and the
        user has access to the query service but not the Sync Gateway admin endpoint. Let's assume
        that the user has been granted QUERY_EXTERNAL_ACCESS role by the Full Administrator. This
        means that the user can write queries using the CURL() function and potentially use CURL to
        access the Mobile Sync Gateway admin endpoint. To avoid this, the Full Administrator can
        create a whitelist for CURL() access and add the Admin endpoint of Sync Gateway to the
          <codeph> disallowed_urls</codeph> list. </p><p>For more details on creating the whitelist
        and the structure of the whitelist file, see <xref href="#topic_8_8/curl-whitelisting"
          format="dita">create a whitelist for CURL access</xref>.</p><p>The following security
        measures help control risks when using the <codeph>CURL()</codeph> function:</p><p>
        <ul id="ul_xmc_dl4_vz">
          <li>Enable the <codeph>CURL()</codeph> function only for the Full Administrator role. </li>
          <li>For all other users, the RBAC role QUERY_EXTERNAL_ACCESS is required to run the
              <codeph>CURL()</codeph> function. Only the Full Administrator can assign the
            QUERY_EXTERNAL_ACCESS role to other users. </li>
          <li>A whitelist of URLs and REST points must be configured on the query nodes before being
            able to use the <codeph>CURL()</codeph> function. See <xref
              href="#topic_8_8/curl-whitelisting" format="dita">Creating a Whitelist for CURL()
              Access</xref> for details.</li>
          <li>Each query node in the cluster must define its whitelist file. </li>
          <li>The <codeph>CURL()</codeph> function internally supports a specific set of SSL ciphers
            (MEDIUM or HIGH). This is dependent on the
            <codeph>COUCHBASE_SSL_CIPHER_LIST</codeph>.</li>
          <li>The <codeph>CURL()</codeph> function runs on the query node within a cluster. In order
            to identify a request from N1QL’s <codeph>CURL()</codeph> function, a custom header is
            always set for all requests. The custom header format is: <codeph>"X-N1QL-User-Agent:
              couchbase/n1ql/&lt;n1ql-version>"</codeph>. External clients that wish to disallow
            N1QL <codeph>CURL()</codeph> from accessing their REST API endpoints can explicitly
            check for the above header and block it. The general external endpoints will ignore this
            header value. </li>
          <li>A <codeph>user-agent</codeph> is always set by default. This can be reset using the
              <codeph>-user-agent </codeph> option. The value set by default is
              <codeph>couchbase/n1ql/&lt;n1ql-version></codeph>. <note>The current &lt;n1ql-version>
              is "1.7.0-N1QL".</note></li>
        </ul>
      </p><p id="curl-whitelisting"><b>Creating a Whitelist for CURL() Access</b></p><p>A whitelist
        allows a Full Administrator to list out the permitted REST endpoints and URLs for the
          <codeph>CURL()</codeph> function. To enable access based on the whitelist, a Full
        Administrator must create the file containing the whitelist, which can be created two
          ways:<ol id="ol_pyb_f2y_vdb">
          <li>From the Query Workbench UI in the <b>Settings > Advanced Query Settings</b>
            section.</li>
          <li>From CBQ via a cURL command.</li>
        </ol><b>1. From the Query Workbench</b></p><p>In the Query Workbench, navigate to the
          <b>Settings > Advanced Query Settings</b> section as shown below:<image
          href="images/CURL_Whitelist.png" id="image_clg_xzx_vdb" scale="70"/></p>After expanding
      the Advanced Query Settings section, you can choose the Function Access:<ul
        id="ul_irl_jby_vdb">
        <li><b>Restricted</b> - Access applies only the sites explicitly listed.</li>
        <li><b>Unrestricted</b> - Access applies to all sites within the explicitly listed
          sites.</li>
      </ul>Under the <b>Allowed CURL URLs</b> and <b>Disallowed CURL URLs</b> headings, enter your
      allowed or disallowed URL in the appropriate textbox and press the <b>Enter</b> key or click
      anywhere else on this screen to enter your URL.<p>Click <image
          href="images/CURL_Add_button.png" id="image_wzl_rdy_vdb" scale="30"/> to add another URL
        to the list.</p><p>Click <image href="images/CURL_Remove_button.png" scale="30"
          id="image_ikk_wdy_vdb"/> to remove a URL from the list.</p><p><b>2. From
        CBQ</b></p><p>From a CBQ prompt, you can send a CURL() command to allow or disallow specific
        URLs, for
        example:<codeblock>curl -X POST -u Administrator:password \ -d '{"all_access": true, "allowed_urls" : ["company1.com", "couchbase.com"], "disallowed_urls" : ["company2.com"] }' http://localhost:9000/settings/querySettings/curlWhitelist</codeblock></p><p>The
        whitelist file command structure is described in the following table. <table frame="all"
          rowsep="1" colsep="1" id="table_mtx_zrz_31b">
          <title>Structure of Whitelist for CURL()</title>
          <tgroup cols="4" align="left">
            <colspec colname="c1" colnum="1" colwidth="1.0*"/>
            <colspec colname="c2" colnum="2" colwidth="1.0*"/>
            <colspec colname="c3" colnum="3" colwidth="4.0*"/>
            <colspec colname="c4" colnum="4" colwidth="1.0*"/>
            <thead>
              <row>
                <entry>Field</entry>
                <entry>Type</entry>
                <entry>Description</entry>
                <entry>Default Value</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><parmname>all_access</parmname></entry>
                <entry>boolean</entry>
                <entry>This field defines whether the user has access to all URLs or only URLs
                  specified in the <parmname>allowed_urls </parmname>array. <p>The
                      <filepath>curl</filepath> command must contain the
                      <parmname>all_access</parmname> field set to false to enable whitelisting and
                    restrict access. </p><p>Setting this field to true enables access to all
                    endpoints. </p></entry>
                <entry>false</entry>
              </row>
              <row>
                <entry><parmname>allowed_urls</parmname></entry>
                <entry>array</entry>
                <entry>List of prefixes for URLs that we wish to grant access. This needs to be a
                  prefix match. For example, if we wish to allow access to all Google APIs then add
                  the URL <filepath>https://maps.googleapis.com/</filepath> to the array. Any URL in
                  a CURL() function that contains this value as a prefix will be allowed. <p>To
                    allow complete access to <codeph>localhost</codeph>, use
                      <filepath>http://localhost</filepath>.</p><p>Note that the URL must be
                    complete and must include the port/protocol and all other components o the
                    URL.</p></entry>
                <entry>empty</entry>
              </row>
              <row>
                <entry><parmname>disallowed_urls</parmname></entry>
                <entry>array</entry>
                <entry>List of prefixes for URLs that will be restricted for all roles. Note that
                  the URL must be complete and must include the port/protocol and all other
                  components o the URL.<p>If both <parmname>allowed_urls</parmname> and
                      <parmname>disallowed_urls</parmname> fields are populated, the
                      <parmname>disallowed_urls</parmname> field takes precedence over
                      <parmname>allowed_urls</parmname>.</p></entry>
                <entry>empty</entry>
              </row>
            </tbody>
          </tgroup>
        </table></p></section>
    <section id="section_sjr_yk4_vz">
      <title>Design Considerations</title>
      <p>Here are some of the design considerations to keep in mind when using CURL:</p>
      <p>
        <ul id="ul_kwk_vn4_vz">
          <li>The URL needs to point to a JSON endpoint. The redirection of URL is not allowed.</li>
          <li>Only HTTP and HTTPS protocols are supported. This means that files on the local file
            system cannot be accessed. </li>
          <li>The amount of memory used for the CURL result is controlled using the
              <codeph>result-cap</codeph> option. The default is 20MB.</li>
          <li>Any values passed to the arguments of <codeph>CURL()</codeph> must be static values.
            That means, they cannot include any references to names, aliases of documents,
            attributes in the documents, or any N1QL functions or expressions that need to be
            evaluated. <p>Consider the following example: </p><p>
              <codeblock outputclass="json">SELECT CURL(b.url, { "data" : "address="||b.data }) 
FROM bucket b;</codeblock>
            </p><p>The above example is invalid, because the first argument <codeph>b.url</codeph>
              refers to the alias <codeph>b</codeph> and the attribute <codeph>url</codeph> in the
              document. In the second argument, the string concatenation operator (||) cannot be
              evaluated.</p></li>
        </ul>
      </p>
    </section>
    <section id="section_l3z_kdw_1z">
      <title>Examples</title>
      <ul id="ul_wvd_ggy_vdb">
        <li><xref href="#topic_8_8/Ex1" format="dita">Ex 1: Use Google Maps API to convert static
            address into coordinates.</xref></li>
        <li><xref href="#topic_8_8/Ex2" format="dita">Ex 2: Use Google Maps API to extract geometry
            (address and geographic location bounds) of a given street address.</xref></li>
        <li><xref href="#topic_8_8/Ex3" format="dita">Ex 3: Join two buckets on different Couchbase
            clusters.</xref></li>
        <li><xref href="#topic_8_8/Ex4" format="dita">Ex 4: FTS Fuzzy Search in a N1QL
          query.</xref></li>
        <li><xref href="#topic_8_8/Ex5" format="dita">Ex 5: Use Yahoo Finance API in a WHERE clause
            to find a stock's lowest value for the day.</xref></li>
        <li><xref href="#topic_8_8/Ex6" format="dita">Ex 6: Use CURL() to allow two URLs and
            disallow one URL.</xref></li>
        <li><xref href="#topic_8_8/Ex7" format="dita">Ex 7: Use CURL() to allow all access to all
            endpoints.</xref></li>
        <li><xref href="#topic_8_8/Ex8" format="dita">Ex 8: Use CURL() to turn off access to all
            endpoints and clear the Allowed and Disallowed lists.</xref></li>
        <li><xref href="#topic_8_8/Ex9" format="dita">Ex 9: Use CURL() to turn off access to all
            endpoints but make no changes to the Allowed and Disallowed lists.</xref></li>
        <li><xref href="#topic_8_8/Ex10" format="dita">Ex 10: Use CURL() to turn off access to all
            endpoints, allow one URL, and clear the Disallowed list.</xref></li>
        <li><xref href="#topic_8_8/Ex11" format="dita">Ex 11: Use CURL() to turn off access to all
            endpoints, disallow one URL, and clear the Allowed list.</xref></li>
        <li><xref href="#topic_8_8/Ex12" format="dita">Ex 12: Use CURL() to allow an IP address and
            port instead of a website name.</xref></li>
        <li><xref href="#topic_8_8/Ex13" format="dita">Ex 13: Use CURL() to allow and disallow the
            same URL--and get an error.</xref></li>
        <li><xref href="#topic_8_8/Ex14" format="dita">Ex 14: Use CURL() with dynamic named
            parameters</xref></li>
      </ul>
      <p>The following examples are using CURL in the query projection list. </p>
      <p><b id="Ex1">Example 1:</b> The following N1QL query fetches details about the address "Half Moon
        Bay" using the <xref href="https://developers.google.com/maps/" format="html"
          scope="external">Google maps API</xref>. The Geocoding API from Google Maps allows you to
        convert static addresses into coordinates. (For more information refer to <xref
          href="https://developers.google.com/maps/documentation/geocoding/intro" format="html"
          scope="external">https://developers.google.com/maps/documentation/geocoding/intro</xref>)
        The corresponding <codeph>curl</codeph> command is also provided below.</p>
      <p>
        <codeblock outputclass="json">Curl Request:
curl https://maps.googleapis.com/maps/api/geocode/json?address=Half+Moon+Bay

Query:
SELECT CURL("https://maps.googleapis.com/maps/api/geocode/json",
           {"data":"address=Half+Moon+Bay" , "request":"GET"} );
Results:
[
  {
    "$1": {
      "results": [
        {
          "address_components": [
            {
              "long_name": "Half Moon Bay",
              "short_name": "Half Moon Bay",
              "types": [
                "locality",
                "political"
              ]
            },
            {
              "long_name": "San Mateo County",
              "short_name": "San Mateo County",
              "types": [
                "administrative_area_level_2",
                "political"
              ]
            },
            {
              "long_name": "California",
              "short_name": "CA",
              "types": [
                "administrative_area_level_1",
                "political"
              ]
            },
            {
              "long_name": "United States",
              "short_name": "US",
              "types": [
                "country",
                "political"
              ]
            }
          ],
          "formatted_address": "Half Moon Bay, CA, USA",
          "geometry": {
            "bounds": {
              "northeast": {
                "lat": 37.5226389,
                "lng": -122.4165183
              },
              "southwest": {
                "lat": 37.4249286,
                "lng": -122.4778879
              }
            },
            "location": {
              "lat": 37.4635519,
              "lng": -122.4285862
            },
            "location_type": "APPROXIMATE",
            "viewport": {
              "northeast": {
                "lat": 37.5226389,
                "lng": -122.4165183
              },
              "southwest": {
                "lat": 37.4249286,
                "lng": -122.4774494
              }
            }
          },
          "place_id": "ChIJC8sZCqULj4ARVJvnNcic_V4",
          "types": [
            "locality",
            "political"
          ]
        }
      ],
      "status": "OK"
    }
  }
]</codeblock>
      </p>
      <p><b id="Ex2">Example 2:</b> This is similar to Example 1, but following N1QL query fetches details
        about Santa Cruz in Spain using <xref href="https://developers.google.com/maps/"
          format="html" scope="external">Google geocoding API</xref> and extracts the ‘geometry’
        field from the result. This query retrieves the address and geographic location bounds of
        the address, Santa Cruz, ES. We use the <codeph>address</codeph> and
          <codeph>components</codeph> parameters from the Geocoding API. The <codeph>data</codeph>
        option represents the HTTP POST data. </p>
      <p>
        <codeblock outputclass="json">Curl Request:
curl https://maps.googleapis.com/maps/api/geocode/json?address=santa+cruz&amp;components=country:ES

Query:
SELECT CURL("https://maps.googleapis.com/maps/api/geocode/json", 
           {"data":["address=santa+cruz","components=country:ES"],"get":true});

Results:
[
  {
    "$1": {
      "results": [
        {
          "address_components": [
            {
              "long_name": "Santa Cruz de Tenerife",
              "short_name": "Santa Cruz de Tenerife",
              "types": [
                "locality",
                "political"
              ]
            },
            {
              "long_name": "Santa Cruz de Tenerife",
              "short_name": "TF",
              "types": [
                "administrative_area_level_2",
                "political"
              ]
            },
            {
              "long_name": "Canary Islands",
              "short_name": "CN",
              "types": [
                "administrative_area_level_1",
                "political"
              ]
            },
            {
              "long_name": "Spain",
              "short_name": "ES",
              "types": [
                "country",
                "political"
              ]
            }
          ],
          "formatted_address": "Santa Cruz de Tenerife, Spain",
          "geometry": {
            "bounds": {
              "northeast": {
                "lat": 28.487616,
                "lng": -16.2356646
              },
              "southwest": {
                "lat": 28.4280248,
                "lng": -16.3370045
              }
            },
            "location": {
              "lat": 28.4636296,
              "lng": -16.2518467
            },
            "location_type": "APPROXIMATE",
            "viewport": {
              "northeast": {
                "lat": 28.487616,
                "lng": -16.2356646
              },
              "southwest": {
                "lat": 28.4280248,
                "lng": -16.3370045
              }
            }
          },
          "place_id": "ChIJcUElzOzMQQwRLuV30nMUEUM",
          "types": [
            "locality",
            "political"
          ]
        }
      ],
      "status": "OK"
    }
  }
]</codeblock>
      </p>
      <p><b id="Ex3">Example 3:</b> This N1QL query shows how to JOIN two buckets on different Couchbase
        clusters. It is same as explained in the <xref href="selectintro.dita#topic_xwp_r3k_dx">JOIN
          Clause</xref> example, but with the left and right side buckets for the JOIN are in two
        different Couchbase clusters. </p>
      <p><ul id="ul_cvg_fks_bz">
          <li>The left side bucket <codeph>route</codeph> is the <codeph>`travel-sample`</codeph>
            route documents from cluster running on <codeph>hostname</codeph>. If you don’t have a
            second cluster running, you should substitute the <codeph>hostname</codeph> with
            127.0.0.1 or the IP-address of the local cluster. </li>
          <li>The right side bucket <codeph>airline</codeph> is the <codeph>`travel-sample`</codeph>
            airline documents in the local cluster.</li>
        </ul>Note that the results from the <codeph>CURL()</codeph> output are embedded in the
          <codeph>results[]</codeph> array under the bucket alias ‘t’ used in the remote query. So,
        we extract the result documents appropriately with the expression
          <codeph>CURL(...).results[*].t </codeph>and alias it to <codeph>route</codeph> as the left
        side bucket for the <codeph>JOIN</codeph>. </p>
      <p>
        <codeblock outputclass="json">Query:
SELECT DISTINCT airline.name, airline.callsign, route.destinationairport, route.stops, route.airline
FROM CURL("http://hostname:8093/query/service", 
     {"data" : "statement=SELECT * FROM `travel-sample` t WHERE t.type = 'route'"
      }).results[*].t  route
JOIN `travel-sample` airline 
ON KEYS route.airlineid 
WHERE airline.type = "airline" AND route.sourceairport = "SFO";

Results:

[
  {
    "airline": "B6",
    "callsign": "JETBLUE",
    "destinationairport": "AUS",
    "name": "JetBlue Airways",
    "stops": 0
  },
  {
    "airline": "B6",
    "callsign": "JETBLUE",
    "destinationairport": "BOS",
    "name": "JetBlue Airways",
    "stops": 0
  },
  ….
]</codeblock>
      </p>
      <p>The credentials are required for RBAC when CURL() is accessing Couchbase Server 5.0 or
        later version. </p>
      <p>
        <codeblock>SELECT DISTINCT airline.name, airline.callsign, 
   route.destinationairport, route.stops, route.airline
FROM CURL("http://localhost:8093/query/service", 
          {"data" : "statement=SELECT * FROM `travel-sample` t
                     WHERE t.type = 'route'",
  "request" : "POST", "user":"Administrator:password"}).results[*].t  route
JOIN `travel-sample` airline 
ON KEYS route.airlineid 
WHERE airline.type = "airline" AND route.sourceairport = "SFO" 
LIMIT 4;
[
  {
    "airline": "B6",
    "callsign": "JETBLUE",
    "destinationairport": "AUS",
    "name": "JetBlue Airways",
    "stops": 0
  }, … 
]</codeblock>
      </p>
      <p><b id="Ex4">Example 4:</b> The following example shows how to use fuzzy search from the FTS service
        in a N1QL query. Assuming the FTS index <codeph>fts_travel</codeph> is created on the bucket
          <codeph>`travel-sample`</codeph>, running the following N1QL query finds all documents
        that have "sanfrancisco" anywhere in the document, using the full-text searching
        capabilities of the Couchbase FTS service. </p>
      <codeblock outputclass="json">Query:
SELECT result.hits[*].id
FROM CURL("http://Administrator:password@127.0.0.1:8094/api/index/fts_index/query",
     {"header":"Content-Type: application/json",
      "request" : "POST",  
      "data":'{"explain":false,"fields": ["*"],"highlight": {},
              "query": {"query": "san fran isco"}}' }) result;

Results:

[
  {
    "id": [
      "hotel_25509",
      "hotel_25508",
      "hotel_26139",
      "hotel_25587",
      "hotel_25503",
      "hotel_25667",
      "hotel_25502",
      "hotel_25597",
      "hotel_26493",
      "hotel_25670"
    ]
  }
]</codeblock>
      <p><b id="Ex5">Example 5:</b> The following example uses the <codeph>CURL()</codeph> function with a
        WHERE clause. It uses the Yahoo finance API to find the day’s low value (i.e
          <codeph>DaysLow</codeph>) of HDP stock and finds all the documents in the
          <codeph>default</codeph> bucket that have ‘min_threshold’ attribute value greater than the
        DaysLow stock value. </p>
      <p>Insert the following documents into the <codeph>default</codeph> bucket, representing
        customers and their minimum thresholds, and then run the <codeph>SELECT</codeph> query: </p>
      <p>
        <codeblock outputclass="json">INSERT INTO `travel-sample` (KEY, VALUE)
  VALUES
     ("k1", 
         {"custID" : 12345, "min_threshold" : 4}), 
     ("k2", 
         {"custID" : 44444, "min_threshold" : 12});

Query:
SELECT min_threshold, 
       meta().id, 
       to_number(hdp_low) hdp_low 
FROM `travel-sample`
USE KEYS ["k1", "k2"]
LET hdp_low = curl("https://query.yahooapis.com/v1/public/yql", {"data":"q=select%20*%20from%20yahoo.finance.quotes%20where%20symbol%20in%20(%22HDP%22)&amp;format=json&amp;diagnostics=true&amp;env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys&amp;callback="}).query.results.quote.DaysLow
WHERE to_number(hdp_low) &lt; min_threshold;

Results:
[
  {
    "hdp_low": 9.48,
    "id": "k2",
    "min_threshold": 12
  }
]</codeblock>
      </p>
      <p><b id="Ex6">Example 6:</b> Use CURL() to allow two URLs and disallow one URL.
        <codeblock>curl -X POST -u Administrator:password \
-d '{
"all_access": true,
"allowed_urls" : ["company1.com", "couchbase.com"],
"disallowed_urls" : [“company2.com”]
}' http://localhost:9000/settings/querySettings/curlWhitelist</codeblock></p>
      <p><b id="Ex7">Example 7:</b> Use CURL() to allow access to all
          endpoints.<codeblock>curl -X POST -u Administrator:password \
-d '{
"all_access": true
}' http://localhost:9000/settings/querySettings/curlWhitelist</codeblock><b
          id="Ex8">Example 8:</b> Use CURL() to turn off access to all endpoints and clear the
        Allowed and Disallowed
          lists.<codeblock>curl -X POST -u Administrator:password \
-d '{
"all_access": false,
"allowed_urls" : [],
"disallowed_urls" : []
}' http://localhost:9000/settings/querySettings/curlWhitelist</codeblock><b
          id="Ex9">Example 9:</b> Use CURL() to turn off access to all endpoints but make no changes
        to the Allowed and Disallowed
          lists.<codeblock>curl -X POST -u Administrator:password \
-d '{
"all_access": false
}' http://localhost:9000/settings/querySettings/curlWhitelist</codeblock><b
          id="Ex10">Example 10:</b> Use CURL() to turn off access to all endpoints, allow one URL,
        and clear the Disallowed
          list.<codeblock>curl -X POST -u Administrator:password \
-d '{
"all_access": false,
"allowed_urls" : [“https://maps.googleapis.com/maps/api/geocode/json”],
"disallowed_urls" : []
}' http://localhost:9000/settings/querySettings/curlWhitelist</codeblock><b
          id="Ex11">Example 11:</b> Use CURL() to turn off access to all endpoints, disallow one
        URL, and clear the Allowed
          list.<codeblock>curl -X POST -u Administrator:password \
-d '{
"all_access": false,
"disallowed_urls" : [“https://maps.googleapis.com/maps/api/geocode/json”],
"allowed_urls" : []
}' http://localhost:9000/settings/querySettings/curlWhitelist</codeblock><b
          id="Ex12">Example 12:</b> Use CURL() to allow an IP address and port instead of a website
          name.<codeblock>curl -X POST -u Administrator:password \
-d '{
"all_access": false,
“disallowed_urls" : [“https://maps.googleapis.com/maps/api/geocode/json”],
"allowed_urls" : [“http://127.0.0.1:9499/query/service”]
}' http://localhost:9000/settings/querySettings/curlWhitelist</codeblock><b
          id="Ex13">Example 13:</b> Use CURL() to allow and disallow the same URL--and get an
          error.<codeblock>curl -X POST -u Administrator:password \
-d '{
"all_access": false,
“disallowed_urls" : [“https://maps.googleapis.com/maps/api/geocode/json”],
"allowed_urls" : [“https://maps.googleapis.com/maps/api/geocode/json”]
}' http://localhost:9000/settings/querySettings/curlWhitelist</codeblock><b
          id="Ex14">Example 14:</b> Use CURL() with dynamic named
        parameters.<codeblock>SELECT CURL(b.url, $params) FROM bucket b WHERE b.username = “joe”; </codeblock>If
        we wanted to use Node.JS, we would
          use:<codeblock>bucket.query(SELECT CURL(b.url, $params) FROM bucket b WHERE b.username = “joe”, { params: { data: "..." } },
 (error, result) => {} );</codeblock><codeph>$params
        </codeph>is a named parameter, so we name it in the parameters object when executing the
        query. Then we populate the properties with the data that's in the documents since those
        properties can be variables.</p>
    </section>
  </conbody>
</concept>
