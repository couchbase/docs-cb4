<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_8_8" xml:lang="en-US">
  <title id="title__Toc272567350">Miscellaneous Utility Functions</title>
  <conbody>
    <p>Meta functions retrieve information about the document or item as well as perform base64
      encoding. </p>
    <dl>
      <dlentry>
        <dt>BASE64(<varname>expression</varname>)</dt>
        <dd>Returns the base64 encoding of the given <varname>expression</varname>.</dd>
      </dlentry>
      <dlentry>
        <dt>BASE64_ENCODE(<varname>expression</varname>)</dt>
        <dd>Alias of BASE64().</dd>
      </dlentry>
      <dlentry>
        <dt>BASE64_DECODE(<varname>expression</varname>)</dt>
        <dd>It reverses the encoding done by the BASE64() or BASE64_ENCODING() functions.</dd>
      </dlentry>
      <dlentry>
        <dt>META(<varname>expression</varname>)</dt>
        <dd>For details, see <xref href="indexing-meta-info.dita#untitled4">Indexing Meta
            Info</xref>.</dd>
      </dlentry>
      <dlentry>
        <dt>PAIRS(<varname>obj</varname>)</dt>
        <dd>This function generates an array of arrays of [<varname>field_name</varname>,
            <varname>value</varname>] pairs of all possible fields in the given JSON object
            <varname>obj</varname>. </dd>
        <dd>
          <note>Nested sub-object fields are explored recursively.</note>
        </dd>
        <dd/>
        <dd><b>Arguments</b></dd>
        <dd><varname>obj</varname>: a valid JSON object</dd>
        <dd/>
        <dd><b>Return Value</b></dd>
        <dd>Array of [<varname>field_name</varname>, <varname>value</varname>] arrays for each field
          in the input object <varname>obj</varname>.<ul id="ul_fwf_3yf_5z">
            <li>If <varname>obj</varname> has nested objects, then fields of such nested sub-objects
              are also explored and corresponding inner-array elements are produced.</li>
            <li>If <varname>obj</varname> is an array, then each element of the array is explored
              and corresponding inner-array elements are produced.</li>
            <li>If <varname>obj</varname> is a primitive data type of integer or string, then it
              returns NULL, as they don't have a name.</li>
            <li>If <varname>obj</varname> is an array of primitive data types, then it returns an
              empty array <codeph>[]</codeph>.</li>
            <li>If <varname>obj</varname> is an array of objects, then it returns an array of
              objects.</li>
          </ul><note>When the field_name is in curly brackets, it's treated as an array and returns
            an array; but without curly bracket, it's treated as a primitive data type and returns
            NULL. For example,<ul id="ul_o25_cbg_5z">
              <li><codeph>PAIRS(public_likes)</codeph> return NULL</li>
              <li><codeph>PAIRS({public_likes})</codeph> returns an array</li>
            </ul></note></dd>
        <dd><b>Example 1</b> - Input value of a nested
            object.<codeblock outputclass="language-json">SELECT t        AS orig_t, 
       PAIRS(t) AS pairs_t 
FROM   `travel-sample` t 
WHERE  type = "airport" 
LIMIT  1;

Result:
[
  {
    "orig_t": {
      "airportname": "Calais Dunkerque",
      "city": "Calais",
      "country": "France",
      "faa": "CQF",
      "geo": {
        "alt": 12,
        "lat": 50.962097,
        "lon": 1.954764
      },
      "icao": "LFAC",
      "id": 1254,
      "type": "airport",
      "tz": "Europe/Paris"
    },
    "pairs_t": [
      [
        "id",
        1254
      ],
      [
        "city",
        "Calais"
      ],
      [
        "faa",
        "CQF"
      ],
      [
        "geo",
        {
          "alt": 12,
          "lat": 50.962097,
          "lon": 1.954764
        }
      ],
      [
        "lon",
        1.954764
      ],
      [
        "alt",
        12
      ],
      [
        "lat",
        50.962097
      ],
      [
        "type",
        "airport"
      ],
      [
        "tz",
        "Europe/Paris"
      ],
      [
        "airportname",
        "Calais Dunkerque"
      ],
      [
        "country",
        "France"
      ],
      [
        "icao",
        "LFAC"
      ]
    ]
  }
]</codeblock><b>Example
            2</b> - Input value of an
            array.<codeblock outputclass="language-json">SELECT public_likes          AS orig_t, 
       PAIRS(public_likes)   AS pairs_array_t,
       PAIRS({public_likes}) AS pairs_obj_t 
FROM   `travel-sample` 
WHERE  type = "hotel" 
LIMIT  1;

Result:
[
  {
    "orig_t": [
      "Julius Tromp I",
      "Corrine Hilll",
      "Jaeden McKenzie",
      "Vallie Ryan",
      "Brian Kilback",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Elnora Trantow"
    ],
    "pairs_array_t": [],
    "pairs_obj_t": [
      [
        "public_likes",
        [
          "Julius Tromp I",
          "Corrine Hilll",
          "Jaeden McKenzie",
          "Vallie Ryan",
          "Brian Kilback",
          "Lilian McLaughlin",
          "Ms. Moses Feeney",
          "Elnora Trantow"
        ]
      ],
      [
        "public_likes",
        "Julius Tromp I"
      ],
      [
        "public_likes",
        "Corrine Hilll"
      ],
      [
        "public_likes",
        "Jaeden McKenzie"
      ],
      [
        "public_likes",
        "Vallie Ryan"
      ],
      [
        "public_likes",
        "Brian Kilback"
      ],
      [
        "public_likes",
        "Lilian McLaughlin"
      ],
      [
        "public_likes",
        "Ms. Moses Feeney"
      ],
      [
        "public_likes",
        "Elnora Trantow"
      ]
    ]
  }
]
</codeblock><b>Example
            3</b> - Input value of a primitive (field document string) data
          type.<codeblock outputclass="language-json">SELECT country        AS orig_t, 
       PAIRS(country) AS pairs_t 
FROM   `travel-sample` 
WHERE  type = "airport" 
LIMIT  1;

Result:
[
  {
    "orig_t": "France",
    "pairs_t": null
  }
]</codeblock></dd>
        <dd><b>Example 3b</b> - Input value of a primitive (constant string) data
          type.<codeblock outputclass="language-json">SELECT PAIRS("N1QL");

Result:
[
  {
    "$1": null
  }
]</codeblock></dd>
        <dd><b>Example 3c</b> - Input value of a primitive (constant integer) data
            type.<codeblock outputclass="language-json">SELECT PAIRS(4);

Result:
[
  {
    "$1": null
  }
]</codeblock><b>Example
            3d</b> - Input value of a primitive (constant array of integers) data
          type.<codeblock outputclass="language-json">SELECT PAIRS([1,2,3]);

Result:
[
  {
    "$1": []
  }
]</codeblock></dd>
        <dd><b>Example 3e</b> - Input value of a primitive data type (constant integer or array of
          integers, wrapped in a JSON
            object).<codeblock outputclass="language-json">SELECT PAIRS({"name" : 3});

Result:
[
  {
    "$1": [
      [
        "name",
        3
      ]
    ]
  }
]

SELECT PAIRS({"name" : [1,2,3]});

Result:
[
  {
    "$1": [
      [
        "name",
        [
          1,
          2,
          3
        ]
      ],
      [
        "name",
        1
      ],
      [
        "name",
        2
      ],
      [
        "name",
        3
      ]
    ]
  }
]</codeblock><b>Example
            4</b> - Input value of an array of
          objects.<codeblock outputclass="language-json">SELECT reviews[*].ratings, 
       PAIRS({reviews[*].ratings}) AS pairs_t 
FROM   `travel-sample` 
WHERE  type = "hotel" 
LIMIT  1;

Result:
[
  {
    "pairs_t": [
      [
        "ratings",
        [
          {
            "Cleanliness": 5,
            "Location": 4,
            "Overall": 4,
            "Rooms": 3,
            "Service": 5,
            "Value": 4
          },
          {
            "Business service (e.g., internet access)": 4,
            "Check in / front desk": 4,
            "Cleanliness": 4,
            "Location": 4,
            "Overall": 4,
            "Rooms": 3,
            "Service": 3,
            "Value": 5
          }
        ]
      ],
      [
        "ratings",
        {
          "Cleanliness": 5,
          "Location": 4,
          "Overall": 4,
          "Rooms": 3,
          "Service": 5,
          "Value": 4
        }
      ],
      [
        "ratings",
        {
          "Business service (e.g., internet access)": 4,
          "Check in / front desk": 4,
          "Cleanliness": 4,
          "Location": 4,
          "Overall": 4,
          "Rooms": 3,
          "Service": 3,
          "Value": 5
        }
      ],
      [
        "Cleanliness",
        5
      ],
      [
        "Location",
        4
      ],
      [
        "Overall",
        4
      ],
      [
        "Rooms",
        3
      ],
      [
        "Service",
        5
      ],
      [
        "Value",
        4
      ],
      [
        "Cleanliness",
        4
      ],
      [
        "Location",
        4
      ],
      [
        "Rooms",
        3
      ],
      [
        "Value",
        5
      ],
      [
        "Business service (e.g., internet access)",
        4
      ],
      [
        "Check in / front desk",
        4
      ],
      [
        "Overall",
        4
      ],
      [
        "Service",
        3
      ]
    ],
    "ratings": [
      {
        "Cleanliness": 5,
        "Location": 4,
        "Overall": 4,
        "Rooms": 3,
        "Service": 5,
        "Value": 4
      },
      {
        "Business service (e.g., internet access)": 4,
        "Check in / front desk": 4,
        "Cleanliness": 4,
        "Location": 4,
        "Overall": 4,
        "Rooms": 3,
        "Service": 3,
        "Value": 5
      }
    ]
  }
]</codeblock></dd>
      </dlentry>
      <dlentry>
        <dt>UUID()</dt>
        <dd>Returns a version 4 universally unique identifier (UUID).</dd>
      </dlentry>
    </dl>
  </conbody>
</concept>
