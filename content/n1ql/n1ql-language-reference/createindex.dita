<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_npk_mth_rq">
 <title>CREATE INDEX</title>
 
 <conbody>
		<p>The <codeph>CREATE INDEX</codeph> statement allows you to create a secondary index. Secondary
			indexes contain a filtered or a full set of keys in a given bucket. Secondary indexes
			are optional but increase query efficiency on a bucket.</p>
		<p><codeph>CREATE INDEX</codeph> is by default a synchronous operation. so every <codeph>CREATE
				INDEX</codeph> statement blocks until the operation finishes. Index building starts
			by creating a task that is queued for index build. After this phase, if you lose
			connectivity, the index build operation continues in the background. You can also run
			index creation asynchronously using the <codeph>defer_build</codeph> clause. In the
			asynchronous mode, <codeph>CREATE INDEX</codeph> starts a task to create the primary
			index and returns as soon as the task is queued for execution, and then the full index
			creation operation happens in the background.</p>
		<p>Both GSI and View indexes provide a status field and mark index status pending. With GSI
			indexer, index status continues to report "pending". This status field and other index
			metadata can be queried using <codeph>system:indexes</codeph>.</p>
 	<p>You can create multiple identical secondary indexes on a bucket for better index availability and place them on separate nodes using the "nodes" clause. </p> 
 		<p>Array indexing enables you to create global indexes on array elements and optimize the
			execution of queries involving array elements. For details, see <xref
				href="indexing-arrays.dita#topic_hv4_sbr_w5"/>.</p>
		<p>Index partitioning helps increase the query performance by dividing and spreading a large
			index of documents across multiple nodes, horizontally scaling out an index as needed.
			For details, see <xref href="index-partitioning.dita#untitled1"/>.</p>
		<p><b>RBAC Privileges</b></p>
		<p>User executing the CREATE INDEX statement must have the <i>Query Manage Index</i> privilege
			granted on the keyspace/bucket. For more details about user roles, see <xref
				href="../../security/security-authorization.dita#authorization"/>.</p>
		<note type="important">Indexes cannot be built concurrently on a given bucket unless the
				<codeph>defer_build</codeph> option of the CREATE INDEX statement is used in
			combination with BUILD INDEX statement. The following error is reported if a second
			index creation operation is kicked off before the completion of the ongoing index
			creation.
			<codeblock>"errors": [{"code": 12014, 
    "msg": "error: Build Already In Progress. Bucket BUCKET_NAME. Index INDEX_NAME. Index state: pending"}]</codeblock></note>
		<p><b>Syntax</b></p>
		<codeblock>CREATE INDEX <varname>index_name</varname> ON <varname>named_keyspace_ref</varname> ( <varname>expression1</varname> [ , <varname>expression2</varname> ] * )
    WHERE <varname>filter_expressions</varname>
    [ USING GSI | VIEW ]
    [ WITH { "nodes": [ "<varname>node_name</varname>" ], "defer_build":<varname>true</varname>|<varname>false</varname> , "num_replica": <varname>num_replica_num</varname> } ];</codeblock>
		<p>
			<dl>
				<dlentry>
					<dt>Arguments</dt>
					<dd>
						<dl>
							<dlentry>
								<dt>index_name</dt>
								<dd>[Required] A unique name that identifies the index.</dd>
								<dd>Valid GSI index names can contain any of the following
									characters: A-Z a-z 0-9 # _, and must start with a letter, [A-Z
									a-z].</dd>
								<dd>The minimum length of an index name is 1 character and there is
									no maximum length set for an index name.</dd>
								<dd>When querying, if the index name contains a '#' or '_'
									character, you must enclose the index name within
									backticks.</dd>
							</dlentry>
						</dl>
						<dl>
							<dlentry>
								<dt>named_keyspace_ref</dt>
								<dd>An identifier that refers to the bucket name. Specifies the
									bucket as the source for which the index needs to be created. </dd>
								<dd>You can add an optional namespace name to the keyspace name in
									this
									way:<codeblock><varname>namespace-name</varname> : <varname>keyspace-name</varname></codeblock>For
									example, <codeph>main:customer</codeph> indicates the customer
									keyspace in the main namespace. If the namespace name is
									omitted, the default namespace in the current session is
									used.</dd>
							</dlentry>
						</dl>
						<dl>
							<dlentry>
								<dt>expression1, expression2, ... , expressionX</dt>
								<dd>Refers to an attribute name or a scalar function or an ARRAY
									expression on the attribute. This constitutes an index-key for
									the index. For details about array expressions, see <xref
										href="indexing-arrays.dita"> Array Indexing</xref>.</dd>
							</dlentry>
						</dl>
						<dl>
							<dlentry>
								<dt><codeph>USING GSI</codeph> | <codeph>VIEW</codeph></dt>
								<dd>[Optional; Default is GSI]</dd>
								<dd>The <codeph>USING</codeph> clause specifies the index type to
									use. Secondary indexes can be created using global secondary
									indexes (GSI) or views.</dd>
							</dlentry>
						</dl>
						<dl>
							<dlentry>
								<dt><codeph>WITH</codeph></dt>
								<dd>
									<dl>
										<dlentry>
											<dt>"nodes":["node_name"] </dt>
											<dd>A single global secondary index can be placed on
												specific nodes that run the indexing service. The
												<codeph>nodes</codeph> option allows you to
												specify the nodes that the index is placed on. </dd>
											<dd>If <codeph>nodes</codeph> is not specified, then
												nodes running the index service are randomly
												selected to host the index, based on the number of
												replicas. </dd>
											<dd>Multiple nodes can be specified to distribute
												replicas of an index amongst multiple nodes, for
												example:<codeblock>CREATE INDEX productName_index1 ON bucket_name(productName, ProductID) 
WHERE type="product" USING GSI 
WITH {"nodes":["node1:8091", "node2:8091", "node3:8091"]};</codeblock><p>If
												specifying both <varname>nodes</varname> and
												<varname>num_replica</varname>, the number of
												nodes in the array must be one greater than the
												specified number of replicas otherwise the index
												creation will fail.</p><note type="important">The
												node names passed to the <codeph>nodes</codeph>
												parameter must include the cluster administration
												port (by default 8091). For example <codeph>WITH
												{"nodes": ["192.0.2.0:<b>8091</b>"]}</codeph>
												instead of <codeph>WITH {"nodes":
												["192.0.2.0"]}</codeph>.</note></dd>
										</dlentry>
									</dl>
									<dl>
										<dlentry>
											<dt>"defer_build":true | false</dt>
											<dd>
												<p><b>With <codeph>defer_build</codeph> set to
												<codeph>TRUE</codeph></b>, then the <codeph>CREATE
												INDEX</codeph> operation queues the task for
												building the index but immediately pauses the
												building of the index of type GSI. Index building
												requires an expensive scan operation. Deferring
												building of the index with multiple indexes can
												optimize the expensive scan operation. Admins can
												defer building multiple indexes and, using the
												<codeph>BUILD INDEX</codeph> statement, multiple
												indexes to be built efficiently with one efficient
												scan of bucket data.</p>
												<p><b>With <codeph>defer_build</codeph> set to
												<codeph>FALSE</codeph></b>, then the
												<codeph>CREATE INDEX</codeph> operation queues the
												task for building the index and immediately kicks
												off the building of the index of type GSI. </p>
											</dd>
										</dlentry>
									</dl>
									<dl>
										<dlentry>
											<dt>"num_replica": num_replica_num</dt>
											<dd><varname>num_replica</varname> specifies the number
												of replicas of the index to create. </dd>
											<dd>The indexer will automatically distribute these
												indexes amongst index nodes in the cluster for
												load-balancing and high availability purposes. When
												creating an index with replicas in this manner, the
												indexer will attempt to distribute the replicas
												based on the server groups in use in the cluster
												where possible. </dd>
											<dd>If <varname>num_replica_num</varname> is not less
												than the number of index nodes in the cluster, then
												the index creation will fail.</dd>
											<dd>
												<note type="attention">We recommend that you do not
												create (or drop) secondary indexes when any node
												with a secondary index role is down as this may
												result in duplicate index names. </note>
											</dd>
										</dlentry>
									</dl>
								</dd>
							</dlentry>
						</dl>
					</dd>
				</dlentry>
			</dl>
		</p>
		<p><b>Using the <apiname>meta().id</apiname> function</b></p>
		<p>For details, see <xref href="indexing-meta-info.dita#untitled4">Indexing Meta Info</xref>.</p>
		<p><b>Using indices for aggregates</b></p>
		<p>If there is an index on the expression of an aggregate, that index may be used to satisfy
			the query. For example, given the index "<codeph>abv_idx</codeph>" created using the
			following statement:
			<codeblock>CREATE INDEX abv_idx ON `beer-sample`(abv);</codeblock></p>
		<p>The query engine will use the index "<codeph>abv_idx</codeph>" for the following query:
			<codeblock>SELECT min(abv), max(abv) FROM `beer-sample`;</codeblock></p>
		<section>
			<title>Examples</title>
			<p>The following example creates a secondary index that contains beers with an
					<codeph>abv</codeph> value greater than 5 on the node
				<codeph>192.0.2.1</codeph>:</p>
			<codeblock>CREATE INDEX over5 ON `beer-sample`(abv) WHERE abv > 5 USING GSI WITH {"nodes": ["192.0.2.1:8091"]};</codeblock>
			<p>The following example creates a secondary index on the <codeph>beer-sample</codeph>
				bucket and then queries <codeph>system:indexes</codeph> for status of the index:</p>
			<codeblock>CREATE INDEX `beer-sample-type-index` ON `beer-sample`(type) USING GSI;

SELECT * FROM system:indexes WHERE name="beer-sample-type-index";</codeblock>
			<p>The following example creates the same secondary index by using the deferred build
				option and then queries <codeph>system:indexes</codeph> for status of the index:</p>
			<codeblock>CREATE INDEX `beer-sample-type-index` ON `beer-sample`(type) USING GSI WITH {"defer_build":true};

SELECT * FROM system:indexes WHERE name="beer-sample-type-index";</codeblock>
			<p>Because the deferred build option was enabled, the output from the query on
					<codeph>system:indexes</codeph> shows <codeph>beer-sample-type-index</codeph>
				shows the index has not finished building (<codeph>"state": "pending"</codeph>). </p>
			<p>The following example uses the <codeph>BUILD INDEX</codeph> statement to kick off the deferred
				build on the <codeph>beer-sample-type-index</codeph> index and then queries
					<codeph>system:indexes</codeph> for status of the index:</p>
			<codeblock>BUILD INDEX ON `beer-sample`(`beer-sample-type-index`) USING GSI;

SELECT * FROM system:indexes WHERE name="beer-sample-type-index";</codeblock>
			<p>This time the query on <codeph>system:indexes</codeph> shows that the index is built
					(<codeph>"state": "online"</codeph>).</p>
		</section>
	</conbody>
</concept>
