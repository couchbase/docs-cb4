<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="Bitwisefun">
    <title>Bitwise Functions in N1QL</title>
    <body>
        <p>All Bit/Binary functions can only operate on 64-bit signed integers. <note>All
                non-integer numbers and other data types result in null.</note><note>Couchbase
                Server uses two's complement representation.</note></p>
        <p>When looking at the value in binary form, bit 1 is the Least Significant Bit (LSB) and
            bit 32 is the Most Significant Bit.</p>
        <p>(MSB) Bit 32 → <codeph>0000 0000 0000 0000 0000 0000 0000 0000</codeph> ← Bit 1 (LSB)</p>
        <section id="BitAND">
            <title>BITAND (<varname>int_value1</varname>, <varname>int_value2</varname>, ... ,
                    <varname>int_valueX</varname>)</title>
            <p>
                <dl>
                    <dlentry>
                        <dt>Description</dt>
                        <dd>Returns the result of a bitwise AND operation performed on all input
                            integer values.</dd>
                        <dd>The bitwise AND operation compares each bit of<varname> int_value1
                            </varname>to the corresponding bit of every other
                                <varname>int_value</varname>. If both bits are 1, then the
                            corresponding result bit is set to 1; otherwise it is set to 0
                            (zero).</dd>
                    </dlentry>
                </dl>
            </p>
            <p>
                <dl>
                    <dlentry>
                        <dt>Arguments</dt>
                        <dd>
                            <dl>
                                <dlentry>
                                    <dt>int_value1, int_value2, ... , int_valueX</dt>
                                    <dd>Integers, or any valid <xref href="index.dita#n1ql-lang-ref"
                                            >expressions</xref> which evaluates to integers, that
                                        are used to compare.</dd>
                                </dlentry>
                            </dl>
                        </dd>
                    </dlentry>
                </dl>
            </p>
            <dl>
                <dlentry>
                    <dt>Return Value</dt>
                    <dd>An integer, representing the bitwise AND between all of the input
                        integers.</dd>
                </dlentry>
            </dl>
            <dl>
                <dlentry>
                    <dt>Limitations</dt>
                    <dd>Input values must be integers (such as 1 or 1.0) and cannot contain decimals
                        (such as 1.2).</dd>
                </dlentry>
            </dl>
            <p><b>Example AND-1</b>: Compare 3 (0011 in binary) and 6 (0110 in binary).</p>
            <codeblock>SELECT BITAND(3,6) AS BitAND;

results: [
   "BitAND": 2
]</codeblock>
            <p>This results in 2 (0010 in binary) because only bit 2 is set in both 3 (00<b>1</b>1)
                and 6 (01<b>1</b>0).</p>
            <p/>
            &#x2028;
            <p><b>Example AND-2</b>: Compare 4.5 and 3 (0011 in binary).</p>
            <codeblock>SELECT BITAND(4.5,3) AS BitAND;

results: [
   "BitAND": null
]</codeblock>
            <p>The result is null because 4.5 is not an integer.</p>
            <p/>
            <p><b>Example AND-3</b>: Compare 4.0 (0100 in binary) and 3 (0011 in binary).</p>
            <codeblock>SELECT BITAND(4.0,3) AS BitAND;

results: [
   "BitAND": 0
]</codeblock>
            <p>This results in 0 (zero) because 4.0 (0100) and 3 (0011) do not share any bits that
                are both 1.</p>
            <p/>
            <p><b>Example AND-4</b>: Compare 3 (0011 in binary) and 6 (0110 in binary) and 15 (1111
                in binary).</p>
            <codeblock>SELECT BITAND(3,6,15) AS BitAND;

results: [
   "BitAND": 2
]</codeblock>
            <p>This results in 2 (0010 in binary) because only the 2nd bit from the right is 1 in
                all three numbers.</p>
            <p/>
        </section>
        <section id="section_rcg_sbw_s1b"><title>BITCLEAR (<varname>int_value</varname>,
                    <varname>positions</varname>)</title><p>
                <dl>
                    <dlentry>
                        <dt>Description</dt>
                        <dd>Returns the result after clearing the specified bit, or array of bits
                                in<codeph> int_value </codeph>using the given
                                <codeph>positions</codeph>. Specifying a negative or zero bit
                            position does not result in any change to the value.</dd>
                        <dd>
                            <note>Specifying a negative or zero bit position makes the function
                                return a null.</note>
                        </dd>
                    </dlentry>
                </dl>
            </p><p>
                <dl>
                    <dlentry>
                        <dt>Arguments</dt>
                        <dd>
                            <dl>
                                <dlentry>
                                    <dt>int_value</dt>
                                    <dd>An integer, or any valid <xref
                                            href="index.dita#n1ql-lang-ref">expression</xref> which
                                        evaluates to an integer, that contains the target bit or
                                        bits to clear.</dd>
                                </dlentry>
                            </dl>
                            <dl>
                                <dlentry>
                                    <dt>positions</dt>
                                    <dd>An integer or an array of integers specifying the position
                                        or positions to be cleared.</dd>
                                </dlentry>
                            </dl>
                        </dd>
                    </dlentry>
                </dl>
                <dl>
                    <dlentry>
                        <dt>Return Value</dt>
                        <dd>An integer, representing the result after clearing the bit or bits
                            specified.</dd>
                    </dlentry>
                </dl>
                <dl>
                    <dlentry>
                        <dt>Limitations</dt>
                        <dd>Input values must be integers (such as 1 or 1.0) and cannot contain
                            decimals (such as 1.2).</dd>
                    </dlentry>
                </dl>
            </p><b>Example CLEAR-1</b>: Clear bit 1 from 6 (0110 in
            binary).<codeblock>SELECT BITCLEAR(6,1) AS BitCLEAR;

results: [
   "BitCLEAR": 6
]</codeblock>This
            results in 6 (011<b>0</b> in binary) because bit 1 was already zero.<p/><p><b>Example
                    CLEAR-2</b>: Clear bits 1 and 2 from 6 (01<b>10</b> in
            binary).</p><codeblock>SELECT BITCLEAR(6,[1,2]) AS BitCLEAR;

results: [
   "BitCLEAR": 4
]</codeblock>This
            results in 4 (01<b>0</b>0 in binary) because bit 2 changed to zero.<p/><p><b>Example
                    CLEAR-3</b>: Clear bits 1, 2, 4, and 5 from 31 (0<b>11</b>1<b>11</b> in
                binary).<codeblock>SELECT BITCLEAR(31,[1,2,4,5]) AS BitCLEAR;

results: [
   "BitCLEAR": 4
]</codeblock>This
                results in 4 (0<b>00</b>1<b>00</b>) because bits 1, 2, 4, and 5 changed to
            zero.</p><p/></section>
        <section>
            <title>BITNOT (<varname>int_value</varname>)</title>
            <p>
                <dl>
                    <dlentry>
                        <dt>Description</dt>
                        <dd>Returns the results of a bitwise logical NOT operation performed on an
                            integer value.</dd>
                        <dd>The bitwise logical NOT operation reverses the bits in the value. For
                            each value bit that is 1, the corresponding result bit will be set to 0
                            (zero); and for each value bit that is 0 (zero), the corresponding
                            result bit will be set to 1.</dd>
                        <dd>
                            <note>All bits of the integer will be altered by this operation.</note>
                        </dd>
                    </dlentry>
                </dl>
            </p>
            <dl>
                <dlentry>
                    <dt>Arguments</dt>
                    <dd>
                        <dl>
                            <dlentry>
                                <dt>int_value</dt>
                                <dd>An integer, or any valid <xref href="index.dita#n1ql-lang-ref"
                                        >expression</xref> which evaluates to an integer, that
                                    contains the target bit or bits to clear.</dd>
                            </dlentry>
                        </dl>
                    </dd>
                </dlentry>
            </dl>
            <dl>
                <dlentry>
                    <dt>Return Value</dt>
                    <dd>An integer, representing the result after performing the logical NOT
                        operation.</dd>
                </dlentry>
            </dl>
            <dl>
                <dlentry>
                    <dt>Limitations</dt>
                    <dd>Input values must be integers (such as 1 or 1.0) and cannot contain decimals
                        (such as 1.2).</dd>
                </dlentry>
            </dl>
            <p><b>Example NOT-1</b>: Perform the NOT operation on 3 (0000 0000 0000 0000 0000 0000
                0000 0011 in
                binary).<codeblock>SELECT BITNOT(3) AS BitNOT;

results: [
   "BitNOT": -4
]</codeblock>This
                results in -4 (<b>1111 1111 1111 1111 1111 1111 1111 1100</b> in binary) because all
                bits changed.</p>
            <p/>
        </section>
        <section id="section_lmd_mv5_s1b">
            <title>BITOR (<varname>int_value1</varname>, <varname>int_value2</varname>, ... ,
                    <varname>int_valueX</varname>)</title>
            <p>
                <dl>
                    <dlentry>
                        <dt>Description</dt>
                        <dd>Returns the result of a bitwise inclusive OR operation performed on all
                            input integer values.</dd>
                        <dd>The bitwise inclusive OR operation compares each bit of int1 to the
                            corresponding bit of int2. If either bit is 1, the corresponding result
                            bit is set to 1; otherwise, it is set to 0 (zero).</dd>
                    </dlentry>
                </dl>
            </p>
            <p>
                <dl>
                    <dlentry>
                        <dt>Arguments</dt>
                        <dd>
                            <dl>
                                <dlentry>
                                    <dt>int_value1, int_value2, ... , int_valueX</dt>
                                    <dd>Integers, or any valid <xref href="index.dita#n1ql-lang-ref"
                                            >expressions</xref> which evaluate to integers, that are
                                        used to compare.</dd>
                                </dlentry>
                            </dl>
                        </dd>
                    </dlentry>
                </dl>
            </p>
            <dl>
                <dlentry>
                    <dt>Return Value</dt>
                    <dd>An integer, representing the bitwise OR between all of the input
                        integers.</dd>
                </dlentry>
            </dl>
            <dl>
                <dlentry>
                    <dt>Limitations</dt>
                    <dd>Input values must be integers (such as 1 or 1.0) and cannot contain decimals
                        (such as 1.2).</dd>
                </dlentry>
            </dl>
            <p><b>Example OR-1</b>: Perform OR on 3 (0011 in binary) and 6 (0110 in
                binary).<codeblock>SELECT BITOR(3,6) AS BitOR;

results: [
   "BitOR": 7
]</codeblock>This
                results in 7 (0<b>111</b> in binary) because at least 1 bit of each (00<b>11</b> and
                    0<b>11</b>0) is 1 in bits 1, 2, and 3.</p>
        </section>
        <section id="section_pkl_xld_t1b">
            <p/>
        </section>
        <section id="section_xch_tfq_v1b">
            <p><b>Example OR-2</b>: Perform OR on 3 (0011 in binary) and -4 (1000 0000 0000 ... 0000
                1100 in
                binary).<codeblock>SELECT BITOR(3,-4) AS BitOR;

results: [
   "BitOR": -1
]</codeblock>This
                results in -1 (<b>1111 1111 1111 ... 1111 1111</b> in binary) because the two 1 bits
                in 3 fill in the two 0 bits in -4 to turn on all the bits.</p>
        </section>
        <section id="section_ych_tfq_v1b">
            <p/>
        </section>
        <section id="section_zpn_m2l_fbb">
            <p><b>Example OR-3</b>: Perform OR on 3 (0011 in binary) and 6 (0110 in binary) and 15
                (1111 in
                binary).<codeblock>SELECT BITOR(3,6,15) AS BitOR;

results: [
   "BitOR": 15
]</codeblock>This
                results in 15 (1111 in binary) because there is at least one 1 in each of the four
                rightmost bits.</p>
        </section>
        <section id="section_aqn_m2l_fbb">
            <p/>
        </section>
        <section id="section_cmz_k4v_s1b">
            <title>BITSET (<varname>int_value</varname>, <varname>positions</varname>)</title>
            <p>
                <dl>
                    <dlentry>
                        <dt>Description</dt>
                        <dd>Returns the result after setting the specified bit
                                <codeph>position</codeph>, or array of bit positions, to 1 in the
                            given <codeph>int_value</codeph>.</dd>
                        <dd>
                            <note>Specifying a negative or zero position makes the function return a
                                null.</note>
                        </dd>
                    </dlentry>
                </dl>
            </p>
            <dl>
                <dlentry>
                    <dt>Arguments</dt>
                    <dd>
                        <dl>
                            <dlentry>
                                <dt>int_value</dt>
                                <dd>An integer, or any valid <xref href="index.dita#n1ql-lang-ref"
                                        >expression</xref> which evaluates to an integer, that
                                    contains the target bit or bits to clear.</dd>
                            </dlentry>
                        </dl>
                        <dl>
                            <dlentry>
                                <dt>positions</dt>
                                <dd>An integer or an array of integers specifying the position or
                                    positions to be set.</dd>
                            </dlentry>
                        </dl>
                    </dd>
                </dlentry>
                <dlentry>
                    <dt>Return Value</dt>
                    <dd>An integer, representing the result after setting the bit or bits specified.
                        If the bit is already set, then it stays set.</dd>
                </dlentry>
            </dl>
            <dl>
                <dlentry>
                    <dt>Limitations</dt>
                    <dd>Input values must be integers (such as 1 or 1.0) and cannot contain decimals
                        (such as 1.2).</dd>
                </dlentry>
            </dl>
            <p><b>Example SET-1</b>: Set bit 1 in the value 6 (011<b>0</b> in
                binary).<codeblock>SELECT BITSET(6,1) AS BitSET;

results: [
   "BitSET": 7
]</codeblock>This
                results in 7 (011<b>1</b> in binary) because bit 1 changed to 1.</p>
            <p/>
            <p><b>Example 2</b>: Set bits 1 and 2 in the value 6 (01<b>10</b> in
                binary).<codeblock>SELECT BITSET(6,[1,2]) AS BitSET;

results: [
   "BitSET": 7
]</codeblock></p>
            <p>This also results in 7 (01<b>11</b> in binary) because bit 1 changed while bit 2
                remained the same.</p>
            <p/>
            <p><b>Example 3</b>: Set bits 1 and 4 in the value 6 (<b>0</b>11<b>0</b> in
                binary).<codeblock>SELECT BITSET(6,[1,4]) AS BitSET;

results: [
   "BitSET": 15
]</codeblock>This
                results in 15 (<b>1</b>11<b>1</b> in binary) because bit 1 and 4 changed to
                ones.</p>
            <p/>
        </section>
        <section id="section_zms_vw5_s1b"><title>BITSHIFT (<varname>int_value</varname>,
                    <varname>shift_amount</varname>, <varname>rotate</varname>)</title><p>
                <dl>
                    <dlentry>
                        <dt>Description</dt>
                        <dd>Returns the result of a bit shift operation performed on the integer
                                value<codeph> int</codeph>. The<codeph> shift_amount
                            </codeph>supports left and right shifts. These are logical shifts. The
                            third parameter<codeph> rotate </codeph>supports circular shift. This is
                            similar to the BitROTATE function in Oracle.</dd>
                    </dlentry>
                </dl>
            </p><dl>
                <dlentry>
                    <dt>Arguments</dt>
                    <dd>
                        <dl>
                            <dlentry>
                                <dt>int_value</dt>
                                <dd>An integer, or any valid <xref href="index.dita#n1ql-lang-ref"
                                        >expression</xref> which evaluates to an integer, that
                                    contains the target bit or bits to shift.</dd>
                            </dlentry>
                            <dlentry>
                                <dt>shift_amount</dt>
                                <dd>An integer, or any valid <xref href="index.dita#n1ql-lang-ref"
                                        >expression</xref> which evaluates to an integer, that
                                    contains the number of bits to shift.</dd>
                                <dd>A positive (+) number means this is a LEFT shift.</dd>
                                <dd>A negative (-) number means this is a RIGHT shift.</dd>
                            </dlentry>
                            <dlentry>
                                <dt>rotate</dt>
                                <dd>[optional; FALSE by default] A boolean, or any valid <xref
                                        href="index.dita#n1ql-lang-ref">expression</xref> which
                                    evaluates to a boolean, where:</dd>
                                <dd>
                                    <ul id="ul_lh5_vnq_v1b">
                                        <li>FALSE means this is a LOGICAL shift, where bits shifted
                                            off the end of a value are considered lost.</li>
                                    </ul>
                                </dd>
                                <dd>
                                    <ul id="ul_r3m_wnq_v1b">
                                        <li>TRUE means this is a CIRCULAR shift (shift-and-rotate
                                            operation), where bits shifted off the end of a value
                                            are rotated back onto the value at the <i>other</i> end.
                                            In other words, the bits rotate in what might be thought
                                            of as a circular pattern; therefore, these bits are not
                                            lost. </li>
                                    </ul>
                                </dd>
                                <dd>For comparison, see the below table.</dd>
                            </dlentry>
                        </dl>
                    </dd>
                </dlentry>
            </dl><table frame="all" rowsep="1" colsep="1" id="table_wx3_kyc_t1b">
                <tgroup cols="4" align="left">
                    <colspec colname="c1" colnum="1" colwidth="3*"/>
                    <colspec colname="c2" colnum="2" colwidth="1*"/>
                    <colspec colname="c3" colnum="3" colwidth="4*"/>
                    <colspec colname="newCol4" colnum="4" colwidth="8*"/>
                    <thead>
                        <row>
                            <entry>Input</entry>
                            <entry>Shift</entry>
                            <entry>Result of Logical Shift<p>(Rotate FALSE)</p></entry>
                            <entry>Result of Circular Shift<p>(Rotate TRUE)</p></entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>6 (0000 0110)</entry>
                            <entry>4</entry>
                            <entry>96 (0110 0000)</entry>
                            <entry>96 (0110 0000)</entry>
                        </row>
                        <row>
                            <entry>6 (0000 0110)</entry>
                            <entry>3</entry>
                            <entry>48 (0011 0000)</entry>
                            <entry>48 (0011 0000)</entry>
                        </row>
                        <row>
                            <entry>6 (0000 0110)</entry>
                            <entry>2</entry>
                            <entry>24 (0001 1000)</entry>
                            <entry>24 (0001 1000)</entry>
                        </row>
                        <row>
                            <entry>6 (0000 0110)</entry>
                            <entry>1</entry>
                            <entry>12 (0000 1100)</entry>
                            <entry>12 (0000 1100)</entry>
                        </row>
                        <row>
                            <entry><b>6 (0000 0110)</b></entry>
                            <entry><b>0</b></entry>
                            <entry><b>6 (0000 0110)</b></entry>
                            <entry><b>6 (0000 0110)</b></entry>
                        </row>
                        <row>
                            <entry>6 (0000 0110)</entry>
                            <entry>-1</entry>
                            <entry>3 (0000 0011)</entry>
                            <entry>3 (0000 0011)</entry>
                        </row>
                        <row>
                            <entry>6 (0000 0110)</entry>
                            <entry>-2</entry>
                            <entry>1 (0000 0001)</entry>
                            <entry>-9223372036854776000 (1000 0000 ... 0000 0001)</entry>
                        </row>
                        <row>
                            <entry>6 (0000 0110)</entry>
                            <entry>-3</entry>
                            <entry>0 (0000 0000)</entry>
                            <entry>-4611686018427388000 (1100 0000 ... 0000 0000)</entry>
                        </row>
                        <row>
                            <entry>6 (0000 0110)</entry>
                            <entry>-4</entry>
                            <entry>0 (0000 0000)</entry>
                            <entry>6917529027641081856 (0110 0000 ... 0000 0000)</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table><dl>
                <dlentry>
                    <dt>Return Value</dt>
                    <dd>An integer, representing the result of either a logical or circular shift of
                        the given integer.</dd>
                </dlentry>
            </dl><dl>
                <dlentry>
                    <dt>Limitations</dt>
                    <dd>Input values must be integers (such as 1 or 1.0) and cannot contain decimals
                        (such as 1.2).</dd>
                </dlentry>
            </dl><p><b>Example SHIFT-1</b>: Logical left shift of the number 6 (0110 in binary) by
                one
                bit.<codeblock>SELECT BITSHIFT(6,1,FALSE) AS BitSHIFT;

results: [
   "BitSHIFT": 12
]</codeblock></p><p>This
                results in 12 (1100 in binary) because the 1-bits moved from positions 2 and 3 to
                positions 3 and 4.</p><p/><p><b>Example SHIFT-2</b>: Logical right shift of the
                number 6 (0110 in binary) by two
                bits.<codeblock>SELECT BITSHIFT(6,-2) AS BitSHIFT;

results: [
   "BitSHIFT": 1
]</codeblock>This
                results in 1 (0001 in binary) because the 1-bit in position 3 moved to position 1
                and the 1-bit in position 2 was dropped.</p><p/><b>Example SHIFT-2b</b>: Circular
            right shift of the number 6 (0110 in binary) by two
            bits.<codeblock>SELECT BITSHIFT(6,-2,TRUE) AS BitSHIFT;

results: [
   "BitSHIFT": -9223372036854776000
]</codeblock>This
            results in -9223372036854776000 (1100 0000 0000 0000 0000 0000 0000 0000 in binary)
            because the two 1-bits wrapped right, around to the Most Significant Digit position and
            changed the integer's sign to negative.<p/><p><b>Example SHIFT-3</b>: Circular left
                shift of the number 524288 (1000 0000 0000 0000 0000 in binary) by 45
                bits.<codeblock>SELECT BITSHIFT(524288,45,TRUE) AS BitSHIFT;

results: [
   "BitSHIFT": 1
]</codeblock></p>This
            results in 1 because the 1-bit wrapped left, around to the Least Significant Digit
            position.<p/></section>
        <section id="section_unf_2sv_s1b"><title>BITTEST (<varname>int_value</varname>,
                    <varname>positions [, all_set]</varname>)</title><dl>
                <dlentry>
                    <dt>Description</dt>
                    <dd><codeph>BitTEST() </codeph>and<codeph> IsBitSet() </codeph>are
                        synonyms.</dd>
                    <dd>Returns TRUE if the specified bit, or bits, is a 1; otherwise, returns FALSE
                        if the specified bit, or bits, is a 0 (zero).</dd>
                    <dd>
                        <note>Specifying a negative or zero bit position will result in 0 (zero)
                            being returned.</note>
                    </dd>
                </dlentry>
            </dl><p>
                <dl>
                    <dlentry>
                        <dt>Arguments</dt>
                        <dd>
                            <dl>
                                <dlentry>
                                    <dt>int_value</dt>
                                    <dd>An integer, or any valid <xref
                                            href="index.dita#n1ql-lang-ref">expression</xref> which
                                        evaluates to an integer, that contains the target bit or
                                        bits to test.</dd>
                                </dlentry>
                            </dl>
                            <dl>
                                <dlentry>
                                    <dt>positions</dt>
                                    <dd>An integer or an array of integers specifying the position
                                        or positions to be cleared.</dd>
                                </dlentry>
                                <dlentry>
                                    <dt>all_set</dt>
                                    <dd>[OPTIONAL; default is TRUE] A boolean, or any valid <xref
                                            href="index.dita#n1ql-lang-ref">expression</xref> which
                                        evaluates to a boolean.</dd>
                                    <dd>When<codeph> all_set </codeph>is FALSE, then it returns TRUE
                                        even if one bit in one of the positions is set.</dd>
                                    <dd>When<codeph> all_set </codeph>is TRUE, then it returns TRUE
                                        only if all input positions are set.</dd>
                                </dlentry>
                            </dl>
                        </dd>
                    </dlentry>
                </dl>
                <dl>
                    <dlentry>
                        <dt>Return Value</dt>
                        <dd>A boolean, that follows the below table:<table frame="all" rowsep="1"
                                colsep="1" id="table_hkh_5hm_w1b">
                                <tgroup cols="3" align="left">
                                    <colspec colname="c1" colnum="1" colwidth="2*"/>
                                    <colspec colname="c2" colnum="2" colwidth="1*"/>
                                    <colspec colname="c3" colnum="3" colwidth="1*"/>
                                    <thead>
                                        <row>
                                            <entry><varname>int</varname></entry>
                                            <entry><varname>all_set</varname></entry>
                                            <entry>Return Value</entry>
                                        </row>
                                    </thead>
                                    <tbody>
                                        <row>
                                            <entry><i>all</i> specified bits are TRUE</entry>
                                            <entry>FALSE</entry>
                                            <entry>TRUE</entry>
                                        </row>
                                        <row>
                                            <entry><i>all</i> specified bits are TRUE</entry>
                                            <entry>TRUE</entry>
                                            <entry>TRUE</entry>
                                        </row>
                                        <row>
                                            <entry><i>some</i> specified bits are TRUE</entry>
                                            <entry>FALSE</entry>
                                            <entry>TRUE</entry>
                                        </row>
                                        <row>
                                            <entry><i>some</i> specified bits are TRUE</entry>
                                            <entry>TRUE</entry>
                                            <entry>FALSE</entry>
                                        </row>
                                    </tbody>
                                </tgroup>
                            </table></dd>
                    </dlentry>
                </dl>
                <dl>
                    <dlentry>
                        <dt>Limitations</dt>
                        <dd>Input values must be integers (such as 1 or 1.0) and cannot contain
                            decimals (such as 1.2).</dd>
                    </dlentry>
                </dl>
            </p><b>Example TEST-1</b>: In the number 6 (0110 in binary), is bit 1
            set?<codeblock>SELECT ISBITSET(6,1) AS IsBitSET;

results: [
   "IsBitSET": FALSE
]</codeblock>This
            returns FALSE because bit 1 of 6 (011<b>0</b> in binary) is not set to
                    1.<p/><p><b>Example TEST-2</b>: In the number 1, is either bit 1 or bit 2
                set?<codeblock>SELECT BITTEST(1,[1,2],FALSE) AS BitTEST;

results: [
   "BitTEST": TRUE
]</codeblock>This
                returns TRUE because bit 1 of the number 1 (000<b>1</b> in binary) is set to
                    1.</p><p/><p><b>Example TEST-3</b>: In the number 6 (0110 in binary), are both
                bits 2 and 3
                set?<codeblock>SELECT ISBITSET(6,[2,3],TRUE) AS IsBitSET;

results: [
   "IsBitSET": TRUE
]</codeblock></p>This
            returns TRUE because both bits 2 and 3 in the number 6 (0<b>11</b>0 in binary) are set
            to 1.<p/><p><b>Example TEST-4</b>: In the number 6 (0110 in binary), are all the bits in
                positions 1 through 3
                set?<codeblock>SELECT BITTEST(6,[1,3],TRUE) AS BitTEST;

results: [
   "BitTEST": FALSE
]</codeblock></p>This
            returns FALSE because bit 1 in the number 6 (011<b>0</b> in binary) is set to 0
                    (zero).<p/><p><b>Example TEST-5</b>: Find only flights that have 1 layover (to
                rest and walk around). That is, flight stops of 1 (0001 in binary)
                only.<codeblock>SELECT airline, stops, schedule[0].day FROM `travel-sample` 
WHERE type = "route" AND <b>stops = 1</b>;</codeblock></p><p>The
                above query returns the exact same results as the below query which uses a bit
                operation.<codeblock>SELECT airline, stops, schedule[0].day FROM `travel-sample` 
WHERE type = "route" AND <b>BITTEST(stops,1)</b>;</codeblock></p><p/></section>
        <section id="section_qvr_2w5_s1b">
            <title>BITXOR (<varname>int_value1</varname>, <varname>int_value2</varname>, ... ,
                    <varname>int_valueX</varname>)</title>
            <p>
                <dl>
                    <dlentry>
                        <dt>Description</dt>
                        <dd>Returns the result of a bitwise Exclusive OR operation performed on two
                            integer values.</dd>
                        <dd>If there are more than two input values, the first two are compared;
                            then their result is compared to the next input value; and so on.</dd>
                        <dd>The bitwise Exclusive OR operation compares each bit of<codeph> int1
                            </codeph>to the corresponding bit of<codeph> int2</codeph>. </dd>
                        <dd>When the compared bits do not match, the result bit is 1; otherwise, the
                            compared bits do match, and the result bit is 0 (zero), as
                                summarized:<table frame="all" rowsep="1" colsep="1"
                                id="table_csd_ksx_cbb">
                                <tgroup cols="3" align="left">
                                    <colspec colname="c1" colnum="1" colwidth="2*" align="center"/>
                                    <colspec colname="c2" colnum="2" colwidth="2*" align="center"/>
                                    <colspec colname="c3" colnum="3" colwidth="4*" align="center"/>
                                    <thead>
                                        <row>
                                            <entry>Bit 1</entry>
                                            <entry>Bit 2</entry>
                                            <entry>XOR Result Bit</entry>
                                        </row>
                                    </thead>
                                    <tbody>
                                        <row>
                                            <entry>0</entry>
                                            <entry>0</entry>
                                            <entry>0</entry>
                                        </row>
                                        <row>
                                            <entry>0</entry>
                                            <entry>1</entry>
                                            <entry>1</entry>
                                        </row>
                                        <row>
                                            <entry>1</entry>
                                            <entry>0</entry>
                                            <entry>1</entry>
                                        </row>
                                        <row>
                                            <entry>1</entry>
                                            <entry>1</entry>
                                            <entry>0</entry>
                                        </row>
                                    </tbody>
                                </tgroup>
                            </table></dd>
                    </dlentry>
                </dl>
            </p>
            <p>
                <dl>
                    <dlentry>
                        <dt>Arguments</dt>
                        <dd>
                            <dl>
                                <dlentry>
                                    <dt>int_value1, int_value2, ... , int_valueX</dt>
                                    <dd>Integers, or any valid <xref href="index.dita#n1ql-lang-ref"
                                            >expressions</xref> which evaluate to integers, that are
                                        used to compare.</dd>
                                </dlentry>
                            </dl>
                        </dd>
                    </dlentry>
                </dl>
            </p>
            <dl>
                <dlentry>
                    <dt>Return Value</dt>
                    <dd>An integer, representing the bitwise XOR between the two input
                        integers.</dd>
                </dlentry>
            </dl>
            <dl>
                <dlentry>
                    <dt>Limitations</dt>
                    <dd>Input values must be integers (such as 1 or 1.0) and cannot contain decimals
                        (such as 1.2).</dd>
                </dlentry>
            </dl>
            <p><b>Example XOR-1</b>: Perform the XOR operation on 3 (0011 in binary) and 6 (0110 in
                binary).<codeblock>SELECT BITXOR(3,6) AS BitXOR;

results: [
   "BitXOR": 5
]</codeblock>This
                returns 5 (0101 in binary) because the 1st bit pair and 3rd bit pair are different
                (resulting in 1) while the 2nd bit pair and 4th bit pair are the same (resulting in
                0):</p>
            <p><codeph>0<b>0</b>1<b>1</b>
                </codeph>(3)</p>
            <p><codeph>0<b>1</b>1<b>0</b>
                </codeph>(6)</p>
            <p>=============</p>
            <p><codeph>0<b>1</b>0<b>1</b>
                </codeph>(5)</p>
            <p/>
            <p>Example XOR-2: Perform the XOR operation on 3 (0011 in binary) and 6 (0110 in binary)
                and 15 (1111 in
                binary).<codeblock>SELECT BITXOR(3,6,15) AS BitXOR;

results: [
   "BitXOR": 10
]</codeblock></p>
        </section>
        <section>This returns 10 (1010 in binary) because 3 XOR 6 equals 5 (0101 in binary), and
            then 5 XOR 15 equals 10 (1010 in binary).</section>
        <section id="section_t4m_pmb_t1b">
            <title>IsBitSET → see BITTEST</title>
            <p>This function is a synonym of BitSET and has been detailed within the <xref
                    href="#Bitwisefun/section_unf_2sv_s1b" format="dita">BITTEST</xref>
                function.</p>
        </section>
    </body>
</topic>
