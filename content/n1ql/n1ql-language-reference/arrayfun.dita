<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_8_2" xtrc="/w:document/w:body[1]/w:p[1257]" xml:lang="en-US">
  <title id="title__Toc272567283">Array Functions</title>
  
 <conbody>
   <p>You can use array functions to evaluate arrays, perform computations on elements in an array, and to return a new array 
     based on a transformation.</p>
   
   <p><b>ARRAY_APPEND(expression, value)</b></p>
   <p>Returns new array with value appended.
      <codeblock>SELECT ARRAY_APPEND(t.public_likes, "Valerie Smith") 
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "$1": [
      "Julius Tromp I",
      "Corrine Hilll",
      "Jaeden McKenzie",
      "Vallie Ryan",
      "Brian Kilback",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Elnora Trantow",
      "Valerie Smith"
    ]
  }
]</codeblock></p>
   
   <p><b>ARRAY_AVG(expression)</b></p>
   <p>Returns arithmetic mean (average) of all the non-NULL number values in the array, or NULL if there are no such values.</p>
   
   <p><b>ARRAY_CONCAT(expression1, expression2)</b></p>
   <p>Returns new array with the concatenation of the input
      arrays.<codeblock>SELECT ARRAY_CONCAT(t.public_likes, ["John McHill", "Dave Smith"]) 
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "$1": [
      "Julius Tromp I",
      "Corrine Hilll",
      "Jaeden McKenzie",
      "Vallie Ryan",
      "Brian Kilback",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Elnora Trantow",
      "John McHill",
      "Dave Smith"
    ]
  }
]</codeblock></p>
   
   <p><b>ARRAY_CONTAINS(expression, value)</b></p>
   <p>Returns true if the array contains
      value.<codeblock>SELECT ARRAY_CONTAINS(t.public_likes, "Vallie Ryan") 
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "$1": true
  }
]</codeblock></p>
   
   <p><b>ARRAY_COUNT(expression)</b></p>
   <p>Returns count of all the non-NULL values in the array, or zero if there are no such
      values.<codeblock>SELECT ARRAY_COUNT(t.reviews) AS total_reviews
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "total_reviews": 2
  }
]</codeblock></p>
   
   <p><b>ARRAY_DISTINCT(expression)</b></p>
   <p>Returns new array with distinct elements of input array.</p>
   
   <p><b>ARRAY_IFNULL(expression)</b></p>
   <p>Returns the first non-NULL value in the array, or
      NULL.<codeblock>SELECT ARRAY_IFNULL(t.public_likes)
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 2;
[
  {
    "$1": "Julius Tromp I"
  },
  {
    "$1": null
  }
]</codeblock></p>
   
   <p><b>ARRAY_INSERT(value, expression, expression)</b></p>
   <p>The <cmdname>array_insert</cmdname> function inserts a value into a specific position in an
      array and returns the new array.
      <codeblock spectitle="Syntax"><varname>array</varname> array_insert( <varname>array-name</varname>, <varname>position</varname>, <varname>value</varname>)</codeblock><codeblock spectitle="Example">SELECT ARRAY_INSERT(schedule, 2, "jsmith")[2]  
FROM `travel-sample` 
WHERE type = "route"  
LIMIT 1;
       {
         "requestID": "c0e073ed-5eca-451d-bcc2-57e2e01ab93d",
         "signature": {
           "$1": "json"
         },
         "results" : [
         {
           "$1": "jsmith"
         }
         ],
         "status": "success",
         "metrics": {
           "elapsedTime": "4.883422ms",
           "executionTime": "4.849777ms",
           "resultCount": 1,
           "resultSize": 38
         }
       }</codeblock></p>
   
   <p id="fn-array-intersect"><b>ARRAY_INTERSECT(expression1, expression2, ...)</b></p>
    <p><i>Since Couchbase Server 4.5.1</i></p>
   <p>Takes two or more arrays as parameters and returns the intersection of the input arrays as the
      result, that is, the array containing values that are present in all the input arrays. It
      returns an empty array if there are no common array
      elements.<codeblock spectitle="Examples">SELECT ARRAY_INTERSECT( ["apples","bananas","grapes","orange"], ["apples","orange"], ["apples","grapes"]);
[
  {
    "$1": [
      "apples"
    ]
  }
]

SELECT ARRAY_INTERSECT( ["apples","grapes","oranges"], ["apples"],["oranges"],["bananas", "grapes"]);
[
  {
    "$1": []
  }
]</codeblock></p>
   
   <p><b>ARRAY_LENGTH(expression)</b></p>
   <p>Returns the number of elements in the array.
      <codeblock spectitle="Example">SELECT ARRAY_LENGTH(t.public_likes) AS total_likes 
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "total_likes": 8
  }
]</codeblock></p>
   
   <p><b>ARRAY_MAX(expression)</b></p>
   <p>Returns the largest non-NULL, non-MISSING array element, in N1QL collation order.
      <codeblock>SELECT ARRAY_MAX(t.public_likes) 
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "$1": "Vallie Ryan"
  }
]</codeblock></p>
   
   <p><b>ARRAY_MIN(expression)</b></p>
   <p>Returns smallest non-NULL, non-MISSING array element, in N1QL collation order.
      <codeblock>SELECT ARRAY_MIN(t.public_likes) 
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "$1": "Brian Kilback"
  }
]</codeblock></p>
   
   <p><b>ARRAY_POSITION(expression, value)</b></p>
   <p>Returns the first position of value within the array, or -1. Array position is zero-based,
      i.e. the first position is
      0.<codeblock>SELECT ARRAY_POSITION(t.public_likes, "Brian Kilback") FROM `travel-sample` t WHERE type="hotel" LIMIT 1;
[
  {
    "$1": 4
  }
]</codeblock></p>
   
   <p><b>ARRAY_PREPEND(value, expression)</b></p>
   <p>Returns new array with value
      pre-pended.<codeblock>SELECT ARRAY_PREPEND("Dave Smith",t.public_likes) 
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "$1": [
      "Dave Smith",
      "Julius Tromp I",
      "Corrine Hilll",
      "Jaeden McKenzie",
      "Vallie Ryan",
      "Brian Kilback",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Elnora Trantow"
    ]
  }
]</codeblock></p>
   
   <p><b>ARRAY_PUT(expression, value)</b></p>
   <p>Returns new array with value appended, if value is not already present, otherwise returns the
      unmodified input
      array.<codeblock>SELECT ARRAY_PUT(t.public_likes, "Dave Smith") 
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "$1": [
      "Julius Tromp I",
      "Corrine Hilll",
      "Jaeden McKenzie",
      "Vallie Ryan",
      "Brian Kilback",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Elnora Trantow",
      "Dave Smith"
    ]
  }
]</codeblock></p>
   
   <p><b>ARRAY_RANGE(start, end [, step ])</b></p>
   <p>Returns new array of numbers, from start until the largest number less than end. Successive numbers are incremented by step. 
     If step is omitted, the default is 1. If step is negative, decrements until the smallest number greater than end.</p>
   
   <p><b>ARRAY_REMOVE(expression, value)</b></p>
   <p>Returns new array with all occurrences of value
      removed.<codeblock>SELECT ARRAY_REMOVE(t.public_likes, "Vallie Ryan") 
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "$1": [
      "Julius Tromp I",
      "Corrine Hilll",
      "Jaeden McKenzie",
      "Brian Kilback",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Elnora Trantow"
    ]
  }
]</codeblock></p>
   
   <p><b>ARRAY_REPEAT(value, n)</b></p>
   <p>Returns new array with value repeated n times.</p>
   
   <p><b>ARRAY_REPLACE(expression, value1, value2 [, n ])</b></p>
   <p>Returns new array with all occurrences of value1 replaced with value2. If n is given, at most
      n replacements are
      performed.<codeblock>SELECT ARRAY_REPLACE(t.public_likes, "Vallie Ryan", "Valerie Ryan") 
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "$1": [
      "Julius Tromp I",
      "Corrine Hilll",
      "Jaeden McKenzie",
      "Valerie Ryan",
      "Brian Kilback",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Elnora Trantow"
    ]
  }
]</codeblock></p>
   
   <p><b>ARRAY_REVERSE(expression)</b></p>
   <p>Returns new array with all elements in reverse
      order.<codeblock>SELECT ARRAY_REVERSE(t.public_likes) 
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "$1": [
      "Elnora Trantow",
      "Ms. Moses Feeney",
      "Lilian McLaughlin",
      "Brian Kilback",
      "Vallie Ryan",
      "Jaeden McKenzie",
      "Corrine Hilll",
      "Julius Tromp I"
    ]
  }
]</codeblock></p>
   
   <p><b>ARRAY_SORT(expression)</b></p>
   <p>Returns new array with elements sorted in N1QL collation
      order.<codeblock>SELECT ARRAY_SORT(t.public_likes) 
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "$1": [
      "Brian Kilback",
      "Corrine Hilll",
      "Elnora Trantow",
      "Jaeden McKenzie",
      "Julius Tromp I",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Vallie Ryan"
    ]
  }
]</codeblock></p>
   
   <p><b>ARRAY_SUM(expression)</b></p>
   <p>Sum of all the non-NULL number values in the array, or zero if there are no such values.</p>
   
   <p><b>Array references ( doc.f[*].id )</b></p>
   <p>You can use an asterisk (*) as an array subscript which converts the array to an object of
      arrays. The following example returns an array of the ages of the given contactâ€™s children:
      <codeblock>SELECT children[*].age FROM contacts WHERE fname = "Dave"</codeblock></p>
   <p> An equivalent query can be written using the <apiname>array_star()</apiname> function:
      <codeblock>SELECT array_star(children).age FROM contacts WHERE fname = "Dave"</codeblock></p>
 </conbody>
</concept>
