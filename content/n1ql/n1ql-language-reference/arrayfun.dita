<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_8_2" xtrc="/w:document/w:body[1]/w:p[1257]" xml:lang="en-US">
  <title id="title__Toc272567283">Array Functions</title><shortdesc>You can use array functions to evaluate arrays, perform computations on elements in an array, and to return a new array 
    based on a transformation.</shortdesc>
  
 <conbody>
    <section>
      <title>ARRAY_AGG(<varname>expr</varname>)</title>
      <p><dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function returns an array of the non-<codeph>MISSING</codeph> group values in
              the input <varname>expr</varname>, including <codeph>NULL</codeph> values. </dd>
          </dlentry>
        </dl><dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expr</dt>
                  <dd>[Required] The group of elements you wish to output in an array.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl><dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>An array of non-MISSING values.</dd>
            <dd>If the input <varname>expression</varname> is <codeph>MISSING</codeph> or if one of
              the elements in the array is <codeph>MISSING</codeph>, then it returns
                <codeph>MISSING</codeph>.</dd>
          </dlentry>
        </dl><b>Example 8</b>: Use <codeph>ARRAY_AGG</codeph> to group a list of three items into an
        array.</p>
      <codeblock>SELECT ARRAY_AGG(["abc",1,NULL]) AS array_aggregate;

Results:
[
  {
    "array_aggregate": [
      [
        "abc",
        1,
        null
      ]
    ]
  }
]</codeblock>
    </section>
    <section id="fn-array-append">
      <title>ARRAY_APPEND(<varname>expr</varname>, <varname>val1</varname>, <varname>val2</varname>,
        …)</title>
      <dl>
        <dlentry>
          <dt>Description</dt>
          <dd>This function takes an array <varname>expr</varname> and one or more
              <varname>val</varname> arguments to return a new array with the specified
              <varname>val</varname> argument(s) appended. </dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>Arguments</dt>
          <dd>
            <dl>
              <dlentry>
                <dt>expr</dt>
                <dd>[Required] The array to be appended to.</dd>
              </dlentry>
            </dl>
            <dl>
              <dlentry>
                <dt>val1, val2, … </dt>
                <dd>[At least 1 is Required] The text string(s) to be appended.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>Return Values</dt>
          <dd>A new array with the specified <varname>val</varname> argument(s) appended.</dd>
          <dd>It requires a minimum of two arguments and returns an error if there are fewer.</dd>
          <dd>If either of the input argument types are <codeph>MISSING</codeph>, then it returns
              <codeph>MISSING</codeph>.</dd>
          <dd>If either of the input argument types are <codeph>NULL</codeph>, then it returns
              <codeph>NULL</codeph>.</dd>
          <dd>If the <varname>expr</varname> argument is not an array, then it returns
              <codeph>NULL</codeph>.</dd>
          <dd>If the <varname>expr</varname> is in the <codeph>WHERE</codeph> clause of a partial
            index, this function lists the expressions that are implicitly covered.</dd>
        </dlentry>
      </dl>
      <p><b>Example 1</b>: Use <codeph>ARRAY_APPEND</codeph> to add a user to the Public Likes
        array.<codeblock>SELECT ARRAY_APPEND(t.public_likes, "Valerie Smith") AS add_user_likes
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;

Results:
[
  {
    "add_user_likes": [
      "Julius Tromp I",
      "Corrine Hilll",
      "Jaeden McKenzie",
      "Vallie Ryan",
      "Brian Kilback",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Elnora Trantow",
      "Valerie Smith"
    ]
  }
]</codeblock></p>
    </section>
    <section id="fn-array-avg"><title>ARRAY_AVG(<varname>expr</varname>)</title><p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function takes an array <varname>expr</varname> as an argument and returns the
              arithmetic mean (average) of all the non-<codeph>NULL</codeph> number values in the
              array, or <codeph>NULL</codeph> if there are no such values.</dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expr</dt>
                  <dd>[Required] The array of numbers to be evaluated.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>A number representing the arithmetic mean (average) of all the
                non-<codeph>NULL</codeph> number values in the array
              <varname>expression</varname>.</dd>
            <dd>If there are no number values in array <varname>expr</varname>, then it returns
                <codeph>NULL</codeph>.</dd>
            <dd>If the input <varname>expr</varname> is <codeph>MISSING</codeph>, then it returns
                <codeph>MISSING</codeph>.</dd>
            <dd>If the array size of <varname>expr</varname> is 0 (no elements), then it returns
                <codeph>NULL</codeph>.</dd>
            <dd>Any non-number elements in the array <varname>expr</varname> are ignored. </dd>
          </dlentry>
        </dl>
      </p><b>Example 2</b>: Use <codeph>ARRAY_AVG</codeph> with a set of
      numbers.<codeblock>SELECT ARRAY_AVG([0,1,1,2,3,5]) AS array_average;

Results:
[
  {
    "array_average": 2
  }
]</codeblock></section>
    <section id="fn-array-concat">
      <title>ARRAY_CONCAT(<varname>expr1</varname>, <varname>expr2</varname>, …)</title>
      <p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function takes two or more <varname>expr</varname> arrays and returns a new
              array after concatenating the input arrays.</dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expression1, expression2, … </dt>
                  <dd>[At least 2 are Required] The arrays to be concatenated together.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>If there are fewer than two arguments, then it returns an error.</dd>
            <dd>If any of the input <varname>expr</varname> arguments or one of the array elements
              are <codeph>MISSING</codeph>, then it returns <codeph>MISSING</codeph>.</dd>
            <dd>If any of the input <varname>expr</varname> arguments is <codeph>NULL</codeph>, then
              it returns <codeph>NULL</codeph>.</dd>
            <dd>If any of the input <varname>expr</varname> arguments is not an array, then it
              returns <codeph>NULL</codeph>.</dd>
          </dlentry>
        </dl>
      </p>
      <p><b>Example 3</b>: Use <codeph>ARRAY_CONCAT</codeph> to add two people to the Public Likes
        array.
        <codeblock>SELECT ARRAY_CONCAT(t.public_likes, ["John McHill", "Dave Smith"]) AS add_user_likes
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;

Results:
[
  {
    "add_user_likes": [
      "Julius Tromp I",
      "Corrine Hilll",
      "Jaeden McKenzie",
      "Vallie Ryan",
      "Brian Kilback",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Elnora Trantow",
      "John McHill",
      "Dave Smith"
    ]
  }
]</codeblock></p>
    </section>
    <section id="fn-array-contains">
      <title>ARRAY_CONTAINS(<varname>expr</varname>, <varname>val</varname>)</title>
      <p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This functions checks if the array <varname>expression</varname> contains the
              specified <varname>value</varname>.</dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expr</dt>
                  <dd>[Required] The array to be searched.</dd>
                </dlentry>
              </dl>
              <dl>
                <dlentry>
                  <dt>val</dt>
                  <dd>[Required] The value that is being searched for.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>If either of the input argument types are <codeph>MISSING</codeph>, then it returns
                <codeph>MISSING</codeph>.</dd>
            <dd>If either of the input argument types are <codeph>NULL</codeph>, then it returns
                <codeph>NULL</codeph>.</dd>
            <dd>If the <varname>expr</varname> argument is not an array, then it returns
                <codeph>NULL</codeph>.</dd>
            <dd>If the array <varname>expr</varname> contains <varname>val</varname>, then it
              returns <codeph>TRUE</codeph>; otherwise, it returns <codeph>FALSE</codeph>.</dd>
          </dlentry>
        </dl>
      </p>
      <p><b>Example 4</b>: Use <codeph>ARRAY_CONTAINS</codeph> with a Boolean
        function.<codeblock>SELECT ARRAY_CONTAINS(t.public_likes, "Vallie Ryan") AS array_contains_value
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;

Results:
[
  {
    "array_contains_value": true
  }
]</codeblock></p>
    </section>
    <section id="fn-array-count"><title>ARRAY_COUNT(<varname>expr</varname>)</title>
      <dl>
        <dlentry>
          <dt>Description</dt>
          <dd>This function counts all the non-NULL values in the input <varname>expr</varname>
            array.</dd>
        </dlentry>
      </dl><dl>
        <dlentry>
          <dt>Arguments</dt>
          <dd>
            <dl>
              <dlentry>
                <dt>expr</dt>
                <dd>[Required] The array to be searched and evaluate its values.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
      </dl><dl>
        <dlentry>
          <dt>Return Values</dt>
          <dd>This function returns a count of all the non-<codeph>NULL</codeph> values in the
            array, or zero if there are no such values.</dd>
          <dd>If the <varname>expr</varname> argument is <codeph>MISSING</codeph>, then it returns
              <codeph>MISSING</codeph>.</dd>
          <dd>If the <varname>expr</varname> argument is <codeph>NULL</codeph>, then it returns
              <codeph>NULL</codeph>.</dd>
          <dd>If the <varname>expr</varname> argument is not an array, then it returns
              <codeph>NULL</codeph>.</dd>
        </dlentry>
      </dl>
      <b>Example 5</b>: Use <codeph>ARRAY_COUNT</codeph> to count the total hotel
      reviews.<codeblock>SELECT ARRAY_COUNT(t.reviews) AS total_reviews
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;

Results:
[
  {
    "total_reviews": 2
  }
]</codeblock>
    </section>
    <section id="fn-array-distinct"><title>ARRAY_DISTINCT(<varname>expr</varname>)</title>
      <p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function returns a new array with distinct elements of the input array
                <varname>expr</varname>. </dd>
          </dlentry>
        </dl>
      </p><dl>
        <dlentry>
          <dt>Arguments</dt>
          <dd>
            <dl>
              <dlentry>
                <dt>expr</dt>
                <dd>[Required] The array of items to be evaluated.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
      </dl><dl>
        <dlentry>
          <dt>Return Values</dt>
          <dd>An array with distinct elements of the input array <varname>expr</varname>.</dd>
          <dd>If the input <varname>expr</varname> is <codeph>MISSING</codeph>, it returns
              <codeph>MISSING</codeph>. </dd>
          <dd>If the input <varname>expr</varname> is a non-array value, it returns
              <codeph>NULL</codeph>.</dd>
        </dlentry>
      </dl><b>Example 6</b>: Use <codeph>ARRAY_DISTINCT</codeph> with a group of items.
      <codeblock>SELECT ARRAY_DISTINCT(["apples","bananas","grapes","oranges","apples","mangoes","bananas"]) 
AS distinct_fruits;

Results:
[
  {
    "distinct_fruits": [
      "oranges",
      "grapes",
      "bananas",
      "mangoes",
      "apples"
    ]
  }
]</codeblock></section>
    <section id="fn-array-flatten"><title>ARRAY_FLATTEN(<varname>expr</varname>,
          <varname>depth</varname>)</title><p><dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function flattens nested array elements into the top-level array, up to the
              specified depth.</dd>
          </dlentry>
        </dl><dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expr</dt>
                  <dd>[Required] The multilevel array to be flattened.</dd>
                </dlentry>
              </dl>
              <dl>
                <dlentry>
                  <dt>depth</dt>
                  <dd>[Required] The Integer representing the number of depths to flatten.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl><dl>
          <dlentry>
            <dt>Return Value</dt>
            <dd>An array with <varname>depth</varname> fewer levels than the input array
                <varname>expr</varname>.</dd>
            <dd>If one of the arguments is <codeph>MISSING</codeph>, it returns
                <codeph>MISSING</codeph>.</dd>
            <dd>If the input <varname>expr</varname> is a non-array, or if the input
                <varname>depth</varname> argument is not an integer, it returns
                <codeph>NULL</codeph>.</dd>
          </dlentry>
        </dl><b>Example 7a</b>: Create a 3-level array of numbers to flatten by 1
        level.</p><codeblock>INSERT INTO default (KEY, value) 
             VALUES ("na", {"a":2, "b":[1,2,[31,32,33],4,[[511, 512], 52]]});

SELECT ARRAY_FLATTEN(b,1) AS flatten_by_1level FROM default USE KEYS ["na"];

Results:
[
  {
    "flatten_by_1level": [
      1,
      2,
      31,
      32,
      33,
      4,
      [
        511,
        512
      ],
      52
    ]
  }
]</codeblock><b>Example
        7b</b>: Flatten the above example by 2
      levels.<codeblock>SELECT ARRAY_FLATTEN(b,2) AS flatten_by_2levels FROM default USE KEYS ["na"];

Results:
[
  {
    "flatten_by_2levels": [
      1,
      2,
      31,
      32,
      33,
      4,
      511,
      512,
      52
    ]
  }
]</codeblock></section>
    <section id="fn-array-ifnull"><title>ARRAY_IFNULL(<varname>expr</varname>)</title><p><dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function parses the input array <varname>expr</varname> and returns the first
                non-<codeph>NULL</codeph> value in the array.</dd>
          </dlentry>
        </dl><dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expr</dt>
                  <dd>[Required] The array of values to be evaluated.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl><dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>The first non-NULL value in the input array.</dd>
            <dd>If the input <varname>expr</varname> is MISSING, then it returns
                <codeph>MISSING</codeph>.</dd>
            <dd>If the input <varname>expr</varname> is a non-array, then it returns
                <codeph>NULL</codeph>.</dd>
          </dlentry>
        </dl><b>Example 9</b>: Find the first non-<codeph>NULL</codeph> value in an array of
        items.</p><codeblock>SELECT ARRAY_IFNULL( ["","apples","","bananas","grapes","oranges"]) AS check_null;

Results:
[
  {
    "check_null": ""
  }
]
</codeblock><b>Example
        10</b>: Find the first non-<codeph>null</codeph> hotel
      reviewers.<codeblock>SELECT ARRAY_IFNULL(t.public_likes) AS if_null
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 2;

Results:
[
  {
    "if_null": "Julius Tromp I"
  },
  {
    "if_null": null
  }
]</codeblock></section>
    <section id="fn-array-insert">
      <title>ARRAY_INSERT(<varname>expr</varname>, <varname>pos</varname>, <varname>val1</varname>,
          <varname>val2</varname>, …)</title>
      <p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function inserts the specified <varname>value</varname> or multiple
                <varname>value</varname> items into the specified <varname>position</varname> in the
              input array <varname>expression</varname>, and returns the new array. </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expr</dt>
                  <dd>[Required] The array to insert items into.</dd>
                </dlentry>
              </dl>
              <dl>
                <dlentry>
                  <dt>pos</dt>
                  <dd>[Required] The integer specifying the array position from the left of the
                    input array <varname>expr</varname>, where the 1st position is 0 (zero).</dd>
                </dlentry>
              </dl>
              <dl>
                <dlentry>
                  <dt>val1, val2, … </dt>
                  <dd>[At least one is Required] The value or multiple value items to insert into
                    the input array expression.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>An array with the input value or multiple value items inserted into the input array
              expression at position <varname>pos</varname>.</dd>
            <dd>If any of the three arguments are <codeph>MISSING</codeph>, then it returns
                <codeph>MISSING</codeph>. </dd>
            <dd>If the <varname>expr</varname> argument is a non-array or if the
                <varname>position</varname> argument is not an integer, then it returns
                <codeph>NULL</codeph>. </dd>
          </dlentry>
        </dl>
      </p>
      <p><b>Example 11</b>: Insert "jsmith" into the 2nd position of the
          <codeph>public_likes</codeph>
        array.<codeblock>SELECT ARRAY_INSERT(public_likes, 2, "jsmith") AS insert_val 
FROM `travel-sample` 
WHERE type = "hotel"  
LIMIT 1;

Result:[
  {
    "insert_val": [
      "Julius Tromp I",
      "Corrine Hilll",
<b>      "jsmith",</b>
      "Jaeden McKenzie",
      "Vallie Ryan",
      "Brian Kilback",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Elnora Trantow"
    ]
  }
]</codeblock></p>
    </section>
    <section id="fn-array-intersect">
      <title>ARRAY_INTERSECT(<varname>expr1</varname>, <varname>expr2</varname>, ...)</title>
      <p><i>(Introduced in Couchbase Server 4.5.1)</i></p>
      <p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function takes two or more arrays and returns the intersection of the input
              arrays as the result; that is, the array containing values that are present in all of
              the input arrays. </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expr1, expr2, … </dt>
                  <dd>[At least 2 are Required] The two or more arrays to compare the values
                    of.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>An array containing the values that are present in all of the input arrays.</dd>
            <dd>If there are no common elements, then it returns an empty array.</dd>
            <dd>If any of the input arguments are <codeph>MISSING</codeph>, then it returns
                <codeph>MISSING</codeph>.</dd>
            <dd>If any of the input arguments are non-array values, then it returns
                <codeph>NULL</codeph>.</dd>
          </dlentry>
        </dl>
      </p>
      <p><b>Example 12</b>: Compare three arrays of fruit for common
          elements.<codeblock>SELECT ARRAY_INTERSECT( ["apples","bananas","grapes","orange"], ["apples","orange"], ["apples","grapes"])
AS array_intersection;

Result:
[
  {
    "array_intersection": [
      "apples"
    ]
  }
]
</codeblock><b>Example
          13</b>: Compare three arrays of fruit with no common
        elements.<codeblock>SELECT ARRAY_INTERSECT( ["apples","grapes","oranges"], ["apples"],["oranges"],["bananas", "grapes"])
AS array_intersection;

Result:
[
  {
    "array_intersection": []
  }
]</codeblock></p>
    </section>
    <section id="fn-array-length">
      <title>ARRAY_LENGTH(<varname>expr</varname>)</title>
      <p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function returns the number of elements in the input array. </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expr</dt>
                  <dd>[Required] The array whose elements you want to know the number of.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>An integer representing the number of elements in the input array.</dd>
            <dd>If the input argument is MISSING, then it returns <codeph>MISSING</codeph>.</dd>
            <dd>If the input argument is a non-array value, then it returns
              <codeph>NULL</codeph>.</dd>
          </dlentry>
        </dl>
      </p>
      <p><b>Example 14</b>: Find how many total <codeph>public_likes</codeph> there are in the
          <codeph>travel-sample</codeph>
        bucket.<codeblock>SELECT ARRAY_LENGTH(t.public_likes) AS total_likes 
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;

Result:
[
  {
    "total_likes": 8
  }
]</codeblock></p>
    </section>
    <section id="fn-array-max">
      <title>ARRAY_MAX(<varname>expr</varname>)</title>
      <p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function returns the largest non-<codeph>NULL</codeph>,
                non-<codeph>MISSING</codeph> array element, in N1QL collation order. </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expr</dt>
                  <dd>[Required] The array whose elements you want to know the highest value
                    of.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>The largest non-<codeph>NULL</codeph>, non-<codeph>MISSING</codeph> array element,
              in N1QL collation order.</dd>
            <dd>If the input <varname>expr</varname> is <codeph>MISSING</codeph>, then it returns
                <codeph>MISSING</codeph>.</dd>
            <dd>If the input <varname>expr</varname> is a non-array value, then it returns
                <codeph>NULL</codeph>.</dd>
          </dlentry>
        </dl>
      </p>
      <p><b>Example 15</b>: Find the maximum (last) value of the <codeph>public_likes</codeph>
        array.<codeblock>SELECT ARRAY_MAX(t.public_likes) AS max_val
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;

Results:
[
  {
    "max_val": "Vallie Ryan"
  }
]</codeblock></p>
    </section>
    <section id="fn-array-min">
      <title>ARRAY_MIN(<varname>expr</varname>)</title>
      <p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function returns the smallest non-<codeph>NULL</codeph>,
                non-<codeph>MISSING</codeph> array element, in N1QL collation order. </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expr</dt>
                  <dd>[Required] The array whose elements you want to know the lowest value of.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>The smallest non-<codeph>NULL</codeph>, non-<codeph>MISSING</codeph> array element,
              in N1QL collation order.</dd>
            <dd>If the input <varname>expr</varname> is <codeph>MISSING</codeph>, then it returns
                <codeph>MISSING</codeph>.</dd>
            <dd>If the input <varname>expr</varname> is a non-array value, then it returns
                <codeph>NULL</codeph>.</dd>
          </dlentry>
        </dl>
      </p>
      <p><b>Example 16</b>: Find the minimum (first) value of the <codeph>public_likes</codeph>
        array.</p>
      <p>
        <codeblock>SELECT ARRAY_MIN(t.public_likes) AS min_val
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;

Results:
[
  {
    "min_val": "Brian Kilback"
  }
]</codeblock>
      </p>
    </section>
    <section id="fn-array-position">
      <title>ARRAY_POSITION(<varname>expr</varname>, <varname>val</varname>)</title>
      <p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function returns the first position of the specified <varname>value</varname>
              within the array <varname>expression</varname>.</dd>
            <dd>The array position is zero-based, that is, the first position is 0. </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expr</dt>
                  <dd>[Required] The array you want to search through.</dd>
                </dlentry>
              </dl>
              <dl>
                <dlentry>
                  <dt>val</dt>
                  <dd>[Required] The value you're searching for and whose position you want to
                    know.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>An integer representing the first position of the input <varname>val</varname>,
              where the first position is 0.</dd>
            <dd>It returns -1 if the input <varname>val</varname> does not exist in the array.</dd>
            <dd>If one of the arguments is <codeph>MISSING</codeph>, it returns
                <codeph>MISSING</codeph>.</dd>
            <dd>If either of the arguments are non-array values, it returns
              <codeph>NULL</codeph>.</dd>
          </dlentry>
        </dl>
      </p>
      <p>
        <b>Example 17</b>: Find which position "Brian Kilback" is in the
          <codeph>public_likes</codeph>
        array.<codeblock>SELECT ARRAY_POSITION(t.public_likes, "Brian Kilback") AS array_position
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "array_position": 4
  }
]</codeblock></p>
    </section>
    <section id="fn-array-prepend">
      <title>ARRAY_PREPEND(<varname>val1</varname>, <varname>val2</varname>, … ,
          <varname>expr</varname>)</title>
      <p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function returns the new array after prepending the array
                <varname>expr</varname> with the specified <varname>val</varname> or multiple
                <varname>val</varname> arguments.</dd>
            <dd>It requires a minimum of two arguments.</dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>val1, val2, … </dt>
                  <dd>[At least 1 is Required] The value or multiple value arguments to prepend to
                    the input <varname>expr</varname>.</dd>
                </dlentry>
              </dl>
              <dl>
                <dlentry>
                  <dt>expression</dt>
                  <dd>[Required] The array you want to have the input <varname>value</varname>
                    argument(s) prepended to.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>A new array with the input <varname>val</varname> argument(s) prepended to the input
              array <varname>expr</varname>.</dd>
            <dd>If one of the arguments is <codeph>MISSING</codeph>, it returns
                <codeph>MISSING</codeph>.</dd>
            <dd>If the last argument is a non-array, it returns <codeph>NULL</codeph>.</dd>
          </dlentry>
        </dl>
      </p>
      <p><b>Example 18</b>: Prepend "Dave Smith" to the front of the <codeph>public_likes</codeph>
        array.<codeblock>SELECT ARRAY_PREPEND("Dave Smith",t.public_likes) AS prepend_val
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;

Results:
[
  {
    "prepend_val": [
      "Dave Smith",
      "Julius Tromp I",
      "Corrine Hilll",
      "Jaeden McKenzie",
      "Vallie Ryan",
      "Brian Kilback",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Elnora Trantow"
    ]
  }
]</codeblock></p>
    </section>
    <section id="fn-array-put">
      <title>ARRAY_PUT(<varname>expr</varname>, <varname>val1</varname>, <varname>val2</varname>,
        …)</title>
      <p><dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function returns a new array with <varname>val</varname> or multiple
                <varname>val</varname> arguments appended if the <varname>val</varname> is not
              already present. Otherwise, it returns the unmodified input array
                <varname>expr</varname>.</dd>
            <dd>It requires a minimum of two arguments. </dd>
          </dlentry>
        </dl><dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expr</dt>
                  <dd>[Required] The array you want to append the input <varname>value</varname> or
                      <varname>value</varname> arguments.</dd>
                </dlentry>
              </dl>
              <dl>
                <dlentry>
                  <dt>val1, val2, …</dt>
                  <dd>[At least 1 is Required] The value or multiple value arguments that you want
                    appended to the end of the input array <varname>expression</varname>.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl><dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>A new array with <varname>val</varname> or multiple <varname>val</varname> arguments
              appended if the <varname>val</varname> is not already present. Otherwise, it returns
              the unmodified input array <varname>expr</varname>.</dd>
            <dd>If one of the arguments is <codeph>MISSING</codeph>, then it returns
                <codeph>MISSING</codeph>.</dd>
            <dd>If the first argument is a non-array, then it returns <codeph>NULL</codeph>.</dd>
          </dlentry>
        </dl><b>Example 19</b>: Append "Dave Smith" to the end of the <codeph>public_likes</codeph>
        array.</p>
      <p>
        <codeblock>SELECT ARRAY_PUT(t.public_likes, "Dave Smith") AS array_put 
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;

Results:
[
  {
    "array_put": [
      "Julius Tromp I",
      "Corrine Hilll",
      "Jaeden McKenzie",
      "Vallie Ryan",
      "Brian Kilback",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Elnora Trantow",
      "Dave Smith"
    ]
  }
]</codeblock>
      </p>
    </section>
    <section id="fn-array-range"><title>ARRAY_RANGE(<varname>start_num</varname>,
          <varname>end_num</varname> [, <varname>step_num</varname> ])</title><p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function returns a new array of numbers, from <varname>start_num</varname>
              until the largest number less than <varname>end_num</varname>. Successive numbers are
              incremented by <varname>step_int</varname>.</dd>
            <dd> If <varname>step_int</varname> is not specified, then the default value is 1. If
                <varname>step_num</varname> is negative, then he function decrements until the
              smallest number greater than <varname>end_num</varname>. </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>start_num</dt>
                  <dd>[Required] The integer to start a new array with.</dd>
                </dlentry>
              </dl>
              <dl>
                <dlentry>
                  <dt>end_num</dt>
                  <dd>[Required] The integer that is one number larger than the final integer in the
                    output array.</dd>
                </dlentry>
              </dl>
              <dl>
                <dlentry>
                  <dt>step_num</dt>
                  <dd>[Optional; default is 1] The number between each array element.</dd>
                  <dd>If <varname>step_num</varname> is negative, then the function decrements until
                    the smallest number greater than <varname>end_num</varname>.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Output Values</dt>
            <dd>A new array of numbers, from <varname>start_num</varname> until the largest number
              less than <varname>end_num</varname>.</dd>
            <dd>If any of the arguments are <codeph>MISSING</codeph>, then it returns
                <codeph>MISSING</codeph>.</dd>
            <dd>If any of the arguments do not start with a digit, then it returns an error.</dd>
          </dlentry>
        </dl>
      </p><p><b>Example 20a</b>: Make an array from 0 to 20 by stepping every 5th
        number.</p><codeblock>SELECT ARRAY_RANGE(0, 25, 5) AS gen_array_range_5;

Results:
[
  {
    "gen_array_range_5": [
      0,
      5,
      10,
      15,
      20
    ]
  }
]  </codeblock><b>Example
        20b</b>: Make an array from 0.1 to 1.1 by stepping every 2nd
        number.<codeblock>SELECT ARRAY_RANGE(0.1, 2) AS gen_array_range_2;

Results:
[
  {
    "gen_array_range_2": [
      0.1,
      1.1
    ]
  }
] </codeblock><b>Example
        20c</b>: Make an array from 10 to 3 by stepping down every 3rd
      number.<codeblock>SELECT ARRAY_RANGE(10, 3, -3) AS gen_array_range_minus3;

Results:
[
  {
    "gen_array_range-3": [
      10,
      7,
      4
    ]
  }
]</codeblock></section>
    <section id="fn-array-remove">
      <title>ARRAY_REMOVE(<varname>expr</varname>, <varname>val1</varname>, <varname>val2</varname>,
        …)</title>
      <dl>
        <dlentry>
          <dt>Description</dt>
          <dd>This function returns a new array with all occurrences of the specified
              <varname>value</varname> or multiple <varname>value</varname> fields removed from the
            array <varname>expression</varname>and it requires a minimum of two arguments. </dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>Arguments</dt>
          <dd>
            <dl>
              <dlentry>
                <dt>expr</dt>
                <dd>[Required] The input array to have the specified <varname>val</varname> or
                  multiple <varname>val</varname> fields removed.</dd>
              </dlentry>
            </dl>
            <dl>
              <dlentry>
                <dt>val1, val2, … </dt>
                <dd>[At least 1 is Required] The input value or multiple values to remove from the
                  input array <varname>expr</varname>.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>Output Values</dt>
          <dd>A new array with all occurrences of the specified <varname>val</varname> or multiple
              <varname>val</varname> fields removed from the array <varname>expr</varname>.</dd>
          <dd>If any of the arguments are <codeph>MISSING</codeph>, then it returns
              <codeph>MISSING</codeph>.</dd>
          <dd>If the first argument is not an array, then it returns <codeph>NULL</codeph>.</dd>
        </dlentry>
      </dl>
      <p><b>Example 21</b>: Remove "Vallie Ryan" from the <codeph>public_likes</codeph> array.</p>
      <p>
        <codeblock>SELECT ARRAY_REMOVE(t.public_likes, "Vallie Ryan") AS remove_val
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;

Results:
[
  {
    "remove_val": [
      "Julius Tromp I",
      "Corrine Hilll",
      "Jaeden McKenzie",
      "Brian Kilback",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Elnora Trantow"
    ]
  }
]</codeblock>
      </p>
    </section>
    <section id="fn-array-repeat">
      <title>ARRAY_REPEAT(<varname>val</varname>, <varname>rep_int</varname>)</title>
      <p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function returns a new array with the specified <varname>val</varname> repeated
                <varname>rep_int</varname> times.</dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>val</dt>
                  <dd>[Required] The input value you want repeated.</dd>
                </dlentry>
              </dl>
              <dl>
                <dlentry>
                  <dt>rep_int</dt>
                  <dd>[Required] The integer number of times you want the input
                      <varname>val</varname> repeated.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Output Values</dt>
            <dd>A new array with the specified <varname>val</varname> repeated
                <varname>rep_int</varname> times.</dd>
            <dd>If any of the arguments are <codeph>MISSING</codeph>, then it returns
                <codeph>MISSING</codeph>.</dd>
            <dd>If the <varname>rep_int</varname> argument is not an integer, then it returns
                <codeph>NULL</codeph>.</dd>
          </dlentry>
        </dl>
      </p>
      <p><b>Example 22</b>: Make an array with "Vallie Ryan" three times.</p>
      <codeblock>SELECT ARRAY_REPEAT("Vallie Ryan", 3) AS repeat_val;

Results:
[
  {
    "repeat_val": [
      "Vallie Ryan",
      "Vallie Ryan",
      "Vallie Ryan"
    ]
  }
]</codeblock>
    </section>
    <section id="fn-array-replace"><title>ARRAY_REPLACE(<varname>expr</varname>,
          <varname>val1</varname>, <varname>val2</varname> [, <varname>max_int</varname> ])</title>
      <dl>
        <dlentry>
          <dt>Description</dt>
          <dd>This function returns a new array with all occurrences of
              <userinput>value1</userinput> replaced with <userinput>value2</userinput>. </dd>
          <dd>If <varname>max_int</varname> is specified, than no more than
              <varname>max_int</varname> replacements will be performed.</dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>Arguments</dt>
          <dd>
            <dl>
              <dlentry>
                <dt>expr</dt>
                <dd>[Required] The input array you want to replace <varname>val1</varname> with
                    <varname>val2</varname>.</dd>
              </dlentry>
            </dl>
            <dl>
              <dlentry>
                <dt>val1</dt>
                <dd>[Required] The existing value in the input <varname>expr</varname> you want to
                  replace.</dd>
              </dlentry>
            </dl>
            <dl>
              <dlentry>
                <dt>val2</dt>
                <dd>[Required] The new value you want to take the place of <varname>val1</varname>
                  in the input <varname>expr</varname>.</dd>
              </dlentry>
            </dl>
            <dl>
              <dlentry>
                <dt>max_int</dt>
                <dd>[Optional. Default is no maximum] The number of maximum replacements to
                  perform.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
      </dl><dl>
        <dlentry>
          <dt>Return Values</dt>
          <dd>A new array with all or <varname>max_int</varname> occurrences of
              <userinput>val1</userinput> replaced with <userinput>val2</userinput>. </dd>
          <dd>If any of the arguments are <codeph>MISSING</codeph>, then it returns
              <codeph>MISSING</codeph>.</dd>
          <dd>If the first argument is not an array or if the second argument is
              <codeph>NULL</codeph>, then it returns <codeph>NULL</codeph>.</dd>
        </dlentry>
      </dl><b>Example 23</b>: Replace all occurrences of "Vallie Ryan" with "Valerie Ryan".
      <codeblock>SELECT ARRAY_REPLACE(t.public_likes, "Vallie Ryan", "Valerie Ryan") AS replace_val 
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;

Results:
[
  {
    "replace_val": [
      "Julius Tromp I",
      "Corrine Hilll",
      "Jaeden McKenzie",
      "Valerie Ryan",
      "Brian Kilback",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Elnora Trantow"
    ]
  }
]</codeblock>
    </section>
    <section id="fn-array-reverse">
      <title>ARRAY_REVERSE(<varname>expr</varname>)</title>
      <dl>
        <dlentry>
          <dt>Description</dt>
          <dd>This function returns a new array with all the elements of <varname>expr</varname> in
            reverse order.</dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>Arguments</dt>
          <dd>
            <dl>
              <dlentry>
                <dt>expr</dt>
                <dd>[Required] The input array whose elements you want to reverse.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>Return Values</dt>
          <dd>A new array with all the elements of <varname>expr</varname> in reverse order.</dd>
          <dd>If the argument is <codeph>MISSING</codeph>, then it returns
            <codeph>MISSING</codeph>.</dd>
          <dd>If the argument is a non-array value, then it returns <codeph>NULL</codeph>.</dd>
        </dlentry>
      </dl>
      <p><b>Example 24</b>: Reverse the values in the <codeph>public_likes</codeph> array.</p>
      <p>
        <codeblock>SELECT ARRAY_REVERSE(t.public_likes) AS reverse_val
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;

Results:
[
  {
    "reverse_val": [
      "Elnora Trantow",
      "Ms. Moses Feeney",
      "Lilian McLaughlin",
      "Brian Kilback",
      "Vallie Ryan",
      "Jaeden McKenzie",
      "Corrine Hilll",
      "Julius Tromp I"
    ]
  }
]</codeblock>
      </p>
    </section>
    <section id="fn-array-sort">
      <title>ARRAY_SORT(<varname>expr</varname>)</title>
      <p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function returns a new array with the elements of <varname>expr</varname>
              sorted in N1QL collation order.</dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expr</dt>
                  <dd>[Required] The input array you want sorted.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>A new array with the elements of <varname>expr</varname> sorted in N1QL collation
              order.</dd>
            <dd>If the argument is <codeph>MISSING</codeph>, then it returns
                <codeph>MISSING</codeph>.</dd>
            <dd>If the argument is a non-array value, then it returns <codeph>NULL</codeph>.</dd>
          </dlentry>
        </dl>
      </p>
      <p><b>Example 25</b>: Sort the <codeph>public_likes</codeph> array.</p>
      <p>
        <codeblock>SELECT ARRAY_SORT(t.public_likes) AS sorted_array
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;

Results:
[
  {
    "sorted_array": [
      "Brian Kilback",
      "Corrine Hilll",
      "Elnora Trantow",
      "Jaeden McKenzie",
      "Julius Tromp I",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Vallie Ryan"
    ]
  }
]</codeblock>
      </p>
    </section>
    <section id="fn-array-star">
      <title>ARRAY_STAR(<varname>expr</varname>)</title>
      <p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function converts an array of <varname>expr</varname> objects into an object of
              arrays.</dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expr</dt>
                  <dd>[Required] The input array you want to convert into an object of arrays.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Output Values</dt>
            <dd>An object of arrays.</dd>
            <dd>If the argument is <codeph>MISSING</codeph>, then it returns
                <codeph>MISSING</codeph>.</dd>
            <dd>If the argument is a non-array value, then it returns <codeph>NULL</codeph>.</dd>
          </dlentry>
        </dl>
      </p>
      <p><b>Example 26</b>: Convert a given array of two documents each with five items into an
        object of five arrays each with two documents.</p>
      <p>
        <codeblock>SELECT ARRAY_STAR( [
   {
    "address": "Capstone Road, ME7 3JE",
    "city": "Medway",
    "country": "United Kingdom",
    "name": "Medway Youth Hostel",
    "url": "http://www.yha.org.uk"
  },
  {
    "address": "6 rue aux Juifs",
    "city": "Giverny",
    "country": "France",
    "name": "The Robins",
    "url": "http://givernyguesthouse.com/robin.htm"
  }]) AS array_star;

Results:
[
  {
    "array_star": {
      "address": [
        "Capstone Road, ME7 3JE",
        "6 rue aux Juifs"
      ],
      "city": [
        "Medway",
        "Giverny"
      ],
      "country": [
        "United Kingdom",
        "France"
      ],
      "name": [
        "Medway Youth Hostel",
        "The Robins"
      ],
      "url": [
        "http://www.yha.org.uk",
        "http://givernyguesthouse.com/robin.htm"
      ]
    }
  }
]</codeblock>
      </p>
      <p><b>Array references ( doc.f[*].id )</b></p>
      <p>You can use an asterisk (*) as an array subscript which converts the array to an object of
        arrays. The following example returns an array of the ages of the given contact’s children:
        <codeblock>SELECT children[*].age FROM contacts WHERE fname = "Dave"</codeblock></p>
      <p> An equivalent query can be written using the <apiname>array_star()</apiname> function:
        <codeblock>SELECT array_star(children).age FROM contacts WHERE fname = "Dave"</codeblock></p>
    </section>
    <section id="fn-array-sum">
      <title>ARRAY_SUM(<varname>expr</varname>)</title>
      <p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function returns the sum of all the non-<codeph>NULL</codeph> number values in
              the <varname>expr</varname> array.</dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expr</dt>
                  <dd>[Required] The input array of numbers you want to know the total value
                    of.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>The sum of all the non-<codeph>NULL</codeph> number values in the
                <varname>expr</varname> array.</dd>
            <dd>If there are no number values, then it returns 0 (zero).</dd>
            <dd>If the argument is <codeph>MISSING</codeph>, then it returns
                <codeph>MISSING</codeph>.</dd>
            <dd>If the argument is a non-array value, then it returns <codeph>NULL</codeph>. </dd>
          </dlentry>
        </dl>
      </p>
      <p><b>Example 27</b>: Find the total of a given array of numbers.</p>
      <codeblock>SELECT ARRAY_SUM([0,1,1,2,3,5]) as sum;

Results:
[
  {
    "sum": 12
  }
]</codeblock>
    </section>
    <section id="fn-array-symdiff1"><title>ARRAY_SYMDIFF(<varname>expr1</varname>,
          <varname>expr2</varname>, …)</title><p><i>Synonym: ARRAY_SYMDIFF1(expression1,
          expression2, …)</i></p><p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function returns a new array based on the set symmetric difference, or
              disjunctive union, of the input <varname>expression</varname> arrays. The new array
              contains only those elements that appear in <i>exactly one</i> of the input arrays,
              and it requires a minimum of two arguments. </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expr1, expr2, … </dt>
                  <dd>[At least 2 are Required] The input arrays to compare.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>A new array containing only those elements that appear in exactly one of the input
              arrays.</dd>
            <dd>If any of the arguments is <codeph>MISSING</codeph>, then it returns
                <codeph>MISSING</codeph>.</dd>
            <dd>If any of the arguments is a non-array value, then it returns <codeph>NULL</codeph>.
            </dd>
          </dlentry>
        </dl>
      </p><p>
        <note>The difference between <cmdname>ARRAY_SYMDIFF()</cmdname> and
            <cmdname>ARRAY_SYMDIFFN()</cmdname> is that the former function includes the value when
          it appears only once while the latter function includes the value when it appears odd
          number of times in the input arrays. </note>
        <note>Refer to the following article for more information on the difference between a normal
          and n-ary symdiff: <xref href="https://en.wikipedia.org/wiki/Symmetric_difference"
            format="html" scope="external"/>.</note>
      </p><b>Example 28</b>: Find the elements that appear in exactly one of these three input
      arrays.<codeblock>SELECT ARRAY_SYMDIFF([1, 2], [1, 2, 4], [1, 3]) AS symm_diff1;

Results:
[
  {
    "symm_diff1": [
      3,
      4
    ]
  }
]</codeblock></section>
    <section id="fn-array-symdiffn"><title>ARRAY_SYMDIFFN(<varname>expr1</varname>,
          <varname>expr2</varname>, …)</title><p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function returns a new array based on the set symmetric difference, or
              disjunctive union, of the input arrays. The new array contains only those elements
              that appear in <i>an odd number</i> of input arrays, and it requires a minimum of two
              arguments.</dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expr1, expr2, … </dt>
                  <dd>[At least 2 are Required] The input arrays to compare.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>A new array containing only those elements that appear in an odd number of the input
              arrays.</dd>
            <dd>If any of the arguments is <codeph>MISSING</codeph>, then it returns
                <codeph>MISSING</codeph>.</dd>
            <dd>If any of the arguments is a non-array value, then it returns <codeph>NULL</codeph>.
            </dd>
          </dlentry>
        </dl>
      </p><p>
        <note>The difference between <cmdname>ARRAY_SYMDIFF()</cmdname> and
            <cmdname>ARRAY_SYMDIFFN()</cmdname> is that the former function includes the value when
          it appears only once while the latter function includes the value when it appears odd
          number of times in the input arrays. </note>
        <note>Refer to the following article for more information on the difference between a normal
          and n-ary symdiff: <xref href="https://en.wikipedia.org/wiki/Symmetric_difference"
            format="html" scope="external"/>.</note>
      </p><b>Example 29</b>: Find the elements that appear in an odd number of these three input
      arrays.<codeblock>SELECT ARRAY_SYMDIFFN([1, 2], [1, 2, 4], [1, 3]) AS symm_diffn;

Results:
[
  {
    "symm_diffn": [
      1,
      3,
      4
    ]
  }
]</codeblock></section>
    <section id="fn-array-union"><title>ARRAY_UNION(<varname>expr1</varname>,
          <varname>expr2</varname>, …)</title><p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function returns a new array with the set union of the input arrays, and it
              requires a minimum of two arguments.</dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expr1, expr2, …</dt>
                  <dd>[At least 2 are Required] The input arrays to compare.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>A new array with the set union of the input arrays.</dd>
            <dd>If any of the arguments is <codeph>MISSING</codeph>, then it returns
                <codeph>MISSING</codeph>.</dd>
            <dd>If any of the arguments is a non-array value, then it returns <codeph>NULL</codeph>.
            </dd>
          </dlentry>
        </dl>
      </p><b>Example 30a</b>: List the union of three given
        arrays.<codeblock>SELECT ARRAY_UNION([1, 2], [1, 2, 4], [1, 3]) AS array_union;

Results:
[
  {
    "array_union": [
      3,
      2,
      1,
      4
    ]
  }
]</codeblock><b>Example
        30b</b>: List the union of two given arrays with a
      string.<codeblock>SELECT ARRAY_UNION([1, 2], [1, 2, 4], "abc") AS array_union;

Results:
[
  {
    "array_union": null
  }
]</codeblock></section>
  </conbody>
</concept>
