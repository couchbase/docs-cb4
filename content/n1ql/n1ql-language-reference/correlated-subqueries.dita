<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_9" xml:lang="en-US">
  <title id="title__Toc272567416">Correlated Subqueries</title>
  <shortdesc/>
  <conbody>
    <p>In the above examples Q1, Q2, Q3, the subqueries are independent of the parent queries. That
      means they do not depend on any of the variables and aliases defined in the outer query, nor
      the specific document being processed at the outer query. In such case, the inner subquery has
      no correlation with its outer queries, and hence called <i>non-correlated</i> subquery. When a
      subquery refers to variables, aliases, attributes, or keyspace in the outer statement, it is
      called as <i>correlated</i> subquery. These subqueries are special because their performance
      characteristics can be very different from non-correlated queries. Typically, correlated
      queries are expensive, and query engines take special care in planning and executing such
      query efficiently.</p>
    <p>
      <dl>
        <dlentry>
          <dt>Performance</dt>
          <dd>
            <p>For non-correlated queries, a subquery is evaluated once and resulting values are
              substituted in the parent query for all of the documents at the outer level queries.
              However, when a query includes a correlated subquery, the evaluation of the subquery
              depends on the outer query document being processed. Because, the subquery refers to
              some values or attributes in the outer query. It is similar to having variables in the
              subquery, whose exact values are provided by the outer query, which might change for
              each of the documents considered at outer levels. Hence, the subquery is executed
              repeatedly, once for each document that is selected in the outer query.</p>
            <p>N1QL query engine optimizes the correlated subquery processing in multiple ways, such
                as:<ul id="ul_nby_cjq_mz">
                <li dir="ltr">
                  <p dir="ltr">Subqueries are prepared only once, though they are executed multiple
                    times. This will avoid repetitive costs such as parsing &amp; planning of the
                    subquery.</p>
                </li>
                <li dir="ltr">When subquery is correlated through the FROM-clause expression, fetch
                  of documents in the subquery is avoided. The query engine smartly reuses the
                  correlated document already fetched in the outer query.</li>
              </ul></p>
          </dd>
        </dlentry>
      </dl>
    </p>
    <section><title>Correlation Types</title>In N1QL, the way in which a subquery is correlated with
      its parent queries is very important. That dictates certain behaviors and limitations in
      writing nested subqueries, and impacts query performance.<p>
        <dl>
          <dlentry>
            <dt>Correlation by Source (or FROM clause-Expression)</dt>
            <dd>The data source for a query or subquery is specified by its FROM clause. When the
              FROM clause of a subquery refers to any variables (aliases, keyspace names, LET or
              LETTING variables, or document attributes) in the scope of parent queries, then the
              correlation is established using the source keyspace in the FROM-expression. Such
              subquery is called <b>Source Correlated Subquery</b> and it offers following
              benefits:</dd>
            <dd><b>Nested Paths in FROM-clause</b></dd>
            <dd>Couchbase Server 5.0 introduced powerful subquery functionality where correlated
              nested paths can be used in a subquery FROM clause. This provides powerful language
              expressibility, simplicity, and flexibility to N1QL queries especially when dealing
              with nested array attributes. See section Nested Paths in subqueries for more
              details.</dd>
            <dd><b>Better Performance </b></dd>
            <dd>When correlation is established through the FROM clause in the subquery (with
              variables in scope), then the N1QL engine knows that the subquery is referring to the
              same document that is being processed in one of the outer queries. Hence, the subquery
              avoids fetch of the documents used in the subquery. This significantly improves the
              performance of such subqueries, as shown in Example Q6 earlier whereas the Example Q6A
              cannot take advantage of this optimization.</dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Correlation by Reference (or non FROM clause-Expression)</dt>
            <dd>In this case the subqueries refer to <xref
                href="subqueries.dita#topic_9/section_onz_3tj_mz">variables in the scope</xref> of
              outer level queries, in clauses other than the FROM clause of the subquery. In such
              case, the FROM clause will have an independent keyspace identifier that does not
              reference any variables in the scope. This kind of subquery execution works like a
              JOIN query, and requires the USE KEYS clause. See related topics <xref
                href="#topic_9/use-keys" format="dita">USE KEYS in the subquery</xref> and <xref
                href="subqueries.dita#topic_9/from-clause"/> for more details.</dd>
            <dd>In the following example, in LET clause of parent query, with correlation introduced
              in the WHERE clause (<codeph>t2.iata = t1.airline</codeph>) and USE KEYS clauses of
              the subquery (referencing <codeph>t1</codeph> fields). This query finds the airline
              and route details of flights that have routes starting from SFO airport.</dd>
            <dd>
              <codeblock id="Q10">Example Q10:

SELECT airline_details, t1.destinationairport, t1.stops
FROM `travel-sample`  t1
LET airline_details = (SELECT t2.name, t2.callsign
                       FROM `travel-sample` t2
	                 <b>USE KEYS t1.airlineid
</b>                       WHERE t2.type = "airline" 
       AND t2.iata = t1.airline) 
WHERE t1.type = "route" AND t1.sourceairport = "SFO" 
      AND ARRAY_LENGTH(airline_details) > 0
LIMIT2;</codeblock>
            </dd>
          </dlentry>
        </dl>
      </p></section>
    <section id="use-keys"><title>FROM clause and USE KEYS in Correlated subqueries</title>As shown
      in the above example subquery <xref href="#topic_9/Q10" format="dita">Q10</xref>, the USE KEYS
      clause (in <b>bold</b>) is used to establish the correlation with the outer query documents.
      Otherwise, it is not possible to identify the documents in the subquery that are related to
      the specific document being considered by the outer query. <p dir="ltr">It is important to
        understand the reasoning to include the USE KEYS clause. That is not always mandatory. It
        entirely depends on how the FROM-clause is formulated, which indicates the source of
        documents for the subquery, and hence the correlation with the parent query.</p>When a
      keyspace name identifier is used in FROM-clause of a subquery, that refers to a collection of
      documents referenced by the keyspace identifier. However, when an alias of the keyspace is
      used in FROM-clause (or any other clauses of the query), that refers to an individual document
      of the keyspace being considered in the outer query.<p>
        <dl>
          <dlentry>
            <dt>FROM-clause with Keyspace Identifier</dt>
            <dd>The USE KEYS clause is mandatory for the primary keyspace of the subquery when the
              FROM-clause has keyspace identifier that is independent of any of the
              aliases/variables in scope. This is needed to establish correlation with the
              documents/keyspace used in the outer query. For example:<ul id="ul_oxc_jqx_mz">
                <li dir="ltr">
                  <p dir="ltr">FROM-clause of the subquery in Q7 is an independent keyspace
                    identifier `travel-sample`, and hence the correlation with parent query is
                    established explicitly using the USE KEYS clause through the referential
                    attribute t1.airlineid.</p>
                </li>
              </ul><ul id="ul_pxc_jqx_mz">
                <li dir="ltr">
                  <p dir="ltr">Similarly, the subquery in Q6A has an independent keyspace identifier
                    `travel-sample` in FROM-clause, but the correlation is self-referencing to the
                    same document. Hence USE KEYS meta(t).id is used.</p>
                </li>
              </ul>This is exactly same as the PrimaryKey-ForeignKey relationship required to <xref
                href="https://developer.couchbase.com/documentation/server/4.6/n1ql/n1ql-language-reference/from.html"
                format="html" scope="external">join</xref> two documents that are referenced in the
              outer/inner queries. Note that, in travel-sample keyspace <xref
                href="https://developer.couchbase.com/documentation/server/4.6/travel-app/travel-app-data-model.html#concept_hyy_k1z_pr"
                format="html" scope="external">data model</xref>, the “route” documents refer the
              “airline” documents using the attribute airlineid. Refer to <xref
                href="https://developer.couchbase.com/documentation/server/4.6/data-modeling/entity-relationship-doc-design.html"
                format="html" scope="external">concepts of data modeling</xref> for more details on
              reference based modeling.</dd>
            <dd>
              <p/>
            </dd>
          </dlentry>
          <dlentry>
            <dt>FROM-clause with Expression</dt>
            <dd>The USE KEYS clause is not required in the subquery when the FROM-clause in subquery
              has generic expression as data source, and not a keyspace name identifier. The
              FROM-clause expression can be:<ul id="ul_iqy_mqx_mz">
                <li dir="ltr">
                  <p dir="ltr">Independent Constant expression or subquery expression that does not
                    refer to any variables in scope</p>
                </li>
                <li dir="ltr">
                  <p dir="ltr">Generic N1QL expression or subquery that refers to any variables in
                    scope.</p>
                </li>
              </ul><p dir="ltr">In the example query Q6, the FROM-clause is an expression referring
                to the variable/alias t (in fact, the nested path t.reviews). That already
                establishes correlation, and hence the subquery doesn’t need explicit USE KEYS
                clause.</p></dd>
          </dlentry>
        </dl>
      </p></section>
    <section>
      <title>Correlated Subquery and JOINs</title>
      <p>Correlated subqueries can be alternatively formulated using JOINs, because conceptually a
        correlated query execution involves same steps as that of JOIN. <ul id="ul_el3_rqx_mz">
          <li dir="ltr">
            <p dir="ltr">For instance, evaluating nested subquery corresponding to each outer query
              document is equivalent to a nested-loop-join operation. </p>
          </li>
          <li dir="ltr">
            <p dir="ltr">This is one reason for the above mentioned mandatory requirement of USE
              KEYS clause for certain correlated queries using FROM-clause.</p>
          </li>
          <li dir="ltr">In general, N1QL recommends usage of JOIN queries when possible, instead of
            semantically equivalent correlated sub-queries. However, in some cases, it may be easier
            or intuitive to formulate some queries using sub-queries (instead of JOINs). In such
            case, it is recommended to understand the EXPLAIN query plans and performance of both queries.<p>
              <codeblock id="Q7A">Example Q7A: Earlier Q7 rewritten with JOIN

SELECT DISTINCT airline.name, airline.callsign, route.destinationairport, route.stops, route.airline
FROM `travel-sample` route 
JOIN `travel-sample` airline 
      ON KEYS route.airlineid 
WHERE route.type = "route" 
      AND airline.type = "airline" 
      AND route.sourceairport = "SFO" 
LIMIT 2;
</codeblock>
            </p></li>
        </ul></p>
    </section>
  </conbody>
</concept>
