<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_Group_By_clause">
  <title>GROUP BY clause</title>
  <shortdesc>The GROUP BY clause arranges aggregate values into groups, based on one more
    fields.</shortdesc>
  <body>
    <p><i>(Introduced in Couchbase Server 4.0)</i></p>
    <section id="section_y5m_qwb_qcb">
      <title>Purpose</title>
      <p>Use the GROUP BY clause to arrange aggregate values into groups of one or more fields. This
          <codeph>GROUP BY</codeph> clause follows the <codeph>WHERE</codeph> clause and precedes
        the optional <codeph>LETTING</codeph>, <codeph>HAVING</codeph>, and <codeph>ORDER
          BY</codeph> clauses.</p>
    </section>
    <section id="section_cpq_5wb_qcb">
      <title>Syntax</title>
      <p><image href="images/group-by-clause.png" id="image_qr2_q1b_2cb"/></p>
      <p>
        <codeblock>GROUP BY <varname>expr</varname> [, <varname>expr2</varname> ]* 
  [ LETTING <varname>alias</varname> = <varname>expr</varname> [, <varname>alias2</varname> = <varname>expr2</varname> ]* ] 
  [ HAVING <varname>cond</varname> ]
| 
LETTING <varname>alias</varname> = <varname>expr</varname> [, <varname>alias2</varname> = <varname>expr2</varname> ]*</codeblock>
      </p>
    </section>
    <section id="section_lbk_bxb_qcb">
      <title>Arguments</title>
      <p>
        <dl>
          <dlentry>
            <dt>expr</dt>
            <dd>[At least one is required] String or expression representing the <xref
                href="aggregatefun.dita">aggregate function</xref> or fields to group together.</dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt><codeph>LETTING</codeph> letting-clause</dt>
            <dd>[Optional] Stores the result of a sub-expression in order to use it in subsequent
                clauses.<image href="images/letting-clause.png" id="image_afz_t1b_2cb"/></dd>
            <dd>
              <dl>
                <dlentry>
                  <dt>alias</dt>
                  <dd>String or expression representing the name of the clause to be referred
                    to.</dd>
                </dlentry>
              </dl>
              <dl>
                <dlentry>
                  <dt>expr</dt>
                  <dd>String or expression representing the value of the <codeph>LETTING</codeph>
                    <varname>alias</varname> variable.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt><codeph>HAVING</codeph> having-clause</dt>
            <dd>[Optional] To return items where <xref href="aggregatefun.dita">aggregate</xref>
              values meet the specified conditions.<image href="images/having-clause.png"
                id="image_eq3_v1b_2cb"/></dd>
            <dd>
              <dl>
                <dlentry>
                  <dt>cond</dt>
                  <dd>String or expression representing the clause of aggregate values.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="section_cg4_jxb_qcb">
      <title>Limitations</title>
      <p><codeph>GROUP BY</codeph> works only on a group key or <xref href="aggregatefun.dita"
          >aggregate function</xref>.</p>
    </section>
    <section id="section_ub1_nxb_qcb">
      <title>Examples</title>
      <p><b>Example 1: Group the unique landmarks by city and list the top 4 cities with the most
          landmarks in descending order.</b></p>
      <codeblock>SELECT city City, COUNT(DISTINCT name) LandmarkCount 
FROM `travel-sample`
WHERE type = "landmark"
GROUP BY city
ORDER BY LandmarkCount DESC
LIMIT 4;</codeblock>
      <p>Results:</p>
      <codeblock>[
  {
    "City": "San Francisco",
    "LandmarkCount": 797
  },
  {
    "City": "London",
    "LandmarkCount": 443
  },
  {
    "City": "Los Angeles",
    "LandmarkCount": 284
  },
  {
    "City": "San Diego",
    "LandmarkCount": 197
  }
]</codeblock>
      <p><b>Example 2: Use <codeph>LETTING</codeph> to find cities that have a minimum number of
          things to see.</b></p>
      <codeblock>SELECT city City, COUNT(DISTINCT name) LandmarkCount 
FROM `travel-sample`
WHERE type = "landmark"
GROUP BY city
LETTING MinimumThingsToSee = 400
HAVING COUNT(DISTINCT name) > MinimumThingsToSee;</codeblock>
      <p>Results:<codeblock>[
  {
    "City": "London",
    "LandmarkCount": 443
  },
  {
    "City": "San Francisco",
    "LandmarkCount": 797
  }
]</codeblock></p>
      <p><b>Example 3: Use <codeph>HAVING</codeph> to specify cities that have more than 180
          landmarks.</b></p>
      <p>
        <codeblock>SELECT city City, COUNT(DISTINCT name) LandmarkCount 
FROM `travel-sample`
WHERE type = "landmark"
GROUP BY city
HAVING COUNT(DISTINCT name) > 180;</codeblock>
      </p>
      <p>Results:</p>
      <codeblock>[
  {
    "City": "London",
    "LandmarkCount": 443
  },
  {
    "City": "Los Angeles",
    "LandmarkCount": 284
  },
  {
    "City": "San Francisco",
    "LandmarkCount": 797
  },
  {
    "City": "San Diego",
    "LandmarkCount": 197
  }
]</codeblock>
      <note>The above <codeph>HAVING</codeph> clause must use the <xref
          href="aggregatefun.dita#topic_8_1">aggregate function</xref>
        <codeph>COUNT</codeph> instead of its alias <codeph>LandmarkCount</codeph>.</note>
      <p><b>Example 4: Use <codeph>HAVING</codeph> to specify landmarks that begin with an "S" or
          higher.</b></p>
      <p>
        <codeblock>SELECT city City, COUNT(DISTINCT name) LandmarkCount 
FROM `travel-sample`
WHERE type = "landmark"
GROUP BY city
HAVING city > "S";</codeblock>
      </p>
      <p>138 Results in 150ms:</p>
      <codeblock>[
  {
    "City": "Santa Barbara",
    "LandmarkCount": 53
  },
  {
    "City": "San Francisco",
    "LandmarkCount": 797
  },
  {
    "City": "Stable Yd",
    "LandmarkCount": 1
  },
  {
    "City": "Wembley",
    "LandmarkCount": 1
  },
...</codeblock>
      <p><b>Example 4b: Using <codeph>WHERE</codeph> yields the same results as
            <codeph>HAVING</codeph>, however, <codeph>WHERE</codeph> is faster.</b></p>
      <codeblock>SELECT city City, COUNT(DISTINCT name) LandmarkCount 
FROM `travel-sample`
WHERE type = "landmark"
AND city > "S"
GROUP BY city</codeblock>
      <p>138 Results in
        94ms:<codeblock>[
  {
    "City": "San Luis Obispo",
    "LandmarkCount": 1
  },
  {
    "City": "Twentynine Palms",
    "LandmarkCount": 1
  },
  {
    "City": "Westlake Village",
    "LandmarkCount": 1
  },
  {
    "City": "Surrey",
    "LandmarkCount": 1
  },
...</codeblock></p>
      <note>The <codeph>WHERE</codeph> clause is faster because <codeph>WHERE</codeph> gets
        processed <i>before</i> any <codeph>GROUP BY</codeph> and doesn't have access to aggregated
        values. <codeph>HAVING</codeph> gets processed <i>after</i>
        <codeph>GROUP BY</codeph> and is used to constrain the resultset to only those with
        aggregated values.</note>
    </section>
  </body>
</topic>
