<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_xwp_r3k_dx">
  <title>Overview</title>
  <shortdesc>With the SELECT statement, you can query and manipulate JSON data. You can select, join, project, nest, unnest, group, and sort in a single SELECT statement.
  </shortdesc>
  <body>
    <p>The SELECT statement takes a set of JSON documents from keyspaces as its input, manipulates
      it and returns a set of JSON documents in the result array. Since the schema for JSON
      documents is flexible, JSON documents in the result set have flexible schema as well.</p>
    <p>A simple query in N1QL consists of three parts: <ul id="ul_inf_qjk_dx">
        <li>SELECT: specifies the projection, which is the part of the document that is to be
          returned. </li>
        <li>FROM: specifies the keyspaces to work with. </li>
        <li>WHERE: specifies the query criteria (filters or predicates) that the results must
          satisfy.</li>
      </ul></p>
    <p>To query on a keyspace, you must either specify the document keys or use an index on the
      keyspace. </p>
    <p/>
    <p><b>RBAC Privileges</b></p>
    <p>User executing the SELCET statement must have the <i>Query Select</i> privileges granted on
      all keyspaces referred in the query. Note that, the SELECT query may not refer to any keyspace
      or with JOIN queries or subqueries, it may refer to multiple keyspaces. For more details about
      user roles, see <xref href="../../security/security-authorization.dita#authorization"/>.</p>
    <p>For example, </p>
    <p>To execute the following statement, user does not need any special privileges.</p>
    <p>
      <codeblock>SELECT 1</codeblock>
    </p>
    <p>To execute the following statement, user must have the  <i>Query Select</i> privilege on
        <codeph>`travel-sample`</codeph>.</p>
    <p>
      <codeblock>SELECT * FROM `travel-sample` </codeblock>
    </p>
    <p>To execute the following statement, user must have the <i>Query Select</i> privilege on
        <codeph>`travel-sample`</codeph> and <codeph>`beer-sample`</codeph>.</p>
    <p>
      <codeblock>SELECT * FROM `travel-sample` t  
JOIN `beer-sample` b ON KEYS ["aldaris", "ale_asylum"]</codeblock>
    </p>
    <p>To execute the following statement, user must have the <i>Query Select</i> privilege on
        <codeph>`travel-sample`</codeph> and <codeph>`beer-sample`</codeph>.</p>
    <p>
      <codeblock>SELECT * FROM `travel-sample` 
WHERE city IN (SELECT raw city FROM `beer-sample`)</codeblock>
    </p>
    <p>To execute the following statement, user must have the <i>Query Select</i> privilege on
        <codeph>`travel-sample`</codeph> and <codeph>`beer-sample`</codeph>.</p>
    <p>
      <codeblock>SELECT * FROM `travel-sample` WHERE type = "hotel"
UNION 
SELECT * FROM `beer-sample` WHERE type = "brewery"</codeblock>
    </p>
    <p/>
    <p>The following example uses an index to query the keyspace for airports that are in the
      America/Anchorage timezone and at an altitude of 2100ft or higher, and returns an array with
      the airport name and city name for each airport that satisfies the
      conditions.<codeblock spectitle="Query">SELECT t.airportname, t.city
FROM   `travel-sample` t
WHERE  type = "airport" 
       AND tz = "America/Anchorage" 
       AND geo.alt >= 2100;</codeblock><codeblock spectitle="Results">[
   {
         "airportname": "Anaktuvuk Pass Airport",
         "city": "Anaktuvuk Pass",
   }
]</codeblock></p>
    <p>The next example queries the keyspace using the document key
        "<userinput>airport_3469</userinput>".
      <codeblock spectitle="Query">SELECT * FROM `travel-sample` USE KEYS "airport_3469";</codeblock><codeblock spectitle="Result">[
  {
    "travel-sample": {
      "airportname": "San Francisco Intl",
      "city": "San Francisco",
      "country": "United States",
      "faa": "SFO",
      "geo": {
        "alt": 13,
        "lat": 37.618972,
        "lon": -122.374889
      },
      "icao": "KSFO",
      "id": 3469,
      "type": "airport",
      "tz": "America/Los_Angeles"
    }
  }
]</codeblock></p>
    <p>With projections, you retrieve just the fields that you need and not the entire document.
      This is especially useful when querying for a large dataset as it results in shorter
      processing times and better performance.</p>
    <p>The SELECT statement provides a variety of data processing capabilities such as <xref
        href="#topic_xwp_r3k_dx/filtering" format="dita">filtering</xref>, <xref
        href="#topic_xwp_r3k_dx/query-across-relationships" format="dita">querying across
        relationships</xref> using JOINs or subqueries, <xref
        href="#topic_xwp_r3k_dx/deep-traversal-nested-docs" format="dita">deep traversal of nested
        documents</xref>, <xref href="#topic_xwp_r3k_dx/aggregation" format="dita"
        >aggregation</xref>, <xref href="#topic_xwp_r3k_dx/combine-resultsets" format="dita"
        >combining result sets</xref> using operators, <xref
        href="#topic_xwp_r3k_dx/group-sort-limit" format="dita">grouping</xref>, <xref
        href="#topic_xwp_r3k_dx/group-sort-limit" format="dita">sorting</xref>, and more. Follow the
      links for examples that demonstrate each capability.</p>
 <section>
      <title>SELECT Statement Processing</title>
      <p>The SELECT statement queries a keyspace and returns a JSON array that contains zero or more
        objects.</p>
      <p>The following diagram shows the query execution workflow at a high level and illustrates
        the interaction with the query, index, and data services. <fig id="fig_knp_lkk_dx">
          <title>Query Execution Workflow</title>
          <image placement="break" href="images/query_execution.png" width="570"
            id="image_lnp_lkk_dx"/>
        </fig></p>
      <p>The SELECT statement is executed as a sequence of steps. Each step in the process produces
        result objects that are then used as inputs in the next step until all steps in the process
        are complete. While the workflow diagram shows all the possible phases a query goes through
        before returning a result, the clauses and predicates in a query decide the phases and the
        number of times that the query goes through. For example, sort phase can be skipped when
        there is no ORDER BY clause in the query; scan-fetch-join phase will execute multiple times
        for correlated subqueries.</p>
      <p>The following diagram shows the possible elements and operations during query execution.
          <fig id="fig_t4d_c35_gx">
          <title>Query Execution Phases</title>
          <image placement="break" href="images/query_service.svg" width="670" height="300"
            id="image_u4d_c35_gx"/>
        </fig>Some phases are done serially while others are done in parallel, as specified by their
        parent operator.</p>
      <p>The below table summarizes all the Query Phases that might be used in an Execution
          Plan:<table frame="all" rowsep="1" colsep="1" id="table_yjx_lvs_3bb">
          <tgroup cols="2" align="left">
            <colspec colname="c1" colnum="1" colwidth="1*"/>
            <colspec colname="c2" colnum="2" colwidth="4*"/>
            <thead>
              <row>
                <entry>Query Phase</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>Parse</entry>
                <entry>Analyzes the query and available access path options for each keyspace in the
                  query to create a query plan and execution infrastructure.</entry>
              </row>
              <row>
                <entry>Plan</entry>
                <entry>Selects the access path, determines the Join order, determines the type of
                  Joins, and then creates the infrastructure needed to execute the plan.</entry>
              </row>
              <row>
                <entry>Scan</entry>
                <entry>Scans the data from the Index Service.</entry>
              </row>
              <row>
                <entry>Fetch</entry>
                <entry>Fetches the data from the Data Service.</entry>
              </row>
              <row>
                <entry>Join</entry>
                <entry>Joins the data from the Data Service.</entry>
              </row>
              <row>
                <entry>Filter</entry>
                <entry>Filters the result objects by specifying conditions in the WHERE
                  clause.</entry>
              </row>
              <row>
                <entry>Pre-Aggregate</entry>
                <entry>Internal set of tools to prepare the Aggregate phase.</entry>
              </row>
              <row>
                <entry>Aggregate</entry>
                <entry>Performs the COUNT, DISTINCT, SUM, AVERAGE, and other aggregating
                  functions.</entry>
              </row>
              <row>
                <entry>Sort</entry>
                <entry>Orders and sorts items in the resultset in the order specified by the ORDER
                  BY clause</entry>
              </row>
              <row>
                <entry>Offset</entry>
                <entry>Skips the first <i>n</i> items in the result object as specified by the
                  OFFSET clause.</entry>
              </row>
              <row>
                <entry>Limit</entry>
                <entry>Limits the number of results returned using the LIMIT clause.</entry>
              </row>
              <row>
                <entry>Project</entry>
                <entry>Receives only the fields needed for final displaying to the user.</entry>
              </row>
            </tbody>
          </tgroup>
        </table></p>
      <p>The possible elements and operations in a query include: <ul>
          <li>Specifying the keyspace that is queried.</li>
          <li>Specifying the document keys or using indexes to access the documents. </li>
          <li>Fetching the data from the data service. </li>
          <li>Filtering the result objects by specifying conditions in the WHERE clause. </li>
          <li>Removing duplicate result objects from the resultset by using the DISTINCT clause. </li>
          <li>Grouping and aggregating the result objects. </li>
          <li>Ordering (sorting) items in the resultset in the order specified by the ORDER BY
            expression list. </li>
          <li>Skipping the first <varname>n</varname> items in the result object as specified by the
            OFFSET clause. </li>
          <li>Limiting the number of results returned using the LIMIT clause. </li>
        </ul></p>
    </section>
    <section><title>Data Processing Capabilities</title>
      <dl>
        <dlentry id="filtering">
          <dt>Filtering</dt>
          <dd>You can filter the query results using the WHERE clause. Consider the following
            example which queries for all airports in the America/Anchorage timezone that are at an
            altitude of 2000ft or more. The WHERE clause specifies the conditions that must be
            satisfied by the documents to be included in the resultset, and the resultset is
            returned as an array of airports that satisfy the condition. <note>The keys in the
              result object are ordered alphabetically at each
            level.</note><codeblock spectitle="Query">SELECT * 
FROM   `travel-sample` 
WHERE  type = "airport" 
       AND tz = "America/Anchorage" 
       AND geo.alt >= 2000; </codeblock><codeblock spectitle="Result">[
   {
      "travel-sample": {
         "airportname": "Anaktuvuk Pass Airport",
         "city": "Anaktuvuk Pass",
         "country": "United States",
         "faa": "AKP",
         "geo": {
            "alt": 2103,
            "lat": 68.1336,
            "lon": -151.743
         },
         "icao": "PAKP",
         "id": 6712,
         "type": "airport",
         "tz": "America/Anchorage"
      }
   },
   {
      "travel-sample": {
         "airportname": "Arctic Village Airport",
         "city": "Arctic Village",
         "country": "United States",
         "faa": "ARC",
         "geo": {
            "alt": 2092,
            "lat": 68.1147,
            "lon": -145.579
         },
         "icao": "PARC",
         "id": 6729,
         "type": "airport",
         "tz": "America/Anchorage"
      }
   }
]</codeblock></dd>
        </dlentry>
        <dlentry id="query-across-relationships">
          <dt>Querying Across Relationships</dt>
          <dd><p>You can use the SELECT statement to query across relationships using the JOIN
              clause or subqueries.</p><b>JOIN Clause</b><p>Before we delve into examples, let's
              take a look at the data model of the travel-sample keyspace, which is used in the
              following examples. For more details about the data model, see <xref
                href="../../sdk/sample-application.dita#story-h2-3">Sample Application</xref>.<fig
                id="fig_fgp_14k_dx">
                <title>Data model of travel-sample keyspace</title>
                <image placement="break" href="../../travel-app/images/travel-app-data-model.png"
                  width="570" id="image_ggp_14k_dx"/>
              </fig></p><p>The first example (<b>Example 1</b>) uses a JOIN clause to find the
              distinct airline details which have routes that start from SFO. This example JOINS the
              document of type "route" with documents of type "airline" using the KEY
                "airlineid".<ul id="ul_frq_g4k_dx">
                <li>Documents of type "route" are on the left side of JOIN, and documents of type
                  "airline" are on the right side of JOIN. </li>
                <li>The documents of type "route" (on the left) contain the foreign key "airlineid"
                  of documents of type "airline" (on the right). </li>
              </ul><codeblock spectitle="Example 1: Query">SELECT DISTINCT airline.name, airline.callsign, route.destinationairport, route.stops, route.airline
FROM `travel-sample` route 
  JOIN `travel-sample` airline 
  ON KEYS route.airlineid 
WHERE route.type = "route" 
  AND airline.type = "airline" 
  AND route.sourceairport = "SFO" 
LIMIT 2;</codeblock><codeblock spectitle="Example 1: Results">[
   {
      "airline": "SY",
      "callsign": "SUN COUNTRY",
      "destinationairport": "MSP",
      "name": "Sun Country Airlines",
      "stops": 0
   },
   {
      "airline": "UA",
      "callsign": "UNITED",
      "destinationairport": "IND",
      "name": "United Airlines",

      "stops": 0
   }
]</codeblock></p><p>Let's
              consider another example (<b>Example 2)</b> which finds the number of distinct
              airports where AA has routes. In this example: <ul id="ul_gy2_npk_dx">
                <li>Documents of type "airline" are on the left side of JOIN, and documents of type
                  "route" are on the right side.</li>
                <li>The WHERE clause predicate airline.iata = "AA" is on the right side keyspace
                  "airlines".</li>
              </ul></p><p>This example illustrates a special kind of JOIN where the documents on the
              right side of JOIN contain the foreign key reference to the documents on the left
              side. Such JOINs are referred to as index JOIN. For details, see <xref
                href="from.dita#concept_rnt_zfk_np/lookup-join">Lookup JOIN
              Clause</xref>.</p><p>Index JOIN requires a special inverse index
                <parmname>route_airlineid</parmname> on the JOIN key ‘route.airlineid’. Create this
              index using the following command:
              <codeblock>CREATE INDEX route_airlineid ON `travel-sample`(airlineid) 
WHERE type = "route";</codeblock></p><p>Now
              we can execute the following query.
              <codeblock spectitle="Example 2: Query">SELECT Count(DISTINCT route.sourceairport) AS distinctairports1 
FROM `travel-sample` airline 
  JOIN `travel-sample` route 
  ON KEY route.airlineid FOR airline 
WHERE  route.type = "route" 
  AND    airline.type = "airline" 
  AND    airline.iata = "AA";</codeblock><codeblock spectitle="Example 2: Results">[
   {
      "distinctairports1": 429
   }
]</codeblock></p></dd>
          <dd><b>Subqueries</b><p>A subquery is an expression that is evaluated by executing an
              inner SELECT query. Subqueries can be used in most places where you can use an
              expression such as projections, FROM clauses, and WHERE clauses. </p><p>A subquery is executed once for every input document to the outer statement and it returns an
              array every time it is evaluated. See <xref href="subqueries.dita#topic_9"/> for more
              details.
              <codeblock spectitle="Query">SELECT * 
FROM   (SELECT t.airportname 
        FROM   (SELECT * 
                FROM   `travel-sample` t 
                WHERE  type = "airport" 
                       AND country = "United States" 
                LIMIT  1) AS s1) AS s2;</codeblock><codeblock spectitle="Results">[
   {
      "s2": {
         "airportname": "Barter Island Lrrs"
      }
   }
]</codeblock></p></dd>
        </dlentry>
        <dlentry id="deep-traversal-nested-docs">
          <dt>Deep Traversal for Nested Documents</dt>
          <dd>When querying a bucket with nested documents, SELECT provides an easy way to traverse
            deep nested documents using the dot notation and NEST and UNNEST clauses. <p>The
              following query looks for the schedule, and accesses the flight id for
              destinationaiport=ALG. Since a given flight has multiple schedules, attribute
              "schedule" is an array containing all schedules for the specified flight. You can
              access the individual array elements using the array indexes. For brevity, we’re
              limiting the number of results in the query to 1.
              <codeblock spectitle="Query">SELECT t.schedule[0].flight AS flightid 
FROM `travel-sample` t 
WHERE type="route" 
  AND destinationairport="ALG" 
LIMIT 1;</codeblock><codeblock spectitle="Results">[
   {
      "flightid": "AH631"

   }
]</codeblock></p></dd>
          <dd><b>NEST and UNNEST</b><p>Note that, an array is created with the matching nested documents. In this example: <ul>
                <li>The ‘airline’ field in the result is an array of the `travel-sample` documents
                  that are matched with the key route.airlineid.</li>
                <li>Hence, the projection is accessed as airline[0] to pick the first element of the
                  array.</li>
              </ul><codeblock spectitle="Query">SELECT DISTINCT route.sourceairport, 
                route.airlineid, 
                airline[0].callsign 
FROM `travel-sample` route NEST `travel-sample` airline 
  ON KEYS route.airlineid 
WHERE route.type = "route" 
  AND route.airline = "AA" 
LIMIT 4;</codeblock><codeblock spectitle="Results">[
   {
      "airlineid": "airline_24",
      "callsign": "AMERICAN",
      "sourceairport": "ITH"
   },
   {
      "airlineid": "airline_24",
      "callsign": "AMERICAN",
      "sourceairport": "WAW"
   },
   {
      "airlineid": "airline_24",
      "callsign": "AMERICAN",
      "sourceairport": "BKK"
   },
   {
      "airlineid": "airline_24",
      "callsign": "AMERICAN",
      "sourceairport": "GGT"
   }
]</codeblock></p>
          <p>The following example uses the UNNEST clause to retrieve the author names from the
              reviews
              object.<codeblock spectitle="Query">SELECT r.author 
FROM `travel-sample` t UNNEST t.reviews r 
WHERE t.type = "hotel" 
LIMIT 4;</codeblock><codeblock spectitle="Results">[
   {
      "author": "Ozella Sipes"
   },
   {
      "author": "Barton Marks"
   },
   {
      "author": "Blaise O'Connell IV"
   },
   {
      "author": "Nedra Cronin"
   }
]</codeblock></p></dd>
        </dlentry>
        <dlentry id="aggregation">
          <dt>Aggregation</dt>
          <dd>As part of a single SELECT statement, you can also perform aggregation using the SUM,
            COUNT, AVG, MIN, MAX, or ARRAY AVG functions. <p>The following example counts the total
              number of flights to SFO:
              <codeblock spectitle="Query">SELECT count(schedule[*]) AS totalflights 
FROM `travel-sample` t 
WHERE type="route" 
  AND destinationairport="SFO";</codeblock><codeblock spectitle="Results">[
   {
      "totalFlights": 250
   }
]</codeblock></p></dd>
        </dlentry>
        <dlentry id="combine-resultsets">
          <dt>Combining Resultsets Using Operators</dt>
          <dd>You can combine the result sets using the UNION or INTERSECT operators. <p>Consider the following
              example which looks for the first schedule for flights to "SFO" and
              "BOS":<codeblock spectitle="Query">(SELECT t.schedule[0] 
 FROM `travel-sample` t 
 WHERE type = "route" 
   AND destinationairport = "SFO" 
 LIMIT  1) 
UNION ALL 
(SELECT t.schedule[0] 
 FROM `travel-sample` t 
 WHERE type = "route" 
   AND destinationairport = "BOS" 
 LIMIT  1);</codeblock><codeblock spectitle="Results">[
   {
      "$1": {
         "day": 0,
         "flight": "AM982",
         "utc": "09:11:00"
      }
   },
   {
      "$1": {
         "day": 0,
         "flight": "AI339",
         "utc": "23:05:00"
      }
   }
]
</codeblock></p></dd>
        </dlentry>
        <dlentry id="group-sort-limit">
          <dt>Grouping, Sorting, and Limiting Results</dt>
          <dd>You can perform further processing on the data in your result set before the final
            projection is generated. You can group data using the GROUP BY clause, sort data using
            the ORDER BY clause, and you can limit the number of results included in the result set
            using the LIMIT clause. <p>The following example looks for the number of airports at an
              altitude of 5000 ft or higher and groups the results by country and timezone. It then
              sorts the results by country names and timezones (ascending order by default).
              <codeblock spectitle="Query">SELECT COUNT(*)  AS count, 
       t.country AS country, 
       t.tz AS timezone 
FROM `travel-sample` t 
WHERE type = "airport" 
  AND geo.alt >= 5000 
GROUP BY t.country, t.tz 
ORDER BY t.country, t.tz; </codeblock><codeblock spectitle="Results">[
   {
      "count": 2,
      "country": "France",
      "timezone": "Europe/Paris"
   },
   {
      "count": 57,
      "country": "United States",
      "timezone": "America/Denver"
   },
   {
      "count": 7,
      "country": "United States",
      "timezone": "America/Los_Angeles"
   },
   {
      "count": 4,
      "country": "United States",
      "timezone": "America/Phoenix"
   },
   {
      "count": 1,
      "country": "United States",
      "timezone": "Pacific/Honolulu"
   }
]</codeblock></p></dd>
        </dlentry>
      </dl>
    </section>
  </body>
</topic>
