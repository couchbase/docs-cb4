<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_SELECT_Clause">
  <title>SELECT Clause</title>
  <shortdesc>The <codeph>SELECT</codeph> clause determines the result set.</shortdesc>
  <body>
    <section id="section_Purpose">
      <title>Purpose</title>
      <p>In a <codeph>SELECT</codeph> statement, the <codeph>SELECT</codeph> clause determines the
        projection (result set).</p>
    </section>
    <section id="section_Prerequisites">
      <title>Prerequisites</title>
      <p>For you to select data from a document or keyspace, you must have the
          <parmname>query_select</parmname> privilege on the document or keyspace. For more details
        about user roles, see <xref href="../../security/security-authorization.dita#authorization"
        />.</p>
    </section>
    <section id="section_Syntax"><title>Syntax</title>In the below <codeph>SELECT</codeph>
      statement, the <codeph>SELECT</codeph> clause is boldfaced:<p>
        <codeblock><b>SELECT <varname>select_clause</varname></b>
[FROM <varname>from_clause</varname>] [JOIN <varname>join_clause</varname>]
[USE INDEX <varname>useindex_clause</varname>]
[LET <varname>let_clause</varname>]
[WHERE <varname>where_clause</varname> ( [AND <varname>where_clause2</varname>] )* ]
[GROUP BY <varname>groupby_clause</varname>] [LETTING|HAVING <varname>letting_clause</varname>]
[UNION|INTERSECT|EXCEPT <varname>union_clause</varname>]
[ORDER BY <varname>orderby_clause</varname>]
[LIMIT <varname>limit_int</varname>]
[OFFSET <varname>offset_clause</varname>]
;</codeblock>
      </p><b>Syntax of the
          <varname>select_clause</varname></b><codeblock><codeph>SELECT [ALL|DISTINCT] ( <varname>result-expr</varname> [ , <varname>result-expr2</varname> ]* 
| (RAW|ELEMENT|VALUE) <varname>expr</varname> [ [AS] <varname>alias</varname> ] )</codeph></codeblock><p><b>Railroad
          Diagrams for SELECT clause:</b></p><p><image href="images/select-clause.png"
          id="image_b51_kng_lbb"/></p><p>result-expr:</p><p><image scale="50"
          href="images/select-clause_RR_result-expr.png" id="image_jy4_3zn_nbb"
          /></p><p>path:</p><p><image scale="50" href="images/select-clause_RR_path.png"
          id="image_u4c_c14_nbb"/></p><p>alias:</p><p><image scale="50"
          href="images/select-clause_RR_alias.png" id="image_pqr_x14_nbb"/></p></section>
    <section id="sec_Arguments">
      <title id="Arguments">Arguments</title>
      <p>
        <dl>
          <dlentry>
            <dt>ALL | DISTINCT</dt>
            <dd>[Optional; default is ALL]</dd>
            <dd>SELECT ALL retrieves all of the data specified and will result in all of the
              specified columns, including all duplicates.</dd>
            <dd>SELECT DISTINCT removes duplicate result objects from the query's result set.</dd>
          </dlentry>
        </dl>
        <note>Since Couchbase Server 4.5.1, the DISTINCT clause is no longer blocking in nature
          since it streams the input and produces the output in-parallel, while consuming less
          memory.</note>
      </p>
      <p>In general, <codeph>SELECT ALL</codeph> results in more returned documents than
          <codeph>SELECT DISTINCT</codeph> due to <codeph>DISTINCT</codeph>'s extra step of removing
        duplicates. Since <codeph>DISTINCT</codeph> is purely run in memory, it executes quickly,
        making the overhead of removing duplicates more noticeable as your recordset gets larger. </p>
      <p>In the below table, <ul id="ul_fmd_ltp_4bb">
          <li>Q1's <codeph>SELECT DISTINCT</codeph> reduces the recordset to a small fraction of its
            original size; and while removing so many of the documents takes time, projecting the
            remaining small fraction is actually slightly faster than the overhead of removing
            duplicates.</li>
          <li>On the other extreme, Q2's <codeph>SELECT DISTINCT</codeph> does not reduce the
            recordset at all since <codeph>META().id</codeph> is already unique, and thus projects
            the entire original recordset and shows the maximum overhead of about twice as long to
            execute than <codeph>SELECT ALL</codeph>.</li>
        </ul><table frame="all" rowsep="1" colsep="1" id="table_wld_nzh_4bb">
          <tgroup cols="5" align="left">
            <colspec colname="c1" colnum="1" colwidth="4*"/>
            <colspec colname="c2" colnum="2" colwidth="1*" align="center"/>
            <colspec colname="c3" colnum="3" colwidth="1*"/>
            <colspec colname="c4" colnum="4" colwidth="1*" align="center"/>
            <colspec colname="c5" colnum="5" colwidth="1*"/>
            <thead>
              <row>
                <entry>N1QL Query</entry>
                <entry namest="c2" nameend="c3">SELECT ALL</entry>
                <entry namest="c4" nameend="c5">SELECT DISTINCT</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>Q1: <codeph>SELECT city FROM `travel-sample`;</codeph></entry>
                <entry namest="c2" nameend="c3">slightly slower</entry>
                <entry namest="c4" nameend="c5">slightly faster</entry>
              </row>
              <row>
                <entry>Q2: <codeph>SELECT META().id FROM `travel-sample`;</codeph></entry>
                <entry namest="c2" nameend="c3">much faster</entry>
                <entry namest="c4" nameend="c5">much slower</entry>
              </row>
            </tbody>
          </tgroup>
        </table></p>
      <p>In the below <codeph>EXPLAIN</codeph> example of using <codeph>DISTINCT</codeph>, the lines
        using the <codeph>DISTINCT</codeph> operator are boldfaced:<codeblock><b>EXPLAIN SELECT DISTINCT city FROM `travel-sample`;</b>

Results:
{
  "plan": {
    "#operator": "Sequence",
    "~children": [
      {
        "#operator": "PrimaryScan",
        "index": "#primary",
        "keyspace": "travel-sample",
        "namespace": "default",
        "using": "gsi"
      },
      {
        "#operator": "Fetch",
        "keyspace": "travel-sample",
        "namespace": "default"
      },
      {
        "#operator": "Parallel",
        "~child": {
          "#operator": "Sequence",
          "~children": [
            {
              "#operator": "InitialProject",
              "distinct": true,
              "result_terms": [
                {
                  "expr": "(`travel-sample`.`city`)"
                }
              ]
            },
            {
<b>              "#operator": "Distinct"</b>
            },
            {
              "#operator": "FinalProject"
            }
          ]
        }
      },
      {
<b>        "#operator": "Distinct"</b>
      }
    ]
  },
  "text": "SELECT DISTINCT city\nFROM `travel-sample`;"
}</codeblock><dl>
          <dlentry>
            <dt>result-expr</dt>
            <dd>One or more expressions that evaluate to one or more field names to be in the
              ResultSet. </dd>
            <dd>If no field name is specified, the input for the query is a single empty object that
              allows you to perform calculations with the <codeph>SELECT</codeph> statement, such as
                <codeph>SELECT 10+20 AS Total;</codeph> or other N1QL expression.</dd>
            <dd>For details with examples, see <xref
                href="index.dita#n1ql-lang-ref/N1QL_Expressions">N1QL Expressions</xref>.</dd>
          </dlentry>
          <dlentry>
            <dt>RAW | ELEMENT | VALUE</dt>
            <dd>[Optional; RAW and ELEMENT and VALUE are synonyms]</dd>
            <dd>SELECT RAW reduces the amount of data returned by eliminating the field attribute. </dd>
            <dd><b>Example 1</b>: Comparing SELECT and SELECT RAW on a basic query:<table
                frame="all" rowsep="1" colsep="1" id="table_v1p_kbp_lbb">
                <tgroup cols="2" align="left">
                  <colspec colname="c1" colnum="1" colwidth="1*"/>
                  <colspec colname="c2" colnum="2" colwidth="1*"/>
                  <tbody>
                    <row>
                      <entry><codeph><b>SELECT</b> {"a":1, "b":2};</codeph></entry>
                      <entry><codeph><b>SELECT RAW</b> {"a":1, "b":2};</codeph></entry>
                    </row>
                  </tbody>
                </tgroup>
              </table><image href="images/select-clause_ex1.png" id="image_lnm_dsq_mbb"/></dd>
            <dd>There are times in which this extra layer might not be desirable since it requires
              extra output parsing. So the RAW qualifier specifies that the expression that follows
              not to be qualified, as shown in the next example.</dd>
            <dd><b>Example 2</b>: Comparing SELECT and SELECT RAW listing 5 airport cities
                alphabetically:<table frame="all" rowsep="1" colsep="1" id="table_xd1_m35_lbb">
                <tgroup cols="3" align="left">
                  <colspec colname="c1" colnum="1" colwidth="1*"/>
                  <colspec colname="c2" colnum="2" colwidth="1*"/>
                  <colspec colname="c3" colnum="3" colwidth="1.2*"/>
                  <tbody>
                    <row>
                      <entry><codeph><b>SELECT city</b></codeph><p><codeph>FROM
                            `travel-sample`</codeph></p><p><codeph>WHERE
                            type="airport"</codeph></p><p><codeph>ORDER BY city LIMIT
                          5;</codeph></p></entry>
                      <entry><codeph><b>SELECT RAW city</b></codeph><p><codeph>FROM
                            `travel-sample`</codeph></p><p><codeph>WHERE
                            type="airport"</codeph></p><p><codeph>ORDER BY city LIMIT
                          5;</codeph></p></entry>
                      <entry><codeph><b>SELECT DISTINCT RAW city</b></codeph><p><codeph>FROM
                            `travel-sample`</codeph></p><p><codeph>WHERE
                            type="airport"</codeph></p><p><codeph>ORDER BY city LIMIT
                          5;</codeph></p></entry>
                    </row>
                  </tbody>
                </tgroup>
              </table><image href="images/select-clause_ex2.png" id="image_mxc_hsq_mbb"/></dd>
          </dlentry>
          <dlentry>
            <dt>keyspace_name1, keyspace_name2, ..., keyspace_nameX</dt>
            <dd>[Optional; if the keyspace is unspecified in the SELECT clause, it will be taken
              from the <xref href="from.dita#concept_rnt_zfk_np">FROM clause</xref>] </dd>
            <dd>The name of the keyspace or keyspaces used, separated by a comma.</dd>
            <dd>Keyspaces map to buckets in Couchbase Server. A keyspace is a set of documents that
              may vary in structure and are a unit of authorization and resource
                allocation.<note>When specifying the keyspace name in<codeph> SELECT keyspace_name.*
                </codeph>for all fields, the keyspace name will not appear in the result set;
                whereas not specifying the keyspace name in<codeph> SELECT * FROM keyspace_name
                </codeph>adds the keyspace name to the result
                set.<codeblock><b>SELECT * FROM `travel-sample` WHERE type="hotel";</b>

Results:
[
  {
    "travel-sample": {                          / added line with keyspace
      "address": "Capstone Road, ME7 3JE",
      "alias": null,
      "checkin": null,
...</codeblock><codeblock><b>SELECT `travel-sample`.* FROM `travel-sample` WHERE type="hotel";</b>

Results:
[
  {                                             / no added line with keyspace
    "address": "Capstone Road, ME7 3JE",
    "alias": null,
    "checkin": null,
...</codeblock><codeblock><b>SELECT meta().id,email,city,phone,`travel-sample`.reviews[0].ratings
FROM `travel-sample` WHERE type="hotel" LIMIT 5;</b>

Results:
[
  {                                             / no added line with keyspace
    "city": "Medway",
    "email": null,
    "id": "hotel_10025",
    "phone": "+44 870 770 5964",
    "ratings": {
      "Cleanliness": 5,
      "Location": 4,
      "Overall": 4,
      "Rooms": 3,
      "Service": 5,
      "Value": 4
    }
  },
...</codeblock></note></dd>
          </dlentry>
        </dl><dl>
          <dlentry>
            <dt>field_expr</dt>
            <dd>The name of the field or fields, separated by a comma, to be in the query's
              ResultSet, such
              as:<codeblock>SELECT <b>id, airline, stops</b> FROM `travel-sample` WHERE type="route";</codeblock></dd>
            <dd>To use a field within an array, use<codeph> [0] </codeph>after the array name,
              followed by a period and the field name, such
              as:<codeblock>SELECT <b>schedule[0].day</b> FROM `travel-sample` WHERE type="route";</codeblock></dd>
          </dlentry>
        </dl><dl>
          <dlentry>
            <dt>AS alias_name</dt>
            <dd>A temporary name of a bucket name or field name to make names more readable or
              unique, such as:<codeblock>SELECT schedule[0].day <b>AS Weekday</b></codeblock></dd>
          </dlentry>
        </dl></p>
    </section>
    <section id="sec_BestPractices">
      <title>Best Practices</title>
      <p>When possible, explicitly list all fields you want in your ResultSet instead of the "*" to
        select all fields, since the "*" requires an extra trip over your network (one to get the
        list of field names and one to select the field names).</p>
    </section>
    <section id="sec_Examples">
      <title>Examples</title>
      <p><b>Example 1</b>: Select all the fields of 1 document of type <codeph>airline</codeph> from
        the <codeph>travel-sample</codeph>
        keyspace.<codeblock>SELECT * FROM `travel-sample` WHERE type="airline" LIMIT 1;

Results:
[
  {
    "travel-sample": {
      "callsign": "MILE-AIR",
      "country": "United States",
      "iata": "Q5",
      "icao": "MLA",
      "id": 10,
      "name": "40-Mile Air",
      "type": "airline"
    }
  }
]</codeblock></p>
      <p><b>Example 2</b>: Select all the fields of 1 document of type <codeph>landmark</codeph>
        from the <codeph>travel-sample</codeph>
        keyspace.<codeblock>SELECT * FROM `travel-sample` WHERE type="landmark" LIMIT 1;

Results:
[
  {
    "travel-sample": {
      "activity": "see",
      "address": "Prince Arthur Road, ME4 4UG",
      "alt": null,
      "city": "Gillingham",
      "content": "Adult - £6.99 for an Adult ticket that allows you to come back for further visits within a year (children's and concessionary tickets also available). Museum on military engineering and the history of the British Empire. A quite extensive collection that takes about half a day to see. Of most interest to fans of British and military history or civil engineering. The outside collection of tank mounted bridges etc can be seen for free. There is also an extensive series of themed special event weekends, admission to which is included in the cost of the annual ticket.",
      "country": "United Kingdom",
      "directions": null,
      "email": null,
      "geo": {
        "accuracy": "RANGE_INTERPOLATED",
        "lat": 51.39184,
        "lon": 0.53616
      },
      "hours": "Tues - Fri 9.00am to 5.00pm, Sat - Sun 11.30am - 5.00pm",
      "id": 10019,
      "image": null,
      "name": "Royal Engineers Museum",
      "phone": "+44 1634 822839",
      "price": null,
      "state": null,
      "title": "Gillingham (Kent)",
      "tollfree": null,
      "type": "landmark",
      "url": "http://www.remuseum.org.uk"
    }
  }
]</codeblock></p>
    </section>
    <section id="sec_RelatedLinks">
      <title>Related Links</title>
      <p><xref href="from.dita#concept_rnt_zfk_np"/></p>
      <p><xref href="hints.dita#concept_npj_srf_2s">USE INDEX clause</xref></p>
      <p><xref href="let.dita#concept_qz5_bgk_np">LET Clause</xref></p>
      <p><xref href="where.dita#concept_zvb_dgk_np">WHERE Clause</xref></p>
      <p><xref href="groupby.dita#concept_uhg_2gk_np">GROUP BY Clause</xref></p>
      <p><xref href="union.dita#concept_iy2_fgk_np">UNION, INTERSECT, and EXCEPT Clause</xref></p>
    </section>

  </body>
</topic>
