<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_8_6" xml:lang="en-US">
	<title id="title__Toc272567324">Date Functions</title>
	<shortdesc>N1QL date functions return the system clock value or manipulate the date string. This is
        very useful for manipulating dates in datasets which do not use consistent formats for
        attributes representing dates.</shortdesc>
	<conbody>
	    <section id="date-timezone">
            <title>Timezones</title>
            <p>Many applications operate across multiple different time zones. Therefore, it is
                important for the database to be able to handle and manipulate dates in these
                timezones in a consistent manner. Many date functions take the timezone as an
                additional argument.</p>
	        <note>Timezones are case sensitive, <codeph>Europe/London</codeph> is not the same as <codeph>europe/london</codeph>.</note>
	        <p>The timezone specified must be one of <xref
                    href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List"
                    format="html" scope="external">the following list</xref>. Below are a few
                examples of commonly used timezones: <table frame="all" rowsep="1" colsep="1"
                    id="table_l1d_mdb_ry">
                    <title>Timezone Examples</title>
                    <tgroup cols="2">
                        <colspec colname="c1" colnum="1" colwidth="1.0*"/>
                        <colspec colname="c2" colnum="2" colwidth="1.0*"/>
                        <thead>
                            <row>
                                <entry>Timezone</entry>
                                <entry>UTC Offset</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>America/New_York</entry>
                                <entry>-05:00</entry>
                            </row>
                            <row>
                                <entry>Europe/Paris</entry>
                                <entry>+01:00</entry>
                            </row>
                            <row>
                                <entry>Europe/London</entry>
                                <entry>+00:00</entry>
                            </row>
                            <row>
                                <entry>Asia/Jerusalem</entry>
                                <entry>+02:00</entry>
                            </row>
                            <row>
                                <entry>Asia/Kolkata</entry>
                                <entry>+05:30</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>In addition to all of the timezones specified in the tz database, there are also two other special timezones that can be used
	            with all date functions which accept a timezone as an argument:
                    <ul id="ul_jnw_t5z_py">
                    <li><b>Local/System timezone</b>: By default, the timezone local to the server
                        is used if a timezone is not specified.</li>
                    <li><b>UTC</b>: The Coordinated Universal Time is the primary time standard by
                        which the world regulates clocks and time. It is within about 1 second of
                        mean solar time at 0Â° longitude; it does not observe daylight saving time
                            (<xref
                            href="https://en.wikipedia.org/wiki/Coordinated_Universal_Time#cite_note-FOOTNOTEGuinot2011S181-1"
                            format="html" scope="external"/>). Find more details at <xref
                            href="https://en.wikipedia.org/wiki/Coordinated_Universal_Time"
                            format="html" scope="external"/>.</li>
                </ul></p>
        </section>
	    <section id="date-time-formats">
            <title>Date Formats</title>
            <p>When a database is used by multiple different applications with many different
                implicit schemas, it is important for the database to be able to handle dates in
                different formats. N1QL does this by parsing the date passed to it and representing
                it as a standardized date object internally. These date objects are composed of the
                following components:<table frame="all" rowsep="1" colsep="1" id="table_w5m_h3b_ry">
                    <title>Date Components</title>
                    <tgroup cols="3">
                        <colspec colname="c1" colnum="1" colwidth="1.0*"/>
                        <colspec colname="c2" colnum="2" colwidth="1.0*"/>
                        <colspec colname="newCol3" colnum="3" colwidth="1*"/>
                        <thead>
                            <row>
                                <entry>Component</entry>
                                <entry>Code</entry>
                                <entry>Example</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>Year</entry>
                                <entry>YYYY</entry>
                                <entry>2017</entry>
                            </row>
                            <row>
                                <entry>Month (of the year)</entry>
                                <entry>MM</entry>
                                <entry>01</entry>
                            </row>
                            <row>
                                <entry>Day (of the month)</entry>
                                <entry>DD</entry>
                                <entry>20</entry>
                            </row>
                            <row>
                                <entry>Hour (of the day)</entry>
                                <entry>hh</entry>
                                <entry>14</entry>
                            </row>
                            <row>
                                <entry>Minute (of the hour)</entry>
                                <entry>mm</entry>
                                <entry>34</entry>
                            </row>
                            <row>
                                <entry>Second (of the minute)</entry>
                                <entry>ss</entry>
                                <entry>29</entry>
                            </row>
                            <row>
                                <entry>Millisecond (of the second)</entry>
                                <entry>s</entry>
                                <entry>875</entry>
                            </row>
                            <row>
                                <entry>Time Zone (as a UTC offset)</entry>
                                <entry>TZD</entry>
                                <entry>+05:30<p>+00:00 can also be specified as just
                                            <codeph>Z</codeph></p></entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table></p>
            <p>The following table shows all of the accepted string date formats for N1QL date
                functions, using the date components specified above. In cases where the timezone is
                not specified, the local system time is assumed:</p>
            <p>
                <table frame="all" rowsep="1" colsep="1" id="table_zpx_3hb_ry">
                    <title>List of Date Formats</title>
                    <tgroup cols="2">
                        <colspec colname="c1" colnum="1" colwidth="1.0*"/>
                        <colspec colname="c2" colnum="2" colwidth="1.0*"/>
                        <thead>
                            <row>
                                <entry>Format</entry>
                                <entry>Example</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>YYYY-MM-DDThh:mm:ss.sTZD (ISO8601 / RFC3339</entry>
                                <entry>2006-01-02T15:04:05.999+00:00 or
                                    2006-01-02T15:04:05.999Z</entry>
                            </row>
                            <row>
                                <entry>YYYY-MM-DDThh:mm:ssTZD</entry>
                                <entry>2006-01-02T15:04:05+00:00 or 2006-01-02T15:04:05Z</entry>
                            </row>
                            <row>
                                <entry>YYYY-MM-DDThh:mm:ss.s</entry>
                                <entry>2006-01-02T15:04:05.999</entry>
                            </row>
                            <row>
                                <entry>YYYY-MM-DDThh:mm:ss</entry>
                                <entry>2006-01-02T15:04:05</entry>
                            </row>
                            <row>
                                <entry>YYYY-MM-DD hh:mm:ss.sTZD</entry>
                                <entry>2006-01-02 15:04:05.999+00:00 or 2006-01-02
                                    15:04:05.999Z</entry>
                            </row>
                            <row>
                                <entry>YYYY-MM-DD hh:mm:ssTZD</entry>
                                <entry>2006-01-02 15:04:05+00:00 or 2006-01-02 15:04:05Z</entry>
                            </row>
                            <row>
                                <entry>YYYY-MM-DD hh:mm:ss.s</entry>
                                <entry>2006-01-02 15:04:05.999</entry>
                            </row>
                            <row>
                                <entry>YYYY-MM-DD hh:mm:ss</entry>
                                <entry>2006-01-02 15:04:05</entry>
                            </row>
                            <row>
                                <entry>YYYY-MM-DD</entry>
                                <entry>2006-01-02</entry>
                            </row>
                            <row>
                                <entry>hh:mm:ss.sTZD</entry>
                                <entry>15:04:05.999+00:00 or 15:04:05.999Z</entry>
                            </row>
                            <row>
                                <entry>hh:mm:ssTZD</entry>
                                <entry>15:04:05+00:00 or 15:04:05Z</entry>
                            </row>
                            <row>
                                <entry>hh:mm:ss.s</entry>
                                <entry>15:04:05.999</entry>
                            </row>
                            <row>
                                <entry>hh:mm:ss</entry>
                                <entry>15:04:05</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </p>
            <p>As well as accepting </p>
        </section>
        <section id="datetime-parts">
            <title>Providing Timestamp Components</title>
            <p>As seen in the table above, timestamps are composed of multiple different components
                such as day, year, month etc. It is important for applications to be able to
                manipulate particular components of a timestamp. Functions such as
                    <codeph>DATE_ADD_STR()</codeph> accept a <codeph>part</codeph> argument, which
                is the component to adjust. The below table shows the accepted arguments for
                    <codeph>part</codeph> and their descriptions:<table>
                    <title>List of Adjustable Date Components</title>
                    <tgroup cols="2">
                        <colspec colname="c1" colnum="1" colwidth="1.0*"/>
                        <colspec colname="c2" colnum="2" colwidth="1.0*"/>
                        <thead>
                            <row>
                                <entry>Component</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>millennium</entry>
                                <entry/>
                            </row>
                            <row>
                                <entry>century</entry>
                                <entry/>
                            </row>
                            <row>
                                <entry>decade</entry>
                                <entry/>
                            </row>
                            <row>
                                <entry>year</entry>
                                <entry/>
                            </row>
                            <row>
                                <entry>quarter</entry>
                                <entry/>
                            </row>
                            <row>
                                <entry>month</entry>
                                <entry/>
                            </row>
                            <row>
                                <entry>week</entry>
                                <entry/>
                            </row>
                            <row>
                                <entry>day</entry>
                                <entry/>
                            </row>
                            <row>
                                <entry>hour</entry>
                                <entry/>
                            </row>
                            <row>
                                <entry>minute</entry>
                                <entry/>
                            </row>
                            <row>
                                <entry>second</entry>
                                <entry/>
                            </row>
                            <row>
                                <entry>millisecond</entry>
                                <entry/>
                            </row>
                        </tbody>
                    </tgroup>
                </table></p>
        </section>
        <section id="datetime-format-parts">
            <title>Extracting Timestamp Components</title>
            <p>It is important for applications to be able to extract the specific component of the
                timestamps, such as day, year, month, hours, minutes, or seconds, so that these can
                be used in N1QL queries.</p>
            <p>The following are the supported date/time <i>parts</i> that can be passed to the date
                extraction functions. For all examples, the datetime being used is
                    <codeph>2006-01-02T15:04:05.999Z</codeph>:<table frame="all" rowsep="1"
                    colsep="1" id="table_xkm_yjb_ry">
                    <title>List of Extractable Date Components</title>
                    <tgroup cols="5">
                        <colspec colname="c1" colnum="1" colwidth="1*"/>
                        <colspec colname="c2" colnum="2" colwidth="2.96*"/>
                        <colspec colname="newCol4" colnum="3" colwidth="1*"/>
                        <colspec colname="newCol5" colnum="4" colwidth="1*"/>
                        <colspec colname="newCol3" colnum="5" colwidth="1.3*"/>
                        <thead>
                            <row>
                                <entry>Component</entry>
                                <entry>Description</entry>
                                <entry>Lower Bound</entry>
                                <entry>Upper Bound</entry>
                                <entry>Example</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>millennium</entry>
                                <entry>The millennium (1000 year period) of the date. This begins at
                                    0BCE.</entry>
                                <entry>-</entry>
                                <entry>-</entry>
                                <entry>3</entry>
                            </row>
                            <row>
                                <entry>century</entry>
                                <entry>The century (100 year period) of the date. This begins at
                                    0BCE.</entry>
                                <entry>-</entry>
                                <entry>-</entry>
                                <entry>21</entry>
                            </row>
                            <row>
                                <entry>decade</entry>
                                <entry>The decade (10 year period) of the date. This is the floor
                                    value of the year divided by 10.</entry>
                                <entry>-</entry>
                                <entry>-</entry>
                                <entry>200</entry>
                            </row>
                            <row>
                                <entry>year</entry>
                                <entry>The year of the date. This begins at 0BCE.</entry>
                                <entry>-</entry>
                                <entry>-</entry>
                                <entry>2006</entry>
                            </row>
                            <row>
                                <entry>quarter</entry>
                                <entry>The quarter (3 month period) of the year of the date. </entry>
                                <entry>1</entry>
                                <entry>4</entry>
                                <entry>1</entry>
                            </row>
                            <row>
                                <entry>month</entry>
                                <entry>The month of the year of the date.</entry>
                                <entry>1</entry>
                                <entry>12</entry>
                                <entry>1</entry>
                            </row>
                            <row>
                                <entry>week</entry>
                                <entry>The week of the year of the date. This is the ceiling value
                                    of  the day of the year divided by 7.</entry>
                                <entry>1</entry>
                                <entry>53</entry>
                                <entry>1</entry>
                            </row>
                            <row>
                                <entry>day</entry>
                                <entry>The day of the month of the date.</entry>
                                <entry>1</entry>
                                <entry>31</entry>
                                <entry>2</entry>
                            </row>
                            <row>
                                <entry>day_of_year or doy</entry>
                                <entry>The day of the year of the date.</entry>
                                <entry>1</entry>
                                <entry>366</entry>
                                <entry>2</entry>
                            </row>
                            <row>
                                <entry>day_of_week or dow</entry>
                                <entry>The day of the week of the date. </entry>
                                <entry>0</entry>
                                <entry>6</entry>
                                <entry>1</entry>
                            </row>
                            <row>
                                <entry>hour</entry>
                                <entry>The hour of the day of the date.</entry>
                                <entry>0</entry>
                                <entry>23</entry>
                                <entry>15</entry>
                            </row>
                            <row>
                                <entry>minute</entry>
                                <entry>The minute of the hour of the date.</entry>
                                <entry>0</entry>
                                <entry>59</entry>
                                <entry>4</entry>
                            </row>
                            <row>
                                <entry>second</entry>
                                <entry>The second of the minute of the date.</entry>
                                <entry>0</entry>
                                <entry>59</entry>
                                <entry>5</entry>
                            </row>
                            <row>
                                <entry>millisecond</entry>
                                <entry>The millisecond of the second of the date.</entry>
                                <entry>0</entry>
                                <entry>999</entry>
                                <entry>999</entry>
                            </row>
                            <row>
                                <entry>timezone</entry>
                                <entry>The offset from UTC in seconds of the date.</entry>
                                <entry>-43200</entry>
                                <entry>43200</entry>
                                <entry>0</entry>
                            </row>
                            <row>
                                <entry>timezone_hour</entry>
                                <entry>The hour component of the offset from UTC of the
                                    date.</entry>
                                <entry>-12</entry>
                                <entry>12</entry>
                                <entry>0</entry>
                            </row>
                            <row>
                                <entry>timezone_minute</entry>
                                <entry>The minute component of the offset from UTC of the
                                    date.</entry>
                                <entry>-59</entry>
                                <entry>59</entry>
                                <entry>0</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table></p>
        </section>
        <section id="section_vv4_z4b_ry">
            <p>Below is the list of all date functions within N1QL:</p>
        </section>
	    <section id="fn-date-clock-local"><title>CLOCK_LOCAL()</title>
	        <p>Returns the local time in the format </p>
	        <codeblock spectitle="Example" outputclass="language-json">SELECT CLOCK_LOCAL();
[
    {
        "$1": "2016-09-26T11:04:51.156-07:00"
    }
]</codeblock>
	    </section>
	    <section id="fn-date-clock-tz"><title>CLOCK_TZ()</title>
	        <p>Returns the time in the specified timezone.</p>
	        <codeblock spectitle="Examples" outputclass="language-json">SELECT CLOCK_TZ('UTC');
{
    "results": [
        {
            "$1": "2016-09-26T18:05:14.266Z"
        }
    ]
}

SELECT CLOCK_TZ('US/Eastern');
{
    "results": [
        {
            "$1": "2016-09-26T14:05:21.648-04:00"
        }
    ]
}

SELECT CLOCK_TZ('US/Pacific');
{
    "results": [
        {
            "$1": "2016-09-26T11:05:32.719-07:00"
        }
    ]
}</codeblock>
	    </section>
	    <section id="fn-date-clock-utc"><title>CLOCK_UTC()</title>
	        <p>Returns the universal time.</p>
	        <codeblock spectitle="Example" outputclass="language-json">SELECT CLOCK_UTC();
{
    "results": [
        {
            "$1": "2016-09-26T18:04:54.916Z"
        }
    ]
}</codeblock>
	    </section>
		<section id="fn-date-clock-millis"><title>CLOCK_MILLIS()</title>
		<p>Returns system clock at function evaluation time, as UNIX milliseconds.
				Varies during a query.</p>
		    <codeblock outputclass="language-json" spectitle="Example">SELECT CLOCK_MILLIS();
{
    "results": [
        {
            "$1": 1483543192439.568
        }
    ]
}</codeblock>
		</section>
	    <section id="fn-date-clock-str"><title>CLOCK_STR(fmt)</title>
			<p>Returns system clock at function evaluation time, as a string in a supported format. Varies
                during a query. See <xref href="#topic_8_6/datetime-format-parts" format="dita"
                />for the list of supported date/time formats. </p>
	        <codeblock outputclass="language-json" spectitle="Example">SELECT CLOCK_STR("1222-11-12 11:11:11");
{
    "results": [
        {
            "$1": "2017-01-04 07:21:37.482"
        }
    ]
}</codeblock>	
		</section>
		<section id="fn-date-add-millis"><title>DATE_ADD_MILLIS(expression, n, part)</title>
			<p>Performs date arithmetic, and returns result of computation. <i>n</i> and <i>part</i> are used
                to define an interval or duration, which is then added (or subtracted) to the UNIX
                time stamp, returning the result. See <xref
                    href="#topic_8_6/datetime-format-parts" format="dita"/>for the list of
                supported date/time parts.</p>
			
		    <codeblock outputclass="language-json" spectitle="Example">SELECT DATE_ADD_MILLIS(1463284740000, 3, 'day');
{
    "results": [
        {
            "$1": 1463543940000
        }
    ]
}</codeblock>
		</section>
		<section id="fn-date-add-str"><title>DATE_ADD_STR(expression, n, part)</title>
			<p>Performs date arithmetic. <i>n</i> and <i>part</i> are used to define an
				interval or duration, which is then added (or subtracted) to the date string
				in a supported format, returning the result.</p>
		    <codeblock outputclass="language-json" spectitle="Example">SELECT DATE_ADD_STR('2016-05-15 00:00:23',3, 'day');
{
    "results": [
        {
            "$1": "2016-05-18 00:00:23"
        }
    ]
}</codeblock>
		</section>
		<section id="fn-date-diff-millis"><title>DATE_DIFF_MILLIS(expression1, expression2, part)</title>
			<p>Performs date arithmetic. Returns the elapsed time between two UNIX time stamps as an integer
                whose unit is <i>part</i>. See <xref href="#topic_8_6/datetime-format-parts"
                    format="dita"/>for the list of supported date/time parts.</p>
		    <codeblock outputclass="language-json" spectitle="Example">SELECT DATE_DIFF_MILLIS(1463284740000, 1463543940000, 'day');
{
    "results": [
        {
            "$1": -3
        }
    ]
}</codeblock>
		</section>
		<section id="fn-date-diff-str"><title>DATE_DIFF_STR(expression1, expression2, part)</title>
			<p>Performs date arithmetic. Returns the elapsed time between two date strings in a supported
                format, as an integer whose unit is <i>part</i>. See <xref
                    href="#topic_8_6/datetime-format-parts" format="dita"/>for the list of
                supported date/time parts.</p>
		    <codeblock outputclass="language-json" spectitle="Example">SELECT DATE_DIFF_STR('2016-05-18 00:00:23','2016-05-15 00:00:23','day');
{
    "results": [
        {
            "$1": 3
        }
    ]
}</codeblock>
		</section>
		<section id="fn-date-"><title>DATE_FORMAT_STR(expresssion, fmt)</title>
			<p>Converts dates to a different format.</p>
		    <codeblock spectitle="Example" outputclass="language-json">SELECT DATE_FORMAT_STR('2016-05-15T00:00:23+02:00','1222-11-11 11:11:11');
{
    "results": [
        {
            "$1": "2016-05-15 00:00:23"
        }
    ]
}</codeblock>
			
		</section>
		<section id="fn-date-part-millis"><title>DATE_PART_MILLIS(expression, part [,timezone])</title>
			<p>Converts the millis date into a date string in timezone, and then returns the corresponding
                date as an integer. The date expression is a number representing UNIX milliseconds,
                part is one of the following date part strings, and timezone is the timezone for the
                corresponding output. See <xref href="#topic_8_6/datetime-format-parts"
                    format="dita"/>for the list of supported date/time part strings.</p>
		    <codeblock spectitle="Examples" outputclass="language-json">SELECT DATE_PART_MILLIS(1463284740000,'day', 'UTC') ;
{
    "results": [
        {
            "$1": 15
        }
    ]
}

SELECT DATE_PART_MILLIS(1463284740000,'day','Europe/London') ;
{
    "results": [
        {
            "$1": 15
        }
    ]
}</codeblock>
		</section>
		<section id="fn-date-part-str"><title>DATE_PART_STR(expression, part)</title>
			<p>Returns date part as an integer. The date expression is a string in a supported format, and
                part is one of the supported date part strings. See <xref
                    href="#topic_8_6/datetime-format-parts" format="dita"/>for the list of
                supported date/time part strings.</p>
		    <codeblock outputclass="language-json" spectitle="Example">SELECT DATE_PART_STR('2016-05-18 00:00:23','day');
{
    "results": [
        {
            "$1": 18
        }
    ]
}</codeblock>	
		</section>
		<section id="fn-date-range-millis"><title>DATE_RANGE_MILLIS(expression1, expression2, part
			[,n])</title>
			<p>Returns an array of dates from the start date specified by <codeph>expression1</codeph>
				until the end date specified by <codeph>expression2</codeph>, in
				milliseconds, incrementing the <codeph>part</codeph> specified by
				<codeph>n</codeph>. The default value of<codeph> n</codeph> is 1.</p>
		    <codeblock spectitle="Examples" outputclass="language-json">SELECT DATE_RANGE_MILLIS(1480752000000, 1475478000000, 'month', -1);
{
    "results": [
    	{
            "$1": [
                1480752000000,
                1478156400000,
                1475478000000
            ]
        }
    ]
}

SELECT ARRAY_MILLIS_TO_STR(a,'2016-12-03') 
	FOR a IN DATE_RANGE_MILLIS(1480752000000, 1449129600000, 'month', -1) 
	END;							

{
    "results": [
        {
            "$1": [
                "2016-12-03",
                "2016-11-03",
                "2016-10-03"            
		    ]
        }
    ]
}</codeblock>
		</section>
		<section id="fn-date-range-str"><title>DATE_RANGE_STR(expression1, expression2, part
			[,n])</title>
			<p>Returns an array of dates from the start date specified by <codeph>expression1</codeph>
				until the end date specified by <codeph>expression2</codeph>,
				incrementing the <codeph>part</codeph> specified by <codeph>n</codeph>.
				The default value of <codeph>n</codeph> is 1. Note that the result does
				not contain the end
				date.</p>
		    <codeblock spectitle="Examples" outputclass="language-json">SELECT DATE_RANGE_STR('2015-11-30T15:04:05.999', '2017-04-14T15:04:06.998', 'quarter');  
{
    "results": [
        {
            "$1": [
                "2015-11-30T15:04:05.999",
                "2016-03-01T15:04:05.999",
                "2016-06-01T15:04:05.999",
                "2016-09-01T15:04:05.999",
                "2016-12-01T15:04:05.999",
                "2017-03-01T15:04:05.999"
            ]
        }
    ]
}

SELECT DATE_RANGE_STR('2016-01-01T15:04:05.999', '2016-01-05T15:04:05.998', 'day', 1);
{
    "results": [
        {
            "$1": [
                "2016-01-01T15:04:05.999",
                "2016-01-02T15:04:05.999",
                "2016-01-03T15:04:05.999",
                "2016-01-04T15:04:05.999"
            ]
        }
    ]
}

SELECT DATE_RANGE_STR('2004-01-03','2004-12-03', 'month', 4);
{
    "results": [
        {
            "$1": [
                "2004-01-03",
                "2004-05-03",
                "2004-09-03"
            ]
        }
    ]
}

SELECT DATE_RANGE_STR('2016-01-05T15:04:05.999', '2016-01-01T15:04:06.998', 'day', -1)"; 
{
    "results": [
        {
            "$1": [
                "2016-01-05T15:04:05.999",
                "2016-01-04T15:04:05.999",
                "2016-01-03T15:04:05.999",
                "2016-01-02T15:04:05.999"
            ]
        }
    ]
}</codeblock>
		</section>
		<section id="fn-date-trunc-millis"><title>DATE_TRUNC_MILLIS(expression, part)</title>
			<p>Returns UNIX time stamp that has been truncated so that the given date part
				string is the least significant.</p>
		    <codeblock outputclass="language-json" spectitle="Example">SELECT DATE_TRUNC_MILLIS(1463284740000, 'month');
{
    "results": [
        {
            "$1": 1462147200000
        }
    ]
}</codeblock>
		</section>
		<section id="fn-date-trunc-str"><title>DATE_TRUNC_STR(expression, part)</title>
			<p>Returns ISO 8601 time stamp that has been truncated so that the given date part string is the
				least
				significant.<codeblock outputclass="language-json" spectitle="Example">SELECT DATE_TRUNC_STR('2016-05-18 00:00:23', 'year');
{
    "results": [
        {
            "$1": "2016-01-01 17:00:00"
        }
    ]
}</codeblock></p>
		</section>
		<section id="fn-date-duration-to-str"><title>DURATION_TO_STR(expression)</title>
			<p>Converts duration, specified as a floating point number followed by a time unit such as
				1.3ms, 3.25ns, or 7.6666s, to a query timing string. The conversion
				function supports nano- (ns) , micro- ( Î¼s), milli- (ms), and second
				(s) time units.</p>
		</section>
		<section id="fn-date-millis"><title>MILLIS(expression)</title>
			<p>Returns date that has been converted in a supported format to UNIX
				milliseconds.</p>
		    <codeblock outputclass="language-json" spectitle="Example">SELECT MILLIS('2016-05-18 00:00:23');
{
    "results": [
        {
            "$1": 1463554823000
        }
    ]
}</codeblock>
		</section>
	    <section id="fn-date-millis-to-local"><title>MILLIS_TO_LOCAL(millis,fmt)</title>
	        <p>Converts the UNIX milliseconds into local time in the specified format.  The format can be
	            any of the supported <xref
	                href="http://developer.couchbase.com/documentation/server/current/n1ql/n1ql-language-reference/datefun.html"
	                format="html" scope="external">date formats</xref>.</p>
	        <codeblock spectitle="Example" outputclass="language-json">SELECT MILLIS_TO_LOCAL(1.453485008e+12, '2006-01-02');
{
    "results": [
        {
            "$1": "2016-01-22"
        }
    ]
}</codeblock>
	    </section>
		<section id="fn-date-millis-to-str"><title>MILLIS_TO_STR(expression [, fmt ])</title>
			<p>Returns the string in the supported format to which the UNIX milliseconds
				has been converted.</p>
		    <codeblock outputclass="language-json" spectitle="Example">SELECT MILLIS_TO_STR(1463554823000);
{
    "results": [
        {
            "$1": "2016-05-18T00:00:23-07:00"
        }
    ]
}</codeblock>
		</section>
		<section id="fn-date-millis-to-utc"><title>MILLIS_TO_UTC(expression [, fmt ])</title>
			<p>Returns the UTC string to which the UNIX time stamp has been converted in
				the supported format.</p>
		    <codeblock outputclass="language-json" spectitle="Example">SELECT MILLIS_TO_UTC(1463554823000);
{
    "results": [
        {
            "$1": "2016-05-18T07:00:23Z"
        }
    ]
}</codeblock>
		</section>
		<section id="fn-date-millis-to-tz"><title>MILLIS_TO_ZONE_NAME(expression, tz_name [, fmt ])</title>
            <p>Also: <i>MILLIS_TO_TZ(expression, tz_name [, fmt ])</i></p>
			<p>Converts the UNIX time stamp to a string in the named time zone, and returns
				the string.</p>
		    <codeblock outputclass="language-json" spectitle="Examples">SELECT MILLIS_TO_ZONE_NAME(1483575060859.4465, "EST");
{
    "results": [
        {
            "$1": "2017-01-04T19:11:00.859-05:00"
        }
    ]
}

SELECT MILLIS_TO_TZ(1483575060859.4465, "US/Eastern");
{
    "results": [
        {
            "$1": "2017-01-04T19:11:00.859-05:00"
        }
    ]
}</codeblock>
		</section>
		<section id="fn-date-now-millis"><title>NOW_MILLIS()</title>
			<p>Returns statement time stamp as UNIX milliseconds; does not vary during a
				query.</p>
		    <codeblock outputclass="language-json" spectitle="Example">SELECT NOW_MILLIS();
{
    "results": [
        {
            "$1": 1483575060859.4465
        }
    ]
}</codeblock>
		</section>
	    <section id="fn-date-now-local"><title>NOW_LOCAL(void)</title>
	        <p>Returns the current local time.</p>
        <codeblock spectitle="Example" outputclass="language-json">SELECT NOW_LOCAL();
{
    "results": [
        {
            "$1": "2016-09-26T10:58:30.548-07:00"
        }
    ]
}</codeblock>
	    </section>
	    <section id="fn-date-now-tz"><title>NOW_TZ(zone)</title>
	        <p>Returns the current time in specified timezone.</p>
	        <codeblock spectitle="Example" outputclass="language-json">SELECT NOW_TZ('UTC');
{
    "results": [
        {
            "$1": "2016-09-26T10:58:49.53-07:00"
        }
    ]
}

SELECT NOW_TZ('US/Eastern');
{
    "results": [
        {
            "$1": "2016-09-26T11:01:46.769-07:00"
        }
    ]
}</codeblock>
	    </section>
	    <section id="fn-date-now-utc"><title>NOW_UTC()</title>
	        <p>Returns the current time in UTC.</p>
	        <codeblock spectitle="Example" outputclass="language-json">SELECT NOW_UTC();
{
    "results": [
        {
            "$1": "2016-09-26T10:58:37.274-07:00"
        }
    ]
}</codeblock>
	    </section>
		<section id="fn-date-now-str"><title>NOW_STR([ fmt ])</title>
			<p>Returns statement time stamp as a string in a supported format; does not vary during a
				query.</p>
		    <codeblock spectitle="Examples" outputclass="language-json">SELECT NOW_STR();
{
    "results": [
        {
            "$1": "2017-01-04T16:15:15.704-08:00"
        }
    ]
}

SELECT NOW_STR('1222-11-11');
{
    "results": [
        {
            "$1": "2017-01-04"
        }
    ]
}</codeblock>
		</section>
		<section id="fn-date-str-to-duration"><title>STR_TO_DURATION(expression)</title>
			<p>Converts a string to duration, which is a floating point number followed by a time unit
				such as s, Î¼s, ms, or ns. The conversion function supports nano-
				(ns) , micro- ( Î¼s), milli- (ms), and second (s) time units.</p>
		    <codeblock spectitle="Example" outputclass="language-json">SELECT STR_TO_DURATION('3ms');
{
    "results": [
        {
            "$1": 3000000
        }
    ]
}</codeblock>
		</section>
		<section id="fn-date-str-to-millis"><title>STR_TO_MILLIS(expression)</title>
			<p>Returns date that has been converted in a supported format to UNIX
				milliseconds.</p>
		    <codeblock outputclass="language-json" spectitle="Example">SELECT STR_TO_MILLIS('2017-01-04T16:15:15.704-08:00');
{
    "results": [
        {
            "$1": 1483575315704
        }
    ]
}</codeblock>
		</section>
		<section id="fn-date-str-to-utc"><title>STR_TO_UTC(expression)</title>
			<p>Converts the ISO 8601 time stamp to UTC.</p>
		    <codeblock spectitle="Example" outputclass="language-json">SELECT STR_TO_UTC('2017-01-04T16:15:15.704-08:00');
{
    "results": [
        {
            "$1": "2017-01-05T00:15:15.704Z"
        }
    ]
}</codeblock>
		</section>
	    <section id="fn-date-str-tz"><title>STR_TO_TZ(strdate,zone)</title>
	        <p>Returns the date specified as a string in the specified timezone.</p>
	        <codeblock spectitle="Example" outputclass="language-json">SELECT STR_TO_TZ('2016-01-22T09:50:08-08:00', 'UTC');
{
    "results": [
        {
            "$1": "2016-01-22T17:50:08Z"
        }
    ]
}</codeblock>
	    </section>
		<section id="fn-date-str-to-tz"><title>STR_TO_ZONE_NAME(expression, tz_name)</title>
			<p>Converts the supported time stamp string to the named time zone.</p>
		    <codeblock spectitle="Example" outputclass="language-json">SELECT STR_TO_ZONE_NAME('2017-01-04T16:15:15.704-08:00', "EST");
{
    "results": [
        {
            "$1": "2017-01-04T19:15:15.704-05:00"
        }
    ]
}</codeblock>
		</section>
		<section>
			<title>Example Query Using Date Functions</title>
			<p>The following query retrieves purchase information for an e-commerce report. The report
				lists unique customers that purchased something from the company website in the last
				month. This information is used to identify user activity and growth.</p>
		    <codeblock outputclass="language-sql">SELECT DISTINCT COUNT(purchases.customerId)
  FROM purchases
  WHERE STR_TO_MILLIS(purchases.purchasedAt)
    BETWEEN STR_TO_MILLIS("2014-02-01") AND STR_TO_MILLIS("2014-03-01")</codeblock>
			<p>Returns:</p>
			<codeblock outputclass="language-json">{
    "results": [
        {
            "$1": 3831
        }
    ]
 }</codeblock>
		</section>

	</conbody>
</concept>
