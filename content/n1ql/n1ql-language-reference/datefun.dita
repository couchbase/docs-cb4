<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_8_6" xml:lang="en-US">
	<title id="title__Toc272567324">Date Functions</title>
	<shortdesc>N1QL date functions return the system clock value or manipulate the date
		string.</shortdesc>
	<conbody>
		<p>The following table contains a list of the date functions that you can use in N1QL
			statements.</p>

		<table>
			<title>Date functions</title>
			<tgroup cols="2">
				<thead>
					<row>
						<entry>Function</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>

					<row>
						<entry>
							<codeph>CLOCK_MILLIS()</codeph>
						</entry>
						<entry>
							<p>Returns system clock at function evaluation time, as UNIX milliseconds.
								Varies during a query.</p>
						</entry>
					</row>

					<row>
						<entry>
							<p>
								<codeph>CLOCK_STR([fmt])</codeph>
							</p>
						</entry>
						<entry>
							<p>Returns system clock at function evaluation time, as a string in a supported
								format. Varies during a query. Supported formats:</p>
							<ul>
								<li>"2006-01-02T15:04:05.999Z07:00": Default format. (ISO8601 /
									RFC3339)</li>
								<li>"2006-01-02T15:04:05Z07:00" (ISO8601 / RFC3339)</li>
								<li>"2006-01-02T15:04:05.999"</li>
								<li>"2006-01-02T15:04:05"</li>
								<li>"2006-01-02 15:04:05.999Z07:00"</li>
								<li>"2006-01-02 15:04:05Z07:00"</li>
								<li>"2006-01-02 15:04:05.999"</li>
								<li>"2006-01-02 15:04:05"</li>
								<li>"2006-01-02"</li>
								<li>"15:04:05.999Z07:00"</li>
								<li>"15:04:05Z07:00"</li>
								<li>"15:04:05.999"</li>
								<li>"15:04:05"</li>
							</ul>
						</entry>
					</row>

					<row>
						<entry>
							<p>
								<codeph>DATE_ADD_MILLIS(expression, n, part)</codeph>
							</p>
						</entry>
						<entry>
							<p>Performs date arithmetic, and returns result of computation. <i>n</i> and
									<i>part</i> are used to define an interval or duration, which is then
								added (or subtracted) to the UNIX time stamp, returning the result.
								Parts:</p>
							<ul>
								<li>"millennium"</li>
								<li>"century"</li>
								<li>"decade"</li>
								<li>"year"</li>
								<li>"quarter"</li>
								<li>"month"</li>
								<li>"week"</li>
								<li>"day"</li>
								<li>"hour"</li>
								<li>"minute"</li>
								<li>"second"</li>
								<li>"millisecond"</li>
							</ul>
						</entry>
					</row>

					<row>
						<entry>
							<p>
								<codeph>DATE_ADD_STR(expression, n, part)</codeph>
							</p>
						</entry>
						<entry>
							<p>Performs date arithmetic. <i>n</i> and <i>part</i> are used to define an
								interval or duration, which is then added (or subtracted) to the date string
								in a supported format, returning the result.</p>
						</entry>
					</row>

					<row>
						<entry>
							<p>
								<codeph>DATE_DIFF_MILLIS(expression1, expression2, part)</codeph>
							</p>
						</entry>
						<entry>
							<p>Performs date arithmetic. Returns the elapsed time between two UNIX time
								stamps as an integer whose unit is <i>part</i>.</p>
							<ul>
								<li>"millennium"</li>
								<li>"century"</li>
								<li>"decade"</li>
								<li>"year"</li>
								<li>"week"</li>
								<li>"day"</li>
								<li>"hour"</li>
								<li>"minute"</li>
								<li>"second"</li>
								<li>"millisecond"</li>
							</ul>
						</entry>
					</row>

					<row>
						<entry>
							<p>
								<codeph>DATE_DIFF_STR(expression1, expression2, part)</codeph>
							</p>
						</entry>
						<entry>
							<p>Performs date arithmetic. Returns the elapsed time between two date strings
								in a supported format, as an integer whose unit is <i>part</i>.</p>
						</entry>
					</row>

					<row>
						<entry>
							<p>
								<codeph>DATE_PART_MILLIS(expression, part)</codeph>
							</p>
						</entry>
						<entry>
							<p>Returns date part as an integer. The date expression is a number
								representing UNIX milliseconds, and part is one of the following date part
								strings.</p>
							<ul>
								<li>"millennium"</li>
								<li>"century"</li>
								<li>"decade": Floor(year / 10)</li>
								<li>"year"</li>
								<li>"quarter": Valid values: 1 to 4.</li>
								<li>"month": Valid values: 1 to 12.</li>
								<li>"day": Valid values: 1 to 31.</li>
								<li>"hour": Valid values: 0 to 23.</li>
								<li>"minute": Valid values: 0 to 59.</li>
								<li>"second": Valid values: 0 to 59.</li>
								<li>"millisecond": Valid values: 0 to 999.</li>
								<li>"week": Valid values: 1 to 53; ceil(day_of_year / 7.0)</li>
								<li>"day_of_year", "doy": Valid values: 1 to 366.</li>
								<li>"day_of_week", "dow": Valid values: 0 to 6.</li>
								<li>"iso_week": Valid values: 1 to 53. Use with "iso_year".</li>
								<li>"iso_year": Use with "iso_week".</li>
								<li>"iso_dow":> Valid values: 1 to 7.</li>
								<li>"timezone": Offset from UTC in seconds.</li>
								<li>"timezone_hour": Hour component of timezone offset.</li>
								<li>"timezone_minute": Minute component of timezone offset. Valid values: 0
									to 59. </li>
							</ul>
						</entry>
					</row>

					<row>
						<entry>
							<p><codeph>DATE_PART_STR(expression, part)</codeph>
							</p>
						</entry>
						<entry>
							<p>Returns date part as an integer. The date expression is a string in a
								supported format, and part is one of the supported date part strings.</p>
						</entry>
					</row>

					<row>
						<entry>
							<p><codeph>DATE_TRUNC_MILLIS(expression, part)</codeph></p>
						</entry>
						<entry>
							<p>Returns UNIX time stamp that has been truncated so that the given date part
								string is the least significant.</p>
						</entry>
					</row>

					<row>
						<entry>
							<p><codeph>DATE_TRUNC_STR(expression, part)</codeph></p>
						</entry>
						<entry>
							<p>Returns ISO 8601 time stamp that has been truncated so that the given date
								part string is the least significant.</p>
						</entry>
					</row>

					<row>
						<entry>
							<p><codeph>DURATION_TO_STR(expression)</codeph></p>
						</entry>
						<entry>
							<p>Converts duration, specified as a floating point number followed by a time unit such as
								1.3ms, 3.25ns, or 7.6666s, to a query timing string. The conversion
								function supports nano- (ns) , micro- ( μs), milli- (ms), and second
								(s) time units.</p>
						</entry>
					</row>

					<row>
						<entry>
							<p><codeph>MILLIS(expression), STR_TO_MILLIS(expression)</codeph></p>
						</entry>
						<entry>
							<p>Returns date that has been converted in a supported format to UNIX
								milliseconds.</p>
						</entry>
					</row>

					<row>
						<entry>
							<p><codeph>MILLIS_TO_STR(expression [, fmt ])</codeph></p>
						</entry>
						<entry>
							<p>Returns the string in the supported format to which the UNIX milliseconds
								has been converted.</p>
						</entry>
					</row>


					<row>
						<entry>
							<p><codeph>MILLIS_TO_UTC(expression [, fmt ])</codeph></p>
						</entry>
						<entry>
							<p>Returns the UTC string to which the UNIX time stamp has been converted in
								the supported format.</p>
						</entry>
					</row>

					<row>
						<entry>
							<p><codeph>MILLIS_TO_ZONE_NAME(expression, tz_name [, fmt ])</codeph></p>
						</entry>
						<entry>
							<p>Converts the UNIX time stamp to a string in the named time zone, and returns
								the string.</p>
						</entry>
					</row>

					<row>
						<entry>
							<p><codeph>NOW_MILLIS()</codeph></p>
						</entry>
						<entry>
							<p>Returns statement time stamp as UNIX milliseconds; does not vary during a
								query.</p>
						</entry>
					</row>

					<row>
						<entry>
							<p><codeph>NOW_STR([ fmt ])</codeph></p>
						</entry>
						<entry>
							<p>Returns statement time stamp as a string in a supported format; does not vary during a
								query. <!--<note>Starting 4.5.1, </note>--></p>
						</entry>
					</row>
					<row>
						<entry>
							<p><codeph>STR_TO_DURATION(expression)</codeph></p>
						</entry>
						<entry>
							<p>Converts a string to duration, which is a floating point number followed by a time unit
								such as s, μs, ms, or ns. The conversion function supports nano-
								(ns) , micro- ( μs), milli- (ms), and second (s) time units.</p>
						</entry>
					</row>
					<row>
						<entry>
							<p><codeph>STR_TO_MILLIS(expression), MILLIS(expression)</codeph></p>
						</entry>
						<entry>
							<p>Converts date in a supported format to UNIX milliseconds.</p>
						</entry>
					</row>

					<row>
						<entry>
							<p><codeph>STR_TO_UTC(expression)</codeph></p>
						</entry>
						<entry>
							<p>Converts the ISO 8601 time stamp to UTC.</p>
						</entry>
					</row>

					<row>
						<entry>
							<p><codeph>STR_TO_ZONE_NAME(expression, tz_name)</codeph></p>
						</entry>
						<entry>
							<p>Converts the supported time stamp string to the named time zone.</p>
						</entry>
					</row>

				</tbody>
			</tgroup>
		</table>








		<section>
			<title>Example</title>
			<p>The following query retrieves purchase information for an e-commerce report. The report
				lists unique customers that purchased something from the company website in the last
				month. This information is used to identify user activity and growth.</p>
			<codeblock>
SELECT distinct count(purchases.customerId)
  FROM purchases
  WHERE STR_TO_MILLIS(purchases.purchasedAt)
    BETWEEN STR_TO_MILLIS("2014-02-01") AND STR_TO_MILLIS("2014-03-01")       
        
      </codeblock>
			<p>Returns:</p>
			<codeblock>
{
   "results": [
     {
       "$1": 3831
     }
   ]
 }               
        
      </codeblock>
		</section>

	</conbody>
</concept>
