<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_8_10" xtrc="/w:document/w:body[1]/w:p[1651]" xml:lang="en-US">
  <title>Object Functions</title>
  <conbody>
        <section><title>OBJECT_ADD()</title><p>This function adds new attributes and values to a
                given object and returns the updated
            object.</p><codeblock>OBJECT_ADD(<varname>object</varname>, <varname>new_attr_key</varname>, <varname>new_attr_value</varname>)</codeblock>
            Note that: <ul id="ul_tb5_z1b_1v">
                <li>This function does not perform key substitution.</li>
                <li>If you add a duplicate attribute (that is, if the key is found), it returns an
                    error or NULL object.</li>
                <li>If <varname>new_attr_key</varname> or <varname>new_attr_value</varname> is
                    MISSING, or if <varname>new_attr_key</varname> is NULL, it returns the
                        <varname>object</varname> unmodified.</li>
                <li>If <varname>object</varname> is not an object or NULL, it returns a NULL value
                    object.</li>
            </ul><codeblock spectitle="Example">SELECT OBJECT_ADD(schedule[0], "day_new", 1) 
FROM `travel-sample` 
WHERE type = "route"  
LIMIT 1;

"results" : [
    {
     "$1": {
         "day": 0,
         "day_new": 1,
         "flight": "AF552",
         "utc": "14:41:00"
         }
   }
]     </codeblock></section>
        <section>
            <title>OBJECT_CONCAT()</title>
            <p>This function concatenates the input objects and returns a new object. It requires a
                minimum of two input objects.
                <codeblock>OBJECT_CONCAT(expr1, expr2 ...)</codeblock></p>
            <codeblock spectitle="Example">SELECT OBJECT_CONCAT({"abc":1},{"def":2},{"fgh":3});
{
    "requestID": "16982e13-2426-424c-ad90-98104e1d50fd",
    "signature":
    { "$1": "object" }
    ,
    "results": [
        {
            "$1": { "abc": 1, "def": 2, "fgh": 3 }
        }
    ],
    "status": "success",
    "metrics":
    { "elapsedTime": "1.362178ms", 
      "executionTime": "1.342968ms", 
      "resultCount": 1, 
      "resultSize": 122 }
}</codeblock>
        </section>
        <section>
            <title>OBJECT_INNER_PAIRS(expression)</title>
            <p>This function returns an array values or name-value pairs which contain the attribute
                name and value pairs of the object, in N1QL collation order of the names. Similar to
                an INNER JOIN operation, this function returns only the documents for which the
                parent has a relationship with a child. This function is particularly useful when
                the argument is an array (such as special_flights[*]) as it avoids reporting missing
                entries for the array. In the example below, one of the elements in the
                special_flights array does not have a codename and the output of the function
                contains only two values and does not include the null entry.</p>
            <codeblock spectitle="Example">SELECT OBJECT_INNER_PAIRS(schedule[0].special_flights[*])
FROM `travel-sample` 
WHERE type = "route" 
    AND destinationairport = "CDG" 
    AND sourceairport = "TLV" 
LIMIT 1;
{
    "requestID": "719f4ae0-f139-4f2f-a3b2-549451073721",
    "signature": {
        "$1": "array"
    },
    "results": [
        {
            "$1": [
                {
                    "name": "codename",
                    <b>"value": [
                        "green",
                        "yellow"
                    ]</b>
                },
                {
                    "name": "flight",
                    "value": [
                        "AI444",
                        "AI333",
                        "AI222"
                    ]
                },
                {
                    "name": "utc",
                    "value": [
                        "4:44:44",
                        "3:33:33",
                        "2:22:22"
                    ]
                }
            ]
        }
    ],
    "status": "success",
    "metrics": {
        "elapsedTime": "544.964782ms",
        "executionTime": "544.912708ms",
        "resultCount": 1,
        "resultSize": 695
    }
}</codeblock>
            <note>Starting Couchbase Server version 4.6.0, the results generated by this function
                use the word "val" for value instead of the N1QL reserved word "value". For example:
                <codeblock>"results": [ 
    { "$1": [ { "name": "key1", <b>"val"</b>: "val1" } ] 
    }
]</codeblock></note>
        </section>
        <section>
            <title>OBJECT_INNER_VALUES(expression)</title>
            <p>This function returns an array of values or name-value pairs which contain the
                attribute values of the object, in N1QL collation order of the corresponding names.
                Similar to an INNER JOIN operation, this function returns only the documents for
                which the parent has a relationship with a child. This function is particularly
                useful when the argument is an array (such as special_flights[*]) as it avoids
                reporting missing entries for the array. In the example below, one of the elements
                in the special_flights array does not have a codename and the output of the function
                contains only two values and does not include the null entry.</p>
            <codeblock spectitle="Example">SELECT OBJECT_INNER_VALUES(schedule[0].special_flights[*]) 
FROM `travel-sample` 
WHERE type = "route" 
    AND destinationairport = "CDG" 
    AND sourceairport = "TLV" 
LIMIT 1;
{
    "requestID": "9a980c9b-dc1d-4911-8a5f-8f250dbb8ba3",
    "signature": {
            "$1": "array"
        },
    "results" : [
	{
            "$1": [
                <b>[
                    "green",
                    "yellow"
                ]</b>,
                [
                    "AI444",
                    "AI333",
                    "AI222"
                ],
                [
                    "4:44:44",
                    "3:33:33",
                    "2:22:22"
                ]
            ]
        }
	],
    "status": "success",
    "metrics": {
            "elapsedTime": "8.29289ms",
            "executionTime": "8.253102ms",
            "resultCount": 1,
            "resultSize": 391
        }
}</codeblock>
        </section>
        <section>
            <title>OBJECT_LENGTH(expression)</title>
            <p>This function returns the number of name-value pairs in the object. You can specify
                an object or an expression that evaluates to an object.</p>
            <codeblock spectitle="Example">SELECT OBJECT_LENGTH(`travel-sample`.schedule[0]) 
FROM `travel-sample` 
WHERE type = "route"  
LIMIT 1;

"results" : [
    {
        "$1": 3
    }
]</codeblock>
        </section>
        <section>
            <title>OBJECT_NAMES(expression)</title>
            <p>This function returns an array containing the attribute names of the object, in N1QL
                collation order.</p>
            <codeblock spectitle="Example">SELECT OBJECT_NAMES(`travel-sample`.schedule[0]) 
FROM `travel-sample` 
WHERE type = "route" 
LIMIT 1;

"results" : [
    {
        "$1": [
            "day",
            "flight",
            "utc"
        ]
    }
]</codeblock>
        </section>
        <section>
            <title>OBJECT_PAIRS(expression)</title>
            <p><i>Alias</i>: <b>OBJECT_OUTER_PAIRS(expression)</b></p>
            <p>This function returns an array of arrays of values which contain the attribute name
                and value pairs of the object, in N1QL collation order of the names. Similar to an
                OUTER JOIN, this function returns every parent document, irrespective of whether the
                document has a child or not. In the example below, one of the elements in the
                special_flights array does not have a codename and the output of the function
                contains three values, including the null entry. </p>
            <codeblock spectitle="Example">SELECT OBJECT_PAIRS(schedule[0].special_flights[*])
FROM `travel-sample` 
WHERE type = "route" 
    AND destinationairport = "CDG" 
    AND sourceairport = "TLV" 
LIMIT 1;
{
    "requestID": "60ec6e75-80a1-4e74-a481-a1e87fafa2e5",
    "signature": {
        "$1": "array"
    },
    "results": [
        {
            "$1": [
                {
                    "name": "codename",
                    <b>"val": [
                        "green",
                        null,
                        "yellow"
                    ]</b>
                },
                {
                    "name": "flight",
                    "val": [
                        "AI444",
                        "AI333",
                        "AI222"
                    ]
                },
                {
                    "name": "utc",
                    "val": [
                        "4:44:44",
                        "3:33:33",
                        "2:22:22"
                    ]
                }
            ]
        }
    ],
    "status": "success",
    "metrics": {
        "elapsedTime": "764.323101ms",
        "executionTime": "764.284035ms",
        "resultCount": 1,
        "resultSize": 725
    }
} </codeblock>
            <note> Starting Couchbase Server version 4.6.0, the results generated by this function
                use the word "val" for value instead of the N1QL reserved word "value". For example:
                <codeblock>"results": [ 
    { "$1": [ { "name": "key1", <b>"val"</b>: "val1" } ] 
    }
]</codeblock></note>
        </section>
        <section>
            <title>OBJECT_PUT()</title>
            <p>This function adds new or updates existing attributes and values to a given object,
                and returns the updated object.
                <codeblock>OBJECT_PUT(<varname>object</varname>, <varname>attr_key</varname>, <varname>attr_value</varname>)</codeblock>
                Note that: <ul id="ul_kck_2db_1v">
                    <li>If <varname>attr_key</varname> is found in the object, it replaces the
                        corresponding attribute value by <varname>attr_value</varname>.</li>
                    <li>If <varname>attr_value</varname> is MISSING, it deletes the corresponding
                        existing key (if any), like<cmdname> object_remove()</cmdname>.</li>
                    <li>If <varname>attr_key</varname> is MISSING, it returns a MISSING value.</li>
                    <li>If <varname>attr_key</varname> is not an object, it returns a NULL
                        value.</li>
                </ul><codeblock spectitle="Example">SELECT OBJECT_PUT(schedule[0], "day", 1)  
FROM `travel-sample` 
WHERE type = "route"  
LIMIT 1;

"results" : [
    {
         "$1": {
         "day": 1,
         "flight": "AF552",
         "utc": "14:41:00"
         }    
    }
]</codeblock></p>
        </section>
        <section>
            <title>OBJECT_RENAME(input_obj, old_field, new_field)</title>
            <dl>
                <dlentry>
                    <dt><b>Description</b></dt>
                    <dd>Renames the field name <codeph>old_field</codeph> to
                            <codeph>new_field</codeph> in the JSON input object
                            <codeph>input_obj</codeph>. </dd>
                </dlentry>
                <dlentry>
                    <dt><b>Arguments</b></dt>
                    <dd>
                        <dl>
                            <dlentry>
                                <dt><b>input_obj</b></dt>
                                <dd>Any JSON object, or N1QL expression that can evaluate to a JSON
                                    object, representing the search object.</dd>
                            </dlentry>
                            <dlentry>
                                <dt><b>old_field</b></dt>
                                <dd>A string, or any valid <xref href="index.dita">expression</xref>
                                    which evaluates to a string, representing the old (original)
                                    field name inside the JSON object
                                    <codeph>input_obj</codeph>.</dd>
                            </dlentry>
                            <dlentry>
                                <dt><b>new_field</b></dt>
                                <dd>A string, or any valid <xref href="index.dita">expression</xref>
                                    which evaluates to a string, representing the new field name to
                                    replace <codeph>old_field</codeph> inside the JSON object
                                        <codeph>input_obj</codeph>.</dd>
                            </dlentry>
                        </dl>
                    </dd>
                </dlentry>
                <dlentry>
                    <dt><b>Return Value</b></dt>
                    <dd>The JSON object <codeph>input_obj</codeph> with the new field name.</dd>
                </dlentry>
                <dlentry>
                    <dt><b>Examples</b></dt>
                    <dd>
                        <codeblock>Changing the metadata field name from "name" to be "new_name"

SELECT object_rename(t, "name", "<b>new_name</b>")
FROM `travel-sample`
WHERE type = "airline"
LIMIT 1;
              
[
    {
        "$1": {
          "callsign": "MILE-AIR",
          "country": "United States",
          "iata": "Q5",
          "icao": "MLA",
          "id": 10,
          "<b>new_name</b>": "40-Mile Air",
          "type": "airline"
        }
    }
]
</codeblock>
                    </dd>
                </dlentry>
            </dl>
        </section>
        <section>
            <title>OBJECT_REMOVE()</title>
            <p>This function removes the specified attribute and corresponding values from the given
                object.
                <codeblock>OBJECT_REMOVE(<varname>object</varname>, <varname>attr_key</varname>)</codeblock>
                Note that: <ul id="ul_uz1_xl4_qz">
                    <li>If the <varname>attr_key</varname> is MISSING, it returns a MISSING
                        value.</li>
                    <li>If the <varname>attr_key</varname> is not an object, it returns a NULL
                        value.</li>
                </ul><codeblock spectitle="Example">SELECT OBJECT_REMOVE(schedule[0], "day")  
FROM `travel-sample` 
WHERE type = "route"  
LIMIT 1;

"results" : [
    {
        "$1": {
            "flight": "AF552",
            "utc": "14:41:00"
            }
    }
]  

SELECT OBJECT_REMOVE( {"abc":1,"def":2,"fgh":3},"def");
{
    "requestID": "ddddde59-e648-4ed7-a772-f25e7a522acc",
    "signature":
    { "$1": "object" }
    ,
    "results": [
        {
            "$1": { "abc": 1, "fgh": 3 }
        }
    ],
    "status": "success",
    "metrics":
    { "elapsedTime": "778.603µs", 
      "executionTime": "750.448µs", 
      "resultCount": 1, 
      "resultSize": 96 }
}     </codeblock></p>
        </section>
        <section>
            <title>OBJECT_REPLACE(input_obj, old_value, new_value)</title>
            <dl>
                <dlentry>
                    <dt><b>Description</b></dt>
                    <dd>Replaces all occurrences of the value <codeph>value_old</codeph> to
                            <codeph>value_new</codeph> in the JSON input object
                            <codeph>input_obj</codeph>. </dd>
                </dlentry>
                <dlentry>
                    <dt><b>Arguments</b></dt>
                    <dd>
                        <dl>
                            <dlentry>
                                <dt><b>input_obj</b></dt>
                                <dd>Any JSON object, or N1QL expression that can evaluate to a JSON
                                    object, representing the search object.</dd>
                            </dlentry>
                            <dlentry>
                                <dt><b>old_value</b></dt>
                                <dd>A string, or any valid <xref href="index.dita">expression</xref>
                                    which evaluates to a string, representing the old (original)
                                    value name inside the JSON object
                                    <codeph>input_obj</codeph>.</dd>
                            </dlentry>
                            <dlentry>
                                <dt><b>new_value</b></dt>
                                <dd>A string, or any valid <xref href="index.dita">expression</xref>
                                    which evaluates to a string, representing the new value name to
                                    replace <codeph>old_value</codeph> inside the JSON object
                                        <codeph>input_obj</codeph>.</dd>
                            </dlentry>
                        </dl>
                    </dd>
                </dlentry>
                <dlentry>
                    <dt><b>Return Value</b></dt>
                    <dd>The JSON object <codeph>input_obj</codeph> with the new value name.</dd>
                </dlentry>
                <dlentry>
                    <dt><b>Examples</b></dt>
                    <dd>
                        <codeblock>Changing the metadata field name from "name" to be "new_name"

SELECT object_rename(t, "airline", "<b>airplane</b>")
FROM `travel-sample`
WHERE type = "airline"
LIMIT 1;
              
[
    {
        "$1": {
          "callsign": "MILE-AIR",
          "country": "United States",
          "iata": "Q5",
          "icao": "MLA",
          "id": 10,
          "new_name": "40-Mile Air",
          "type": "<b>airplane</b>"
        }
    }
]
</codeblock>
                    </dd>
                </dlentry>
            </dl>
        </section>
        <section>
            <title>OBJECT_UNWRAP(expression)</title>
            <p>This function enables you to unwrap an object without knowing the name in the
                name-value pair. It accepts only one argument and if the argument is an object with
                exactly one name-value pair, this function returns the value in the name-value pair.
                If the argument is MISSING, it returns MISSING. For all other cases, it returns
                NULL. </p>
            <codeblock spectitle="Examples">SELECT OBJECT_UNWRAP( {"name": "value"} );
          
"results" : [
    {
        "$1": "value"
    }
]
          
SELECT OBJECT_UNWRAP( {"name": "MISSING" } );
            
"results" : [
    {
        "$1": "MISSING"
    }
]
          
SELECT OBJECT_UNWRAP( { "name": "value", "name2": "value2" } );
           
"results" : [
    {
        "$1": null
    }
]

SELECT OBJECT_UNWRAP("some-string");

"results" : [
    {
        "$1": null
    }
]     </codeblock>
        </section>
        <section>
            <title>OBJECT_VALUES(expression) </title>
            <p><i>Alias</i>: <b>OBJECT_OUTER_VALUES(expression)</b></p>
            <p>This function returns an array of arrays of values which contain the attribute values
                of the object, in N1QL collation order of the corresponding names. Similar to an
                OUTER JOIN, this function returns every parent document, irrespective of whether the
                document has a child or not. In the example below, one of the elements in the
                special_flights array does not have a codename and the output of the function
                contains three values, including the null entry.</p>
            <codeblock spectitle="Example">SELECT OBJECT_VALUES(schedule[0].special_flights[*]) 
FROM `travel-sample` 
WHERE type = "route" 
    AND destinationairport = "CDG" 
    AND sourceairport = "TLV" 
LIMIT 1;
{
    "requestID": "1d3b3170-690c-4603-b9b5-ab01062fb19a",
    "signature": {
            "$1": "array"
        },
    "results" : [
	{
            "$1": [
                <b>[
                    "green",
                    null,
                    "yellow"
                ]</b>,
                [
                    "AI444",
                    "AI333",
                    "AI222"
                ],
                [
                    "4:44:44",
                    "3:33:33",
                    "2:22:22"
                ]
            ]
        }
	],
    "status": "success",
    "metrics": {
            "elapsedTime": "9.376327ms",
            "executionTime": "9.33188ms",
            "resultCount": 1,
            "resultSize": 417
        }
}          
      </codeblock>
        </section>
    </conbody>
</concept>
