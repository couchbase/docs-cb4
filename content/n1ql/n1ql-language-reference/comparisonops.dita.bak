<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_7_2" xml:lang="en-US">
	<title id="title__Toc272567250">Comparison operators</title>
	<conbody>
		<p>Comparison operators allow two expressions to be compared. </p>


		<p>The following table describes each comparison operator and its return values.</p>
		<table>
			<title>Comparison operators</title>
			<tgroup cols="3">
				<colspec colname="1" colwidth="2252*" />
				<colspec colname="2" colwidth="4235*" />
				<colspec colname="3" colwidth="2343*" />
				<thead>
					<row>
						<entry> Operator </entry>
						<entry> Description </entry>
						<entry> Returns </entry>

					</row>
				</thead>
				<tbody>

					<row>
						<entry>
							<p>= </p>
						</entry>
						<entry>
							<p>Equal to. Functionally equivalent to == for compatibility with other languages. </p>
						</entry>
						<entry>
							<p>TRUE or FALSE </p>
						</entry>
					</row>
					<row>
						<entry>
							<p>== </p>
						</entry>
						<entry>
							<p>Equal to. Functionally equivalent to = for compatibility with other languages.</p>
						</entry>
						<entry>
							<p>TRUE or FALSE </p>
						</entry>
					</row>
					<row>
						<entry>
							<p>!= </p>
						</entry>
						<entry>
							<p>Not equal to. Functionally equivalent to &lt;&gt; for compatibility with
								other languages. </p>
						</entry>
						<entry>
							<p>TRUE or FALSE </p>
						</entry>
					</row>
					<row>
						<entry>
							<p>&lt;&gt; </p>
						</entry>
						<entry>
							<p>Not equal to. Functionally equivalent to != for compatibility with other
								languages. </p>
						</entry>
						<entry>
							<p>TRUE or FALSE </p>
						</entry>
					</row>
					<row>
						<entry>
							<p>&gt; </p>
						</entry>
						<entry>
							<p>Greater than. </p>
						</entry>
						<entry>
							<p>TRUE or FALSE </p>
						</entry>
					</row>
					<row>
						<entry>
							<p>&gt;= </p>
						</entry>
						<entry>
							<p>Greater than or equal to. </p>
						</entry>
						<entry>
							<p>TRUE or FALSE </p>
						</entry>
					</row>
					<row>
						<entry>
							<p>&lt; </p>
						</entry>
						<entry>
							<p>Less than. </p>
						</entry>
						<entry>
							<p>TRUE or FALSE </p>
						</entry>
					</row>
					<row>
						<entry>
							<p>&lt;= </p>
						</entry>
						<entry>
							<p>Less than or equal to. </p>
						</entry>
						<entry>
							<p>TRUE or FALSE </p>
						</entry>
					</row>
					<row>
						<entry>
							<p>BETWEEN </p>
						</entry>
						<entry>
							<p>Search criteria for a query where the value is between two values, including
								the end values specified in the range. Values can be numbers, text, or
								dates.</p>
						</entry>
						<entry>
							<p>TRUE or FALSE</p>
						</entry>
					</row>
					<row>
						<entry>
							<p>NOT BETWEEN </p>
						</entry>
						<entry>
							<p>Search criteria for a query where the value is outside the range of two
								values, including the end values specified in the range. Values can be
								numbers, text, or dates.</p>
						</entry>
						<entry>
							<p>TRUE or FALSE</p>
						</entry>
					</row>
					<row>
						<entry>
							<p>LIKE </p>
						</entry>
						<entry>
							<p>Match string with wildcard expression. % for zero or more wildcards, _ to
								match any character at this place in a string.</p>
							<p>The wildcards can be escaped by preceding them with a backslash (\).
								Backslash itself can also be escaped by preceding it with another
								backslash.</p>
						</entry>
						<entry>
							<p>TRUE or FALSE </p>
						</entry>
					</row>
					<row>
						<entry>
							<p>NOT LIKE </p>
						</entry>
						<entry>
							<p>Inverse of LIKE. Return TRUE if string is not similar to given string. </p>
						</entry>
						<entry>
							<p>TRUE or FALSE </p>
						</entry>
					</row>
					<row>
						<entry>
							<p>IS NULL </p>
						</entry>
						<entry>
							<p>Field has value of NULL. </p>
						</entry>
						<entry>
							<p>TRUE or FALSE </p>
						</entry>
					</row>
					<row>
						<entry>
							<p>IS NOT NULL </p>
						</entry>
						<entry>
							<p>Field has value or is missing. </p>
						</entry>
						<entry>
							<p>TRUE or FALSE </p>
						</entry>
					</row>
					<row>
						<entry>
							<p>IS MISSING </p>
						</entry>
						<entry>
							<p>No value for field found. </p>
						</entry>
						<entry>
							<p>TRUE or FALSE </p>
						</entry>
					</row>
					<row>
						<entry>
							<p>IS NOT MISSING </p>
						</entry>
						<entry>
							<p>Value for field found or value is NULL. </p>
						</entry>
						<entry>
							<p>TRUE or FALSE </p>
						</entry>
					</row>
					<row>
						<entry>
							<p>IS VALUED </p>
						</entry>
						<entry>
							<p>Value for field found. Value is neither missing nor NULL </p>
						</entry>
						<entry>
							<p>TRUE or FALSE </p>
						</entry>
					</row>
					<row>
						<entry>
							<p>IS NOT VALUED </p>
						</entry>
						<entry>
							<p>Value for field not found. Value is NULL. </p>
						</entry>
						<entry>
							<p>TRUE or FALSE </p>
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>

		<p>
			<b>Strings</b>
		</p>

		<p>String comparison is done using a raw-byte collation of UTF-8 encoded strings (sometimes
			referred to as binary, C, or memcmp). This collation is case sensitive. Case-insensitive
			comparisons can be performed using the UPPER() or LOWER() functions. See the "String
			Functions" section for more information.</p>

		<p>
			<b>Arrays and Objects</b>
		</p>

		<p>Arrays are compared element-wise. Objects are first compared by length; objects of equal length
			are compared pairwise, with the pairs sorted by name.</p>

		<p>
			<b>NULL and MISSING</b>
		</p>

		<p>The IS/IS NOT NULL/MISSING family of operators lets you specify conditions based on the
			existence (or absence) of attributes in a data set.</p>
		<p> Additionally, these comparison situations produce the following results.</p>
		<ul>
			<li>If either operand in a comparison is MISSING, the result is MISSING. </li>
			<li>If either operand in a comparison is NULL, the result is NULL. </li>
			<li>If either operand is MISSING or NULL, the result is MISSING or NULL.</li>

		</ul>

		<p>Example</p>
		<codeblock>
      
 SELECT fname, children
    FROM tutorial 
       WHERE children IS NULL
    </codeblock>
		<p> Returns: </p>

		<codeblock>
{
  "resultset": [
    {
      "children": null,
      "fname": "Fred"
    }
  ]
}

      
    </codeblock>

		<p>Example</p>

		<codeblock>
    SELECT fname, children
       FROM tutorial 
          WHERE children IS MISSING
    
  </codeblock>

		<p>Returns</p>

		<codeblock>
     
    {
  "resultset": [
    {
      "fname": "Harry"
    },
    {
      "fname": "Jane"
    }
  ]
} 
     
   </codeblock>

	</conbody>
</concept>
