<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_8_12"  xml:lang="en-US">
  <title>Token Functions</title>
  <conbody>
    <p>Tokenization is the process of breaking a stream of text up into words, phrases, symbols, or
      other meaningful elements called tokens. The list of tokens becomes input for further
      processing such as parsing or text mining.  Token functions are not limited to string input
      since they work with generic JSON objects and documents. <note>If any arguments to any of the
        following functions are <systemoutput>MISSING</systemoutput> then the result is also
          <systemoutput>MISSING</systemoutput> (i.e. no result is returned). Similarly, if any of
        the arguments passed to the functions are <codeph>NULL</codeph> or are of the wrong type
        (e.g. an integer instead of a string), then <codeph>NULL</codeph> is returned as the result.
      </note></p>
    <section id="section_kqy_hj4_qz"><title>CONTAINS_TOKEN(input_obj, token_expr [, options
        ])</title><i>Since Couchbase Server 4.6.2</i><dl>
        <dlentry>
          <dt><b>Description</b></dt>
          <dd>Checks whether or not the specified search token <codeph>token_expr</codeph> is a
            substring of the input object <codeph>input_obj</codeph>. </dd>
        </dlentry>
        <dlentry>
          <dt><b>Arguments</b></dt>
          <dd>
            <dl>
              <dlentry>
                <dt><b>input_obj</b></dt>
                <dd>Any JSON object, or any valid <xref href="index.dita">expression</xref> which
                  evaluates to a string, to search within.</dd>
              </dlentry>
              <dlentry>
                <dt><b>token_expr</b></dt>
                <dd>A token string, or any valid <xref href="index.dita">expression</xref> which
                  evaluates to a string, that is being searched for.</dd>
              </dlentry>
              <dlentry>
                <dt><b>options</b></dt>
                <dd>An optional JSON object to control tokenization. Within options:</dd>
                <dd>
                  <ul id="ul_lqy_hj4_qz">
                    <li><i>names</i> is a boolean to include object names (default: true)</li>
                    <li><i>case</i> is either "lower" or "upper" for case folding (default: no
                      change to the original text)</li>
                    <li><i>specials</i> is a boolean to include strings with special characters,
                      such as email addresses and URLs (default: false)</li>
                    <li><i>split</i> is a boolean to split string values into words (default:
                      true)</li>
                    <li><i>trim</i> is a boolean to trim spaces around unsplit string values
                      (default: true)</li>
                  </ul>
                </dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Return Value</b></dt>
          <dd>A boolean, representing whether the search expression exists within the input
            object.</dd>
          <dd>This returns <codeph>true</codeph> if the substring exists within the input string,
            otherwise <codeph>false</codeph> is returned.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Examples</b></dt>
          <dd>
            <codeblock outputclass="language-json">Finding hotels with the word "Inn" in their name

SELECT name
FROM `travel-sample`
WHERE type = "hotel"
AND CONTAINS_TOKEN(name, "inn",{specials":true})
LIMIT 4;
              
[
    {
        "name": "Sportsman Inn"
    },
    {
        "name": "Keefer's Inn"
    },
    {
        "name": "Quality Inn King City Hotel"
    },
    {
        "name": "Premier Inn, Albert Dock"
    }
]
</codeblock>
          </dd>
        </dlentry>
      </dl></section>
    <section id="section_iwm_3j4_qz"><title>CONTAINS_TOKEN_LIKE(input_obj, token_expr [, options
        ])</title><i>Since Couchbase Server 4.6.2</i><dl>
        <dlentry>
          <dt><b>Description</b></dt>
          <dd>Checks whether or not the specified search token <codeph>token_expr</codeph> is a
            substring of the input object <codeph>input_obj</codeph>. </dd>
        </dlentry>
        <dlentry>
          <dt><b>Arguments</b></dt>
          <dd>
            <dl>
              <dlentry>
                <dt><b>input_obj</b></dt>
                <dd>Any JSON object, or any valid <xref href="index.dita">expression</xref> which
                  evaluates to a string, to search within.</dd>
              </dlentry>
              <dlentry>
                <dt><b>token_expr</b></dt>
                <dd>A token string, or any valid <xref href="index.dita">expression</xref> which
                  evaluates to a string, that is being searched for.</dd>
              </dlentry>
              <dlentry>
                <dt><b>options</b></dt>
                <dd>An optional JSON object to control tokenization. Within options:</dd>
                <dd>
                  <ul id="ul_jwm_3j4_qz">
                    <li><i>names</i> is a boolean to include object names (default: true)</li>
                    <li><i>case</i> is either "lower" or "upper" for case folding (default: no
                      change to the original text)</li>
                    <li><i>specials</i> is a boolean to include strings with special characters,
                      such as email addresses and URLs (default: false)</li>
                    <li><i>split</i> is a boolean to split string values into words (default:
                      true)</li>
                    <li><i>trim</i> is a boolean to trim spaces around unsplit string values
                      (default: true)</li>
                  </ul>
                </dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Return Value</b></dt>
          <dd>A boolean, representing whether the search expression exists within the input
            object.</dd>
          <dd>This returns <codeph>true</codeph> if the substring exists within the input string,
            otherwise <codeph>false</codeph> is returned.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Examples</b></dt>
          <dd>
            <codeblock outputclass="language-json">Finding email addresses of UK hotels

SELECT name
FROM `travel-sample`
WHERE type = "hotel"
AND CONTAINS_TOKEN_LIKE(email, "%uk&amp;",{specials":true})
LIMIT 4;
              
[
    {
        "email": "glencoe@syha.org.uk"
    },
    {
        "email": "owner@hillhousellanrhidian.co.uk"
    },
    {
        "email": "julia@number38thegower.co.uk"
    },
    {
        "email": "stay@holiday-harlech.co.uk"
    }
]
</codeblock>
          </dd>
        </dlentry>
      </dl></section>
    <section id="section_fxc_yj4_qz"><title>CONTAINS_TOKEN_REGEXP(input_obj, token_expr [, options
        ])</title><i>Since Couchbase Server 4.6.2</i><dl>
        <dlentry>
          <dt><b>Description</b></dt>
          <dd>Checks whether or not the specified search token <codeph>token_expr</codeph> is a
            substring of the input object <codeph>input_obj</codeph>. </dd>
        </dlentry>
        <dlentry>
          <dt><b>Arguments</b></dt>
          <dd>
            <dl>
              <dlentry>
                <dt><b>input_obj</b></dt>
                <dd>Any JSON object, or any valid <xref href="index.dita">expression</xref> which
                  evaluates to a string, to search within.</dd>
              </dlentry>
              <dlentry>
                <dt><b>token_expr</b></dt>
                <dd>A token string, or any valid <xref href="index.dita">expression</xref> which
                  evaluates to a string, that is being searched for.</dd>
              </dlentry>
              <dlentry>
                <dt><b>options</b></dt>
                <dd>An optional JSON object to control tokenization. Within options:</dd>
                <dd>
                  <ul id="ul_gxc_yj4_qz">
                    <li><i>names</i> is a boolean to include object names (default: true)</li>
                    <li><i>case</i> is either "lower" or "upper" for case folding (default: no
                      change to the original text)</li>
                    <li><i>specials</i> is a boolean to include strings with special characters,
                      such as email addresses and URLs (default: false)</li>
                    <li><i>split</i> is a boolean to split string values into words (default:
                      true)</li>
                    <li><i>trim</i> is a boolean to trim spaces around unsplit string values
                      (default: true)</li>
                  </ul>
                </dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Return Value</b></dt>
          <dd>A boolean, representing whether the search expression exists within the input
            object.</dd>
          <dd>This returns <codeph>true</codeph> if the substring exists within the input string,
            otherwise <codeph>false</codeph> is returned.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Examples</b></dt>
          <dd>
            <codeblock outputclass="language-json">Finding hotels with the word "In" within their name

SELECT name
FROM `travel-sample`
WHERE type = "hotel"
AND CONTAINS_TOKEN_REGEXP(name, "In+.*",{specials":true})
LIMIT 4;
              
[
    {
        "name": "Sportsman Inn"
    },
    {
        "name": "Inveraray Youth Hostel"
    },
    {
        "name": "Inverness Youth Hostel"
    },
    {
        "name": "Indian Cove Campground"
    }
]
</codeblock>
          </dd>
        </dlentry>
      </dl></section>
    <section id="fn-str-title"><title>HAS_TOKEN(input_obj, token_expr [, options ])</title><i>Since
        Couchbase Server 4.6.2</i><p>Alias for <xref href="#topic_8_12/section_kqy_hj4_qz"
          format="dita">CONTAINS_TOKEN()</xref>.</p></section>
    <section id="fn-str-token">
      <title>TOKENS(input_string [, options ])</title>
      <dl>
        <dlentry>
          <dt><b>Description</b></dt>
          <dd>
            <p>This function tokenizes (i.e. breaks up into meaningful segments) the given input
              string based on specified delimiters, and other options. It recursively enumerates all
              tokens in a JSON value and returns an array of values (JSON atomic values) as the
              result.</p>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Arguments</b></dt>
          <dd>
            <dl>
              <dlentry>
                <dt><b>input_string</b></dt>
                <dd>A valid JSON object, this can be anything: constant literal, simple JSON value,
                  JSON key name or the whole document itself.</dd>
                <dd>
                  <p>The following table lists the rules for each JSON type: <table frame="all"
                      rowsep="1" colsep="1" id="table_gy4_jhg_gy">
                      <tgroup cols="2">
                        <colspec colname="c1" colnum="1" colwidth="1.0*"/>
                        <colspec colname="c2" colnum="2" colwidth="1.0*"/>
                        <thead>
                          <row>
                            <entry>JSON Type</entry>
                            <entry>Return Value</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>MISSING</entry>
                            <entry>[]</entry>
                          </row>
                          <row>
                            <entry>NULL</entry>
                            <entry>[NULL]</entry>
                          </row>
                          <row>
                            <entry>false</entry>
                            <entry>[false]</entry>
                          </row>
                          <row>
                            <entry>true</entry>
                            <entry>[true]</entry>
                          </row>
                          <row>
                            <entry>number</entry>
                            <entry>[number]</entry>
                          </row>
                          <row>
                            <entry>string</entry>
                            <entry>SPLIT(string)</entry>
                          </row>
                          <row>
                            <entry>array</entry>
                            <entry>FLATTEN(TOKENS(element) for each element in
                                array<p>(Concatenation of element tokens)</p></entry>
                          </row>
                          <row>
                            <entry>object</entry>
                            <entry>For each name-value pair, name+TOKENS(value)</entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table></p>
                </dd>
              </dlentry>
              <dlentry>
                <dt><b>options</b></dt>
                <dd>A JSON object indicating the options passed to the <codeph>TOKENS()</codeph>
                  function. Options can take the following options, and each invocation of
                    <codeph>TOKENS()</codeph> can choose one or more of the options:<ul
                    id="ul_hy4_jhg_gy">
                    <li><b>{"name": true}</b>: <b>Optional</b>. Valid values are
                        <codeph>true</codeph> or <codeph>false</codeph>. By default, this is set to
                      true and <codeph>TOKENS()</codeph> will include field names. You can choose to
                      not include field names by setting this option to <codeph>false</codeph>.</li>
                    <li><b>{"case":"lower"}</b>: <b>Optional</b>. Valid values are <userinput>lower
                      </userinput>or <userinput>upper</userinput>. Default is neither — return the
                      case in the data. Use this option to specify the case sensitivity.</li>
                    <li><b>{"specials": true}</b>:<b>Optional</b>. Use this option to preserve
                      strings with specials characters, such as email addresses, URLs, and
                      hyphenated phone numbers. The default value is
                        <codeph>false</codeph>.<note>The <codeph>specials</codeph> options preserves
                        special characters except at the end of a word.</note></li>
                  </ul></dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry>
          <dt><b>Return Value</b></dt>
          <dd>An array of strings containing all of the tokens obtained from the input string.</dd>
        </dlentry>
        <dlentry>
          <dt><b>Examples</b></dt>
          <dd>
            <codeblock outputclass="language-json">SELECT TOKENS( ['jim@abc.com, kim@abc.com, http://abc.com/, 408-555-1212'],
    { 'specials': false });

[
    {
        "$1": [
            "kim",
            "408",
            "com",
            "abc",
            "jim",
            "1212",
            "555",
            "http"
        ]
    }
]

SELECT TOKENS(['jim@abc.com, kim@abc.com, http://abc.com/, 408-555-1212'],
	{ 'specials': true });

[
    {
        "$1": [
            "jim",
            "408",
            "1212",
            "jim@abc.com",
            "http",
            "abc",
            "408-555-1212",
            "kim@abc.com",
            "kim",
            "555",
            "http://abc.com",
            "com"
        ]
    }
]</codeblock>
            <p>In the following example, <codeph>TOKENS()</codeph> converts all of the URL data into
              UPPER case and also adds the full URL to the delimited words.</p>
            <codeblock outputclass="language-json">SELECT TOKENS(url) AS defaulttoken, 
	TOKENS(url, {"specials":true, "case":"UPPER"}) AS specialtoken
	FROM `travel-sample` h WHERE h.type = 'hotel'
	LIMIT 1;
	
[
    {
        "defaulttoken": [
            "uk",
            "www",
            "http",
            "yha",
            "org"
        ],
        "specialtoken": [
            "ORG",
            "WWW",
            "HTTP://WWW.YHA.ORG.UK",
            "YHA",
            "UK",
            "HTTP"
        ]
    }
]</codeblock>
            <p>You can also use <codeph>{"case":"lower"}</codeph> or
                <codeph>{"case":"upper"}</codeph> to have case sensitive search. Index creation and
              querying can use this and other parameters in combination. These parameters should be
              passed within the query predicates as well. The parameters and values have to match
              exactly for N1QL to pick up and use the index correctly. The following example shows
              how you can create an index and use it your application.</p>
            <codeblock outputclass="language-sql">CREATE INDEX idx_url_upper_special on `travel-sample`(
    DISTINCT ARRAY v for v in 
        tokens(url, {"specials":true, "case":"UPPER"}) 
    END ) where type = 'hotel';</codeblock>
            <codeblock outputclass="language-json">SELECT name, address, url
    FROM `travel-sample` h
    WHERE ANY  v in tokens(url, {"specials":true, "case":"UPPER"})
    SATISFIES v = "HTTP://WWW.YHA.ORG.UK" 
    END  
    AND h.type = 'hotel' ;

{
    "results": [
        {
            "address": "Capstone Road, ME7 3JE",
            "name": "Medway Youth Hostel",
            "url": "http://www.yha.org.uk"
        }
    ]
}</codeblock>
          </dd>
        </dlentry>
      </dl>
    </section>
  </conbody></concept>
