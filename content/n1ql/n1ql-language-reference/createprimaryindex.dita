<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="Create_Primary_Index">
	<title>CREATE PRIMARY INDEX</title>
	<body>
		<p>The <codeph>CREATE PRIMARY INDEX</codeph> statement allows you to create a primary index.
			Primary indexes contain a full set of keys in a given keyspace. Primary indexes are
			optional and are only required for running ad hoc queries on a keyspace that is not
			supported by a secondary index.</p>
		<p><codeph>CREATE PRIMARY INDEX</codeph> is by default a synchronous operation. The <codeph>CREATE
				PRIMARY INDEX</codeph> statement blocks until the operation finishes. Index building
			starts by creating a task that is queued for index build. After this phase, if you lose
			connectivity, the index build operation continues in the background. You can also run
			index creation asynchronously by using the <codeph>defer_build</codeph> clause. In the
			asynchronous mode, <codeph>CREATE PRIMARY INDEX</codeph> starts a task to create the
			primary index and returns as soon as the task is queued for execution. The full index
			creation operation happens in the background.</p>
		<p>Both GSI and view indexers provide a status field and mark index status pending. With the
			GSI indexer, index status continues to report <codeph>pending</codeph>. This status field
			and other index metadata can be queried by using <codeph>system:indexes</codeph>.</p>
		<p><b>RBAC Privileges</b></p>
		<p>Users executing the <codeph>CREATE PRIMARY INDEX</codeph> statement must have the <i>Query
				Manage Index</i> privilege granted on the keyspace. For more details about user
			roles, see <xref href="../../security/security-authorization.dita#authorization"/>.</p>
		<note type="important">
			<p>Indexes cannot be built concurrently on a given keyspace unless the
					<codeph>defer_build</codeph> option in the <codeph>CREATE PRIMARY INDEX</codeph>
				statement is used in combination with the <codeph>BUILD INDEX</codeph> statement.
				The following error is reported if a second index creation operation is kicked off
				before the completion of the ongoing index creation.</p>
			<codeblock>"errors": {"code": 12014, 
   "msg": "error: Build Already In Progress. Bucket BUCKET_NAME. Index INDEX_NAME. Index state: pending"}</codeblock>
			<p>You can create multiple primary indexes on a bucket for better index availability and
				place them on separate nodes by using the <codeph>nodes</codeph> clause.</p>
		</note>
		<section id="section_lvs_grl_1bb">
			<title>Syntax</title>
		</section>
		<codeblock>CREATE PRIMARY INDEX [<varname>index_name</varname>]
    ON <varname>named_keyspace_ref</varname>
    [ USING GSI | USING VIEW ]
    [ WITH {"nodes": ["<varname>node_name</varname>"], "defer_build":true|false}, "num_replica": <varname>num_replica_num</varname> } ];</codeblock>
		<p>
			<dl>
				<dlentry>
					<dt>Arguments</dt>
					<dd>
						<dl>
							<dlentry>
								<dt>index_name</dt>
								<dd>[Optional]  The unique name that identifies the index. If a name
									is not specified, the default name of <codeph>#primary</codeph>
									is applied. </dd>
								<dd>Valid GSI index names can contain any of the following
									characters: A-Z a-z 0-9 # _, and must start with a letter [A-Z
									a-z].</dd>
								<dd>The minimum length of an index name is 1 character and there is
									no maximum length set for an index name.</dd>
								<dd>When querying, if the index name contains a '#' or '_'
									character, you must enclose the index name within backticks. </dd>
								<dd>
									<note type="important">Unnamed primary indexes are dropped by
										using the <codeph>DROP PRIMARY INDEX</codeph> statement, and
										named primary indexes are dropped by using the <codeph>DROP
											INDEX</codeph> statement.</note>
								</dd>
							</dlentry>
						</dl>
						<dl>
							<dlentry>
								<dt>named_keyspace_ref</dt>
								<dd>Identifier that refers to the keyspace name. Specifies the
									keyspace as source for which the index needs to be created. You
									can add an optional namespace name to the keyspace name in this
									way:<codeblock>namespace-name : keyspace-name</codeblock></dd>
								<dd>For example, <codeph>main:customer</codeph> indicates the
										<codeph>customer</codeph> keyspace in the main namespace. If
									the namespace name is omitted, the default namespace in the
									current session is used.</dd>
							</dlentry>
						</dl>
						<dl>
							<dlentry>
								<dt>USING GSI | USING VIEW</dt>
								<dd>The USING clause specifies the index type to use. Primary
									indexes can be created as global secondary indexes
										(<codeph>GSI</codeph>) or views (<codeph>VIEW</codeph>). If
									the USING clause is not specified, by default
										<codeph>GSI</codeph> is used as the indexer.</dd>
							</dlentry>
						</dl>
						<dl>
							<dlentry>
								<dt>WITH options</dt>
								<dd>The <codeph>WITH</codeph> clause specifies additional options for the
										<codeph>GSI</codeph> type primary indexes.<dl>
										<dlentry>
											<dt>"nodes":["node name"] </dt>
											<dd>A single primary index of type <codeph>GSI</codeph>
												can only be placed on a single node that runs the
												indexing service. The <codeph>nodes</codeph> option
												allows you to specify the node that the index is
												placed on. If <codeph>nodes</codeph> is not
												specified, one of the nodes running the index
												service is randomly selected to host the index. </dd>
											<dd>Multiple nodes can be specified to distribute
												replicas of an index amongst multiple nodes.<p>If
												specifying both <varname>nodes</varname> and
												<varname>num_replica</varname>, the number of
												nodes in the array must be one greater than the
												specified number of replicas otherwise the index
												creation will fail.</p><note type="important">The
												node names passed to the <codeph>nodes</codeph>
												parameter must include the cluster administration
												port (by default 8091). For example <codeph>WITH
												{"nodes": ["192.0.2.0:<b>8091</b>"]}</codeph>
												instead of <codeph>WITH {"nodes":
												["192.0.2.0"]}</codeph>.</note></dd>
										</dlentry>
									</dl><dl>
										<dlentry>
											<dt>"defer_build":true|false</dt>
											<dd>When <codeph>defer_build</codeph> is set to true,
												the <codeph>CREATE PRIMARY INDEX</codeph> operation
												queues the task for building the index but
												immediately pauses the building of the index of type
												<codeph>GSI</codeph>. Index building requires an
												expensive scan operation. Deferring building of the
												index with multiple indexes can optimize the
												expensive scan operation. You can defer building
												multiple indexes and, using <codeph>BUILD
												INDEX</codeph> statement, multiple indexes to be
												built efficiently with one efficient scan of
												keyspace data.</dd>
											<dd>When <codeph>defer_build</codeph> is set to
												<codeph>false</codeph>, the <codeph>CREATE PRIMARY
												INDEX</codeph> operation queues the task for
												building the index and immediately kicks off the
												building of the index of type
												<codeph>GSI</codeph>.</dd>
										</dlentry>
									</dl><dl>
										<dlentry>
											<dt>"num_replica": num_replica_num</dt>
											<dd><varname>num_replica</varname> specifies the number
												of replicas of the index to create. </dd>
											<dd>The indexer will automatically distribute these
												indexes amongst index nodes in the cluster for
												load-balancing and high availability purposes. When
												creating an index with replicas in this manner, the
												indexer will attempt to distribute the replicas
												based on the server groups in use in the cluster
												where possible. </dd>
											<dd>If <varname>num_replica_num</varname> is not less
												than the number of index nodes in the cluster, then
												the index creation will fail.</dd>
											<dd>
												<note type="attention">We recommend that you do not
												create (or drop) secondary indexes when any node
												with a secondary index role is down as this may
												result in duplicate index names. </note>
											</dd>
										</dlentry>
									</dl></dd>
							</dlentry>
						</dl>
					</dd>
				</dlentry>
			</dl>
		</p>
		<section>
			<b>Example 1</b>: Create a primary index on the travel-sample
				keyspace.<codeblock>CREATE PRIMARY INDEX `travel-sample-primary-index` ON `travel-sample` USING GSI;</codeblock><p>After
				the index creation statement comes back, <codeph>system:indexes</codeph> is queried
				for the status of the
				index.</p><codeblock>SELECT * FROM system:indexes WHERE name="travel-sample-primary-index";</codeblock><b>Example
				2</b>: Create the same primary index using the <codeph>defer_build</codeph> option
			coupled with the <codeph>BUILD INDEX</codeph> statement.
			<codeblock>CREATE PRIMARY INDEX `travel-sample-primary-index` ON `travel-sample` USING GSI 
    WITH {"defer_build":true};

SELECT * FROM system:indexes WHERE name="travel-sample-primary-index";	</codeblock>
			With the <codeph>defer_build</codeph> option enabled, the output from
				<codeph>system:indexes</codeph> shows the
				<codeph>travel-sample-primary-index</codeph> in the pending state (<codeph>"state":
				"pending"</codeph>). <codeph>BUILD INDEX</codeph> can be used to kick off the
			deferred build on the primary
			index:<codeblock>BUILD INDEX ON `travel-sample`(`travel-sample-primary-index`) USING GSI;

SELECT * FROM system:indexes WHERE name="travel-sample-primary-index";</codeblock></section>
		<section><title>Primary scan timeout</title>
			<p>For a primary index scan on any keyspace size, the query engine guarantees that the client is
				not exposed to scan timeout if the indexer throws a scan timeout after it has
				returned a greater than zero sized subset of primary keys. To complete the scan, the
				query engine performs successive scans of the primary index until all the primary
				keys have been returned. It is possible that the indexer throws scan timeout without
				returning any primary keys, and in this event the query engine returns scan timeout
				to the client. </p>
			<p>For example, if the indexer cannot find a snapshot that satisfies the consistency
				guarantee of the query within the timeout limit, it will timeout without returning
				any primary keys. </p>
			<p>For secondary index scans, the query engine does not handle scan timeout, and returns index
				scan timeout error to the client. You can handle scan timeout on a secondary index
				by increasing the indexer timeout setting (See <xref
					href="../../settings/query-settings.dita#topic_wk1_5v3_t5">Query
				Settings</xref>) or preferably by defining and using a more selective index. </p>
		</section>

	</body>
</topic>
