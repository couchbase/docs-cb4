<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="whats-new">
  <title>What's New?</title>
  <body> 
    <p>Couchbase Server is a comprehensive, general purpose database that supports broad set of web, mobile and IoT applications. This page lists the new features and enhancements in the 4.5.x series of Couchbase Server.</p>
    <section><title>Release 4.5.1</title>
      <p>Couchbase Server version 4.5.1 includes several N1QL improvements in the following
        categories: <ul id="ul_hpd_4pm_lx">
          <li><xref href="#whats-new/451-high-perf-data-access-query" format="dita">Higher Performance Data Access and Query</xref></li>
          <li><xref href="#whats-new/451-transition-from-rdbms-nosql" format="dita">Simplified Transitioning from RDBMS to NoSQL</xref></li>
        </ul> See <xref href="../release-notes/relnotes.dita#topic_gbk_tyh_t5/release-451">Release Notes 4.5.1</xref> for
        information on the changes in behavior and the fixed and known issues for this release.</p>
      <p outputclass="h3" id="451-high-perf-data-access-query"><b>Higher Performance Data Access and Query</b></p>  
        <dl>
          <dlentry>
            <dt>New N1QL "pretty" Setting </dt>
            <dd>The new query parameter, <parmname>pretty</parmname>, enables or disables the pretty formatting of query results. Setting it to <userinput>false</userinput> disables pretty formatting of the query results and removes all occurrences of white space characters from the query results. This reduces the number of bytes transferred to the client applications and improves the query response time. The performance benefits are significantly visible when working with large result sets. For more information, see <xref href="../n1ql/n1ql-rest-api/index.dita"></xref>.</dd>
          </dlentry>
          <dlentry>
            <dt>Non-blocking DISTINCT Operator with Streaming Capability</dt>
            <dd>Typically, DISTINCT operator used in queries is blocking in nature. N1QL enhances
            the DISTINCT operator to stream query output while it is still processing the input. It
            preserves the order of input and consequently retains and leverages the index-order of
            the documents. The operator processing uses less memory resources, making it more
            efficient. This enhancement significantly improves the response times seen by
            applications as they start receiving query results as soon as the results are available,
            while N1QL is still processing subsequent results. <p>This optimization is applicable to
              usage of DISTINCT in various scenarios such as query projections, UNION queries, and
              part of INTERSECT, INTERSECT ALL, EXCEPT, EXCEPT ALL etc. <!--For more information, see
                <xref href="https://issues.couchbase.com/browse/MB-19953" format="html"
                scope="external">MB-19953</xref>.--></p></dd>
          </dlentry>
          <dlentry>
            <dt>Efficient Memory Usage for Processing Projections</dt>
            <dd>Processing projections in queries is a memory intensive operation, especially when
            using the wildcard character *. N1QL has optimized the memory allocation and memory
            usage algorithm to consume considerably less memory and thus process data more
            efficiently. <!--For more information, see <xref
              href="https://issues.couchbase.com/browse/MB-20392" format="html" scope="external"
              >MB-20392</xref>.--> </dd>
          </dlentry>
          <dlentry>
            <dt>Optimization for Processing IN Operator with Parameters</dt>
            <dd>N1QL has optimized and improved the usage of available secondary indexes when the IN
            clause is used with parameters. It passes precise spans to the indexer to efficiently
            lookup the required from the indexer. For example, the following query shows the
            optimized plan to efficiently lookup the required data:
            <codeblock>EXPLAIN SELECT x FROM default WHERE x in ["5", $1]; </codeblock>
            </dd>
          </dlentry>
          </dl>
      
      <p outputclass="h3" id="451-transition-from-rdbms-nosql"><b>Simplified Transitioning from RDBMS to NoSQL</b></p>
        <dl>
          <dlentry>
            <dt>New String Function SUFFIXES() for Efficient Pattern Matching</dt>
            <dd>The new function SUFFIXES() produces all possible suffix substrings of a given
            string. For example, <codeph>SUFFIXES(“N1QL”)</codeph> produces the following array of
            substrings: <codeph>SUFFIXES("N1QL") = [ "N1QL", "1QL", "QL", "L" ]</codeph>. <p>While
              the core functionality is simple, it is immensely helpful in improving the performance
              of pattern matching with LIKE "%substring%" queries. See <xref
                href="../n1ql/n1ql-language-reference/stringfun.dita#topic_8_12/fn-str-suffixes"
                >SUFFIXES()</xref> for more information.  </p></dd>
          </dlentry>
          <dlentry>
            <dt>Enhanced UPDATE Statement to Work with Nested Arrays</dt>
            <dd>The UPDATE statement has been improved to SET nested array elements. The FOR clause
            is enhanced to evaluate functions and expressions, and the new syntax supports multiple
            nested FOR expressions to access and update fields in nested arrays. Additional array
            levels are supported by chaining the FOR clauses. <!--<codeblock>Syntax</codeblock>-->
            <codeblock spectitle="Example">UPDATE default
SET i.subitems = ( ARRAY OBJECT_ADD(s, 'new', 'new_value' )
  FOR s IN i.subitems END ) 
    FOR s IN ARRAY_FLATTEN(ARRAY i.subitems 
      FOR i IN items END, 1) END;</codeblock><!-- For more information, see --></dd>
          </dlentry>
          <dlentry>
            <dt>New Array Function ARRAY_INTERSECT()</dt>
            <dd>The ARRAY_INTERSECT() function takes two or more arrays as parameters and returns
            the intersection of the input arrays as the result, that is, the array containing values
            that are present in all the input arrays. It returns an empty array if there are no
            common array elements. For more information, see <xref
              href="../n1ql/n1ql-language-reference/arrayfun.dita#topic_8_2/fn-array-intersect"
              >ARRAY_INTERSECT()</xref>.</dd>
          </dlentry>
          <dlentry>
            <dt>Simplified Dynamic Object Construction</dt>
            <dd>N1QL simplifies dynamic object creation in the queries. <ul id="ul_z12_cz5_lx">
              <li>When constructing objects in a N1QL query, the names of fields in the name-value
                pairs can be dynamically generated. Starting from release 4.5.1, both the names and
                values can be arbitrary expressions. If a name does not evaluate to a string, the
                result of the object construction is NULL. For example:
                <codeblock>SELECT { UPPER("a") || "_key" : 1 + 2 } AS myobj;
[
  {
    "myobj": {
        "A_key": 3
        }
  }
]          </codeblock></li>
              <li>When constructing objects in a N1QL query, the names of fields in name-value pairs
                is made optional starting release 4.5.1. For example, the following query is valid
                in 4.5.1 and implicitly assigns names "type" and "name" for respective values:
                <codeblock>SELECT {type, name} AS myobj FROM `travel-sample` LIMIT 1;
[
  {
   "myobj": 
     {
       "type": "airport"
       "name": "airport_123"
     }
  }
  ]</codeblock></li>
            </ul> For more information, see <xref
              href="../n1ql/n1ql-language-reference/constructionops.dita#topic_7_4"/>.</dd>
          </dlentry>
          </dl> 
    </section>
    <section><title>Release 4.5.0</title>
      <p>With version 4.5, Couchbase Server advances in the following major categories: <ul>
          <li><xref href="#whats-new/high-perf-data-access-query" format="dita">Higher performance
              data access and query</xref></li>
          <li><xref href="#whats-new/transition-from-rdbms-nosql" format="dita">Simplified
              transitioning from RDBMS to NoSQL</xref></li>
          <li><xref href="#whats-new/mgmt-and-security" format="dita">Enhanced management &amp;
              security controls on your data</xref></li>
        </ul> See <xref href="../release-notes/relnotes.dita#topic_gbk_tyh_t5/release-450"/> for
        information on the changes in behavior and the fixed and known issues for this release.</p>
    <p id="high-perf-data-access-query" outputclass="h3"><b>Higher Performance Data Access &amp; Query</b></p>
      <p>Higher performance directly translates to better user experience and significant cost savings as each added node delivers better throughput. Couchbase Server version 4.5 enables performance, in some cases by an order of magnitude, with enhancements to core data operations, indexing and query execution. These, along with optimizations added in version 4.1 such as prepared execution of N1QL statements and covering indexes, give querying and indexing a significant boost. </p>
      <dl>
        <dlentry>
          <dt>Fast Partial Reads and Writes to JSON Documents</dt>
          <dd>With the extended sub-document APIs for data service developers can operate on parts
            of a document without having to send the entire document back and forth between a client
            and server. This results in a significant performance gain and reduced network overhead
            with large documents. For more information, see <xref
              href="../sdk/subdocument-operations.dita#subdoc-operations"/>.</dd>
        </dlentry>
        <dlentry>
          <dt>Memory-Optimized Global Indexes</dt>
          <dd>Version 4 of Couchbase Server introduced <xref
              href="../architecture/global-secondary-indexes.dita"/> which are <xref
              href="../architecture/services-archi-multi-dimensional-scaling.dita">independently
              partitioned</xref> away from data for faster N1QL queries. Couchbase Server 4.5
            provides additional tuning for index processing and index scans. The new
            memory-optimized indexing provide an order of magnitude improvement to query latencies
            and fresher index under heavy mutation rates (INSERT/UPDATE/DELETE). Unlike other
            databases, Couchbase Server global secondary indexes are built to isolate the impact of
            indexing on performance of mutations, data ingest, and bulk data modifications using
            N1QL INSERT, UPDATE, DELETE and MERGE statements. Couchbase Server 4.5 memory-optimized
            indexes further enhances index processing and isolation of impact of indexing on the
            data ingest and query workloads.<p>You can enable the new memory-optimized global
              secondary indexes through the index settings under the <uicontrol>Settings</uicontrol>
              tab in the Couchbase Server Web Console. For more information, see <xref
                href="../indexes/gsi-for-n1ql.dita#concept_bb5_khb_ys/memopt-gsi"/>.</p></dd></dlentry>
        <dlentry>
          <dt>Array Indexing for Nested Data Structured in JSON Documents</dt>
            <dd>N1QL provides a considerable number of "verbs" to process embedded structures and
            arrays such as <codeph>UNNEST</codeph> and <codeph>ANY</codeph>/<codeph>EVERY</codeph>
            operators. With the new array indexing feature developers can optimize the execution of
            queries. The new index can optimize queries that are looking for specific array
            elements and can result in multiple orders of magnitude improvement on query latency and
            throughput. Arrays are indexed using the new ARRAY keyword in <xref
              href="../n1ql/n1ql-language-reference/createindex.dita">CREATE INDEX</xref>
            statement in N1QL. For more information, see <xref
              href="../n1ql/n1ql-language-reference/indexing-arrays.dita"/>. </dd>
        </dlentry>
       <dlentry>
          <dt>Faster Read-Your-Own-Write (RYOW) Consistency with N1QL Queries</dt>
         <dd>Tunable consistency for N1QL and MapReduce queries helps improve the query performance. Using the previous versions, you could query data using eventual or strict consistency flag. RYOW consistency provides the optimization required by applications that have to deal with high mutation rates but cannot compromise on consistency guarantees. 
           With strictly consistent queries, the staleness parameter is set to false per query, which ensures that the query uses the request timestamp token to generate the results. With version 4.5, you can choose to get consistency aligned to the timestamp of your last update which result in lower latency response times for your queries. See <xref href="../developer-guide/query-consistency.dita"></xref> for details.</dd>
        </dlentry>
        <dlentry>
          <dt>Improved Index IO Performance with Circular Writes</dt>
          <dd>Global Secondary Indexes (GSI) use the new ForestDB engine for index storage. ForestDB uses an append-only write architecture that requires frequent full compactions to clean up orphaned pages in the index file. With version 4.5, ForestDB introduces circular writes as a new write mode for standard global secondary indexes. Circular write mode reduces the IO bandwidth demands for indexes and reduces the requirement to run frequent full compaction operations. See <xref
              href="../architecture/storage-architecture.dita#concept_x13_xlj_vs/circular-reuse"/>
            for more information. </dd>
        </dlentry>
        <dlentry>
          <dt>Index JOINs in N1QL</dt>
          <dd>With version 4.5, N1QL introduces an extended <codeph>JOIN</codeph> syntax for added
            flexibility in JOINs. The new <codeph>JOIN ON KEY</codeph> … <codeph>FOR</codeph>
            keyword allows developers to specify JOIN operations that can use the left or the right
            keyspace for the JOIN. With the extended syntax, N1QL also makes better use of indexes
            to perform the JOIN operation faster across the two sides, and substantially lowers JOIN
            latencies. For more information, see <xref
              href="../n1ql/n1ql-language-reference/from.dita#concept_rnt_zfk_np/index-join"
            >Index Joins</xref>.</dd>
        </dlentry>
        </dl>
    <p id="transition-from-rdbms-nosql" outputclass="h3"><b>Simplified Transitioning from RDBMS to NoSQL</b></p>
      <p>The query language N1QL, introduced in Couchbase Server 4.0, enabled developers and admins to use their SQL skills to access and query JSON data. Couchbase Server 4.5 builds on N1QL and adds new features that make it even easier to introduce NoSQL into an existing architecture, and give developers and admins greater confidence in making the transition. </p>
      <dl>
        <dlentry>
          <dt>Integrated Query Workbench</dt>
          <dd>Couchbase Server 4.5 also provides a simple and visual way to develop and design
            queries with auto-complete for your N1QL statements. Query Workbench also allows the ad-hoc execution of queries directly from the Web console. Query results are displayed in JSON, table or 
            tree formats and can be saved. To use the new integrated Query Workbench, switch to the
            new <uicontrol>Query</uicontrol> tab in the Couchbase Server Web Console. For more
            information, see <xref href="../tools/query-workbench.dita"/>.</dd>
        </dlentry>
        <dlentry>
          <dt>Auto Schema Discovery</dt>
          <dd>The new "bucket analyzer" and the new <xref href="../n1ql/n1ql-language-reference/infer.dita">INFER</xref> N1QL command, can peek into your bucket data to infer schemas by sampling a portion of your document data. Schema discovery tools simplify detecting document and data types, type drifts and data distribution for developers and admins. For more information, see the <xref href="../n1ql/n1ql-language-reference/infer.dita"/> command reference.</dd>
        </dlentry>
        <dlentry>
          <dt>Enhanced Query Monitoring</dt>
          <dd>In Couchbase Server 4.5, N1QL adds several new keyspaces under the
              "<filepath>system:</filepath>" namespace. The new keyspaces allow monitoring "active requests", "completed requests", system information and more. For a full list of new system keyspaces added to N1QL, see <xref href="../tools/query-monitoring.dita"/>. </dd>
        </dlentry>
<dlentry>
          <dt>Advanced Command-line Tooling for Query</dt>
          <dd>In previous releases, the <cmdname>cbq</cmdname> command line tool has been the
            central point for executing N1QL queries. Command line access to N1QL has been greatly
            improved in this release, and the new command line access provides smart connection
            management and full scriptability with version 4.5. For more information, see <xref href="../tools/cbq-shell.dita"></xref>.</dd>
        </dlentry>
        <dlentry>
          <dt>Enhanced N1QL Functions</dt>
          <dd>N1QL enhancements such as array insert function, object add, put, and remove
            functions, and more. <ul>
              <li>Array insert function to insert a value into a specific position in an array and
                return the new array. See <xref href="../n1ql/n1ql-language-reference/arrayfun.dita"
                /> for details.</li>
              <li>New functions to add, put, and remove objects. See <xref
                  href="../n1ql/n1ql-language-reference/objectfun.dita"/> for details.</li>
              <li>Duration to string conversion functions: Durations have been used consistently in
                the body of the results document (for example, elapsedTime) but now are also used in
                some keyspaces such as active_requests and completed_requests. The conversion
                functions support nano- (ns) , micro- ( μs), milli- (ms) and second (s) time units.
                See <xref href="../n1ql/n1ql-language-reference/datefun.dita"/> for details.</li>
            </ul></dd>
        </dlentry>
        <dlentry>
          <dt>Integrated Full Text Search (FTS) and new Full Text Search Service [Developer Preview]</dt>
          <dd>Full Text Search (FTS) enables you to create, manage, and query full text indexes on
            JSON documents stored in a Couchbase bucket. FTS provides a language-aware manner of
            searching with relevance ranking (scoring) for results. <note>The Full Text Search
              feature is still considered experimental and the UI or the functionality may change.
              The <xref href="../fts/fts-whats-new.dita#topic_jzy_p5v_vv">What's New?</xref> page
              lists the FTS features added in this release.</note><p>For more information on
              search service and full-text search, see <xref href="../fts/full-text-intro.dita"
              />.</p></dd> </dlentry>
      </dl>
    
    <p id="mgmt-and-security" outputclass="h3"><b>Enhanced Management &amp; Security Controls</b></p>
      
      <p>Taming big data can be a challenge. With 4.5, administering large cluster with over 100 nodes gets much more robust. For larger datasets, Couchbase Server brings in new disaster recovery capabilities that minimizes the windows of data loss and unavailability. The new enterprise backup and restore capability can operate on the same data with much higher performance. </p>
      <p>With mission critical applications deployed on Couchbase governance becomes an increasingly critical function. In addition to encryption and auditing capabilities available in previous versions, Couchbase Server 4.5 brings a great deal of new roles based controls for administrators to enhance simplified governance.</p>
      
<dl> 
  <dlentry>
    <dt>Docker in Production</dt>
    <dd>Docker provides high performance container technology for agile and portable deployments.
            With Couchbase Server 4.5, Couchbase Server now supports deploying Couchbase Server in
            production with Docker containers. See <xref
              href="../install/getting-started-docker.dita#topic_mln_twc_3w"/> and <xref
              href="../install/plan-for-production.dita#topic_tqm_rcx_fw"/> for more
            information.</dd>
  </dlentry>
  <dlentry>
          <dt>X509 Certificates</dt>
          <dd>With Couchbase Server 4.5, you can now use X.509 certificates from your own
            certificate authority for encryption. X.509 certificates provide strongly trusted,
            on-the-wire encryption for client-server communication and across data centers. The new
            capability also makes it simple for administrators to manage and rotate certificates
            without application downtime. You can find detailed information about X.509 certificates
              <xref href="../security/security-x509certsintro.dita">here</xref>.</dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>Role-Based Access Control for Administrators</dt>
          <dd>With version 4.5, Couchbase Server provides Role-Based Access Control for administrators. Aside from the existing encryption and auditing facilities, RBAC provides fine grain control over administrative access and simplifies compliance with governance rules. You can control administrative roles from the Settings tab in the Web Console. See <xref href="../security/concepts-rba.dita#concept_ntl_jph_hr"></xref> for details.</dd>
        </dlentry>
        <dlentry>
          <dt>Enterprise Backup and Restore</dt>
          <dd>Couchbase Server 4.5 provides a new enterprise backup and restore tool that can back
            up larger datasets with significantly higher performance than before. The scalable,
            high-performance backup and restore tool allows Couchbase Server to provide faster and
            more scalable recovery options to better integrate with Disaster Recovery planning. See
            <xref href="../backup-restore/enterprise-backup-restore.dita#topic_rr5_sv3_t5"/> for detailed
            information.</dd>
          
        </dlentry>
      </dl>
    
    </section>
  </body>
</topic>
