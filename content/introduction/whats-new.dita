<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="whats-new">
  <title>What's New in Version 4.6 Developer Preview?</title>
  <body> 
    <p>Couchbase Server is a comprehensive, general purpose database that supports broad set of web,
      mobile and IoT applications. </p>
    <p>Couchbase Server 4.6 (Developer Preview) delivers some exciting capabilities for cross
      datacenter replication, security, query, tools, and application development. The Developer Preview release also adds support for Microsoft Windows 10 Anniversary Edition and Mac OS Sierra. </p>
    <note type="important">This is a Developer Preview version of Couchbase Server 4.6 and is
      intended for development purposes only. We consider Developer Preview releases to have some
      rough edges and bugs, and may change significantly before the final GA release. This release
      is <b>not supported</b> in production. <p>The Developer Preview release does <b>not
          support</b> upgrading from an earlier version of Couchbase Server.</p></note>
    <section><title>Cross Datacenter Replication</title>
    <dl>
      <dlentry>
        <dt>Cross Datacenter Replication with Timestamp-based Conflict Resolution</dt>
        <dd>This release introduces a new option to resolve conflicts with XDCR using timestamps.
          With this option, conflicts are resolved by comparing timestamps of conflicting documents.
          The timestamp-based conflict resolution provides a new option for applications which want
          users to continue seeing the latest change or version, no matter when conflicts are
          resolved in the background. Server set timestamp on every document combines the best of
          logical and physical clocks and captures the causality relationship like logical clocks,
          and enables easy identification of consistent snapshots in distributed systems. For more
          information, see <xref
            href="../xdcr/xdcr-timestamp-based-conflict-resolution.dita#topic_a5q_zch_vx"/>.</dd>
      </dlentry>
      <!--<dlentry>
        <dt>Cross Datacenter Awareness</dt>
        <dd></dd>
      </dlentry>-->
    </dl>
    </section>
    <section><title>Security</title>
      <dl>
        <dlentry>
          <dt>Hardened Security with Pluggable Authentication Module</dt>
          <dd>By adding support for Pluggable Authentication Modules (PAM), this release of Couchbase
            Server enables you to centralize and synchronize password management across servers. You
            can use existing password management services such as Linux /etc/shadow for a Couchbase
            cluster. You can also control password expiration rules and other password policies. PAM
            Authentication in Couchbase is available only on Linux platform and is an Enterprise only
            feature. For more information, see <xref
              href="../security/security-pam-auth.dita#topic_s4n_42h_vx"/>.</dd>
        </dlentry>
        <!--<dlentry>
        <dt>Enhanced Secret Management</dt>
        <dd></dd>
      </dlentry>-->
      </dl>
    </section>
    <section><title>New Functions in N1QL</title>
      <p>N1QL introduces a number of new string and date functions in this release. See <xref
          href="../n1ql/n1ql-language-reference/string-functions.dita#topic_o4s_2px_vx"/> and <xref
          href="../n1ql/n1ql-language-reference/date-functions.dita#topic_o4s_2px_vx"/>for the
        complete list of functions added in this release.</p>
    </section>
    <section><title>Full Text Search</title>
      <dl>
        <dlentry>
          <dt>Faster Full Text Indexing and Queries</dt>
          <dd>Full text search (FTS) in 4.6 is noticeably snappier due to many performance
            enhancements, small and large. Many improvements are due to enhancements made in <xref
              href="http://www.blevesearch.com/" format="html" scope="external">bleve</xref>, the
            full-text search and indexing Go library that powers FTS.<p>The biggest single
              contributor to performance improvements is MossStore, the new default KV store
              underlying full text indexes. FTS has for some time used <xref
                href="https://github.com/couchbase/moss" format="html" scope="external">Moss</xref>
              to improve query and especially indexing performance. <xref
                href="https://github.com/couchbase/moss" format="html" scope="external">Moss</xref>,
              which stands for “Memory-oriented sorted segments”, is a simple, fast, persistable,
              ordered key value collection implemented as a pure Golang library.</p><p>MossStore
              extends Moss so that it efficiently persists sorted segments to disk when necessary.
              MossStore is recommended for all use cases, but advanced users can still change back
              to ForestDB by setting the “store” “kvStoreName” property to “forestdb”.</p></dd>
        </dlentry>
        <dlentry>
          <dt>Index Type Mapping by Keys</dt>
          <dd>You can now create custom index mappings by document type when the type is specified
            in the document key. Previously, you could create custom index mappings for different
            types of objects, but only when the type was indicated by an attribute in the JSON
            document body. (By default, FTS looks for an attribute named “type”). With this
            enhancement, it’s easier to support the common data modeling style in which the document
            type is indicated by a portion of the key, for example, “user::will.gardella”. See <xref
              href="../fts/fts-enhancements.dita#topic_l2x_pkx_vx/index-type-mapping-by-keys"/> for
            more information.</dd>
        </dlentry>
        <dlentry>
          <dt>Sorting</dt>
          <dd>You can now sort search results by any indexed field. In the previous releases, search
            results are always sorted by descending score so that highest scoring results are listed
            first. This is still the default sort order, so if you don’t specify a sort order,
            you’re unlikely to notice any difference. See <xref
              href="../fts/fts-enhancements.dita#topic_l2x_pkx_vx/fts-sorting"/> for more
            information.</dd>
        </dlentry>
      </dl>
    </section>
    <section><title>Tools</title>
      <p>This release introduces tools to import and export data to and from Couchbase Server. <codeph>cbimport</codeph> imports data from a CSV file or a JSON document, and <codeph>cbexport</codeph> exports data as a JSON document. For more information, see <xref href="../tools/cbimport.dita"/> and <xref href="../tools/cbexport.dita"/>.</p>
    </section>
    <section><title>Simplified Application Development with Support for Data Structures</title>
      <p>Couchbase is extending the programming model with data structures to even further
        simplify application development. Building on Couchbase Server 4.5’s cluster support for
        sub-document level changes, Couchbase is now adding support for lists, maps, and sets to
        libraries for Java, .NET, Node.js, and PHP among other platforms. These data structures
        are built on standard JSON giving developers access to the complete set of Couchbase’s
        best-in-class data access options, including N1QL and Full Text Search. The new data
        structures and other services work seamlessly with the same underlying data
        representation. For example, a Java developer can use the Java Collections Framework with
        the list interface and still use SQL standard query to access the same data from
        N1QL.</p>
    </section>
 <!--   <section><title>Couchbase Connectors</title>
      <dl>
        <dlentry>
          <dt>Spark 2.0</dt>
          <dd></dd>
        </dlentry>
        <dlentry>
          <dt>Kafka 3.0 Developer Preview</dt>
          <dd></dd>
        </dlentry>
      </dl>
    </section>-->
  </body>
</topic>
