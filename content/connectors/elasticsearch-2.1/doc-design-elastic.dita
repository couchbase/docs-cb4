<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic xml:lang="en-us" id="topic6299">
    <title>Document Design Considerations</title>
    <body>
        <p>Both Couchbase Server and Elasticsearch enable you to flexibly model data by using JSON
            documents to represent your application objects. These documents generally contain all
            the information about a data entity, and can be as complex as you choose. You can use
            nested data and structures such as arrays and hashes to provide additional information
            about your object. You also do not need to perform schema migrations for JSON documents.
            Instead you can flexibly write new data fields or values to represent new information in
            your documents.</p>
        <p>Be aware that Elasticsearch automatically creates a <i>mapping</i> that defines what is
			searchable in your documents. So how you design your documents for search is influenced by
			Elasticsearch mappings. This guide is not intended to be an exhaustive description on how
			to model documents for use in Elasticsearch or how to modify mapping in Elasticsearch. </p>
        <p>There are a few document design considerations you should have in mind if you are going
            to use Couchbase Server with Elasticsearch. For instance, imagine you have a document to
            represent a product as follows:</p>
        
                <image href="images/elastic_model_str.png" width="720"></image>
        <p>Imagine your inventory system changes and you want to change your product SKU so that it
            is an integer. With the flexibility of JSON, you can update the schema for your product
            to look like this in Couchbase Server:</p>
        
                <image href="images/elastic_model_int.png" width="720"></image>
        <p>By design, there might be some cases where you do not want to update <b>all</b> your
			products to have integer SKUs. This may be an intentional design choice if your application
			logic does not depend on it, or you may want to change your application logic to handle
			both string and integer SKUs.</p>
        <p>When you use Elasticsearch, it will generate a <term>default mapping</term> used to index
			items; this mapping describes how particular fields should be indexed. By default,
			Elasticsearch builds a mapping based on documents transmitted to it and it will make
			assumptions and generalizations about all documents based on the initial documents it
			receives. Each default mapping will assume specific data types for each field. Be aware
			that even though you can change a field type for a document in Couchbase Server, it can
			cause problems for Elasticsearch if you do not also update the default mapping. If you
			change the field type in Couchbase Server, Elasticsearch will <b>not</b> index the new
			documents containing the different field type and you <b>will not</b> receive the document
			ID as a search query. In this case, because we change the SKU from a string to an integer,
			all the products we add to our system with the integer SKU will not be indexed by
			Elasticsearch using the default mapping. </p>
        <p>To resolve this, whenever you update a document schema you probably want to update all
			documents which contain that field. In our example, we update the SKU field so that all
			documents have integers for SKUs. Elasticsearch will receive all updates to existing
			products and then index them. For more general information about data modeling for
			Couchbase Server, see <xref
				href="../../data-modeling/concepts-data-modeling-intro.dita#concept_xrn_m5f_ps" />.</p>
        <section><title>Understanding arrays in Elasticsearch</title><p>If you want to store an
                array of objects in a JSON document, be aware that you may need to provide your own
                specific mapping for Elasticsearch in order to achieve the results you expect from
                it. For example, imagine you have an object with two items that
                appear:</p><codeblock>{
    "object1" : [
        {
            "name" : "blue",
            "count" : 4
        },
        {
            "name" : "green",
      "count" : 6
     }
    ]
}
</codeblock><p>If
                you search for a name set to blue and a count greater than 5, you will get this
                document in your index, even though the count associated with blue is 4 not 6. This
                is most likely not what you expected since the two conditions are satisfied by two
                different objects in the array. To handle these types of scenarios, you need to
                provide your own <i>nested mapping</i> for Elasticsearch. </p></section>
        
        <section><title>Enabling Document Expiration</title><p>Time to Live, also known as TTL, is the time until a document expires in Couchbase Server. By
				default, all documents will have a TTL of 0, which indicates the document will be kept
				indefinitely. When you create your own application, you can provide specific TTLs such
				as 30 seconds. As part of normal maintenance operations, Couchbase Server will
				periodically remove all items with expirations that have passed. By default this
				maintenance process runs every 60 minutes.</p><p>Be aware that if you use TTLs in Couchbase Server that
                this expiration <b>will not</b> be propagated with a document to Elasticsearch.
                Instead Couchbase Server will send information about the document deletion when the
                maintenance process runs on the 60- minute interval. This may cause some problems
                because the document ID can appear in an Elasticsearch index, but the document may
                no longer be available from Couchbase Server.</p><p>To mitigate this problem, you can manually enable the expiration field used by Elasticsearch,
					<codeph>_ttl</codeph>. When you do this, Couchbase Server can propagate the document
				TTL to Elasticsearch, and then Elasticsearch will remove the item from an index when TTL
				expires. Because there is some time lag between the servers during replication,
				indexing, and maintenance processes, document expiration will not occur at the same
				exact time for each server. However, if you use this approach it can help reduce items
				in an Elasticsearch result set that are no longer available from Couchbase. </p></section>
        
    </body>
    <related-links>
        <linklist>
            <link href="https://www.elastic.co/guide/index.html" scope="external" format="html">
                <linktext>Elasticsearch Guide</linktext>
            </link>
            <link href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/mapping.html" scope="external"
                format="html">
                <linktext>Elasticsearch Guide, Mapping</linktext>
            </link>
            <link href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/nested.html"
                scope="external" format="html">
                <linktext>Elasticsearch Guide, Nested Type</linktext>
            </link>
            <link href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/mapping-ttl-field.html"
                scope="external" format="html">
                <linktext>Elasticsearch Guide, TTL Field</linktext>
            </link>
            <link href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/mapping-date-format.html"
                scope="external" format="html">
                <linktext>Elasticsearch Guide, Date Formats</linktext>
            </link>
            <link href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/geo-point.html"
                scope="external" format="html">
                <linktext>Elasticsearch Guide, Geo Point Type</linktext>
            </link>
        </linklist>
    </related-links>
</topic>
