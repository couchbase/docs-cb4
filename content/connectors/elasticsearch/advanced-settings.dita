<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
  
<topic xml:lang="en-us" id="topic1645">

<title>
	Advanced Settings
</title>

<shortdesc>
	You can configure the Elasticsearch Transport Plug-in by means of settings in the file 
	<codeph>config/elasticsearch.yml</codeph>. This section provides a comprehensive list of the
	available options. It also explains how to establish appropriate Java security-policy
	permissions, which are required for interoperation with Elasticsearch 2.1.x.
</shortdesc>

<body>
		
	<section>
		
		<title>
			Plug-in Settings and their Significance
		</title>
			
		<p>
			The following settings are available for the Elasticsearch Transport Plug-in:
		</p>
		
		<ul>
			<li>
				<b>couchbase.port</b>: The port on which the plug-in listens. The default is <codeph>9091</codeph>.
			
			<p>
				
				<!-- Vertical space -->
			
			</p>
			
			</li>
			
			<li>
				<b>couchbase.username</b>: The username for authentication over basic HTTP. The default 
				is <codeph>Administrator</codeph>.
				
				<p>
					
					<!-- Vertical space -->
					
				</p>
				
			</li>
			
			<li>
				<b>couchbase.password</b>: The password for authentication over basic HTTP. There is
				no default.
				
				<p>
					
					<!-- Vertical space -->
					
				</p>
				
			</li>
			
			<li>
				<b>couchbase.num_vbuckets</b>: The number of vbuckets that Elasticsearch should index. 
				On Mac, the default is <codeph>64</codeph>; on all other platforms, <codeph>1024</codeph>. This value must match the number 
				of vbuckets on the Couchbase cluster.
				
				<p>
					
					<!-- Vertical space -->
					
				</p>
				
			</li>
			
			<li>
				<b>couchbase.maxConcurrentRequests</b>: The number of concurrent requests allowed by the plug-in. 
				The default is <codeph>1024</codeph>. This number can be lowered to reduce machine-load.
				
				<p>
					
					<!-- Vertical space -->
					
				</p>
				
			</li>
			
			<li>
				<b>couchbase.bulkIndexRetries</b>: The number of retries permitted on non-fatal bulk-indexing 
				errors. The default is <codeph>10</codeph>.
				
				<p>
					
					<!-- Vertical space -->
					
				</p>
				
			</li>
			
			<li>
				<b>couchbase.bulkIndexRetryWaitMs</b>: The number of milliseconds permitted to elapse between 
				bulk-index retries. The default is <codeph>1000</codeph>.
				
				<p>
					
					<!-- Vertical space -->
					
				</p>
				
			</li>
			
			<li>
				<b>couchbase.ignoreFailures</b>: A value of <codeph>true</codeph> causes the plug-in to return a success-status to Couchbase Server, 
				even if some documents could not be indexed. This prevents XDCR from stalling due to Elasticsearch indexing 
				errors (for example, when a schema-change breaks some of the Elasticsearch type-mappings). The default is <codeph>false</codeph>.
				
				<p>
					
					<!-- Vertical space -->
					
				</p>
				
			</li>
			
			<li>
				<b>couchbase.ignoreDeletes</b>: Accepts as a value a list of one or more index-names, specified as a comma- or 
				semicolon-delimited string. The plug-in ignores document-deletion and expiration for each named index. (This allows 
				information to be indefinitely archived; and may therefore lead to significant growth in index-size.)
				
				<p>
					
					<!-- Vertical space -->
					
				</p>
				
			</li>
			
			<li>
				<b>couchbase.wrapCounters</b>: A value of <codeph>true</codeph> causes the plug-in to store all integer-values provided by Couchbase that 
				are not valid JSON documents in a document whose format is <codeph>{＂value＂:&lt;value&gt;}</codeph>, 
				and is stored under the Couchbase Server ID originally specified for the value. The default is <codeph>false</codeph>.
					
				<p>
					
					<!-- Vertical space -->
					
				</p>
				
			</li>
			
			<li>
				<b>couchbase.ignoreDotIndexes</b>: A value of <codeph>true</codeph> causes the plug-in to ignore indexes and aliases whose names have a period as their 
				initial character: for <codeph>example</codeph>, <codeph>.kibana</codeph>, <codeph>.marvel</codeph>, <codeph>.clover</codeph>. 
				The default is <codeph>true</codeph>.

				<p>
					
					<!-- Vertical space -->
					
				</p>
				
			</li>
			
			<li>
				<b>couchbase.includeIndexes</b>: Accepts as a value a list of one or more index-names, specified as a comma- or semicolon-delimited 
				string. The plug-in ignores all indexes not included in the list. This prohibits creation of additional indexes for the storing of 
				checkpoint metadata (potentially unnecessary, when the number of replicated indexes is small). Note that this setting takes precedence 
				over <b>ignoreDotIndexes</b>, and therefore forces use of indexes whose names have a period as their initial character, even if their use has 
				been explicitly prohibited by <b>ignoreDotIndexes</b> (see immediately above).
				
				<p>
					
					<!-- Vertical space -->
					
				</p>
				
			</li>
			
			<li>
				<b>couchbase.typeSelector</b>: Specifies the type selector class to be used for mapping documents to types. The following options 
				are available:
				
				<p>
					<!-- Vertical space -->
				</p>
				
				<ul>
					<li>
						<codeph>org.elasticsearch.transport.couchbase.capi.DefaultTypeSelector</codeph>: Maps all documents to the specified type (see 
						immediately below). This is the default type selector, and so need not be explicitly specified. Type-specification is 
						managed by the following settings:
						
						<p>
							<!-- Vertical space -->
						</p>
						
						<ul>
							<li>
								<b>couchbase.typeSelector.defaultDocumentType</b>: The document type to which the 
								<codeph>DefaultTypeSelector</codeph> maps all 
								documents. The default is <codeph>couchbaseDocument</codeph>.
								
								<p>
									<!-- Vertical space -->
								</p>
							</li>
							
							<li>
								<b>couchbase.typeSelector.checkpointDocumentType</b>: The document type to which replication-checkpoint documents 
								are mapped. The default is <codeph>couchbaseCheckpoint</codeph>.
								
								<p>
									<!-- Vertical space -->
								</p>
								
							</li>

						</ul>
					</li>
					
					<li>
						<codeph>org.elasticsearch.transport.couchbase.capi.DelimiterTypeSelector</codeph>: If the document ID is in the 
						format <codeph>&lt;</codeph><i>type</i><codeph>&gt;&lt;</codeph><i>delimiter</i><codeph>&gt;&lt;*&gt;</codeph>, 
						documents are mapped to the type specified by <codeph>&lt;</codeph><i>type</i><codeph>&gt;</codeph>. Otherwise, the 
						<codeph>DefaultTypeSelector</codeph> is used: note that this entails use 
						of the default delimiter, which is the colon character (<codeph>:</codeph>); and in consequence, a document with the ID 
						<codeph>user:123</codeph> is indexed 
						under the type <codeph>user</codeph>. The delimiter can be set to a different character, by means of the following setting:
						
						<p>
							<!-- Vertical space -->
						</p>
						
						<ul>
							<li>
								<b>couchbase.typeSelector.documentTypeDelimiter</b>: Specifies the delimiter to be used for the 
								<codeph>DelimiterTypeSelector</codeph>. 
								The default is the colon character (<codeph>:</codeph>).
								
								<p>
									<!-- Vertical space -->
								</p>
								
							</li>
						</ul>
					</li>
					
					<li>
						<codeph>org.elasticsearch.transport.couchbase.capi.GroupRegexTypeSelector</codeph>: Maps documents that 
						match the specified regular expression with a 
						capture group named <i>type</i> (see immediately below). If the document does not match, or 
						if no capture group named <i>type</i> has been defined, the <codeph>DefaultTypeSelector</codeph> 
						is used instead.
						
						<p>
							<!-- Vertical space -->
						</p>
						
						<ul>
							<li>
								<b>couchbase.typeSelector.documentTypesRegex</b>: Specifies the regular expression to be 
								used for mapping Couchbase document IDs to 
								Elasticsearch types. For example, the expression <codeph>^(?&lt;type&gt;\w+::.+$</codeph> maps document IDs of the 
								format <codeph>&lt;type&gt;::&lt;stuff&gt;</codeph> to the 
								type <codeph>&lt;type&gt;</codeph>; so that the ID <codeph>user:123</codeph> is 
								indexed under the type <codeph>user</codeph>.
								
								<p>
									<!-- Vertical space -->
								</p>
									
							</li>
						</ul>
					</li>
					
					<li>
						<codeph>org.elasticsearch.transport.couchbase.capi.RegexTypeSelector</codeph>: Maps document IDs 
						that match the specified regular expressions to 
						named types. If an ID does not match any specified expression, <codeph>DefaultTypeSelector</codeph> 
						is used to select the type.
						
						<p>
							<!-- Vertical space -->
						</p>
						
						<ul>
							<li>
								<b>couchbase.typeSelector.documentTypesRegex.*</b>: Specifies a regular expression with a named type. For example, 
								<codeph>couchbase.typeSelector.documentTypesRegex.users: ^user-.+$</codeph> maps all document IDs that start with the string 
								<codeph>user-</codeph> to the type <codeph>users</codeph>.
								
								<p>
									<!-- Vertical space -->
								</p>
							</li>
						</ul>		
					</li>
					
				</ul>
			</li>
			
			<li>
				<b>couchbase.parentSelector</b>: The parent-selector class to be used for mapping child-documents to parents. (This facility is provided since, 
				due to the nature of XDCR, a child document may be replicated before the parent, leading to unpredictable behavior on the Elasticsearch 
				side.) The value of this setting can be one of the following:
				
				<p>
					<!-- Vertical space -->
				</p>
				
				<ul>
					<li>
						<codeph>org.elasticsearch.transport.couchbase.capi.DefaultParentSelector</codeph>: Maps documents to parents according to a 
						predefined map of types to field-names. This is specified as follows:
						
						<p>
							<!-- Vertical space -->
						</p>
						
						<ul>
							<li>
								<b>couchbase.parentSelector.documentTypeParentFields.*</b>: Specifies which document-field contains the ID of 
								the parent-document for a specified type. For example, 
								<codeph>couchbase.parentSelector.documenttypeParentFields.order: doc.user_id</codeph> sets the 
								parent ID of all 
								documents whose type is <codeph>order</codeph> to the value of the <codeph>user_id</codeph> field.
								
								<p>
									<!-- Vertical space -->
								</p>
							</li>
						</ul>
						
					</li>
					
					<li>
						<codeph>org.elasticsearch.transport.couchbase.capi.RegexParentSelector</codeph>: Maps documents to parents, acording to a specified 
						regular expression, using the capture group <codeph>parent</codeph>. The format of the parent document-ID can be user-determined. 
						The value for this setting can be established as follows:
						
						<p>
							<!-- Vertical space -->
						</p>
						
						<ul>
							<li>
								<b>couchbase.parentSelector.documentTypesParentRegex.*</b>: Specifies a named regular expression for matching the parent 
								document-ID. For example, <codeph>couchbase.documentTypesParentRegex.typeA: ^typeA::(?&lt;<i>parent</i>&gt;.+)</codeph> 
								with the document-ID 
								<codeph>typeA::123</codeph> uses <codeph>123</codeph> as the parent document-ID.
								
								<p>
									<!-- Vertical space -->
								</p>
							</li>
							
							<li>
								<b>couchbase.parentSelector.documentTypesParentFormat.*</b>: Specifies an optional format for the parent 
								document-ID that is matched by the regular expression described immediately above. Uses <codeph>&lt;parent&gt;</codeph> 
								as the placeholder for the matched ID. For example, 
								<codeph>couchbase.documentTypesParentFormat.typeA: parentType::&lt;<i>parent</i>&gt;</codeph>, used with the previous 
								example, produces the parent document-ID <codeph>parentType::123</codeph>.
								
								<p>
									<!-- Vertical space -->
								</p>
							</li>
						</ul>
					</li>
				</ul>
				
			</li>
			
			<li>
				<b>couchbase.documentTypeRoutingFields.*</b>: A mapping of types to custom document routing-paths. For example, 
				specifying <codeph>couchbase.documentTypeRoutingFields.users: user_id</codeph> uses the field 
				<codeph>user_id</codeph> as the custom routing-path for type <codeph>users</codeph>.
				
				<p>
					<!-- Vertical space -->
				</p>
				
			</li>
			
			<li>
				<b>couchbase.keyFilter</b>: Specifies the document filter-class to be used for filtering documents on the Elasticseach 
				plug-in side. Note that Couchbase sends all documents through XDCR: the document-filter determines whether specific 
				documents be indexed or ignored, according to their ID. The value for this setting can be one of the following:
				
				<p>
					<!-- Vertical space -->
				</p>
				
				<ul>
					
					<li>
						<codeph>org.elasticsearch.transport.couchbase.capi.DefaultKeyFilter</codeph>: Allows all documents through. This is the default 
						setting, and therefore does not need to be specified.
						
						<p>
							<!-- Vertical space -->
						</p>
					</li>
					
					<li>
						<codeph>org.elasticsearch.transport.couchbase.capi.RegexKeyFilter</codeph>: Allows documents through, or 
						disallows, based on a regular expression that is specified by means of the following 
						settings:
						
						<p>
							<!-- Vertical space -->
						</p>
						
						<ul>
							<li>
								<b>couchbase.keyFilter.type</b>: Specifies whether the filter includes or excludes the matched documents. 
								Value can be either <codeph>include</codeph> or <codeph>exclude</codeph>. If include, only documents with IDs that match one of the 
								regular expressions are indexed. If exclude, only documents that <i>do not match any</i> of the regular 
								expressions are indexed.
								
								<p>
									<!-- Vertical space -->
								</p>
								
							</li>
							
							<li>
								<b>couchbase.keyFilter.keyFiltersRegex.*</b>: Specifies one or more regular expressions to be matched against 
								the document ID, before indexing occurs in Elasticsearch. For example, 
								<codeph>couchbase.keyFilter.type: exclude + couchbase.keyFilter.keyFiltersRegex.temp: ^temp.*$</codeph>
								causes the plug-in to ignore each document whose ID commences with <codeph>temp</codeph>.
										
							</li>
						</ul>
					</li>
				</ul>
			</li>
		</ul>

	</section>
	
	<section>
		<title>
			Java Security-Policy Permissions
		</title>
		
		<p>
			The Elasticsearch Transport Plug-in works with Elasticsearch 2.1.x only if the system’s default <codeph>java.policy</codeph> file is appropriately edited. The file is located in 
			the directory <codeph>%JAVA_HOME%/jre/lib/security</codeph>. The file can be edited either directly, or by means of the 
			<codeph>policytool</codeph> utility, located 
			in the directory <codeph>%JAVA_HOME%/bin</codeph>. Note that for either procedure, root permissions are required.
			
		</p>
		
		<wintitle>
			Edit Directly
		</wintitle>
		
		<p>
			If editing the policy directly, add the following to the end of the file:
		</p>
		
<codeblock>grant codeBase "file:/<i>&lt;path to transport-couchbase plug-in install directory&gt;/*</i>" {
    permission javax.security.auth.AuthPermission "modifyPrincipals";
    permission javax.security.auth.AuthPermission "modifyPrivateCredentials";
    permission javax.security.auth.AuthPermission "setReadOnly";
    permission java.lang.RuntimePermission "setContextClassLoader";
    permission java.net.SocketPermission "*", "listen,resolve";
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
};</codeblock>
		
		<p>
			Include, as indicated above, the appropriate path for the directory where the plug-in was installed. For example, if 
			Elasticsearch was installed as a <codeph>deb/rpm</codeph> package on Linux, this path would 
			be <codeph>file: /usr/share/elasticsearch/plugins/transport-couchbase/*</codeph>. 
			Note the trailing asterisk, which specifies that the policy applies to all files in the directory.
			
		</p>
		
		<wintitle>
			Edit with Policytool
		</wintitle>
		
		<p>
			If using <codeph>policytool</codeph>, start it at the command line, specifying the policy file-location as follows:
		</p>
		
		<codeblock>$JAVA_HOME/bin/policytool -file $JAVA_HOME/jre/lib/security/java.policy</codeblock>
		
		<p>
			When the applet-window appears, verify that the policy-file displayed in the upper editable text field is the one you intend to edit:
		</p>
		
		<p>
			<image id="policyToolInitial" href="images/policyToolInitial.png" align="left" width="480" />
		</p>
		
		<p>
			To add the required security-settings, left-click on the <uicontrol>Add Policy Entry</uicontrol> button. The <uicontrol>Policy Entry</uicontrol> 
			window now appears:
		</p>
		
		<p>
			<image id="policyToolPolicyEnter01" href="images/policyToolPolicyEnter01.png" align="left" width="480" />
		</p>
		
		<p>
			Left-click on the <uicontrol>Add Permission</uicontrol> button. The <uicontrol>Permissions</uicontrol> dialog appears
		</p>
		
		<p>
			<image id="policyToolFirstEntry" href="images/policyToolFirstEntry.png" align="left" width="480" />
		</p>
		
		<p>
			This dialog will now be used to add each of the required permissions. Proceed as follows:
		</p>
		

		<wintitle>
			AuthPermission; modifyPrincipals
		</wintitle>
		
		<ol>
			<li>
				Open the <uicontrol>Permission</uicontrol> drop-down menu, and select <uicontrol>AuthPermission</uicontrol>:
				
				<p>
					<image id="policyToolAuthPermission" href="images/policyToolAuthPermission.png" align="left" width="480" />
				</p>
			</li>
			
			<li>
				Open the <uicontrol>Target Name</uicontrol> drop-down menu, and select <uicontrol>modifyPrincipals</uicontrol>.
				
				<p>
					<image id="policyToolModifyPrincipals" href="images/policyToolModifyPrincipals.png" align="left" width="480" />
				</p>
				
			</li>
			
			<li>
				Left-click the <uicontrol>OK</uicontrol> button.
				
				<p>
					<image id="policyToolClickOK" href="images/policyToolClickOK.png" align="left" width="320" />
				</p>
				
				<p>
					The <uicontrol>Policy Entry</uicontrol> dialog now appears as follows:
				</p>
				
				<p>
					<image id="policyToolpolicyEntryFirstEntry" href="images/policyToolpolicyEntryFirstEntry.png" align="left" width="360" />
				</p>
				
			</li>
		</ol>
		
		<p>
			
		</p>
		
		<wintitle>
			AuthPermission; modifyPrivateCredentials
		</wintitle>
		
		<p>
			From the <uicontrol>Permission</uicontrol> drop-down menu, select <uicontrol>AuthPermission</uicontrol>; and from the 
			<uicontrol>Target Name</uicontrol>, select <uicontrol>modifyPrivateCredentials</uicontrol>. Then, left-click the 
			<uicontrol>OK</uicontrol> button.
		</p>
		
		<wintitle>
			AuthPermission; setReadOnly
		</wintitle>
		
		<p>
			From the <uicontrol>Permission</uicontrol> drop-down menu, select <uicontrol>AuthPermission</uicontrol>; and from the 
			<uicontrol>Target Name</uicontrol>, select <uicontrol>setReadOnly</uicontrol>. Then, left-click the 
			<uicontrol>OK</uicontrol> button.
		</p>
		
		<wintitle>
			RuntimePermission; setContextClassLoader
		</wintitle>
		
		<p>
			From the <uicontrol>Permission</uicontrol> drop-down menu, select <uicontrol>RuntimePermission</uicontrol>; and from the 
			<uicontrol>Target Name</uicontrol>, select <uicontrol>setContextClassLoader</uicontrol>. Then, left-click the 
			<uicontrol>OK</uicontrol> button.
		</p>
		
		<wintitle>
			SocketPermission; listen, resolve
		</wintitle>
		
		<p>
			From the <uicontrol>Permission</uicontrol> drop-down menu, select <uicontrol>SocketPermission</uicontrol>. Then, in
			the <uicontrol>Target Name</uicontrol> textbox, type and asterisk. Then, from the
			<uicontrol>Actions</uicontrol>, drop-down menu, select first <uicontrol>listen</uicontrol>; and secondly
			<uicontrol>resolve</uicontrol>. The <uicontrol>Permissions</uicontrol> dialog now appears as follows:
		</p>
		
		<p>
			<image id="policyToolSocketPermission" href="images/policyToolSocketPermission.png" align="left" width="480" />
		</p>
		
		<p>
			Left-click the <uicontrol>OK</uicontrol> button.
		</p>
		
		<wintitle>
			ReflectPermission; suppressAccessChecks
		</wintitle>
		
		<p>
			From the <uicontrol>Permission</uicontrol> drop-down menu, select <uicontrol>ReflectPermission</uicontrol>; and from the 
			<uicontrol>Target Name</uicontrol>, select <uicontrol>suppressAccessChecks</uicontrol>. Then, left-click the 
			<uicontrol>OK</uicontrol> button.
		</p>
		
		<wintitle>
			Saving Permissions
		</wintitle>
		
		<p>
			The <uicontrol>Policy Tool</uicontrol> and <uicontrol>Policy Entry</uicontrol> dialog now appear as follows:
		</p>
		
		<p>
			<image id="policyTooldone" href="images/policyTooldone.png" align="left" width="480" />
		</p>
		
	</section>
	
	<section>
		
		<title>
			Couchbase Document Expiration
		</title>
		
		<p>
			If the Couchbase <i>document expiration</i> feature (whereby documents are set to expire after a
			specified period) is used on documents to be replicated to Elasticsearch, the corresponding feature
			must be enabled in the Elasticsearch mapping. (The feature is disabled by default, since some cost is
			associated with its use.)
		</p>
		
		<p>
			For details, see 
			<xref href="https://www.elastic.co/guide/en/elasticsearch/reference/2.0/mapping-ttl-field.html" scope="external" format="html" >_ttl field</xref>,
			in the online Elasticsearch documentation.
		</p>
	</section>
	
</body>
	
</topic>
