<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
  
<topic xml:lang="en-us" id="topic1645">

<title>
	Getting Started
</title>

<shortdesc>
	Once installation and configuration of the three principal components are complete,
	you can replicate data from Couchbase to Elasticsearch; run Elasticsearch
	text-based queries on the replicated Couchbase data; and use document IDs returned by 
	Elasticsearch to initiate queries on Couchbase, thereby returning full Couchbase
	documents. This section explains how to accomplish these tasks both manually and
	programmatically.
</shortdesc>

<body>
		
<section>
	
<title>
	Replicate Data from Couchbase Server to Elasticsearch
</title>
	
<p>
	Data-replication from Couchbase Server to Elasticsearch is managed by means of the 
	<i>XDCR</i> facility, accessible from the Couchbase Web Console. 
</p>
	
<p>
	Proceed as follows:
</p>
	
<ol>
	<li>
		Within the virtual environment, using the browser, access the Couchbase Web
		Console, at the <i>localhost</i> address of your virtual machine, on
		the 8091 port:
		
		<p>	
			<image id="couchbaseConsoleInitial" href="images/couchbaseConsoleInitial.png" align="left" width="540" />
		</p>
		
	</li>
	
	<li>
		Select the <uicontrol>XDCR</uicontrol> option, on the navigation-bar, at the left-hand
		side:
		
		<p>
			<image id="XDCRoption" href="images/selectXDCR.png" align="left" width="86" />
		</p>
		
		<p>
			This brings up the <uicontrol>XDCR</uicontrol> interface, as follows:
		</p>
		
		<p>
			<image id="XDCRui" href="images/xdcrInitial.png" align="left" width="540" />
		</p>
	</li>
	
	<li>
		Left-click on the <uicontrol>Add Remote Cluster</uicontrol> button, at the upper-right of the
		<uicontrol>Remote Clusters</uicontrol> panel:
		
		<p>
			<image id="createClusterRef" href="images/selectCreateClusterReference.png" align="left" width="204" />
		</p>
	
		<p>
			The following dialog now appears:
		</p>
		
		<p>
			<image id="createClusterRefDialog" href="images/createClusterReferenceDialog.png" align="left" width="320" />
		</p>
		
		<p>
			Enter appropriate data into the fields of this dialog, and then left-click on the <uicontrol>Save</uicontrol>
			button. The <uicontrol>Cluster Name</uicontrol> can be any name of your choice, to refer to your
			Elasticsearch cluster. The <uicontrol>IP/hostname</uicontrol> should be the port-number 9091, appended to
			the word <codeph>localhost</codeph>. The <uicontrol>Username for Remote Cluster</uicontrol> and <uicontrol>Password</uicontrol> are those
			you have established for your Elasticsearch cluster, in the <codeph>elasticsearch.yml</codeph> configuration-file. You
			do not need to enable TLS encryption. When you have saved this data, it appears in the <uicontrol>XDCR</uicontrol> interface.
		</p>
		
	</li>
	
	<li>
		Left-click on the <uicontrol>Create Replication</uicontrol> button, to the upper-right of the 
		<uicontrol>Ongoing Replications</uicontrol> panel. The <uicontrol>Add Replication</uicontrol> 
		dialog now appears. 
		
		<p>	
			For full details of the fields provided by this dialog, see
			<xref href="../../xdcr/xdcr-create.dita" scope="local" format="dita">Managing XDCR</xref>.
			For the immediate purposes of replicating from Couchbase Server to Elasticsearch, the <uicontrol>Bucket</uicontrol> should
			be the bucket whose data you intend to replicate to Elasticsearch (previously designated
			as <i>beer-sample</i>). The <uicontrol>Cluster</uicontrol> should be the
			Elasticsearch cluster you previously created; and its <uicontrol>Bucket</uicontrol> should be the name of 
			the Elasticsearch index you specified to handle 
			data replicated from Couchbase: which was <i>beer-sample</i>.
		</p>
		
		<p>
			Then, left-click on <uicontrol>Advanced settings</uicontrol> control. When the dialog expands
			vertically, change the value of the <uicontrol>XDCR Protocol</uicontrol> to <i>1</i> (since
			replication from Couchbase to Elasticsearch is indeed only supported by Version 1 of the
			XDCR Protocol.
		</p>
		
		<p>
			Next, left-click on the <uicontrol>Save</uicontrol> button, at the lower-right of the dialog.
		</p>
	</li>
	
</ol>
	
<p>
	At this point, replication from Couchbase to Elasticsearch begins. This is duly represented within the
	<uicontrol>Ongoing Replications</uicontrol> panel.
</p>
			
</section>
	
<section>
	<title>
		Query Elasticsearch Data Manually
	</title>
	
<p>
	The simplest Elasticsearch query takes the form of a Lucene-based string; and can be dispatched as an HTTP request. For
	example, on the command-line, within the virtual environment, enter the following:
</p>
	
	<codeblock>$ curl http://localhost:9200/beer-sample/_search?q=Classic-Special-Brew\
> +AND+North+American+Lager</codeblock>
	
<p>
	This searches the Elasticsearch repository for items that each contain the two strings <codeph>Classic Special Brew</codeph> and
	<codeph>North American Lager</codeph>. Output takes approximately the following appearance:
</p>
	
	<codeblock outputclass="language-bash">{"took":35,"timed_out":false,"_shards":{"total":5,"successful":5,"failed":0},"hits":{"total":156,
"max_score":1.7641015,"hits":[{"_index":"beer-sample","_type":"couchbaseDocument","_id":"aass_bre
wery-classic_special_brew","_score":1.7641015,"_source":{"meta":{"rev":"1-14987863e28400010000000
002000006","flags":33554438,"expiration":0,"id":"aass_brewery-classic_special_brew"}}},{"_index":
"beer-sample","_type":"couchbaseDocument","_id":"otter_creek_brewing_wolaver_s_organic_ales-vermo
nt_lager","_score":0.7017108,"_source":{"meta":{"rev":"1-14987864700e00000000000002000006","flags
":33554438,"expiration":0,"id":"otter_creek_brewing_wolaver_s_organic_ales-vermont_lager"}}},{"_i
ndex":"beer-sample","_type":"couchbaseDocument","_id":"blue_point_brewing-toasted_lager","_score"
:0.68838316,"_source":{"meta":{"rev":"1-14987864d3f500010000000002000006","flags":33554438,"expir
ation":0,"id":"blue_point_brewing-toasted_lager"}}},{"_index":"beer-sample","_type":"couchbaseDoc
ument","_id":"seabright_brewery-brew_ribbon","_score":0.65299296,"_source":{"meta":{"rev":"1-1498
786402b300000000000002000006","flags":33554438,"expiration":0,"id":"seabright_brewery-brew_ribbon
"}}},   .   .   .</codeblock>
	
<p>
	Note that the appearance of the JSON documents here displayed can be improved by installation and use of a tool such
	as <b>jq</b>:
</p>
	
	<codeblock outputclass="language-bash">$ curl http://localhost:9200/beer-sample/_search?q=Classic-Special-Brew\
> +AND+North+American+Lager | jq
{
    "took": 27,
    "timed_out": false,
    "_shards": {
        "total": 5,
        "successful": 5,
        "failed": 0
    },
    "hits": {
        "total": 156,
        "max_score": 1.7641015,
        "hits": [
    {
    "_index": "beer-sample",
    "_type": "couchbaseDocument",
    "_id": "aass_brewery-classic_special_brew",
    "_score": 1.7641015,
    "_source": {
        "meta": {
            "rev": "1-14987863e28400010000000002000006",
            "flags": 33554438,
            "expiration": 0,
            "id": "aass_brewery-classic_special_brew"
            }
            .
            .
            .
</codeblock>
	
<p>
	Alternatively, more complex forms of query can be performed by means of the Elasticsearch
	REST API. For example, you can use the following JSON construct:
</p>
	
	<codeblock outputclass="language-bash">{
    "query": {
        "query_string": {
            "query": "North American Lager AND Classic Special Brew"
        }
    }
}</codeblock>
	
<p>
	For example, enter the following at the command prompt:
</p>
	
	<codeblock outputclass="language-bash">$ curl -XPOST 'localhost:9200/beer-sample/_search?pretty' -d'{"query": \
> {"query_string": {"query": "North American Lager AND \
> Classic Special Brew"}}}'</codeblock>
	
<p>
This produces the same output as the Lucene-based example.
</p>
	
<p>
For more information on Elasticsearch query-options, see 
<xref href="https://www.elastic.co/guide/en/elasticsearch/reference/current/_introducing_the_query_language.html" scope="external" format="html">Introducing the Query Language</xref>, 
	in the Elasticsearch API documentation.
</p>
	
</section>

<section>

<title>
	Use the Elasticsearch Web UI
</title>

<p>
	The Elasticsearch Web UI is located at 
	<xref href="http://localhost:9200/_plugin/head/" scope="external" format="html"/>, 
	and appears as follows:
</p>

<p>
	<image id="esWebUI" href="images/elasticsearchConsole.png" align="left" width="480" />
</p>

<p>
	The <codeph>docs</codeph> field indicates the number of items indexed by Elasticsearch. Note that this may be greater 
	than the actual number of documents in Couchbase server; because XDCR and the Couchbase Plug-in send 
	additional documents, describing the status of replication. The UI provides various options for performing 
	Elasticsearch queries, which you can experiment with as appropriate.
</p>
	
</section>
	
<section>

<title>
	Examine Elasticsearch Responses
</title>
	
<p>
	As indicated by the output shown above, responses to Elasticsearch queries contain data on the following:
</p>
	
<ul>
	<li>
		<i>Search-performance</i>. The <codeph>took</codeph> parameter indicates the number of milliseconds required for the search;
		while fields within the <codeph>_shards</codeph> object indicate how many Elasticsearch shards were available for search,
		how many were accessed successfully, and how many unsuccessfully.
		<p>
			
		</p>
	</li>
	
	<li>
		<i>Items matched</i>. The <codeph>total</codeph> field indicates the total number of items. A <codeph>max_score</codeph> is provided, to indicate Elasticsearch’s 
		estimate of the relevance of each search-hit. Note that the <codeph>source</codeph> object contains only metadata, rather than a document’s 
		entire contents: this is because the contents, if and when required, can more rapidly be retrieved from Couchbase itself; using 
		the document ID that is the value of the <codeph>_id</codeph> field.
	</li>
	
</ul>
	
</section>
	
<section>
	
<title>
	Use Elasticsearch Responses to Query Couchbase Manually
</title>
	
<p>
	The contents of the <codeph>_id</codeph> field, returned from an Elasticsearch 
	query, can be used to retrieve the entire corresponding document 
	from Couchbase. Ensure Couchbase is running; then, proceed as follows:
</p>
	
<ol>
	<li>
		Access the Couchbase Web Console, at <xref href="http://localhost:8091:/" scope="external" format="html"/>.
		<p>
			
		</p>
	</li>
	
	<li>
		Left-click on the Data Buckets tab, near the top.
		This brings up the <uicontrol>Couchbase Buckets</uicontrol> screen.
		<p>
			
		</p>
	</li>
	
	<li>
		Left-click on the <uicontrol>Documents</uicontrol> button, towards the right of 
		the <uicontrol>beer-sample</uicontrol>
		row. This brings up the <uicontrol>Documents</uicontrol> screen for the beer-sample bucket.
		<p>
			
		</p>
	</li>
	
	<li>
		In the text-field to the left of the <uicontrol>Lookup Id</uicontrol> button, enter the document-ID retrieved
		from the Elasticsearch output. Then, left-click on the <uicontrol>Lookup Id</uicontrol> button. This brings
		up the document
		with the specified ID.
		<p>
			
		</p>
	</li>
</ol>
	
</section>
	
<section>

<title>
	Query Elasticsearch and Couchbase Programmatically
</title>
	
<p>
	This section provides an example of searching Elasticsearch and Couchbase Server programmatically. A JavaScript 
	routine within an html page makes calls on two node.js servers: one being responsible for running server-side queries on 
	Elasticsearch; the other, on Couchbase Server. The structure is as follows:
</p>
	
<p>
	<image id="codeExampleDiagram" href="images/codeExampleDiagram.png" align="left" width="520" />
</p>
	
<p>
	The annotations to this diagram are as follows:
</p>
	
<ol>
	<li>
		The html interface allows the user to select a beer-style. On selection, a <codeph>getJSON</codeph> call passes the 
		style, in the form of a key-value pair, to the node.js program <i>esNodeJsQueryAgent</i>.
		
		<p>
			<!-- Vertical space -->
		</p>
	</li>
	
	<li>
		The node.js routine performs an Elasticsearch query on the existing <i>beer-sample</i> index: the returned 
		documents each contain an ID corresponding to a particular beer, which is described by the specified 
		style.
		
		<p>
			<!-- Vertical space -->
		</p>
	</li>
	
	<li>
		The documents are passed back to the client-side, where the IDs are retrieved. Each is displayed for 
		the user.
		
		<p>
			<!-- Vertical space -->
		</p>
	</li>
	
	<li>
		The client passes each ID to the node.js program <i>cbNodeJsQueryAgent</i>.
		
		<p>
			<!-- Vertical space -->
		</p>
	</li>
	
	<li>
		The program cbNodeJsQueryAgent duly queries Couchbase. Couchbase returns, for 
		each ID, a document containing detailed information on the beer specified by the ID.
		
		<p>
			<!-- Vertical space -->
		</p>
	</li>
	
	<li>
		Each document is returned to the client-side routine, which displays the results for 
		the user.
		
		<p>
			<!-- Vertical space -->
		</p>
	</li>
</ol>

</section>
	
<section>
	<title>
		Access Source-Files
	</title>
	
	<p>
		You can access the three source-files for the example at this location: 
		<xref href="https://github.com/couchbaselabs/elasticsearchdemo/tree/master" scope="external" format="html"/>. The
		following sections of the current document provide a brief summary of the functionality.
	</p>
</section>
	
<section>
	<title>
		Client-Side HTML and JavaScript
	</title>
	
	<p>
		The file <i>couchbaseESqueryDemo.html</i> provides html-based interactive elements for the selection of beer-styles and the 
		display of query-results. Beer-styles can be selected by means of a series of radio-buttons, within a dialog named 
		<codeph>availableBeerStylesDialog</codeph>. 
	</p>
	
	<p>
		A value is associated with each possible radio-button selection. When the user left-clicks on the <uicontrol>Query 
		Elasticsearch</uicontrol> button, this value is retrieved:
	</p>
	
	<codeblock outputclass="language-javascript">$("#queryElasticsearch").click(function(event)
{  
    // Get the user's radio-button selection, which corresonds to a particular
    // beer style.
    // 
    var beerStyles = document.getElementsByName("beerStyle");
    var selectedBeerValue = 0;
    var selectedBeerStyle = "";

    for (var i = 0; i &lt; beerStyles.length; i++) 
    {
        if (beerStyles[i].checked == true) 
        {
            selectedBeerValue = beerStyles[i].value;
        }
    }</codeblock>
	
	<p>
		The value is then used to determine the style-name, which will be passed to Elasticsearch, and used in
		a search-procedure.
	</p>
	
	<codeblock outputclass="language-javascript">if (selectedBeerValue == 0)
{
    selectedBeerStyle = "American-Style Pale Ale";
} 
else 
{
    if (selectedBeerValue == 1)
    {
        selectedBeerStyle = "American-Style Brown Ale";
    }
    else
    {
        if (selectedBeerValue == 2)</codeblock>
	
	<p>
		A corresponding Elasticsearch query is then prepared and executed:
	</p>
	
	<codeblock outputclass="language-javascript">var esNodeJsAddress = "http://localhost:8081/";
var esNodeJsTargetURL = esNodeJsAddress + '?' + "foo=" + selectedBeerStyle;

$.getJSON(esNodeJsTargetURL, function(dataFromElasticsearch)  
{</codeblock>
	
	<p>
		Retrieved IDs are, first, assembled and displayed:
	</p>
	
	<codeblock outputclass="language-javascript">$.each(dataFromElasticsearch, function(key, val) 
{	
    esDataDisplayString = esDataDisplayString + '&lt;p&gt;' + dataFromElasticsearch[key]._id + '&lt;/p&gt;';
    numberOfIds++;
});

document.getElementById('ElasticSearchRetrievalsContent').innerHTML = esDataDisplayString;</codeblock>
	
	<p>
		Then, the IDs are dispatched as an array, to <i>cbNodeJsQueryAgent</i>, so that Couchbase Server
		can be searched for each of them.
	</p>
	
	<codeblock outputclass="language-javascript">cbNodeJsTargetURL = cbNodeJsAddress + '?' + keyNameForIDparam + '=' 
+ returnedCouchbaseIDsStringed + '&amp;' + countKey + '=' + numberOfIds;

$.getJSON(cbNodeJsTargetURL, function(dataReturnedFromCouchbase) 
{</codeblock>
	
	<p>
		An array of documents is returned, each of which is duly displayed:
	</p>
	
	<codeblock outputclass="language-javascript">for (var currentKeyPosition = 0; currentKeyPosition &lt; numberOfIds; currentKeyPosition++)
{	
					
    $.each(JSON.parse(dataReturnedFromCouchbase[currentKeyPosition]), function(key, val) 
    {
        cbDataDisplayString =  '&lt;p&gt;' + cbDataDisplayString + "\"" + key + "\"" 
            + " : " + "\"" + val + "\"" + '&lt;/p&gt;';
    });
}

document.getElementById('CouchbaseRetrievalsContent').innerHTML = cbDataDisplayString;</codeblock>

</section>
	
<section>
	<title>
		Server-Side node.js for Elasticsearch
	</title>
	
	<p>
		The file <i>esNodeJsQueryAgent.js</i> uses the require function to add appropriate modules, including 
		the module for the Elasticsearch client. It then creates an instance of the client:
	</p>
	
	<codeblock outputclass="language-javascript">var http = require('http');
var url = require('url');
var elasticsearch = require('elasticsearch');
var client = new elasticsearch.Client({
    host: 'localhost:9200',
    log: 'trace'
});</codeblock>
	
	<p>
		An http server is then created:
	</p>
	
	<codeblock outputclass="language-javascript">http.createServer(function (request, response) 
{
console.log('New connection');</codeblock>
	
	<p>
		The server is directed (near the end of the file) to listen on port 8081:
	</p>
	
	<codeblock>}).listen(8081);</codeblock>
	
	<p>
		The value passed to the program by couchbaseESqueryDemo is retrieved, by referencing its known key:
	</p>
	
	<codeblock outputclass="language-javascript">var queryObject = url.parse(request.url, true).query
		
var luceneString = queryObject.foo;</codeblock>
	
	<p>
		Then, an appropriate query-string is created, to be passed to
		Elasticsearch:
	</p>
	
	<codeblock outputclass="language-javascript">var clientSearchStringStart = 
    "{index: 'beer-sample', body: { query: { query_string: { query: ";
var clientSearchStringEnd = "}}}}"
var clientSearchStringFull = clientSearchStringStart + "\"" + luceneString + "\"" + clientSearchStringEnd;
var extendedLuceneString = "\"" + luceneString + "\"";</codeblock>
	
	<p>
		Next, the Elasticsearch query is made, on the <i>beer-sample</i> index:
	</p>
	
	<codeblock outputclass="language-javascript">client.search({
    index:'beer-sample',
    body: {
        query: {
            query_string: {
                query: luceneString
            }
        }
     }
 }).then(function(resp){
     hits = resp.hits.hits;
     console.log("Hits are: " + JSON.stringify(hits));</codeblock>
	
	<p>
		The retrieved data is then passed back to couchbaseESqueryDemo:
	</p>
	
	<codeblock outputclass="language-javascript">response.writeHead(200, {"Content-Type": "application/json", "Access-Control-Allow-Origin": "*"});
response.end(JSON.stringify(hits));</codeblock>

</section>
	
<section>
	<title>
		Server-Side node.js for Couchbase
	</title>
	
	<p>
		Having used the required function to include modules for url and http, cbNodeJsQueryAgent creates an 
		http server, and specifies that it will listen on port 8080.  
	</p>
	
	<p>
		It then parses the query-URL, and obtains the ID-array, provided by couchbaseESqueryDemo. It then 
		prepares to access Couchbase on its default port:
	</p>
	
	<codeblock outputclass="language-javascript">var queryObject = url.parse(request.url, true).query

var couchbase = require("couchbase");
var myCluster = new couchbase.Cluster('couchbase://localhost');

// Authentication, required by 5.0 and later...
//
myCluster.authenticate('beer-sample', 'beer-sample');

var myBucket = myCluster.openBucket('beer-sample');</codeblock>
	
	<p>
		Note, in the code-fragment
		immediately above, the line used for authentication, which is required by Couchbase
		Server 5.0 and later. This particular example assumes that a user has been
		defined whose username and password are both <codeph>beer-sample</codeph>. It
		also assumes that the user has been assigned the <b>Full Bucket Access</b> role
		for the <i>beer-sample</i> bucket. If a pre-5.0 version of Couchbase Server is
		being used, this line can be commented out or deleted. See
		<xref href="../../security/security-authorization.dita" scope="local" format="dita">Authorization</xref>,
		for information on accessing server-resources by means of <i>Role-Based Access
		Control</i>.
	</p>
	
	<p>
		Next, the function <i>searchCouchbaseForNextID</i> is called recursively, once
		for each ID in the array. The function itself invokes the Couchbase SDK <i>get</i> method,
		to search Couchbase Server for a single ID. (Note that this method is asynchronous.) Once
		all IDs have been searched for, a response containing an array of retrieved documents
		is provided to the client.
	</p>
	
	<codeblock outputclass="language-javascript">function searchCouchbaseForNextID(arrayOfIDs, count, totalCount)
{
    myBucket.get(arrayOfIDs[count], function(err, res)  
    {
	    couchbaseObjectArray[count] = JSON.stringify(res.value);
	
	    if (count &lt; totalCount)
	    {
	        count++;
	        searchCouchbaseForNextID(receivedArray, count, totalCount);
	    } 
	    else 
	    {
	        response.writeHead(200, {"Content-Type": "application/json", 
                "Access-Control-Allow-Origin": "*"});
	        response.end(JSON.stringify(couchbaseObjectArray));
	    }
    });
}</codeblock>
		
</section>
	
<section>
	<title>
		Setting Up the Example
	</title>
	
	<p>
		Successful running of the example requires that Couchbase Server and Elasticsearch both be already 
		installed, configured, and running. The instructions in this section assume that all are on the same 
		node, and that all services can thus be accessed from localhost. 
	</p>
	
	<p>
		Note that the node.js program esNodeJsQueryAgent.js has been written to run on port 8081; and 
		cbNodeJsQueryAgent.js on port 8080. If you wish to change these port-designations, you must edit the 
		program-files, including that for couchbaseESqueryDemo.html. 
	</p>
	
	<p>
		To run the provided node.js programs, you must install both the Couchbase SDK and node.js 
		Elasticsearch client; which in turn requires that you install and use the Node Package Manager, <i>npm</i>. 
		On non-Windows platforms, you may also need to install <i>node-gyp</i>. 
	</p>
	
	<p>
		For information on installing the node.js instance of the Couchbase SDK see the documentation at
		<xref href="https://developer.couchbase.com/documentation/server/current/sdk/nodejs/start-using-sdk.html" scope="external" format="html">Start
		Using the SDK</xref>. 
		See also the Elasticsearch documentation for installing the Elasticsearch client, at 
		<xref href="https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/about.html" scope="external" format="html">About</xref>.
	</p>
	
	<p>
		When you have installed the required SDK, start cbNodeJsQueryAgent at the command-line, as follows:
	</p>
	
	<codeblock outputclass="language-bash">$ node cbNodeJsQueryAgent.js</codeblock>
	
	<p>
		The message <i>Server started</i> is provided in response.
	</p>
	
	<p>
		Start esNodeJsQueryAgent in a separate terminal, as follows:
	</p>
	
	<codeblock outputclass="language-bash">$ node esNodeJsQueryAgent.js</codeblock>
	
	<p>
		A repsonse is provided, confirming that the program has been added as a connection to 
		http://localhost:9200, which is the Elasticsearch port.
	</p>
	
	<p>
		Now, bring up couchbaseESqueryDemo.html in a browser. The layout appears as follows:
	</p>
	
	<p>
		<image id="demoUIinitial" href="images/demoUIinitial.png" align="left" width="520" />
	</p>
	
	<p>
		The UI features three principal elements. at the upper-left, a dialog presents a series of
		radio-butons, permitting selection from a number of beer-styles. At the lower-left,
		a pane is provided for the display of IDs retrieved from Elasticsearch; at the right,
		a pane for the display of documents retrieved from Couchbase.
	</p>
	
	<p>
		Each beer-style can be selected by its corresponding radio-button. For example:
		
	</p>
	
	<p>
		<image id="demoUIradioButtons" href="images/demoUIradioButtons.png" align="left" width="240" />
	</p>
	
	<p>
		Once a beer-style has been selected, querying can be initiated by left-clicking on the
		<uicontrol>Query Elasticsearch</uicontrol> button.
	</p>
	
	<p>
		<image id="demoUIqueryESbutton" href="images/demoUIqueryESbutton.png" align="left" width="180" />
	</p>
	
	<p>
		The full query-routine is duly performed: the beer-style is passed to Elasticsearch, and
		queried on; ID-information is returned to the client; then, ID-information is queried
		against Couchbase Server. Elements retrieved from both repositories are displayed in the
		appropriate panes:
	</p>
	
	<p>
		<image id="demoUIfullQueryResults" href="images/demoUIfullQueryResults.png" align="left" width="520" />
	</p>
	
	<p>
		The panes can be scrolled as needed, to reveal the full set of results.
	</p>
	
</section>
	
<section>
	<title>
		Using Advanced Lucene Strings
	</title>
	
	<p>
		In the above example, since a single beer-style was used as the basis for an Elasticsearch query, the 
		Lucene string submitted was simply the style-name. Note that (as in the case of the curl command-line 
		example provided earlier) more complex queries can be submitted, with the full syntactical form of the 
		query simply submitted as the string. For example, the string <codeph>American-Style Pale Ale</codeph> might be replaced 
		by <codeph>American-Style Pale Ale AND American-Style Brown Ale</codeph>.
	</p>
	
</section>
	

	
</body>
	
</topic>
