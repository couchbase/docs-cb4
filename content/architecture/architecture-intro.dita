<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_gfm_j5f_ps">

 <title>Couchbase Server architecture</title>
	<shortdesc> Couchbase Server is an open source scalable NoSQL database engine. The core architecture is designed to simplify building modern applications with a flexible data model and core database platform abilities ranging from high availability, high scalability, high performance all the way to security.</shortdesc>

 <conbody>
<p>Couchbase Server consists of a single package that is installed on all nodes. Using SDKs (also known as smart client connectivity libraries), you can write applications in the language of your choice (Java, node.js, .NET, or others). The applications connect to a Couchbase Server cluster to perform read and write operations, and run queries with low latencies (sub millisecond) and high throughput (millions of operations per second).</p>
<p>To understand the Couchbase Serverâ€™s architecture, it is important to understand both the core
      components of the system and the behavior of core run time capabilities. For more information
      about the core runtime behavior, see the following topics: <ul>
        <li><xref href="connectivity-architecture.dita">Connectivity architecture</xref></li>
        <li><xref href="high-availability-replication-architecture.dita">Replication
            architecture</xref></li>
        <li><xref href="storage-architecture.dita">Storage architecture</xref></li>
        <li><xref href="managed-caching-layer-architecture.dita">Caching layer
          architecture</xref></li>
        <li><xref href="../security/security-intro.dita">Security architecture</xref></li>
      </ul></p><fig id="fig_bpd_dpn_vs">
        
        <p>The Couchbase Server consists of the following core components: Cluster Manager, Data
        service, Index service, and Query service. The runtime behaviors such as replication,
        storage, caching, and so on can be tuned to the needs of the different services. For more
        information about the core components, see the sections under <xref
          href="cluster-manager.dita">Cluster manager</xref> and Services architecture.</p>
   <p>
        <fig id="fig_ows_shy_vv">
          <title>Nodes, services, and cluster</title>
          <image placement="break" href="images/server-cluster-single-node-type.png" width="600"
            align="left" id="image_pws_shy_vv"/>
        </fig>
      </p></fig>
        
 <section>
   <title>Services</title>
     <p>Couchbase services are components that run specific independent workloads within the
       cluster. Databases handle three distinct workloads: core data operations, indexing, and query processing. Couchbase Server includes Data, Index, Search, and Query Services to enable
       independent deployment of these workloads within a cluster.</p>
     <p>Each node can run all services or a subset of the services. As an administrator, you can create unique topologies using these independent services and independently scale the three workloads. For more information, see <xref href="services-archi-multi-dimensional-scaling.dita"
         >Services architecture and multidimensional scaling</xref>.</p>
     <dl>
       <dlentry>
         <dt>Core data access and data service</dt>
         <dd>Data Service provides the key-value API that you can use to perform CRUD
           operations (create, retrieve, update, and delete) on items with keys within buckets.
           For more information, see <xref href="data-service-core-data-access.dita">Data
             service and core data access</xref>. </dd>
       </dlentry>
       <dlentry>
         <dt>Indexing and index service</dt>
         <dd>Indexes provide faster access to data in a bucket. Couchbase Server supports the
            following indexers: <ul>
              <li>Incremental Map-Reduce View indexer </li>
              <li>Global Secondary Index (GSI) indexer</li>
              <li>Spatial Views indexer </li>
              <li>Full Text Search indexer </li>
            </ul><p>Using these indexers, you can create two types of indexes: <ul>
                <li><term>Primary indexes</term> which index all the keys in a given bucket and are
                  used when a secondary index cannot be used to satisfy a query and a full bucket
                  scan is required. </li>
                <li><term>Secondary indexes</term> can index a subset of the items in a given bucket
                  and are used to make queries targeting a specific subset of fields more
                  efficient.</li>
              </ul></p><p>In Couchbase Server, both MapReduce view and spatial view indexers provide
              direct access to the indexes through the View API. Both the indexers are placed within
              the data service as they are partition-aligned to the core data distribution.
              </p><p>The full text search indexer (Developer Preview) provides direct access to
              indexers through the FTS API. FTS index is placed within its own service (FTS service)
              for independent scalability. </p><p>The Global Secondary Indexes (GSI) are deployed on
              nodes hosting the index service and can be independently partitioned for better
              performance and throughput with N1QL queries. </p><p>For more information about
              indexers and index services, see <xref href="views-indexing-index-service.dita">Views,
                indexing, and index services</xref>.</p></dd>
       </dlentry>
       <dlentry>
         <dt>Querying data and query service</dt>
         <dd>With N1QL, you can query JSON documents using SQL-like syntax. You can also run ad-hoc
            queries with filters and aggregates over JSON data and reshape the JSON output. N1QL API
            is available through the query service. <p>Incremental Map-Reduce views provide a View
              API that can query data based on the keys defined by a view. Views can define the keys
              using the MapReduce functions in JavaScript. Incremental Map-Reduce view API are
              available through data service.</p><p>Spatial views provide a Spatial View API that
              can query data based on a bounding box (rectangle with coordinates). Spatial views
              define the attributes that signify the coordinates a given item represents using the
              MapReduce functions in JavaScript. Spatial view API is available through the data
              service.</p><p>Full text search indexer provides a Search API that can perform keyword
              searches directly on data in Couchbase Server. Search API is available through the
              Search service.</p><p>For more information about querying and retrieving data, see
                <xref href="querying-data-and-query-data-service.dita"> Querying data and query
                service</xref>.</p></dd>
       </dlentry>
     </dl>
   </section>
 </conbody>
</concept>
