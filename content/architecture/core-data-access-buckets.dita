<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_qqk_4r2_xs">
 <title>Buckets</title>
 <shortdesc>Buckets are logical groups of items (keys and values) which can be used to organize, manage, and analyze the group of items. </shortdesc>
 <conbody>
  <section><title>Bucket types</title>
   <p>There are two types of buckets: <ul>
     <li><b>Couchbase buckets</b> use vBuckets to organize disk and memory storage on the nodes and
      distribution of items across the cluster. Items in a Couchbase bucket can be indexed through
      Views and Indexes created on the data in the buckets. These items can also be replicated
      between nodes and clusters using Database Change Protocol (DCP) and Cross Datacenter
      Replication (XDCR). </li>
     <li><b>Memcached buckets</b> exhibit special behavior. </li>
    </ul></p>

   <p><table frame="all" rowsep="1" colsep="1" id="table_v42_tfg_xs">
     <title>Bucket types in Couchbase Server</title>
     <tgroup cols="2">
      <colspec colname="c1" colnum="1" colwidth="1.0*"/>
      <colspec colname="c2" colnum="2" colwidth="1.0*"/>
      <thead>
       <row>
        <entry>Bucket type</entry>
        <entry>Description</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>Couchbase</entry>
        <entry>
         <ul id="ul_evy_5fg_xs">
          <li>Provides highly-available and dynamically reconfigurable distributed data storage,
           with persistence and replication services.</li>
          <li>100% protocol compatible with, and built in the spirit of, the memcached open source
           distributed key-value cache.</li>
         </ul>
        </entry>
       </row>
       <row>
        <entry>Memcached</entry>
        <entry>
         <ul id="ul_t2x_zfg_xs">
          <li>Provides a directly-addressed, distributed (scale-out), in-memory, key-value
           cache.</li>
          <li>Designed to be used alongside other database platforms such as relational database
           technology.</li>
          <li>By caching frequently-used data, they reduce the number of queries a database server
           must perform for web servers delivering a web application.</li>
         </ul>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table></p>
   <p><note type="important">With memcached buckets, the server provides only in-RAM storage and data does not persist on disk. 
    If Couchbase Server runs out of space in the bucketâ€™s RAM quota, 
    it uses the Least Recently Used (LRU) algorithm to evict items from the RAM. This means the server removes the key, metadata, 
    and all other data for the item from the RAM. Once evicted, you cannot retrieve the item. </note></p>
   <p>The different bucket types support different capabilities. <table frame="all" rowsep="1"
     colsep="1" id="table_whf_lhl_xs">
     <title>Bucket types and supported capabilities</title>
     <tgroup cols="3">
      <colspec colname="c1" colnum="1" colwidth="1.0*"/>
      <colspec colname="c2" colnum="2" colwidth="1.0*"/>
      <colspec colname="c3" colnum="3" colwidth="1.0*"/>
      <thead>
       <row>
        <entry>Capability</entry>
        <entry>Memcached buckets</entry>
        <entry>Couchbase buckets</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>Item size limit</entry>
        <entry>1 MB</entry>
        <entry>20 MB</entry>
       </row>
       <row>
        <entry>Persistence</entry>
        <entry>No</entry>
        <entry>Yes</entry>
       </row>
       <row>
        <entry>Replication</entry>
        <entry>No</entry>
        <entry>Yes</entry>
       </row>
       <row>
        <entry>Rebalance</entry>
        <entry>No</entry>
        <entry>Yes</entry>
       </row>
       <row>
        <entry>Statistics</entry>
        <entry>Limited set for in-memory statistics</entry>
        <entry>Full suite</entry>
       </row>
       <row>
        <entry>Client support</entry>
        <entry>Ketama consistent hashing</entry>
        <entry>Full smart client support</entry>
       </row>
       <row>
        <entry>XDCR</entry>
        <entry>No</entry>
        <entry>Yes</entry>
       </row>
       <row>
        <entry>Backup</entry>
        <entry>No</entry>
        <entry>Yes</entry>
       </row>
       <row>
        <entry>TAP/DCP</entry>
        <entry>No</entry>
        <entry>Yes</entry>
       </row>
       <row>
        <entry>Encrypted data access</entry>
        <entry>Yes </entry>
        <entry>Yes</entry>
       </row>
      </tbody>
     </tgroup>
    </table></p>
   <p>Couchbase buckets provide a highly-available and dynamically reconfigurable distributed data
    store. They survive node failures and allow cluster reconfiguration while continuing to service
    requests.</p> 
   <p><table frame="all" rowsep="1" colsep="1" id="table_dcd_m3l_xs">
     <title>Coucbase bucket capabilities</title>
     <tgroup cols="2" align="left">
      <colspec colname="c1" colnum="1"/>
      <colspec colname="c2" colnum="2"/>
      <thead>
       <row>
        <entry>Couchbase bucket capability</entry>
        <entry>Description</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>Caching</entry>
        <entry>Couchbase buckets operate through RAM. The data is stored in RAM and persisted to
         disk. The data is cached in RAM until the configured RAM is exhausted and data is ejected
         from the RAM. If the requested data is not currently in the cache (RAM), it will be loaded
         automatically from disk.</entry>
       </row>
       <row>
        <entry>Persistence</entry>
        <entry>Couchbase server persists data objects asynchronously from memory to hard disk. This
         provides protection from server restarts. You can set persistence properties at the bucket
         level. </entry>
       </row>
       <row>
        <entry>Replication</entry>
        <entry>You can configure the number of replica servers that receive copies of all data
         objects. If the host machine fails, a replica server is promoted to be the host server,
         providing high availability cluster operations via failover. You can configure replication
         at the bucket level.</entry>
       </row>
       <row>
        <entry>Rebalancing</entry>
        <entry>Rebalancing enables load distribution across resources and dynamic addition or
         removal of buckets and servers in the cluster.</entry>
       </row>
      </tbody>
     </tgroup>
    </table></p>
  </section>
  <section><title>Bucket authentication</title>
  <p>Both Memcached and Couchbase buckets allow anonymous access and support SASL authentication. <ul>
   <li>SASL buckets: You can access SASL authenticating Couchbase buckets through port 11210. Each bucket is identified by its name and password, and you can use vBucket aware smart clients (SDKs) to access a SASL bucket. You cannot use legacy ASCII clients to reach these buckets. </li>
   <li>Non-SASL buckets: You can place non-SASL buckets on any available port except port 11211, which is reserved for the default bucket. Port numbers are unique and help identify the buckets. Hence, you can place only one non-SASL bucket on any individual port. You can access non-SASL buckets using vBucket aware smart client (SDKs), as ASCII client or a binary client that does not use SASL authentication.</li>
  </ul></p>
   <p>Smart clients discover changes in the cluster using the Couchbase Management REST API. Using SASL buckets you can isolate individual applications to provide multi-tenancy, or isolate data types in the cache to enhance performance and visibility. Using the Couchbase Server, you can configure different ports to access one of the following: <ul>
    <li>non-SASL buckets</li>
    <li>isolated buckets using the binary protocol with SASL authentication, or </li>
    <li>isolated buckets using the ASCII protocol with no authentication</li>
   </ul></p>
   <p> You can use a mix of bucket types (Couchbase and memcached) in your environment. Buckets of different types share the same resource pool and cluster resources.</p>
   <p>You can configure the quotas for RAM and disk usage per bucket, enabling you to manage resource usage across the cluster. As an administrator, you can modify quotas on a running cluster and re-allocate resources when usage patterns or priorities change.</p>
  </section>
  <section><title>The default bucket</title>
   <p>The <i>default bucket</i> is a special bucket in Couchbase Server. When you first install Couchbase Server, the default bucket is automatically set up during installation. The default bucket is a non-SASL authenticating bucket that always resides on port 11211. You can remove the default bucket after installation and re-add it at a later time. When re-adding the default bucket, ensure that you place it on port 11211 and it must be a non-SASL authenticating bucket. You can access the default bucket using vBucket aware smart client (SDKs), an ASCII client, or a binary client that does not use SASL authentication.</p>
  </section>
 </conbody>
</concept>
