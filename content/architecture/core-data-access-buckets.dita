<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_qqk_4r2_xs">
 <title>
  Buckets
 </title>
 
 <shortdesc>
  Couchbase Server uses buckets to group collections of keys and values logically.
  A Couchbase cluster can have multiple buckets, each with its own memory quota,
  number of replica copies, and capabilities. Couchbase Server supports three
  different types of bucket, the properties of which are described in this section.
 </shortdesc>
 
 <conbody>
  
  <section>
   
   <title>
    Bucket Types
   </title>
   
   <p id="couchbase-bucket-types">
    Three types of bucket are provided: 
   </p>
    
    <ul>
     <li>
      <b>Couchbase buckets</b>: Allow data to be automatically replicated for high availability, using the
      <xref href="./high-availability-replication-architecture.dita" scope="local" format="dita">Database
       Change Protocol (DCP)</xref>, and dynamically scaled across multiple servers, by means of 
      <xref href="../xdcr/xdcr-intro.dita" scope="local" format="dita">Cross Datacenter Replication (XDCR)</xref>. 
      
      <p>
       <!-- Vertical space -->
      </p>
      
      <p>
       If a Couchbase bucket's RAM-quota is exceeded, items are <i>ejected</i>. See below for a definition
       of <i>ejection</i>.
      </p>
      
      <p>
       <!-- Vertical space -->
      </p>
      
     </li>
     
     <li>
      <b>Ephemeral buckets</b>: Are an alternative to Couchbase buckets, to be used whenever persistence
      is not required: for example, when repeated disk-access involves too much overhead. This allows 
      highly consistent in-memory performance, without disk-based
      fluctuations. It also allows faster node rebalances and restarts. 
      
      <p>
       <!-- Vertical space -->
      </p>
      
      <p>
       If an Ephemeral bucket's RAM-quota is exceeded, one of the following occurs, based on configuration
       performed at the time of 
       bucket-creation:
      </p>
      
      <ul>
       
       <li>
        Resident data-items remain in RAM. No additional data can be added; and attempts to add data therefore fail.
       
        <p>
         <!-- Vertical space -->
        </p>
       
       </li>
       
       <li>
        Resident data-items are <i>ejected</i> from RAM, to make way for new data. 
        
        <p>
         <!-- Vertical space -->
        </p>
        
       </li>
       
      </ul>
      
     </li>
     
     <li>
      <b>Memcached buckets</b>: Are designed to be used alongside other database platforms, such as ones
      employing relational database technology. By caching frequently-used data, Memcached buckets reduce the number
      of queries a database-server must perform. Each 
      Memcached bucket provides a directly addressable, distributed, in-memory key-value cache.
      
      <p>
       <!-- Vertical space -->
      </p>
      
      <p>
       Memcached buckets are <i>not persistent on disk</i>: they only exist in RAM. If a Memcached bucket's
       RAM-quota is exceeded, items are <i>ejected</i>. 
      </p>
      
      <p>
       <!-- Vertical space -->
      </p>
      
     </li>

    </ul>
   
   <p>
    All bucket types are fully compatible with the Memcached open source distributed key-value cache.
   </p>
   
  </section>
  
  <section id="ejection-definitions">
   <title>
    Ejection
   </title>
   
   <p>
    The effect
    of ejection depends on bucket-type:
   </p>
   
   <ul>
    
    <li>
     <b>Couchbase-Bucket Item-Ejection</b>: Data, which is resident both in memory and on disk, is removed from memory, but not 
     from disk. Therefore, if removed data is 
     subsequently needed, it is reloaded into memory from disk. 
     
     <p>
      Ejection can be either of the following, based on configuration performed at the time of
      bucket-creation: 
      
     </p>
     
     <ul>
      
      <li>
       <i>Value-only</i>: Only key-values are removed.
       
       <p>
        <!-- Vertical space -->
        
       </p>
       
      </li>
      
      <li>
       <i>Full</i>: All data &#8212; including keys, key-values, and meta-data &#8212; is removed.
       
       <p>
        <!-- Vertical space -->
        
       </p>
       
      </li>
      
     </ul>
     
     <p>
      Generally, <i>Value-only</i> favors performance at the expense of memory; and <i>Full</i> vice versa.
     </p>
     
     <p>
      When a Couchbase bucket's RAM-quota is exceeded, items are selected for ejection; by 
      means of the <i>Not Recently Used</i> (NRU) algorithm. 
     </p>
     
     <p>
      <!--Vertical space -->
     </p>
     
    </li>
    
    <li>
     <b>Memcached and Ephemeral-Bucket Item-Ejection</b>: Data, which is resident in memory (but, due to
     these types of bucket, can never be on disk), is 
     removed from memory. Therefore, if removed
     data is subsequently needed, it cannot be re-acquired from Couchbase Server.
     
     <p>
      <!--Vertical space -->
     </p>
     
     <p>
      Ejection removes all of an item's data: however, for Ephemeral buckets,
      a <i>tombstone</i> (a record of the ejected item, which
      includes keys and metadata) is retained until the next scheduled purge of metadata for the current node. See
      <xref href="./core-data-access-bucket-disk-storage.dita" scope="local" format="dita">Bucket Disk Storage</xref>
      for more information.
     </p>
     
     <p>
      When an Ephemeral or Memcached bucket's RAM-quota is exceeded, items are selected for ejection; by 
      means of the <i>Not Recently Used</i> (NRU) algorithm. 
     </p>

     <p>
      <!--Vertical space -->
     </p>
     
    </li>
    
   </ul>
   
  </section>
  
  <section>
   
   <title>
    Bucket Capabilities
   </title>
   
   <p>
    Each bucket type supports a different set of capabilities; as shown by the following
    table. 
   </p>
    
    <table frame="all" rowsep="1" colsep="1" id="table_whf_lhl_xs">
     
     <title>Bucket types and associated capabilities</title>
     
     <tgroup cols="4">
      <colspec colname="c1" colnum="1" colwidth="0.6*"/>
      <colspec colname="c2" colnum="2" colwidth="0.6*"/>
      <colspec colname="c3" colnum="3" colwidth="0.6*"/>
      <colspec colname="c4" colnum="4" colwidth="0.6*"/>
      
      <thead>
       <row>
        <entry>Capability</entry>
        <entry>Memcached buckets</entry>
        <entry>Couchbase buckets</entry>
        <entry>Ephemeral buckets</entry>
       </row>
      </thead>
      
      <tbody>
       
       <row>
        <entry>Item size limit</entry>
        <entry>1 MB</entry>
        <entry>20 MB</entry>
        <entry>20 MB</entry>
       </row>
       
       <row>
        <entry>Persistence</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>No</entry>
       </row>
       
       <row>
        <entry>Replication</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>
       
       <row>
        <entry>Rebalance</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>
       
       <row>
        <entry>Statistics</entry>
        <entry>All except disk-related</entry>
        <entry>All</entry>
        <entry>All except disk-related</entry>
       </row>
       
       <row>
        <entry>Client support</entry>
        <entry>Ketama consistent hashing</entry>
        <entry>Full smart client support</entry>
        <entry>Full smart client support</entry>
       </row>
       
       <row>
        <entry>XDCR</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>
       
       <row>
        <entry>Backup</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>
       
       <row>
        <entry>Querying via N1QL</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>
       
       <row>
        <entry>Map-reduce &amp; spatial views</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>No</entry>
       </row>
       
       <row>
        <entry>Global Secondary Indexes</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>No</entry>
       </row>
       
       <row>
        <entry>Memory Optimized Indexes</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>
       
       <row>
        <entry>Full-Text Search</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>
       
       <row>
        <entry>External connectors</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>
       
       <row>
        <entry>DCP</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>
       
       <row>
        <entry>Encrypted data access</entry>
        <entry>Yes </entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>
       
       <row>
        <entry>Indexing: MOI</entry>
        <entry>No </entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>
       
       <row>
        <entry>Indexing: ForestDB</entry>
        <entry>No </entry>
        <entry>Yes</entry>
        <entry>No</entry>
       </row>
       
       <row>
        <entry>Indexing: Plasma</entry>
        <entry>No </entry>
        <entry>Yes</entry>
        <entry>No</entry>
       </row>
       
       <row>
        <entry>Durability: Persist To</entry>
        <entry>No </entry>
        <entry>Yes</entry>
        <entry>No</entry>
       </row>
       
       <row>
        <entry>Durability: Replication</entry>
        <entry>No </entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>

      </tbody>
     </tgroup>
    </table>
   
  </section>
  
  <section>
   <title>
    Couchbase vs Ephemeral Buckets
   </title>
   
   <p>
    Couchbase and Ephemeral buckets both provide a highly available, dynamically reconfigurable, distributed 
    data-store; which survives node failures, and allows cluster-reconfiguration to occur while service-requests
    continue to be handled. The similarities and differences between these bucket-types are summarized in the following
    table.
   </p> 
   
   <table frame="all" rowsep="1" colsep="1" id="table_dcd_m3l_xs">
    
     <title>
      Couchbase and Ephemeral bucket-capabilities
     </title>
    
     <tgroup cols="3" align="left">
      <colspec colname="c1" colnum="1" colwidth="0.6*"/>
      <colspec colname="c2" colnum="2" colwidth="1.0*"/>
      <colspec colname="c2" colnum="3" colwidth="1.0*"/>
      <thead>
       <row>
        <entry>Capability</entry>
        <entry>Couchbase Buckets</entry>
        <entry>Ephemeral Buckets</entry>
       </row>
      </thead>
      
      <tbody>
       
       <row>
        <entry>
         Caching
        </entry>
        
        <entry>
         Couchbase buckets operate through RAM. The data is stored in RAM and persisted to
         disk. The data is cached in RAM until RAM-capacity is exhausted; at which point data is <i>ejected</i>
         from RAM. Following ejection, or at any other time when not in RAM, requested bucket-data is loaded
         automatically from disk.
        </entry>
        
        <entry>
         Ephemeral buckets operate exclusively within RAM. The data is not persisted to
         disk: it is cached in RAM until RAM-capacity is exhausted; at which point,
         in accordance with an administrator's previously selected set-up options,
         either no additional data can be added, or the <i>Not Recently Used</i> algorithm is
         employed, in order to <i>eject</i> data.
        </entry>
        
       </row>
       
       <row>
        
        <entry>
         Persistence
        </entry>
        
        <entry>
         Couchbase buckets are persisted asynchronously, from memory to disk. This
         provides protection from server-restarts. You can set persistence-properties at the bucket
         level. 
        </entry>
        
        <entry>
         Ephemeral buckets are not persisted to disk: they are retained in RAM only.
        </entry>
        
       </row>
       
       <row>
        
        <entry>
         Replication
        </entry>
        
        <entry>
         Couchbase buckets can be replicated across a configurable number of servers.
         If the host machine fails, a replica server is promoted to be the host server,
         providing high availability cluster operations via failover. You can configure replication
         at the bucket level.
        </entry>
        
        <entry>
         Ephemeral buckets can be replicated across a configurable number of servers,
         exactly as can Couchbase buckets; but without being persisted to disk.
        </entry>
        
       </row>
       
       <row>
        
        <entry>
         Rebalancing
        </entry>
        
        <entry>
         By means of rebalancing, the load constituted by Couchbase buckets is distributed
         evenly across nodes within the cluster. Buckets and nodes can be dynamically added and
         removed.
        </entry>
        
        <entry>
         Rebalancing redistributes Ephemeral buckets, exactly as it does Couchbase buckets; but
         without the data being persisted to disk.
        </entry>
        
       </row>
       
       <row>
        
        <entry>
         Auto-failover
        </entry>
        
        <entry>
         By default, Auto-failover starts when a node has been inaccessible for 120 seconds. Auto-failover
         can happen only once, for a single node; prior to manual reset, performed by an
         administrator. When a failed node becomes accessible again, delta-node recovery is used: 
         re-using data on disk, and resynchronizing it.
        </entry>
        
        <entry>
         Auto-failover starts as soon as a node is inaccessible. 
         Auto-failover can happen multiple times, for multiple nodes. When a failed node becomes
         accessible again, no delta-node recovery is required, since no data resides on disk.
        </entry>
        
       </row>
       
      </tbody>
     </tgroup>
    </table>

   
  </section>
  
  <section>
   
   <title>
    Bucket Security
   </title>
   
   <p>
    Buckets are protected by the Couchbase <i>Role-Based Access Control</i>
    (RBAC) system. See
    <xref href="../security/security-authorization.dita" scope="local" format="dita">Authorization</xref>
    and
    <xref href="../security/security-authentication.dita" scope="local" format="dita">Authentication</xref>
    for details.
   </p>
   
   <p>
    Legacy buckets, defined on releases of Couchbase Server prior to 5.0, may continue
    to be accessible without password-specification. However, you are strongly recommended
    to ensure that all buckets are fully protected by RBAC, especially for production
    purposes.
   </p>
   
  </section>
  
  <section>
   <title>
    Using Buckets in Administration and Development
   </title>
   
   <p>
    For information on how to create, access, and manage buckets, see
    <xref href="../clustersetup/bucket-setup.dita" scope="local" format="dita">Setting Up Buckets</xref>.
   </p>
  </section>
  
 </conbody>
</concept>
