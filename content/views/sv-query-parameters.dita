<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="sv-query-parameters">
  <title>Querying Spatial Views</title>
  <shortdesc>Spatial views are retrieved with the REST API <codeph>GET
      /[bucket-name]/_design/[design-doc]/_spatial/[spatial-name]</codeph> HTTP method and
    URI.</shortdesc>
  <refbody>
    
    <section><title>HTTP method and URI</title>
      <codeblock>GET /[bucket-name]/_design/[design-doc]/_spatial/[spatial-name]</codeblock>
      
      <table>
        <tgroup cols="2">
          <colspec colname="col1" colwidth="1*"/>
          <colspec colname="col2" colwidth="3*"/>
          <thead>
            <row>
              <entry>HTTP</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Method and URI</entry>
              <entry><codeph>GET
                  /[bucket-name]/_design/[design-doc]/_spatial/[spatial-name]</codeph></entry>
            </row>
            <row>
              <entry>Request Data</entry>
              <entry>None</entry>
            </row>
            <row>
              <entry>Response Data</entry>
              <entry>JSON of the documents returned by the view</entry>
            </row>
            <row>
              <entry>Authentication Required</entry>
              <entry>no</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
  
  
  
  
      <note type="note">The <codeph>start_range</codeph> and <codeph>end_range</codeph> parameters
        take a JSON array and are preferred over the <codeph>bbox</codeph> parameter. </note>
    
    <table>
      <title>Query parameters</title>
      <tgroup cols="3">
          <colspec colname="col1" colwidth="1*"/>
          <colspec colname="col2" colwidth="1.5*"/>
          <colspec colname="col3" colwidth="3*"/>
          <thead>
            <row>
              <entry>Parameter</entry>
              <entry>Type</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><codeph>start_range</codeph></entry>
              <entry>Array of numeric or null; optional</entry>
              <entry>The number of elements must match the number of dimensions of the
                index.</entry>
            </row>
            <row>
              <entry><codeph>end_range</codeph></entry>
              <entry>Array of numeric or null; optional</entry>
              <entry>The number of elements must match the number of dimensions of the
                index.</entry>
            </row>
            <row>
              <entry><codeph>bbox</codeph></entry>
              <entry>String; optional</entry>
              <entry>Specify the bounding box for a spatial query.</entry>
            </row>
            <row>
              <entry><codeph>limit</codeph></entry>
              <entry>Numeric; optional</entry>
              <entry>Limit the number of the returned documents to the specified number.</entry>
            </row>
            <row>
              <entry><codeph>skip</codeph></entry>
              <entry>Numeric; optional</entry>
              <entry>Skip this number of records before starting to return the results.</entry>
            </row>
            <row>
              <entry><codeph>stale</codeph></entry>
              <entry>String; optional</entry>
              <entry>Specifies the level of data freshness. <p>Supported values: <ul>
                    <li><codeph>false </codeph><p>The server waits for the indexer to finish the
                        changes that correspond to the current key-value document set and then
                        returns the latest entries from the view file.</p></li>
                    <li><codeph>ok </codeph><p>The server returns the current entries from the view
                        file.</p></li>
                    <li><codeph>update_after </codeph><p>The server returns the current entries from
                        the view file, and then initiates an view file update.</p></li>
                  </ul></p>
              </entry>
            </row>
          </tbody>
        </tgroup>
    </table>
      
      <p>When submitting a view query, the <codeph>stale</codeph> parameter is used to specify the data freshness. 
        The <codeph>stale</codeph> parameter the following values:</p>
      
      <ul>
        <li><codeph>ok</codeph>—The server returns the current entries from the index file.</li>
        <li><codeph>update_after</codeph>—The server returns the current entries from the index,
          and then initiates an index update.</li>
        <li><codeph>false</codeph>—The server waits for the indexer to finish the changes that
          correspond to the current key-value document set and then returns the latest entries
          from the view index.</li>
      </ul>
      
    <p>Every 5 seconds the automatic update process checks whether 5000 changes have occurred. If a
        minimum of 5000 changes occurred, an view file update is triggered. Otherwise, no update is
        triggered. When triggered, the indexer requests from DCP all changes since it was last run.
        The default number of changes to check for is 5000, but that number can be configured by
        setting the <codeph>updateMinChanges</codeph> option. The update interval can also be
        configured by setting the <codeph>updateInterval</codeph> option. </p>
      
      <p>The <codeph>stale=false</codeph> view query argument has been enhanced. When an application
        sends a query that has the <codeph>stale</codeph> parameter set to false, the
        application receives all recent changes to the documents, including changes that haven't
        yet been persisted to disk. It considers all document changes that have been received at
        the time the query was received. </p>
      <p>You can issue the <codeph>stale=false</codeph> view query anytime and results will fetch
        all changes that have been made when the query was issued. </p>
      
      
      <note type="other" othertype="Best practice">For better scalability and throughput, set the
        value of the <codeph>stale</codeph> parameter to <codeph>ok</codeph>. With the stream-based
        views, data returned when <codeph>stale</codeph> is set to <codeph>ok</codeph> is closer to
        the key-value data, even though it might not include all of it.</note>
      
    </section>
    
    <section><title>Responses</title>
      <p>The standard response includes <codeph>total_rows</codeph>, <codeph>id</codeph>,
					<codeph>key</codeph>, <codeph>value</codeph>, and <codeph>geometry</codeph>. The
					<codeph>total_rows</codeph> item is always zero. The <codeph>geometry</codeph> item
				is not shown if no geometry was emitted. If a geometry was emitted, the
					<codeph>key</codeph> contains the ranges of the calculated bounding box.</p>
      <codeblock>{"total_rows":0, "rows": [{
    "id":"id-name"
    "key": [[value, value], [value, value]],
    "value": null,
    "geometry": {"type": "Point", "coordinates": [value, value]}
}]}</codeblock>
      
      
      <p>Example response if geometry was emitted:</p>
      <codeblock>{"total_rows":0, "rows": [{
    "id":"Augsburg"
    "key": [[10.9, 10.9], [48.4, 48.4]],
    "value": null,
    "geometry": {"type": "Point", "coordinates": [10.9, 48.4]}
}]}</codeblock>
      
      <p>Example response if geometry was not emitted:</p>
      <codeblock>{"total_rows":0, "rows": [{
    "id":"Augsburg"
    "key": [[10.9, 10.9], [48.4, 48.4]], [1000, 2000]],
    "value": null,
}]}</codeblock>
    
    </section>
    <section><title>Open Range Queries</title>
      <p>Open range queries specify <codeph>null</codeph> as a value on either one or both sides of the range.</p>
      <p>For example, to query shops in Germany that are open between 10:00 and 20:00.</p>
      <p>In this case, the emit could be:</p>
      <codeblock outputclass="language-javascript">emit([{
        "type": "Point",
        "coordinates":[10.9, 48.4]
        }, [1000, 2000]], null);</codeblock>
      
      <p>To query for shops in Germany with an opening time of 10:00 and no closing time:</p>
      <codeblock>?start_range=[5.87,47.27,1000]&amp;end_range=[15.04,55.06,null]</codeblock>
      
      <p>To query for shops in Germany with no opening time and a closing time of 20:00:</p>
      <codeblock>?start_range=[5.87,47.27,null]&amp;end_range=[15.04,55.06,2000]</codeblock>
      
      <p>To query for shops in Germany with no opening or closing time:</p>
      <codeblock>?start_range=[5.87,47.27,null]&amp;end_range=[15.04,55.06,null]</codeblock>
      
      <p>To query for shops anywhere (no location specified) with an opening time of 10:00 and a closing time of 20:00:</p>
      <codeblock>?start_range=[null,null,1000]&amp;end_range=[null,null,2000]</codeblock>
         </section> 
    <section><title>Closed Range Queries</title>
      <p>Closed range queries use the <codeph>start_range</codeph> and <codeph>end_range</codeph> parameters 
        with the bounds specified.</p>
      <p>Closed range queries are used to query items with a certain range. If no range is supplied, the
        full data set is returned. For example, if only the longitude (1st dimension) and the
        latitude (2nd dimension) is emitted, the bounds of a country could be queried.</p>
      
      <p>For example, to query shops in Germany that are open between 10:00 and 20:00.</p>
      
      <p>In this case, the emit could be:</p>
      <codeblock>emit([{
        "type": "Point",
        "coordinates":[10.9, 48.4]
        }, [1000, 2000]], null);</codeblock>
      
      <p>This emit cannot be a query with a bounding box because it contains three
        dimensions.</p>
      
      <p>The query for the shop emit could be:</p>
      <codeblock>?start_range=[5.87,47.27,1000]&amp;end_range=[15.04,55.06,2000]</codeblock>
    </section>
    <section><title>Bounding Box Queries</title>
      <p>Bounding box queries are implemented via HTTP method and URI.</p>
      <note type="note">Use of the bounding box parameter is discouraged. Use the
        <codeph>start_range</codeph> and <codeph>end_range</codeph> parameters instead. Every
        bounding box can be expressed with <codeph>start_range</codeph> and
        <codeph>end_range</codeph> parameters.</note>
      
      <p>If a bounding box is not supplied, the full data set is returned. When querying a spatial
        index, use the bounding box to specify the boundaries of the query lookup on a given value.
        The specification should be in the form of a comma-separated list of the coordinates to use
        during the query.</p>
      
      <p>These coordinates are specified as in the GeoJSON specification, so the first
        two numbers are the lower left coordinates, and the last two numbers are the upper
        right coordinates.</p>
      
      <p>A bounding box can be expressed as with <codeph>start_range</codeph> and <codeph>end_range</codeph> parameters. Example:</p>
      <codeblock>bbox=0,0,180,90</codeblock>
      <codeblock>start_range=[0,0]&amp;end_range[180,90]</codeblock>
      <p><b>Syntax</b></p>
      <codeblock>GET http://[localhost]:8092/places/_design/[design-doc]/_spatial/points?bbox=-180,-90,0,0
        Content-Type: application/json
      </codeblock>
      <p><b>Example</b></p>
      <p>HTTP request example:</p>
      <codeblock>GET http://127.0.0.1:8092/places/_design/main/_spatial/points?bbox=-180,-90,0,0
        Content-Type: application/json</codeblock>
      <p><b>Response</b></p>
      <p>Example response:</p>
      
      <codeblock>{
        "total_rows": 0,
        "rows": [
        {
        "id": "oakland",
        "key": [
        [
        -122.270833,
        -122.270833
        ],
        [
        37.804444,
        37.804444
        ]
        ],
        "value": [
        "oakland",
        [
        -122.270833,
        37.804444
        ]
        ]
        }
        ]
        }</codeblock>
          </section>
          
  </refbody>
</reference>
