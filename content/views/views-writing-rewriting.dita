<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="views-writing-rewriting">
 <title>Re-writing Built-in Reduce Functions</title>
 <shortdesc></shortdesc>
 <conbody>
 
   <p>Using this model as a template, it is possible to write the full implementation of the
    built-in functions <codeph>_sum</codeph> and <codeph>_count</codeph> when working with
    the sales data and the standard <codeph>map()</codeph> function below:</p>
   <codeblock>function(doc, meta)
{
  emit(meta.id, null);
}
</codeblock>
   <p>The <codeph>_count</codeph> function returns a count of all the records for a given key.
    Since argument for the reduce function contains an array of all the values for a given
    key, the length of the array needs to be returned in the <codeph>reduce()</codeph>
    function:</p>
   <codeblock>function(key, values, rereduce) {
   if (rereduce) {
       var result = 0;
       for (var i = 0; i &lt; values.length; i++) {
           result += values[i];
       }
       return result;
   } else {
       return values.length;
   }
}
</codeblock>
   <p>To explicitly write the equivalent of the built-in <codeph>_sum</codeph> reduce
    function, the sum of supplied array of values needs to be returned:</p>
   <codeblock>function(key, values, rereduce) {
  var sum = 0;
  for(i=0; i &lt; values.length; i++) {
    sum = sum + values[i];
  }
  return(sum);
}
</codeblock>
   <p>In the above function, the array of data values is iterated over and added up, with the
    final value being returned.</p>
  
  
  
  
 </conbody>
</concept>
