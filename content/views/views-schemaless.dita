<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic xml:lang="en-us" id="topic1678">
  <title>Views in a Schema-less Database</title>
  <shortdesc>A schema-less database along with view definitions provide for a flexible document structure.</shortdesc>
  <body>
    <p>One of the primary advantages of the document-based storage and the use of map/reduce views
      for querying the data is that the structure of the stored documents does not need to be
      predeclared, or even consistent across multiple documents.</p>
    <p>Instead, the view can cope with and determine the structure of the incoming documents that
      are stored in the database, and the view can then reformat and restructure this data during
      the map/reduce stage. This simplifies the storage of information, both in the initial format,
      and over time, as the format and structure of the documents can change over time.</p>
    <p>For example, you could start storing name information using the following JSON structure:</p>
    <codeblock>{
   "email" : "mc@example.org",
   "name" : "Martin Brown"
}
</codeblock>
    <p>A view can be defined that outputs the email and name:</p>
    <codeblock>function(doc, meta)
{
    emit([doc.name, doc.email], null);
}</codeblock>
    <p>This generates an index containing the name and email information. Over time, the application
      is adjusted to store the first and last names separately:</p>
    <codeblock>{
   "email" : "mc@example.org",
   "firstname" : "Martin",
   "lastname" : "Brown"
}
</codeblock>
    <p>The view can be modified to cope with both the older and newer document types, while still
      emitting a consistent view:</p>
    <codeblock>function(doc, meta)
{
  if (doc.name &amp;&amp; (doc.name != null))
  {
    emit([doc.name, doc.email], null);
  }
  else
  {
    emit([doc.firstname + " " + doc.lastname, doc.email], null);
  }
}
</codeblock>
    <p>The schema-less nature and view definitions provide for a flexible document structure, and an
      evolving one, without requiring either an initial schema description, or explicit schema
      updates when the format of the information changes.</p>
  </body>
</topic>
