<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="data-json">
 <title>JSON Data</title>
 <shortdesc>JSON is a lightweight, easily parsed, cross-platform data representation format.</shortdesc>
 <conbody>
  
  
   <p> There are a multitude of libraries and tools
    designed to help developers work efficiently with data represented in JSON format, on every
    platform and every conceivable language and application framework, including, of course,
    most web browsers.</p>
   <p>JSON supports the same basic types as supported by JavaScript, including:</p>
    
   <ul>
    <li>Number (either integer or floating-point) <p>JavaScript supports a maximum numerical value
     of 2<sup>53</sup>. If larger numbers within the client library environment are used (for
     example, 64-bit numbers), store the value as a string.</p></li>
     <li>String
      <p>This should be enclosed by double-quotes and supports Unicode characters and
      backslash escaping. For example: 
       <codeblock>"A String"</codeblock></p></li>
     <li>Boolean <p>A <codeph>true</codeph> or <codeph>false</codeph> value. These strings are used
     directly. For example: <codeph>{ "value": true}</codeph></p></li>
     <li>Array
      <p>List of values enclosed in square brackets. For example:
      <codeph>["one", "two", "three"]</codeph></p></li>
     <li>Object
      <p>Set of key/value pairs (i.e. an associative array, or hash). The key must
      be a string, but the value can be any of the supported JSON values. For example:
      <codeblock>{
   "servings" : 4,
   "subtitle" : "Easy to make in advance, and then cook when ready",
   "cooktime" : 60,
   "title" : "Chicken Coriander"
}
</codeblock></p></li>
    </ul>

   
  
  
  <section><title>Document metadata</title>
   <p>During view processing, metadata about individual
    documents is exposed through a separate JSON object, <codeph>meta</codeph>, that can be
    optionally defined as the second argument to the <codeph>map()</codeph>. This metadata can
    be used to further identify and qualify the document being processed.</p>
   <p>The
    <codeph>meta</codeph> structure contains the following fields and associated
    information:</p>
   
   
   <ul>
    <li><codeph>id</codeph>
     <p>The ID or key of the stored data object. This is the same as the key used when writing
    the object to the Couchbase database.</p></li>
     <li><codeph>rev</codeph>
      <p>An internal revision ID used internally to track the current revision of the
     information. The information contained within this field is not consistent or trackable and
     should not be used in client applications.</p></li>
      <li><codeph>type</codeph>
       <p>The type of the data that has been stored. A valid JSON document will have the type
      <codeph>json</codeph>. Documents identified as binary data will have the type
      <codeph>base64</codeph>.</p></li>
       <li><codeph>flags</codeph>
        <p>The numerical value of the flags set when the data was stored. The availability and
       value of the flags is dependent on the client library you are using to store your data.
       Internally the flags are stored as a 32-bit integer.</p></li>
        <li><codeph>expiration</codeph>
         <p>The expiration value for the stored object. The stored expiration time is always
    stored as an absolute Unix epoch time value.</p><p>These additional fields are only exposed
     when processing the documents within the view server. These fields are not returned when you
     access the object through the Memcached/Couchbase protocol as part of the
     document.</p></li>
   </ul>
  </section>
  
  
  <section><title>Retrieving JSON data</title>
   
   <p>Information identified as JSON data may not be returned in a format identical to that stored.
    The information will be semantically identical, in that the same fields, data and structure as
    submitted will be returned. Metadata information about the document is presented in a separate
    structure available during view processing.</p>
   <p>The white space, field ordering may differ from the submitted version of the JSON
    document.</p>
   <p>For example, the JSON document below, stored using the key <codeph>mykey</codeph> :</p>
   
   <codeblock>
{
   "title" : "Fish Stew",
   "servings" : 4,
   "subtitle" : "Delicious with fresh bread"
}
</codeblock>
   
   <p>May be returned within the view processor as:</p>
   <codeblock>
{
    "servings": 4,
    "subtitle": "Delicious with fresh bread",
    "title": "Fish Stew"
}
    </codeblock>
  </section>
  
  
  <section><title>Document storage and indexing sequence</title><p>The method of storage of
   information into the Couchbase Server affects how and when the indexing information is
   built, and when data written to the cluster is incorporated into the indexes. In addition,
   the indexing of data is also affected by the view system and the settings used when the view
   is accessed.</p>
   
   <p>The basic storage and indexing sequence is:</p>
   
   <ol>
    <li>A document is stored within the cluster. Initially the document is stored only in RAM.</li>
    <li>The document is communicated to the indexer through replication to be indexed by views.</li>
   </ol>
   
   <p>This sequence means that the view results are eventually consistent with what is stored in
    memory based on the latency in replication of the change to the indexer. It is possible to
    write a document to the cluster and access the index without the newly written document
    appearing in the generated view.</p>
   
   
   <p>Conversely, documents that are stored with an expiry may continue to be included within the
    view until the document has been removed from the database by the expiry pager.</p>
   
   <p>Couchbase Server supports the Observe command, which enables the current state of a document and 
    whether the document has been replicated to the indexer or whether it has been considered for inclusion in an index.
   </p>
   <p>When accessing a view, the contents of the view are asynchronous to the stored documents. 
    In addition, the creation and updating of the view is subject to the <option>stale</option> parameter. 
    This controls how and when the view is updated when the view content is queried. 
   </p>
  </section>
 </conbody>
</concept>
