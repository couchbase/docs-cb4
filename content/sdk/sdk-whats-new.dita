<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="sdk_whats_new">
    
    <title>
        What's New
    </title>
    
    <shortdesc>
        The Couchbase SDK now includes 
        support for <i>Role-Based Access Control</i> (RBAC), which is a feature of
        Couchbase Server 5.0, Enterprise Edition. 
    </shortdesc>
    
    <body>
        
        <section>
            <title>
                RBAC-Support Features
            </title>
        
            <p>
                RBAC allows users to be granted specific privileges, in association with Couchbase
                Cluster-resources. For example, one user may be granted only <i>read</i> access on a given bucket, while
                another user is granted both <i>read</i> and <i>write</i> access.  
            </p>
            
            <p>
                The principles and design-features of Couchbase RBAC are described in detail in the
                section
                <xref href="../security/security-authorization.dita" scope="local" format="dita">Authorization</xref>.
                This information should be read by all developers.
            </p>
            
            <p>
                The SDK now provides support for RBAC in the following areas:
            </p>
            
            <ul>
                
                <li>
                    <i>Authentication</i>: To access a resource within a Couchbase cluster, <i>credentials</i>
                    must be passed. These consist of a <i>username</i> and (in most cases) a <i>password</i>.
                    Credentials must be recognized by Couchbase Server as corresponding to a user, defined
                    either locally of externally (for example, by means of a centralized LDAP server). Each
                    user is associated with one or more <i>roles</i>, each role corresponding to a set of
                    <i>privileges</i>. If the privileges correspond to the level of access requested by the user,
                    access is duly granted; otherwise, it is denied.
                    
                    <p>
                        The SDK
                        provides APIs that facilitate authentication. For additional information, see
                        <xref href="./sdk-authentication.dita" scope="local" format="dita">SDK Authentication</xref>.
                        Authentication code examples for 
                        <xref href="./nodejs/start-using-sdk.dita" scope="local" format="dita">Node.js</xref>,
                        <xref href="./java/start-using-sdk.dita" scope="local" format="dita">Java</xref>,
                        <xref href="./python/start-using-sdk.dita" scope="local" format="dita">Python</xref>,
                        <xref href="./php/start-using-sdk.dita" scope="local" format="dita">PHP</xref>,
                        <xref href="./go/start-using-sdk.dita" scope="local" format="dita">Go</xref>,
                        <xref href="./c/start-using-sdk.dita" scope="local" format="dita">C</xref>,
                        and
                        <xref href="./dotnet/start-using-sdk.dita" scope="local" format="dita">.NET</xref>
                        are provided in the section <i>Getting Started with the SDK</i>.
                    </p>
                    
                </li>
                
                <li>
                    <i>User Management</i>: Resources can now only be accessed by defined
                    users: therefore, users must be created, updated, and deleted. A user who is granted
                    the <i>Admin</i> role can
                    create other users &#8212; and in so doing, assign roles to them; periodically modify users'
                    role-assignments and passwords as appropriate; and delete users from the system whenever necessary. The SDK
                    provides APIs in support of these activities.
                    
                    <p>
                        Detailes of SDK 
                        user-management procedures are provided in the
                        <xref href="./sdk-user-management-overview.dita" scope="local" format="dita">SDK User-Management Overview</xref>.
                        User-management code examples for 
                        <xref href="./nodejs/sdk-user-management-example.dita" scope="local" format="dita">Node.js</xref>,
                        <xref href="./java/sdk-user-management-example.dita" scope="local" format="dita">Java</xref>,
                        <xref href="./python/sdk-user-management-example.dita" scope="local" format="dita">Python</xref>,
                        <xref href="./php/sdk-user-management-example.dita" scope="local" format="dita">PHP</xref>,
                        <xref href="./go/sdk-user-management-example.dita" scope="local" format="dita">Go</xref>,
                        <xref href="./c/sdk-user-management-example.dita" scope="local" format="dita">C</xref>,
                        and
                        <xref href="./dotnet/sdk-user-management-example.dita" scope="local" format="dita">.NET</xref>
                        are provided in the <i>SDK User Management</i> section for each language.
                    </p>
              
                </li>
                
            </ul>
            
            <p>

                

            </p>
            
        </section>
        
    </body>
        
</topic>