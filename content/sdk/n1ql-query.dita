<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="toplevel">
  <title>Querying with N1QL</title>
    <shortdesc>You can query for documents in Couchbase using
    the N1QL query language, a language based on SQL, but designed for structured and flexible
    JSON documents. Querying can solve typical programming tasks such as finding a user profile by
    email address, facebook login, or user ID.</shortdesc>
    <prolog>
        <metadata>
            <othermeta name="langSelector" content="hidden"/>
        </metadata>
    </prolog>
  <body>
        <section><title>Query Execution</title>

        <p>You can issue N1QL queries using either a
                Couchbase SDK, the <i>cbq</i> shell, the <i>cbc</i> command line tool, the REST API,
                or the <xref href="../tools/query-workbench.dita">Query workbench</xref>.</p>

            <p>A N1QL query is a string parsed by the query service. The
            result for each query is JSON and as a result queries will function the same
            regardless whether they are executed using the <cmdname>cbq</cmdname> shell, an SDK, or
            using the REST API directly. Nevertheless, the result format received using an SDK may
            be a bit different than that received using <cmdname>cbq</cmdname> or the REST
            API.</p></section>
        <section>
            <title>Running cbq</title>
            <p>The interactive shell <xref href="../tools/cbq-shell.dita#topic_bzd_zwr_w5"
                        ><cmdname>cbq</cmdname></xref> for executing N1QL queries is shipped with
                Couchbase Server and designed to be run on a cluster node.  It is <xref
                    href="../cli/cli-intro.dita#topic_c4y_k5d_54">located alongside the other
                    Couchbase tools</xref> (by default, <codeph>/opt/couchbase/bin/</codeph> on
                    Linux,<codeph> /Applications/Couchbase
                    Server.app/Contents/Resources/couchbase-core/bin/cbq</codeph> on OS X, and
                    <codeph>C:\Program Files\Couchbase\Server\bin\cbq.exe</codeph> on Microsoft
                Windows).</p>
        </section>
        <section>
            <title>Issuing Queries</title>
            <p>Queries are issued in the SDK using the <i>query</i> operation. This API accepts a
                string which is the statement to execute, and returns the rows (or an iterable
                object which returns rows) representing the queryâ€™s result. Here is an example of a
                query executed in
                Python:<screen>>>> <b>for row in cb.n1ql_query('SELECT type FROM `travel-sample` LIMIT 4'):</b>
...   <b>print(row)</b>
...
{'type': 'airline'}
{'type': 'airline'}
{'type': 'airline'}
{'type': 'airport'}</screen></p>
            <p>The above query using <i>cbq</i> (some output truncated for
                clarity):<screen>cbq> <b>SELECT type FROM `travel-sample` LIMIT 4;</b>
{
    ...
    "results": [
        {
            "type": "airport"
        },
        {
            "type": "airport"
        },
        {
            "type": "airport"
        },
        {
            "type": "airport"
        }
    ],
    "status": "success",
    "metrics": {
    ...
    }
}</screen></p>
            <p>The result is a JSON object. The important field within the object is the
                    <codeph>results</codeph> property, which contains an array of results (a result
                set). Each item within the result set may be considered as a <i>row</i>. Each row
                contains those document fields selected in the <xref
                    href="../n1ql/n1ql-language-reference/selectclause.dita"
                        ><codeph>SELECT</codeph></xref> clause.<note>Couchbase SDKs provide a
                    row-based API, which returns an object which can be iterated over. Internally,
                    however, the response looks like the <i>cbq</i> output above.</note></p>
            <p>If you use aliases in your query, then the returned rows contain the aliased name
                rather than the original one. For
                example:<codeblock outputclass="language-python">>>> for row in cb.n1ql_query('SELECT airportname <b>as</b> n FROM `travel-sample` where type="airport" LIMIT 4'):
...   print(row)
...
{'<b>n</b>': 'Calais Dunkerque'}
{'<b>n</b>': 'Peronne St Quentin'}
{'<b>n</b>': 'Les Loges'}
{'<b>n</b>': 'Couterne'}</codeblock></p>
        </section>
        <section><title>Specifying Query Criteria</title><p>N1QL's true strength is the ability to
                query documents satisfying a given criteria or querying for documents whose properties
                evaluate to certain values or expressions. You specify criteria in the same manner as in
                SQL by using a <xref
                    href="../n1ql/n1ql-language-reference/where.dita#concept_zvb_dgk_np"
                        ><codeph>WHERE</codeph></xref> clause. Specify multiple predicates using the
                    <codeph>AND</codeph> or <codeph>OR</codeph> keywords.</p><p>The following
                example selects all documents that have a <codeph>type</codeph> of <i>airport</i>
                and a <codeph>city</codeph> of
                <i>Reno</i>.<screen>cbq> <b>SELECT airportname, city, country FROM `travel-sample` WHERE type="airport" AND city="Reno";</b>
{
    ...
    "results": [
        {
            "airportname": "Reno Tahoe Intl",
            "city": "Reno",
            "country": "United States"
        }
    ],
    "status": "success",
    "metrics": {
    ...
    }
}</screen></p>Note
            that you should use <xref href="#topic_kgx_xdp_1w/devguide-named-placeholders"
                format="dita">query placeholders</xref>, as it is not only more secure, but also
            allows your query to be prepared and optimized for reuse.</section>
        <section>
            <title>Querying Nested Documents</title>
            <p>The above queries showed how to query top-level fields within a document. One of the
                main differences between JSON and flat rows is that JSON supports a nested structure,
                allowing documents to contain other documents, also known as sub-documents. In N1QL,
                you can use the path syntax to query and address sub-documents. See <xref
                    href="../n1ql/n1ql-intro/queriesandresults.dita#topic_1_2"/> for more
                information on the path syntax.</p>
            
            <note
                type="attention">
                N1QL sub-document queries are not related to 
                <i>Key-Value</i> sub-document operations.
                (Key-Value sub-document
                operations are explained in the section
                <xref href="./subdocument-operations.dita" format="dita" scope="local">Sub-Document Operations</xref>).
            </note>
            
            <screen>cbq> <b>SELECT airportname, city, country, geo.alt FROM `travel-sample` WHERE type="airport" AND geo.alt > 4000 AND country="United States" LIMIT 3;</b>
{
    ...
    "results": [
        {
            "airportname": "Cheyenne Rgnl Jerry Olson Fld",
            "alt": 6156,
            "city": "Cheyenne",
            "country": "United States"
        },
        {
            "airportname": "Pueblo Memorial",
            "alt": 4726,
            "city": "Pueblo",
            "country": "United States"
        },
        {
            "airportname": "Cedar City Rgnl",
            "alt": 5622,
            "city": "Cedar City",
            "country": "United States"
        }
    ],
    "status": "success",
    "metrics": {
    ...
    }
}</screen>
            <p>The actual airport document looks like this. Note that the <codeph>geo</codeph> field
                itself contains a JSON object. In couchbase, this is known as a
                <i>sub-document</i>.<codeblock outputclass="language-json">{
   "geo" : {
      "lat" : 37.700967,
      "alt" : 5622,
      "lon" : -113.098847
   },
   "tz" : "America/Denver",
   "id" : 3824,
   "type" : "airport",
   "city" : "Cedar City",
   "country" : "United States",
   "icao" : "KCDC",
   "faa" : "CDC",
   "airportname" : "Cedar City Rgnl"
}</codeblock></p>
        </section>
        <section id="devguide-named-placeholders"><title>Parameterized Queries</title><p>Query parameters allow your application to securely use
                dynamic query arguments for your application. In this section, the parameter
                feature is demonstrated using the SDK.</p><p>Consider a function which returns all
                airports located within a given city (passed as input). The query may be divided
                into a <i>fixed</i> or <i>static</i> part (select all airports in a city) and a
                    <i>dynamic</i> part (the actual city to search, specified via user
                input).</p><p>A naive implementation of this function might look something like
                this:</p><codeblock outputclass="language-python">def airports_in_city(city):
  query_string = "SELECT airportname FROM `travel-sample` WHERE city="
  query_string += '"' + city + '"'
  return cb.n1ql_query(query_string)</codeblock>The
            approach above is both unwieldy and insecure (subject to SQL injection attacks).<p>N1QL
                allows the use of placeholders to declare dynamic query parameters. Here's a version
                of the above using
                placeholders:<codeblock outputclass="language-python">def airports_in_city(city):
  query_string = "SELECT airportname FROM `travel-sample` WHERE city=<b>$1</b>"
  query = N1QLQuery(query_string, city)
  return cb.n1ql_query(query)</codeblock>The
                    <codeph>$1</codeph> is a positional placeholder. When the query is constructed,
                it may receive arguments, with each argument being used as the placeholder value in
                the query. Thus, <codeph>$1</codeph> refers to the first
                    argument,<codeph>$2</codeph> to the second, and so on.</p><p>Placeholders may
                also be <i>named</i>. This is particularly useful when there are many query
                parameters and ensuring that they are all in the correct order may be cumbersome.
                Name query placeholders take the form of
            <codeph>$name</codeph>.</p><codeblock outputclass="language-python">query_string = (
"SELECT airportname FROM `travel-sample`"
"WHERE country=$country "
"AND geo.alt > $altitude "
"AND (geo.lat BETWEEN $min_lat AND $max_lat) "
"AND (geo.lon BETWEEN $min_lon AND $max_lon "
)</codeblock>Then
            to issue the actual
            query:<codeblock outputclass="language-python">query = N1QLQuery(
    query_string,
    country="United States",
    altitude=500, min_lat=-50, max_lat=50, min_lon=-180, max_lon=0)</codeblock></section>
        <section id="prepare-stmts"><title>Query Optimization Using Prepared (Optimized)
                Statements</title>When a N1QL query string is sent to the server, the server will
            inspect the string and parse it, planning whichÂ indexes to query. Once this is done, it
            generates a <i>query plan</i>. The computation for the plan adds some additional
            processing time and overhead for the query.<p>Often-used queries can be <i>prepared</i>
                so that its <i>plan</i> is generated only once. Subsequent queries using the same
                query string will use the pre-generated <i>plan</i> instead, saving on the overhead
                and processing of the plan each time.</p><p>You can indicate to the SDK that a given
                query should be optimized in the above fashion. When an SDK sees that a query should
                be optimized, it will internally prepare the statement and store the plan in an
                internal cache. When issuing the query again, the SDK will check to see if a plan
                exists in its cache, and will send the plan to the server.</p><p>To indicate that an
                SDK should optimize a query, the <parmname>adhoc</parmname> parameter should be set
                to false. When a query is not <i>ad-hoc</i>, the SDK will fetch the plan (if it does
                not already have it). Do not turn off the <i>adhoc</i> flag for each query since
                only a finite number of query plans (currently 5000) can be stored in the SDK.</p><p>
                <codeblock outputclass="language-python">query = N1QLQuery("SELECT airportname FROM `travel-sample` WHERE country=$1", "USA")
q.adhoc = False</codeblock>
                <note>Parameterized queries are considered the same query for caching and planning
                    purposes, even if the supplied parameters are different.</note>
            </p><p>For more information on how to optimize queries using prepared statements, see
                    <xref href="../n1ql/n1ql-language-reference/prepare.dita">PREPARE</xref>
                statement in <cite>N1QL language reference</cite>.</p></section>
        <section>
            <title id="indexes">Indexes</title>
            <p>The Couchbase query service makes use of <i>indexes</i> in order to do its work.
                Indexes replicate subsets of documents from data nodes over to index nodes, allowing
                specific data (for example, specific document properties) to be retrieved quickly,
                (and to distribute load away from data nodes in MDS topologies).</p>
            <p>In order to make a bucket queryable, it must have at least one index defined.</p>

            <p>You can define a <i>primary index</i> on a bucket. When a <i>primary</i> index is
                defined you can issue non-covered queries on the bucket as well. This includes using
                the <codeph>META</codeph> function in the
                queries.<codeblock outputclass="language-sql">CREATE PRIMARY INDEX ON `users`</codeblock></p>

            <p>You can also
                define indexes over given document fields and then use those fields in the
                query:<codeblock outputclass="language-sql">CREATE INDEX ix_name ON `users`(name);
CREATE INDEX ix_email ON `users`(email);</codeblock>Would
                allow you to query the <i>users</i> bucket regarding a document's
                    <codeph>name</codeph> or <codeph>email</codeph> properties, so
                e.g.<codeblock outputclass="language-sql">SELECT name, email FROM `users` WHERE name="Monty Python" OR email="monty@python.org";</codeblock>Indexes
                help improve the performance of a query. When an index includes the actual values of
                all the fields specified in the query, the index covers the query and eliminates the
                need to fetch the actual values from the Data Service. An index, in this case, is
                called a covering index and the query is called a covered query. For more
                information, see <xref href="../indexes/covering-indexes.dita#concept_yv4_c2z_wt"
                />.</p>

            <p>You can also create and define indexes in the SDK using
                <codeblock outputclass="language-python">cb.bucket_manager().create_n1ql_primary_index(ignore_exists=True)
cb.bucket_manager().create_n1ql_index('index_name', fields['name'])
cb.bucket_manager().create_n1ql_index('index_email', fields['email'])</codeblock></p>
        </section>
        <section><title>Index Building</title>Creating indexes can take a long time on buckets with
            lots of existing documents. You can build indexes in the background, creating
                <i>deferred</i> indexes and then building all deferred indexes at once. This allows
            multiple indexes to be built at once rather than having to re-scan the entire bucket for
            each
            index.<codeblock outputclass="language-sql">CREATE PRIMARY INDEX ON `users` WITH {"defer_build": true};
CREATE INDEX ix_name ON `users`(name) WITH {"defer_build": true};
CREATE INDEX ix_email ON `users`(email) WITH {"defer_build": true};
BUILD INDEX ON `users`(`#primary`, `ix_name`, `ix_email`);</codeblock>The
            indexes are actually built when the <codeph>BUILD INDEX</codeph> statement is executed.
            At this point, the server scans all the documents in the <codeph>users</codeph> bucket
            and indexes it for all of the applicable indexes (i.e. if it has a <codeph>name</codeph>
            or <codeph>email</codeph>) field.<p>Building deferred indexes can also be done via the
                SDK:</p><p>
                <codeblock outputclass="language-python">mgr.create_n1ql_primary_index(ignore_exists=True, defer=True)
mgr.create_n1ql_index('ix_name', fields=['name'], defer=True)
mgr.create_n1ql_index('ix_email', fields=['email'], defer=True)
mgr.build_n1ql_deferred_indexes()
mgr.watch_n1ql_indexes(('ix_name', 'ix_email', '#primary'), timeout=120)</codeblock>
            </p></section>
        <section>
            <title id="consistency">Index Consistency</title>
            <p>Because indexes are by design outside the data service, they are eventually
                consistent with respect to changes to documents and, depending on how you issue the
                query, may at times not contain the most up-to-date information.   This may
                especially be the case when deployed in a write-heavy environment: changes may take
                some time to propagate over to the index nodes.</p>
            <p>The asynchronous updating nature of global secondary indexes means that they can be
                very quick to query and do not require the additional overhead of index
                recaclculations at the time documents are modified. N1QL queries are forwarded to
                the relevant indexes and the queries are done based on indexed information, rather
                than the documents as they exist in the data service. </p>
            <p>With default query options, the query service will rely on the current index state:
                the most up-to-date document versions are not retrieved, and only the indexed
                versions are queried. This provides the best performance. Only updates occurring
                with a small time frame may not yet have been indexed.</p>
            <p>The query service can use the latest versions of documents by modifying the
                    <apiname>consistency</apiname> of the query. This is done by setting the
                    <apiname>consistency</apiname> or <apiname>scan_consistency</apiname> property
                of the query to <apiname>REQUEST_PLUS</apiname>. When using this consistency mode,
                the query service will ensure that the indexes are synchronized with the data
                service before querying.</p>
            <p>Consider the following
                snippet:<codeblock outputclass="language-python">from couchbase.n1ql import N1QLQuery, CONSISTENCY_REQUEST

# Ensure there is a primary index on the default bucket!
RANDOM_NUMBER = random.randint(0, 10000000)

cb = Bucket('couchbase://10.0.0.31/default')
cb.upsert('user:{}'.format(RANDOM_NUMBER), {
    'name': ['Brass', 'Doorknob'],
    'email': ['brass.doorknob@juno.com'],
    'random': RANDOM_NUMBER
})

query = N1QLQuery(
    'SELECT name, email, random, META(default).id FROM default WHERE $1 IN name', 'Brass')
row = cb.n1ql_query(query).get_single_result()</codeblock>The
                above query may not return the newly inserted document because it has not yet been
                indexed. The query is issued immediately after document creation, and in this case
                the query engine may process the query before the index has been updated.</p>
            <p>If the above code is modified to use <i>request_plus</i> (currently mapped to the
                    <apiname>CONSISTENT_REQUEST</apiname> constant in the Python SDK), query
                processing will wait until all updates have been processed and recalculated into the
                index from the point in time the query was
                received:<codeblock outputclass="language-python">query = N1QLQuery(
    'SELECT name, email, random, META(default).id FROM default WHERE $1 IN name', 'Brass')
# If this line is removed, the latest 'random' field might not be present
<b>query.consistency = CONSISTENCY_REQUEST</b>
row = cb.n1ql_query(query).get_single_result()</codeblock></p>
            <p> This gives you as an application developer more control over the balance between
                performance and consistency with respect to other actions on your distributed
                database. </p>
        </section>
    </body>
</topic>
