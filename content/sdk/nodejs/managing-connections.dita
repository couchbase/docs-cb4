<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_ppz_lhq_44">
    <title>Managing Connections Using the Node.js SDK with Couchbase Server</title>
    <titlealts><navtitle>Managing Connections</navtitle></titlealts>
    <shortdesc>This section describes how to connect the Node.JS SDK to a Couchbase cluster and bucket. It contains best
        practices as well as information on the connection string,  SSL and other advanced connection options.</shortdesc>
    <conbody>
        <p> You can specify additional options when connecting to the cluster by using the
                <i>connection string</i>. The connection string indicates to the client where
            cluster nodes may be found and how to connect to them. The <i>connection string</i> is
            common to other Couchbase SDKs as well as the <xref
                href="../webui-cli-access.dita#concept_j3z_zhm_zs">command-line client</xref>. The
                <i>connection string</i> uses a URI-like format and is similar to a <i>DSN</i> used
            in other database systems.</p>
        <section>
            <title>Creating a Cluster Object</title>
            <p>The <apiname>Cluster</apiname> object serves as an organizational unit for any
                    <apiname>Bucket</apiname> objects created. As on the server each bucket is a
                member of a cluster, likewise in the SDK each <apiname>Bucket</apiname> object is a
                child of a <apiname>Cluster</apiname>. To create a cluster, construct it using a
                    <i>connection string</i>, specifying the scheme and host(s) to connect
                to:<codeblock outputclass="language-javascript">var couchbase = require('couchbase');
var cluster = new couchbase.Cluster('couchbase://10.0.0.1');</codeblock></p>
        </section>
        <section>
            <title>Authenticating</title>
            <p>From Couchbase Server 5.0, you will need to authenticate the user, rather than against the
                bucket, as part of <xref href="../../security/security-authorization.dita" scope="local">Role-Based Access Control</xref>. You will need to 
                use <codeph>cluster.authenticate</codeph>:<codeblock outputclass="language-nodejs">cluster.authenticate('USERNAME', 'PASSWORD');</codeblock>
            </p>
        </section>
        <section>
            <title>Connecting to a Bucket</title>
            <p>To connect to a bucket, invoke the <apiname>Cluster</apiname> object's
                    <apiname>openBucket</apiname> call. The <apiname>openBucket</apiname> method
                takes a bucket name as an argument. If your bucket is protected by a password, pass
                it as the second parameter to <apiname>openBucket</apiname>.
                    <apiname>openBucket</apiname> also accepts a function as its final argument
                which reports any connection errors which may happen between the creation of the
                    <apiname>Bucket</apiname> object and the actual
                connection.<codeblock outputclass="language-javascript">var bucket = cluster.openBucket('protectedBucket', function(err) {
  if (err) {
    console.error('Got error: %j', err);
  }
});</codeblock></p>
        </section>
        <section>
            <title>Disconnecting from a Bucket</title>
            <p>If the <apiname>Bucket</apiname> object is no longer needed, you should call the
                    <apiname>Bucket.disconnect()</apiname> function. This will disconnect any
                existing TCP connections between the object and the server.</p>
        </section>
        <section>
            <title>Scalability and Concurrency</title>
            <p>Creating a new <apiname>Bucket</apiname> object is relatively expensive, and keeping
                many idle <apiname>Bucket</apiname> objects will negatively impact server
                performance (if done at a large scale). Typically your application will require only
                one <apiname>Bucket</apiname> instance per Couchbase bucket</p>
        </section>
        <section conref="../c/managing-connections.dita#toplevel/connstr-begin"
            conrefend="../c/managing-connections.dita#toplevel/connstr-end"/>
    </conbody>
</concept>
