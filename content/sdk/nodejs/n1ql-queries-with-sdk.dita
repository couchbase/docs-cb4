<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_esq_3td_5v">
    <title>N1QL Queries Using the Node.js SDK with Couchbase Server</title>
    <titlealts><navtitle>N1QL from the SDK</navtitle></titlealts>
  <body>
        <p>To issue N1QL queries you must pass an <apiname>couchbase.N1qlQuery</apiname> object to
            the <apiname>Bucket.query()</apiname> function which will then send the query to the
            cluster and invoke the passed callback.</p>
        <p>You can create a query object by using the
                <apiname>couchbase.N1qlQuery.fromString()</apiname> constructor. Once the query has
            been created you can then modify some query options such as its <xref
                href="../n1ql-query.dita#toplevel/consistency">consistency</xref> and <xref
                href="../n1ql-query.dita#toplevel/prepare-stmts">adhoc</xref> properties using the
                <apiname>N1qlQuery.consistency()</apiname> and <apiname>N1qlQuery.adhoc()</apiname>
            setters.<codeblock outputclass="language-javascript">var N1qlQuery = couchbase.N1qlQuery;
// ...
query = N1qlQuery.fromString('SELECT name, email FROM default LIMIT 10');
bucket.query(query, function(err, rows, meta) {
  for (row in rows) {
    console.log('Name: %s. Email: %s', row.name, row.email);
  }
});</codeblock></p>
        <p>The callback is invoked with an error, an array of rows, and additional metadata about
            the result and execution. Generally, you should check the error before iterating over
            the rows.</p>
        <section><title>Placeholders</title>Queries can be parameterized, allowing you to specify
            placeholders within the query string and then specify them as discreet parameters when
            executing the
            query.<codeblock outputclass="language-javascript">query = N1qlQuery.fromString('SELECT name, email FROM users WHERE name=$1');
bucket.query(query, ['Monty Python'], function(err, rows) {
  // ...
});</codeblock>In
            the above, the second argument passed is the parameter list for the placeholders.
            Placeholders can either be specified as <codeph>$1</codeph>, <codeph>$2</codeph>,
                <codeph>$3</codeph>, etc for positional parameters which must be passed in an array
            or they can be specified as <codeph>$name</codeph>, <codeph>$email</codeph>, etc for
            named parameters which must be passed as an object. Only document fields can be specified 
            using positional and named parameters.</section>
        <section>
            <title>Streaming rows</title>
            <p>If you are expecting a large result set from the server you can omit passing the
                callback to the <apiname>query()</apiname> function and instead register to the
                returned object's <codeph>row</codeph>, <codeph>end</codeph>, and
                    <codeph>error</codeph> events. The <codeph>row</codeph> handler is invoked
                whenever new rows arrive from the cluster, so you don't need to buffer all rows in
                memory to process them. The <codeph>error</codeph> handler is invoked in the case of
                an error and the <codeph>end</codeph> handler is invoked when the response has fully
                been
                received.<codeblock outputclass="language-javascript">var q = N1qlQuery.fromString('SELECT * FROM `travel-sample` LIMIT 10');
var req = bucket.query(q);
req.on('row', function(row) {
  console.log('Got a row');
});
req.on('error', function(err) {
  console.error('Got error %j', err);
});
req.on('end', function(meta) {
  console.log('All rows received. Metadata is %j:', meta);
});</codeblock><screen>Got a row
Got a row
Got a row
Got a row
Got a row
Got a row
Got a row
Got a row
Got a row
Got a row
All rows received. Metadata is {"requestID":"79914eb3-6204-4dc7-b9e6-b4680b6509a0","signature":{"*":"*"},"status":"success","metrics":{"elapsedTime":"8.631682ms","executionTime":"8.593926ms","resultCount":10,"resultSize":3002}}:</screen></p>
        </section>
    </body>
</topic>
