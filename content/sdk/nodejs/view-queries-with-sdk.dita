<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="concept_tvx_nhq_44">
    <title>MapReduce Views Using the Node.js SDK with Couchbase Server</title>
    <titlealts><navtitle>MapReduce Views</navtitle></titlealts>
    <shortdesc>You can use MapReduce views to create queryable secondary indexes in Couchbase Server. </shortdesc>
    <body>
        <section conref="../shared/views.dita#toplevel/views-intro"/>
        <section conref="../shared/views.dita#toplevel/example-beer"/>
        <section conref="../shared/views.dita#toplevel/example-geo-travel"/>
        <section><title>Querying Views through the Node.js SDK</title>
            <p>Querying a view through the Node.js client is performed through the
                <codeph>ViewQuery</codeph> class that is available as a top-level object.</p>
            <codeblock outputclass="language-javascript">var couchbase = require('couchbase');
var ViewQuery = couchbase.ViewQuery;

var query = ViewQuery.from('beer', 'by_name');</codeblock>
            <p>A <codeph>ViewQuery</codeph> object enables you to query the view and specify various
                available options for the query. Once you have the query ready for execution, pass it to the
                <codeph>query</codeph> method of the your Bucket instance:</p>
            <codeblock outputclass="language-javascript">var myBucket = myCluster.openBucket();
myBucket.query(query, function(err, results) {
  for(i in results)
    console.log(results[i]);
});</codeblock>
            <p>You can modify your view results by specifying various options before executing the
                <codeph>query</codeph> method. Here is an example that skips the first six items and limits
                the results to three items:</p>
            <codeblock outputclass="language-javascript">var query = ViewQuery.from('beer', 'by_name').skip(6).limit(3);
myBucket.query(query, function(err, results) {
  for(i in results)
    console.log(results[i]);
});</codeblock>
            <p>If you are interested in performing a geospatial view, simply use
                <codeph>SpatialQuery</codeph> as your root rather than <codeph>ViewQuery</codeph>.</p>
            <codeblock outputclass="language-javascript">var SpatialQuery = couchbase.SpatialQuery;

var query = SpatialQuery.from('spatial', 'by_location').limit(10);
myBucket.query(query, function(err, results) {
  for(i in results)
    console.log(results[i]);
});</codeblock>
            </section>
    </body>
</topic>
