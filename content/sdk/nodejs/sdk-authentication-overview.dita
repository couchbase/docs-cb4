<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="sdk_authentication">
    
    <title>
        Authentication
    </title>
    
    <shortdesc>
        RBAC requires that
        users pass appropriate <i>credentials</i> to Couchbase Server in order to access
        cluster-resources. The SDK provides enhanced support for the passing of credentials.
    </shortdesc>
    
    <body>
        
        <section conref="../shared/reusable/sdk-authentication-overview.dita#sdk_authentication/RBAC_and_the_SDK">
        </section>
        
        <section conref="../shared/reusable/sdk-authentication-overview.dita#sdk_authentication/authenticating_with_legacy_sdk_versions">   
        </section>
        
        <section>
            
            <title>
                Passing Credentials
            </title>
            
            <p>
                The most recent versions of the SDK are RBAC-enabled, and provide enhanced
                support for authentication. Code examples for Node.js can be found in 
                <xref href="./start-using-sdk.dita" scope="local" format="dita">Getting Started with the SDK</xref>,
                and also as part of the
                <xref href="./sdk-user-management-example.dita" scope="local" format="dita">Sample Code</xref>
                provided to demonstrate user management.
            </p>
            
        </section>
        
        <section id="nodejs_upgrading_to_rbac_sdk_versions">
            <title>
                Upgrading to RBAC-Enabled SDK-Versions
            </title>
            
            <p>
                The most recent versions of the SDK are RBAC-enabled, and provide a new, 
                optimized authentication interface. The last pre-RBAC version of the Node.js SDK was 2.3.2. The first 
                RBAC-enabled version was
                2.3.3. See the SDK 
                <xref href="/server/other-products/release-notes-archives/nodejs-sdk" format="html" scope="peer">Release Notes</xref>
                for more information.
            </p>
            
            <p>
                With the most recent versions of the SDK, the legacy authentication interface
                and
                the new, optimized authentication
                interface can both be used: each supports access to buckets on Couchbase Servers
                whose version is either 5.0 and beyond, or pre-5.0.
            </p>
        </section>
        
        <section>
            <title>
                Further Information on RBAC 
            </title>
            
            <p>
                All aspects of the Couchbase RBAC system are covered in the section
                <xref href="../../security/security-authorization.dita" scope="local" format="dita">Authorization</xref>.
                Specifically, for information on:
            </p>
            
            <ul>
                <li>
                    Adding <i>Users</i> and assigning <i>roles</i>, by means of
                    the Couchbase Web Console, see 
                    <xref href="../../security/security-rbac-for-admins-and-apps.dita" scope="local" format="dita">Creating
                        and Managing Users with the UI</xref>.
                    
                    <p>
                        
                    </p>
                </li>
                
                <li>
                    <i>Roles</i> required for resource-access, and the privileges they
                    entail, see
                    <xref href="../../security/security-roles.dita" scope="local" format="dita">Roles</xref>.
                    
                    <p>
                        
                    </p>
                </li>
                
                <li>
                    <i>Resources</i> controlled by Couchbase RBAC, see
                    <xref href="../../security/security-resources-under-access-control.dita" scope="local" format="dita">Resources
                        Under Access Control</xref>.
                </li>
            </ul>
        </section>
        <section>
            <title>
                Certificate-Based Authentication
            </title>
            
            <p>
                Couchbase Server supports the use of X.509 certificates to authenticate clients (only available in 
                the Enterprise Edition, not the Community Edition). This allows
                authenticated users to access specific resources by means of the data service (no other service
                is currently available to clients through this form of authentication). 
            </p>
            
            <p>    
                The process relies on a certificate
                authority, for the issuing of certificates that validate identities. A certificate includes
                information such as the name of the entity it identifies, an expiration date, the name of the authority
                that issued the certificate, and the digital signature of the authority.
                A client attempting to access Couchbase Server can present a certificate to the server, allowing
                the server to check the validity of the certificate. If the certificate is valid, the user
                under whose identity the client is running,
                and the roles assigned that user, are verified. If the assigned roles are appropriate for
                the level of access requested to the specified resource, access is granted.
            </p>
            
            <p>The Node.js SDK has supported certificate authentication since version 2.4.4. The client certificate can be generated with the shell script on 
                the <xref href="../c/sdk-authentication-overview.dita" scope="local" format="dita">C SDK Authentication page</xref>.
                Connecting with the Node.js client, using a certificate, involves using <codeph>cluster.authenticate</codeph> 
                and passing the certificate and key paths in the connection string. When this authenticator is used for the <codeph>authenticate</codeph> method, it signals to the client to pick up any certificate/keystore for X509 auth:<codeblock>// Require Couchbase Module
var couchbase = require('couchbase');

// Setup Cluster Connection Object
var cluster = new couchbase.Cluster(
    'couchbases://127.0.0.1/' +
    '?truststorepath=../etc/x509-cert/SSLCA/clientdir/trust.pem' +
    '&amp;certpath=../etc/x509-cert/SSLCA/clientdir/client.pem' +
    '&amp;keypath=../etc/x509-cert/SSLCA/clientdir/client.key');

// Authenticate with the cluster
cluster.authenticate(new couchbase.CertAuthenticator());

// Setup Bucket object to be reused within the code
var bucket = cluster.openBucket('travel-sample');

console.log('Example Successful - Exiting');
process.exit(0);</codeblock></p>
        </section>
    </body>
        
</topic>
