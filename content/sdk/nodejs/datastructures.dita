<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_h44_vct_5x">
    <title>Data Structures</title>
    <shortdesc>You can use complex data structures such as dictionaries and lists in Couchbase.
        These data structures may be manipulated with basic operations without retrieving and
        storing the entire document.</shortdesc>
    <body>
        <p>Data structures in Couchbase are similar in concept to data structures in JavaScript:<ul
                id="ul_txf_32t_5x">
                <li><b>Map</b> is like a JavaScript <codeph>Object</codeph>, and is a key-value
                    structure, where a value is accessed by using a key string.</li>
                <li><b>List</b> is like a JavaScript <codeph>array</codeph> and is a sequential
                    data structure. Values can be placed in the beginning or end of a list, and can
                    be accessed using numeric indexes.</li>
                <li><b>Set</b> is a wrapper over a <i>list</i> which provides the ability to handle
                    unique values.</li>
            </ul></p>
        <p>These data structures are stored as JSON documents in Couchbase, and can therefore be
            accessed using N1QL, Full Text Search, and normal key-value operations. Data structures
            can also be manipulated using the traditional sub-document and full-document KV
            APIs.</p>
        <p>Using the data structures API may help your application in two ways:<ul
                id="ul_kd3_tcb_vx">
                <li><b>Simplicity</b>: Data structures provide high level operations by which you
                    can deal with documents as if they were container data structures. Adding an
                    item to a dictionary is expressed as <codeph>mapAdd</codeph>, rather than
                    retrieving the entire document, modifying it locally, and then saving it back to
                    the server.</li>
                <li><b>Efficiency</b>: Data structure operations do not transfer the entire document
                    across the network. Only the relevant data is exchanged between client and
                    server, allowing for less network overhead and lower latency.</li>
            </ul></p>
        <section><title>Creating a Data Structure</title>Data structures can be created implicitly
            by adding a <codeph>create: true</codeph> to the options of the operation. For example,
            to add an item to a map, specify the <i>document ID</i> of the map itself (i.e. the ID
            which uniquely identifies the map in the server), the key <i>within</i> the map, and the
            value to store under the
            key:<codeblock outputclass="language-javascript">bucket.mapAdd('map_id', 'name', 'Mark Nunberg', {create: true}, function(err, result) {});</codeblock>Likewise,
            to create a list, specify the document ID and the value to
            add:<codeblock outputclass="language-javascript">bucket.listPush('list_id', 'hello', {create: true}, function(err, result) {});</codeblock>Note
            that the <codeph>{create: true}</codeph>
            <i>will not</i> overwrite an existing document with the same name if it already exists.
            It is therefore always safe to use, unless your application creates data structures
                independently.<p>Data structures can be explicitly created and reset using
                full-document methods, and initialized with its JSON equivalent. To create a new
                empty list or set, use <codeph>bucket.upsert('list_id', [])</codeph>. To create an
                empty map, use <codeph>bucket.upsert('map_id', {})</codeph>.</p></section>
        <section><title>Accessing Data Structures</title>Data structures can be accessed using their
            appropriate methods. You need to supply a callback that receives an error and a result
            object. The actual returned value is can be accessed using the
                <varname>result.value</varname>
                property.<codeblock outputclass="language-javascript">bucket.listGet('list_id', 0, function(err, result) {
    console.log('%s', result.value);
});
// Prints 'hello'</codeblock><codeblock outputclass="language-javascript">bucket.mapGet('map_id', 'name', function(err, result) {
    console.log('%s', result.value);
});
// Prints 'Mark Nunberg'</codeblock><p>Here
                is a list of common operations:<table frame="all" rowsep="1" colsep="1"
                    id="table_c5w_jg5_5x">
                    <title>Data Structure Operations</title>
                    <tgroup cols="2">
                        <colspec colname="c1" colnum="1" colwidth="1*"/>
                        <colspec colname="c2" colnum="2" colwidth="3.76*"/>
                        <thead>
                            <row>
                                <entry/>
                                <entry/>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry><apiname>mapRemove</apiname></entry>
                                <entry>Remove a key from a
                                    map.<codeblock outputclass="language-javascript">bucket.mapRemove('map_id', 'some_key', function(err, result){});</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>mapGet</apiname></entry>
                                <entry>Get an item from a
                                    map.<codeblock outputclass="language-javascript">bucket.mapGet('map_id', 'some_key', function(err, result) {
    console.log(result.value);
});</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>listPush</apiname></entry>
                                <entry>Add an item to the <i>end</i> of a
                                    list.<codeblock outputclass="language-javascript">bucket.listPush('list_id', 'some_value', function(err, result(){});</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>listShift</apiname></entry>
                                <entry>Add an item to the <i>beginning</i> of a
                                    list.<codeblock outputclass="language-javascript">bucket.listShift('list_id', 'some_value', function(err, result(){});</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>listGet</apiname></entry>
                                <entry>Get an item from a list by its
                                    index.<codeblock outputclass="language-javascript">bucket.listGet('list_id', 1, function(err, result) {
    console.log(result.value);
});</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>setAdd</apiname></entry>
                                <entry>Add an item to a set, if the item does not yet exist in the
                                    set.<codeblock outputclass="language-javascript">bucket.setAdd('list_id', 'some_value', function(err, result) {});</codeblock>Note
                                    that a <i>set</i> is just a list. You can retrieve the entire
                                    set by simply using a full-document <apiname>get</apiname>
                                        operation:<codeblock outputclass="language-javascript">bucket.get('list_id', function(err, result) {
    result.value; // &lt;- this is the set
});</codeblock><note>Currently,
                                        using the node.js SDK you can only store primitive values in
                                        sets, such as strings, ints, and booleans.</note></entry>
                            </row>
                            <row>
                                <entry><apiname>setRemove</apiname></entry>
                                <entry>Remove an item from a set, if it exists. An exception is not
                                    thrown if the item does not exist. You can determine if an item
                                    existed or not by the return value. If the item did not exist
                                    beforehand, <codeph>None</codeph> is
                                    returned.<codeblock outputclass="language-javascript">bucket.setRemove('list_id', 'some_value', function(err, result){});</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>mapSize</apiname>, <apiname>listSize</apiname>,
                                        <apiname>setSize</apiname></entry>
                                <entry>These methods get the length of the data structure. For maps,
                                    this is the number of key-value pairs inside the map. For lists,
                                    and sets, this is the number of elements in the
                                    structure.<codeblock outputclass="language-javascript">bucket.listSize('list_id', function(err, result) {
    console.log(result.value);
});</codeblock></entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table></p><p>Note that there are only <b>two</b> basic types: map and list. Types
                such as <i>set</i> are merely derivatives of <i>list</i>.</p></section>
        <section><title>Data Structures and Key-Value APIs</title>Data structures can be accessed
            using key-value APIs as well. In fact, the data structure API is actually a client-side
            wrapper <i>around</i> the key-value and sub-document API. Most of the data structure
            APIs wrap the sub-document API directly. Therefore, for example, the
                <apiname>map_set</apiname> can be implemented as
            follows:<codeblock outputclass="language-javascript">function mapSet(bucket, docid, key, value, callback) {
    bucket.mutateIn(docid).upsert(key, value).execute(function(err, frag) {
        if (err) {
            callback(err);
        }
        callback(null, {value: frag.contentByIndex(0)});
    });
}</codeblock>Some
            data structure operations are compound operations. This means that they do not
            correspond to a single server-side operation. For example, <apiname>setRemove</apiname>
            does not exist on the server. In order to implement <apiname>setRemove</apiname>, it
            would require an implementation like
            so:<codeblock outputclass="language-javascript">function setRemove(bucket, docid, value, callback) {
    bucket.get(docid, function(err, result) {
        if (err) {
            callback(err);
        } else {
            // Find the index
            value_index = err.result.indexOf(value);
            if (value_index != -1) {
                bucket.mutateIn(docid, {cas: result.cas}).remove('[' + value_index + ']').execute(function(err, res) {
                    callback(err, res);
                });
            }
        }
    });
}</codeblock>In
            the example above, the entire document is fetched and the index of the value is
            retrieved. If the value exists, the index of the value is removed at the server
                side.<note>Because the data structure API is just a wrapper around the various
                key-value APIs, you are free to switch between them in your application
            code.</note></section>
    </body>
</topic>
