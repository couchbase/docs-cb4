<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="nodejs-fts">
  <title>Full Text Search (FTS) using the Node.js SDK with Couchbase Server</title>
  <titlealts><navtitle>Searching from the SDK</navtitle></titlealts>
  <shortdesc>Using the Node.js SDK, you can use the Couchbase Full Text Search service (FTS) to create queryable full-text indexes in Couchbase Server.</shortdesc>
  <body>
    <p>Couchbase offers Full-text search support, allowing you to search for documents that contain
      certain words or phrases. In the Node.js SDK you can search full-text indexes by using the
        <apiname>SearchQuery</apiname> object and executing it with the
        <apiname>Bucket.query()</apiname> API.</p>
    <p>The following example shows how to send a simple Search query:</p>
    <p>
      <codeblock outputclass="language-javascript">var SearchQuery = couchbase.SearchQuery;
var query = SearchQuery.new('travel-search', SearchQuery.term('office'));
bucket.query(query, function(err, res, meta) {
  for (var i = 0; i &lt; res.length; ++i) {
    console.log('Hit:', res[i].id);
  }
});</codeblock>
    </p>
    <p>The <apiname>Bucket.query()</apiname> method returns a <apiname>SearchQueryResponse</apiname>
      object which provides access to all of the information returned by the query.</p>
    <p>Other search result data may be accessed using the various other available methods on the
        <apiname>SearchResults</apiname>
      interface.<codeblock outputclass="language-javascript">bucket.query(â€¦, function(err, res, meta) {
  console.log('Total Hits:', meta.status.total);
  for (var i in meta.facets) {
    console.log('Facet:', i);
  }
});</codeblock></p>
    <section><title>Query Types</title>Query types may be found within the
        <codeph>SearchQuery</codeph> class. The package contains query classes corresponding to
      those enumerated in <xref href="../../fts/fts-query-types.dita#topic_jfq_fn4_1v"/>. The query
      object should be instantiated by using the associated function matching the type of query you
      wish to create (i.e.: <codeph>SearchQuery.term()</codeph> for a TermQuery), passing the search
      term (usually a string) as the first argument, followed by some query modifiers.<p>It is
        important to distinguish between <i>query options</i> and general <i>search options</i>.
        Some options affect the search process in general (such as the <parmname>Limit</parmname>,
        indicating how many results to return) while others only affect a specific query (such as
          <parmname>Fuzziness</parmname> for a given query). Because multiple queries can be
        combined in a single search operation, <i>query specific options</i> can be specified only
        in the query object itself, while <i>search options</i> are specified through methods on the
          <apiname>SearchQuery</apiname> object itself.</p></section>
    <section>
      <title>Query Facets</title>
      <p>Query <xref href="../full-text-search-overview.dita#full-text-search/facets">facets</xref>
        may also be added to the <i>general search parameters</i> by using the
          <parmname>addFacet</parmname> method. The <parmname>addFacet</parmname> method accepts a
        facet name as well as a facet definition You can create facets by instantiating a
          <apiname>Facet</apiname> object using methods found in the <apiname>SearchFacet</apiname>
        class (i.e.: <codeph>SearchFacet.term()</codeph> for a TermFacet).</p>
      <codeblock outputclass="language-javascript">var query = SearchQuery.new('travel-search', SearchQuery.term('office'));
query.addFacet('countries', SearchFacet.term('country', 5));
bucket.query(query, function(err, res, meta) {
  console.log('Total Countries:', meta.facets['countries'].total);
});</codeblock>
    </section>
  </body>
</topic>
