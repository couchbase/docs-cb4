<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_emj_wx3_yv">
    <title>Install and Start Using the Go SDK with Couchbase Server</title>
    <titlealts><navtitle>Start Using the SDK</navtitle></titlealts>
  <body>
    <p>The Couchbase Go SDK allows you to connect to a Couchbase cluster from Go. It is a native Go
            library and uses the high-performance gocbcore to handle communicating to the cluster
            over Couchbaseâ€™s binary protocols</p>
        <section>
            <title>Installation</title>
            <p>You can install the SDK via <codeph>go get</codeph>
                <codeblock outputclass="language-bash">$ go get gopkg.in/couchbase/gocb.v1</codeblock></p>
            <p>Information on new features, fixes, known issues as well as information on how to
                install older release versions is <xref
                    href="/server/other-products/release-notes-archives/go-sdk" format="html"
                    scope="peer">in the release notes</xref>.</p>
        </section>
        <section>
            <title>Hello Couchbase</title>
            <p>Once you've installed the SDK you can run this simple code snippet showcasing some of
                its features.<ul id="ul_alj_xsp_fw">
                    <li>Error checking has been omitted for brevity.</li>
                    <li>Replace <userinput>localhost</userinput> with the IP or hostname of a
                        cluster node, if the host running the example is not also a Couchbase
                        node.</li>
                </ul><codeblock outputclass="language-go">package main

import (
	"fmt"
	"gopkg.in/couchbase/gocb.v1"
)

type User struct {
	Id string `json:"uid"`
	Email string `json:"email"`
	Interests []string `json:"interests"`
}

func main() {
        cluster, _ := gocb.Connect("couchbase://localhost")
        cluster.Authenticate(gocb.PasswordAuthenticator{
            Username: "USERNAME",
            Password: "PASSWORD",
        })
        bucket, _ := cluster.OpenBucket("bucketname", "")
        
        bucket.Manager("", "").CreatePrimaryIndex("", true, false)
        
        bucket.Upsert("u:kingarthur",
                User{
                        Id: "kingarthur",
                        Email: "kingarthur@couchbase.com",
                        Interests: []string{"Holy Grail", "African Swallows"},
                }, 0)
        
        // Get the value back
        var inUser User
        bucket.Get("u:kingarthur", &amp;inUser)
        fmt.Printf("User: %v\n", inUser)
        
        // Use query
        query := gocb.NewN1qlQuery("SELECT * FROM bucketname WHERE $1 IN interests")
        rows, _ := bucket.ExecuteN1qlQuery(query, []interface{}{"African Swallows"})
        var row interface{}
        for rows.Next(&amp;row) {
                fmt.Printf("Row: %v", row)
        }
}</codeblock></p>
            <p>The above example demonstrates the <xref
                    href="../core-operations.dita#devguide_kvcore_generic">upsert,
                    get</xref>, and <xref href="../n1ql-query.dita#toplevel">N1QL query
                    functionality</xref> as used in the Go SDK. First a <apiname>Cluster</apiname>
                object is created with the address of a cluster node, then a connection to a data
                bucket is opened in the form of <apiname>Cluster.OpenBucket</apiname>.</p>
            <p>Data operations are performed against <apiname>Bucket</apiname> objects. In this case
                a document is stored into the cluster using <apiname>Bucket.Upsert</apiname>. The
                document is then retrieved using its ID (primary key) using the
                    <apiname>Bucket.Get</apiname>, and lastly it is queried with the N1QL query
                language using <apiname>Bucket.ExecuteN1qlQuery</apiname>.</p>
            <p>The above example also shows how you can use your own document types. Note that JSON
                annotations are not required for operations, but demonstrate how existing objects
                may fit into your application.</p>
        </section>
        <section>
            <title>Additional Resources</title>
            <ul id="ul_pxz_rsp_fw">
                <li><xref href="https://github.com/couchbase/gocb" format="html"
                        scope="external">Git repository</xref></li>
                <li><xref href="https://godoc.org/github.com/couchbase/gocb" format="html"
                        scope="external">API Documentation</xref></li>
            </ul>
        </section>
  </body>
</topic>
