<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="managing-cluster-go">
    <title>Managing Clusters Using the Go SDK with Couchbase Server</title>
    <titlealts><navtitle>Managing Clusters</navtitle></titlealts>
  <body>
        <p conref="../shared/flush-info-pars.dita#toplevel/management-intro"/>
        <p>The Go SDK also comes with some convenience functionality for common Couchbase management requests.</p>
        <p>Management operations in the Go SDK may be performed through several interfaces
            depending on the object:<ul id="ul_scg_czl_2w">
                <li><apiname>ClusterManager</apiname> interface (obtained via <apiname>Cluster.Manager(username, password string)</apiname>) (administrative username and password).</li>
                <li><apiname>BucketManager</apiname> interface (obtained
                        via <apiname>Bucket.Manager(username, password string)</apiname>) (cluster or bucket credentials).</li>
            </ul></p>

        <section id="go-creating-and-removing-buckets">
            <title>Creating and Removing Buckets</title>
            <p>The <apiname>ClusterManager</apiname> interface may be used to create and delete buckets from the Couchbase
            cluster. It is instantiated through the <apiname>Cluster</apiname>'s <apiname>Manager</apiname> method, providing the
            administrative username and password.</p>
            <codeblock outputclass="language-go">myCluster, _ := gocb.Connect("couchbase://localhost")
clusterManager = myCluster.Manager("Administrator", "123456")</codeblock>
            <p>To create a bucket, use the <apiname>ClusterManager</apiname>'s <apiname>InsertBucket(settings *BucketSettings)</apiname> method. The <apiname>BucketSettings</apiname> struct is also used to expose information
            about existing buckets (<apiname>ClusterManager.GetBuckets()</apiname> returns a slice of settings) or to update
            an existing bucket (<apiname>ClusterManager.UpdateBucket(settings *BucketSettings)</apiname>).</p>

            <note conref="../shared/flush-info-pars.dita#toplevel/update-bucket-warning" />

            <p>Only <parmname>name</parmname> and <parmname>type</parmname> parameters are mandatory for the <apiname>BucketSettings</apiname>. Here is the list of parameters available:</p>
            <ul id="ul_ngw_cbm_2w">
                <li><parmname>Name</parmname>: The name of the bucket (mandatory to create one, cannot be updated).</li>
                <li><parmname>Type</parmname>: The type of the bucket (mandatory to create one, cannot be changed). Defaults to <codeph>BucketType.Couchbase</codeph>, but can also be <codeph>BucketType.Memcached</codeph> to create a cache bucket.</li>
                <li><parmname>Quota</parmname>: How much memory should each node use for the bucket. This number is specified in megabytes.</li>
                <li><parmname>Password</parmname>: If specified, makes this bucket password
                    protected, forcing future connects (using the <apiname>Bucket</apiname>) interface
                    to specify the <parmname>password</parmname> parameter.</li>
                <li><parmname>FlushEnabled</parmname>: Enables the
                        <apiname>BucketManager#flush()</apiname> operation to be performed on this
                    bucket (see the <xref href="#managing-cluster-go/go-flushing"/> section below).</li>
                <li><parmname>Replicas</parmname>: The number of replicas to use for the bucket.</li>
                <li><parmname>IndexReplicas</parmname>: Wether or not to replicate indexes.</li>
            </ul>
            <p>The following example updates an existing "hello" bucket (notice how all parameters are set):</p>
            <codeblock outputclass="language-go">bucketSettings := BucketSettings {
        FlushEnabled: true,
        IndexReplicas: true,
        Name: "hello",
        Password: "",
        Quota: 120,
        Replicas: 1,
        Type: BucketType.Couchbase
}

manager := cluster.Manager("Administrator", "123456")
err := manager.UpdateBucket(bucketSettings)</codeblock>

            <p>Once you no longer need to use the bucket, you may delete the bucket using the
                    <apiname>ClusterManager.RemoveBucket(name string)</apiname>
                method:<codeblock outputclass="language-go">clusterManager.RemoveBucket("hello");</codeblock></p></section>
        <section id="go-flushing">
            <title>Flushing Buckets</title>
            <p conref="../shared/flush-info-pars.dita#toplevel/flush-intro"/>
            <p>You may flush a bucket in the Go SDK by using the
                    <apiname>BucketManager.Flush()</apiname> method (for an example of connecting to the <codeph>BucketManager</codeph>, see the <i>Index Management</i> section below).</p>

            <p>The <apiname>flush</apiname> operation may fail if the bucket does not have flush
                enabled:<codeblock outputclass="language-json">{
    "_": "Flush is disabled for the bucket"
}</codeblock></p>
        </section>
        <section id="go-index-management">
            <title>Index Management</title>
            <p conref="../shared/flush-info-pars.dita#toplevel/index-management"/>
            <p>You can manage indexes in the Go SDK using the <apiname>BucketManager</apiname>
                interface, with its various N1QL related methods: <apiname>GetIndexes()</apiname>, <apiname>CreateIndex(...)</apiname>, etc...</p>
            <p>The following example creates a N1QL secondary index named "fooBar" on the "test" bucket,
                indexing fields "foo" and "bar":</p>
            <codeblock outputclass="language-go">myCluster, _ := gocb.Connect("couchbase://localhost")
testBucket, _ := myCluster.OpenBucket("test")
testManager := testBucket.Manager(username, password)

//true, false at the end: ignore errors if the index exists, don't defer the creation
testManager.CreateIndex("fooBar", string[]{ "foo", "bar" }, true, false);</codeblock>
        </section>
        <section id="go-view-management">
            <title>View Management</title>
            <p conref="../shared/flush-info-pars.dita#toplevel/view-management"/>
            <p> In the Go SDK, design documents are represented by the <codeph>DesignDocument</codeph>
                and <codeph>View</codeph> structs. All operations on design documents are performed on
                a <codeph>BucketManager</codeph> instance.</p>
            <p>To inspect design documents, you can either retrieve them by name (<codeph>bucketManager.GetDesignDocument("landmarks")</codeph>) or iterate through a
                slice of documents (<codeph>bucketManager.GetDesignDocuments()</codeph>).</p>
            <p>To create or update design documents, use the <apiname>InsertDesignDocument(ddoc *DesignDocument)</apiname> and
                <apiname>UpsertDesignDocument(ddoc *DesignDocument)</apiname> methods.</p>
            <p>The following example inserts a design document with two regular views and one spatial
				view into a bucket named <codeph>travel-sample</codeph>:</p>

            <codeblock outputclass="language-go">//(note: obtaining the bucketManager is omitted in this snippet)
// Initialize design document
designDoc := DesignDocument {
        Name: "landmarks",
        Views: map[string]View {
                "by_country": View {
                        Map: "function (doc, meta) { if (doc.type == 'landmark') { emit([doc.country, doc.city], null); } }",
                        Reduce: nil
                },
                "by_activity": View {
                        Map: "function (doc, meta) { if (doc.type == 'landmark') { emit(doc.activity, null); } }",
                        Reduce: "_count"
                }
        },
        SpatialViews: map[string]View {
                "by_coordinates": View {
                        Map: "function (doc, meta) { if (doc.type == 'landmark') { emit([doc.geo.lon, doc.geo.lat], null); } }",
                        Reduce: nil
                }
        }
}

// Insert design document into the bucket
bucketManager.InsertDesignDocument(designDoc)</codeblock>

            <note conref="../shared/flush-info-pars.dita#toplevel/one-view-update-warning"/>
            <codeblock outputclass="language-go">//(note: obtaining the bucketManager is omitted in this snippet)
// Get design document to be updated
designDoc := bucketManager.GetDesignDocument("landmarks")

// Update the "by_country" view, adding a reduce
designDoc.Views["by_country"] := View { //reuse same name
        Map: "function (doc, meta) { if (doc.type == 'landmark') { emit([doc.country, doc.city], null); } }", //same map function
        Reduce: "_count" //added reduce function
}

// Resend to server
bucketManager.UpsertDesignDocument(designDoc)</codeblock>
            <p>To remove a design document from a bucket, pass its name to the <codeph>RemoveDesignDocument</codeph> method.</p>
        </section>
    </body>
</topic>
