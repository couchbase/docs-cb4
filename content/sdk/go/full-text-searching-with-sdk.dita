<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="go-fts">
  <title>Full Text Search (FTS) Using the Go SDK with Couchbase Server</title>
  <titlealts><navtitle>Searching from the SDK</navtitle></titlealts>
  <shortdesc>You can use the Full Text Search service (FTS) to create queryable full-text indexes in Couchbase Server.</shortdesc>
  <body>
    <p>Couchbase offers Full-text search support, allowing you to search for documents that contain
      certain words or phrases. In the Go SDK you can search full-text indexes by using the
        <apiname>SearchQuery</apiname> object and executing it with the
        <apiname>Bucket.ExecuteSearchQuery()</apiname> API.</p>
    <p>The following example shows how to send a simple Search query (note that in this example
      the cbft package also has to be imported independently):<codeblock outputclass="language-go">
import (
  "github.com/couchbase/gocb"
  "github.com/couchbase/gocb/cbft"
  "fmt"
)
       
// ...
query := gocb.NewSearchQuery("travel-search", cbft.NewMatchQuery("office"))
res, _ := bucket.ExecuteSearchQuery(query)
for _, hit := range res.Hits() {
        fmt.Printf("%s\n", hit.Id)
}</codeblock>
    </p>
    <p>The <apiname>Bucket.ExecuteSearchQuery()</apiname> method returns a
        <apiname>SearchResults</apiname>interface which provides access to all of the information
      returned by the query.</p>
    <p>Other search result data may be accessed using the various other available methods on the
        <apiname>SearchResults</apiname>
      interface.<codeblock outputclass="language-go">res, _ := bucket.ExecuteSearchQuery(query)
for _, facet := range res.Facets() {
        // ...
}
fmt.Printf("Total Hits: %d", res.Status().Total)</codeblock></p>
    <section><title>Query Types</title>Query types may be found inside the
                <codeph>gocb/cbft</codeph> package. The package contains query classes corresponding
            to those enumerated in <xref href="../../fts/fts-query-types.dita#topic_jfq_fn4_1v"/>.
            Query object should be instantiated by using the associated <codeph>New*Query</codeph>
            functions, passing the search term (usually a string) as the first argument, followed by
            some query modifiers.<p>It is important to distinguish between <i>query options</i> and
                general <i>search options</i>. Some options affect the search process in general
                (such as the <parmname>Limit</parmname>, indicating how many results to return)
                while others only affect a specific query (such as <parmname>Fuzziness</parmname>
                for a given query). Because multiple queries can be combined in a single search
                operation, <i>query specific options</i> can be specified only in the query object
                itself, while <i>search options</i> are specified through methods on the
                    <apiname>SearchQuery</apiname> object itself.</p></section>
    <section>
      <title>Query Facets</title>
      <p>Query <xref href="../full-text-search-overview.dita#full-text-search/facets">facets</xref>
        may also be added to the <i>general search parameters</i> by using the
          <parmname>AddFacet</parmname> method. The <parmname>AddFacet</parmname> method accepts a
        facet name as well as a facet definiton You can create facets by instantiating a
          <apiname>Facet</apiname> object found in the <apiname>gocb.cbft</apiname> package.</p>
      <codeblock outputclass="language-go">query := gocb.NewSearchQuery("travel-search", cbft.NewMatchQuery("office"))
query.AddFacet("countries", cbft.NewTermFacet("country", 5))
res, _ := bucket.ExecuteSearchQuery(query)
fmt.Printf("Total Countries: %d", res.Facets()["countries"].Total)</codeblock>
    </section>
  </body>
</topic>
