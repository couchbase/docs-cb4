<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_ff3_2jq_44">
    <title>Collecting Information and Logging in the Go SDK with Couchbase Server</title>
    <titlealts><navtitle>Collecting Information</navtitle></titlealts>
 <conbody>
        <p>The Go SDK offers simple logging of library internals to help debug issues. Logging may
            be configured on a global library-level basis. <b>Note that the logging API is subject
                to change</b>.</p>
        <p>You can configure logging using the <apiname>gocbcore.SetLogger</apiname>, which accepts
            an implementation of <apiname>gocbcore.Logger</apiname>. The SDK comes with two built-in
                <apiname>Logger</apiname> implementations, which can be instantiated using the
            following <i>methods</i>:<ul id="ul_xvm_thw_fw">
                <li><apiname>gocbcore.DefaultStdioLogger()</apiname> returns a logger that logs
                    errors and warnings. This is fairly non-disruptive and does not produce a lot of
                    output</li>
                <li><apiname>gocbcore.VerboseStdioLogger()</apiname> returns a logger that logs more
                    detailed tracing information. This logger should only be used when trying to
                    diagnose an issue.</li>
            </ul></p>
        <codeblock outputclass="language-go">import (
        "github.com/couchbaselabs/gocb/gocbcore"
)

func main() {
        gocbcore.SetLogger(gocbcore.DefaultStdioLogger())

        // Use the gocb library.
}</codeblock>
 </conbody>
</concept>
