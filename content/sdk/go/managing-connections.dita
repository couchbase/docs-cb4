<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_ppz_lhq_44">
    <title>Managing Connections Using the Go SDK with Couchbase Server</title>
    <titlealts><navtitle>Managing Connections</navtitle></titlealts>
    <shortdesc>This section describes how to connect the Go SDK to a Couchbase cluster and bucket. It contains best
        practices as well as information on the connection string,  SSL and other advanced connection options.</shortdesc>

<conbody>
        <section><title>Creating a Cluster Object</title>The <apiname>Cluster</apiname> object
            serves as an organizational unit for any <apiname>Bucket</apiname> objects created. As
            on the server each bucket is a member of a cluster, likewise in the SDK each
                <apiname>Bucket</apiname> object is a child of a <apiname>Cluster</apiname>. To
            create a cluster, construct it using a <i>connection string</i>, specifying the scheme
            and host(s) to connect to
                <apiname>gocb.Connect</apiname>:<codeblock outputclass="language-go">cluster, err := gocb.Connect("couchbase://localhost")</codeblock><p>You
                can also specify multiple hosts in the connection string by separating each host
                with a
                comma:<codeblock outputclass="language-go">cluster, err := gocb.Connect("couchbase://host1,host2,host3,hostN")</codeblock>Specifying
                multiple hosts may add <xref href="failure-considerations.dita#topic_wxg_cwb_mv"
                    >additional redundancy</xref> when bootstrapping.</p></section>
    
         <section>
             <title>Authenticating</title>
             <p>From Couchbase Server 5.0, you will need to authenticate the user, rather than against the bucket, as part of <xref href="../../security/security-authorization.dita" scope="local">Role-Based Access Control</xref>. You will need to use <codeph>PasswordAuthenticator</codeph>:<codeblock outputclass="language-go">cluster.Authenticate(gocb.PasswordAuthenticator{
     Username: username,
     Password: password,
 })</codeblock></p></section>
        <section>
            <title>Opening a Bucket</title>
            <p>Once the <apiname>Cluster</apiname> object has been created, you may open one or more
                    <apiname>Bucket</apiname> objects using <apiname>Cluster.OpenBucket</apiname>.
                The first argument is the bucket name to use, and the second is the bucket password
                - which should be provided if the bucket is password protected, or supplied as
                    <codeph>nil</codeph> otherwise.</p>
            <codeblock outputclass="language-go">bucket1, err := cluster.OpenBucket("messages", nil)
protectedBucket, err := cluster.OpenBucket("protected", "s3cr3t")</codeblock>
            <p>Note that the bucket password is <i>not</i> the administrative password used to
                access the Couchbase Web UI.</p>
            <p>Once the bucket has been created, it may be used throughout your application. Buckets
                are thread-safe and need not be locked or otherwise protected to be used from
                multiple threads.</p>
            <p>You should only need to open one <apiname>Bucket</apiname> object for each Couchbase
                Bucket in your application, and you should attempt to keep the
                    <apiname>Bucket</apiname> object available and open for as long as you plan to
                access Couchbase within your application.</p>
        </section>
        <section>
            <title>Closing a Bucket</title>
            <p>When your application is done talking to Couchbase, you can issue the
                    <apiname>Bucket.Close()</apiname> call on the bucket, which will disconnect your
                application from the given bucket.</p>
        </section>
        <section id="ssl">
            <title>Configuring SSL</title>
            <p><note type="warning">Be aware that certificate
                            validation when connecting to Couchbase using SSL requires Go 1.6+ and gocb 1.2+. 
                            Otherwise SSL connections are subject to <xref
                                href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack"
                                format="html" scope="external">man-in-the-middle</xref>
                            attacks.</note>
                To configure SSL, pass an SSL scheme with your connection string
                when creating your cluster object.</p>
            <codeblock outputclass="language-go">myCluster, _ := gocb.Connect("couchbases://10.1.1.1")
myBucket, _ := myCluster.OpenBucket("default", "")</codeblock>
        </section>
        <section conref="../shared/dnssrv-pars.dita#dnssrv/dnssrv"/>
        <section>To use DNS SRV in the Go SDK, simply pass the single bootstrap node (in this case
                <codeph>couchbase://example.com</codeph>). DNS SRV lookup will not be performed if
            there is more than a single node in the bootstrap list.</section>
    </conbody>

</concept>
