<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="concept_tvx_nhq_44">
    <title>MapReduce Views Using the Go SDK with Couchbase Server</title>
    <titlealts><navtitle>MapReduce Views</navtitle></titlealts>
 <shortdesc>You can use MapReduce views to create queryable secondary indexes in Couchbase Server. </shortdesc>
 <body>
  <section conref="../shared/views.dita#toplevel/views-intro"/>
  <section conref="../shared/views.dita#toplevel/example-beer"/>
     <section>
         <title>Querying views through the Go SDK</title>

         <p>Querying a view through the Go SDK is performed through the <codeph>ViewQuery</codeph>
             interface that is instantiated through the NewViewQuery method of the gocb library.</p>
         <codeblock outputclass="language-go">myQuery := gocb.NewViewQuery("beer", "by_name")</codeblock>
         <p>The <codeph>ViewQuery</codeph> interface enables you to query the view and specify various
             available options for the query. Once you have the query ready for execution, pass it to the
             <codeph>ExecuteViewQuery</codeph> method of the your Bucket instance:</p>
         <codeblock outputclass="language-go">rows, err := myBucket.ExecuteViewQuery(myQuery)
if err != nil {
        fmt.Printf("View query error: %s\n", err)
}

var row interface{}
for rows.Next(&amp;row) {
        fmt.Printf("Row: %+v\n", row)
}
if err := rows.Close(); err != nil {
        fmt.Printf("View query results error: %s\n", err)
}</codeblock>
         <p>You can modify your view results by specifying various options before executing the
             <codeph>query</codeph> method. Here is an example that skips the first six items and
             limits the results to three items:</p>
         <codeblock outputclass="language-go">myQuery = gocb.NewViewQuery("beer", "by_name").Skip(6).Limit(3)</codeblock>
     </section>
 </body>
</topic>
