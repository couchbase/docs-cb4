<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="concept_tvx_nhq_44">
    <title>MapReduce Views using the PHP SDK with Couchbase Server</title>
    <titlealts><navtitle>MapReduce Views</navtitle></titlealts>
 <shortdesc>You can use MapReduce views to create queryable secondary indexes in Couchbase Server. </shortdesc>
 <body>
    <section conref="../shared/views.dita#toplevel/views-intro"/>
    <section conref="../shared/views.dita#toplevel/example-travel"/>
    <section conref="../shared/views.dita#toplevel/example-geo-travel"/>
    <section><title>Querying Views from the PHP SDK</title>
        <p>Once you have a view defined, it can be queried from the PHP SDK by using the
            <apiname>query(CouchbaseViewQuery $query)</apiname> method on the CouchbaseBucket class. Here is an example:</p>
        <codeblock outputclass="language-php" spectitle="Querying simply MapReduce view">
            $query = CouchbaseViewQuery::from("landmarks", "by_name")->limit(10);
            $landmarks = $bucket->query($query);
            foreach ($landmarks->rows as $landmark)
            {
            printf("%s\n", $landmark->key);
            }</codeblock>

        <p>The <apiname>CouchbaseBucket.query</apiname> method takes an instance of CouchbaseViewQuery, executes it and returns back the result of query
            as either <apiname>stdClass</apiname> instance (which is default) or nested array depending on third argument <apiname>$json_asarray</apiname>.
            Some useful methods and properties of the <apiname>CouchbaseViewQuery</apiname> class include (others can be seen in the reference documentation):
            <ul id="ul_vjd_xhz_dw">
                <li><apiname>order</apiname>: set order of documents in result, accepts <apiname>CouchbaseViewQuery::ORDER_ASCENDING</apiname> or
                    <apiname>CouchbaseViewQuery::ORDER_DESCENDING</apiname></li>
                <li><apiname>skip</apiname>: skip this number of records before starting to return the results</li>
                <li><apiname>limit</apiname>: limit the number of the returned documents to the specified number</li>
                <li><apiname>key</apiname>: return only documents that match the specified key. </li>
                <li><apiname>keys</apiname>: return only documents that match one of keys specified within the given array</li>
            </ul>The value returned by <apiname>query</apiname>implementation that contains the results of the query and number of rows. Depending on <apiname>$json_asarray</apiname> they should be accessed with property (default) or array syntax.
            <ul id="ul_h4d_gkz_dw">
                <li><apiname>rows</apiname>: the results of the query.</li>
                <li><apiname>total_rows</apiname>: the total count of all rows.</li>
            </ul>The entry of <apiname>rows</apiname> collection represents each row returned by the view request and contains properties for
            the document <apiname>id</apiname>, the <apiname>key</apiname> and the <apiname>value</apiname> if it was emitted. Here is another example of a more
            advanced query:</p>
        <codeblock outputclass="language-php" spectitle="Querying a MapReduce view">$query = CouchbaseViewQuery::from("landmarks", "by_name")
            ->limit(10)->range("A", "\u0fff");
            $landmarks = $bucket->query($query);
            foreach ($landmarks->rows as $landmark)
            {
            printf("%s\n", $landmark->key);
            }</codeblock>

        <p>Here's some sample output for the previous query:</p>
        <screen>A R M Chicken
A. Cavalli &amp;
A16
Abacus Books
Abbey and Palace of Holyroodhouse
Abbey Grounds
Abbot Kinney
Abbots Tandoori
ABC Bakery Cafe
Aberconwy House</screen>
    </section>

    <section><title>Querying Geospatial Views</title>
        <p>To query a geospatial view, you will need to construct a
        <apiname>CouchbaseViewQuery</apiname> object using <apiname>fromSpatial</apiname> factory method.
        Spatial queries accept additional builder method <parmname>bbox</parmname> which allow
        you to limit the enclosing bounding boxes of the result. The argument to this method is and array of
        four <apiname>double</apiname>'s with each element corresponding to a component emitted
        by the key (longitude and latitude).</p>
        <p>On output, spatial queries yield objects similar to how
        regular view query does, with an added <codeph>Geometry</codeph> property.</p>
      <codeblock outputclass="language-php" spectitle="Advanced querying a spatial view">$query = CouchbaseViewQuery::fromSpatial("spatial", "routes")
       ->limit(10)->bbox(array(0, -90, 180, 90));
$routes = $bucket->query($query);
foreach ($routes->rows as $route)
{
    var_dump($route->value);
}</codeblock>
The output:
<screen>array(3) {
  [0]=>
  string(5) "US964"
  [1]=>
  string(3) "DCA"
  [2]=>
  string(3) "CRW"
}
array(3) {
  [0]=>
  string(5) "DL790"
  [1]=>
  string(3) "MSP"
  [2]=>
  string(3) "CLE"
}
...
</screen>
      In the example above, we construct a <apiname>CouchbaseViewQuery</apiname>
      that will target the "routes" view on the "spatial" design document.
      <codeblock outputclass="language-javascript" spectitle="Definition of spatial/routes view">/*
  Emit all the flights. You can filter them by day and time.
*/
function(doc, meta) {
    if (doc.type === 'route') {
        for (var i = 0; i &lt; doc.schedule.length; i++) {
            var schedule = doc.schedule[i];
            var time = parseInt(schedule.utc.replace(/:/g, ''));
            var key = [schedule.day, time];
            var value = [
                schedule.flight,
                doc.sourceairport,
                doc.destinationairport
            ];
            emit(key, value);
        }
    }
}</codeblock>
      We then pass the start and end coordinates in via the <apiname>bbox</apiname> method and finally we limit are results to 10 items with
      the <apiname>limit</apiname> method.</section>
  </body>
</topic>
