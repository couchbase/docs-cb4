<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="managing-cluster-php">
    <title>Managing Clusters Using the PHP SDK with Couchbase Server</title>
    <titlealts><navtitle>Managing Clusters</navtitle></titlealts>
  <shortdesc>
      This section covers the convenience functionality in the Couchbase PHP SDK for managing buckets,
      managing indexes used by N1QL and managing views.
  </shortdesc>
  <body>
        <p conref="../shared/flush-info-pars.dita#toplevel/management-intro"/>
        <p>The PHP SDK also comes with some convenience functionality for common Couchbase management requests.</p>
        <p>Management operations in the PHP SDK may be performed through several interfaces
            depending on the object.  There are two to consider:<ul id="ul_scg_czl_2w">
                <li>The <apiname>CouchbaseClusterManager</apiname> class (obtained via
                        <apiname>CouchbaseCluster#manager(string $username, string
                        $password)</apiname> passing administrative user name and password)</li>
                <li>The <apiname>CouchbaseBucketManager</apiname> class (obtained via
                        <apiname>CouchbaseBucket#manager()</apiname>).</li>
            </ul></p>

        <section><title>Getting Information About the Cluster</title><p>When you call
                    <codeph>CouchbaseClusterManager#info()</codeph> it returns a
                    <codeph>mixed</codeph> object that contains information on the overall cluster
                state.</p><codeblock outputclass="language-php">$cluster = new CouchbaseCluster('couchbase://localhost');
$manager = $cluster->manager('Administrator', 'password');
$info = $manager->info();
printf("cluster has %d nodes, %d buckets and %d megabytes used\n",
       count($info['nodes']), count($info['buckets']),
       $info['storageTotals']['ram']['usedByData'] / 1024 / 1024);</codeblock>
            Output:<screen>cluster has 1 nodes, 3 buckets and 105 megabytes used </screen></section>

        <section><title>Creating and Removing Buckets</title>
            <p>The <apiname>CouchbaseClusterManager</apiname> class may be used to create and delete
                buckets from the Couchbase cluster. It is instantiated through the
                    <apiname>CouchbaseCluster</apiname>'s <apiname>manager()</apiname> method,
                providing the administrative user name and password.</p>
            <codeblock>$cluster = new CouchbaseCluster('couchbase://localhost');
$clusterManager = $cluster->manager('Administrator', 'password');</codeblock>

            <p>To create a bucket, use the <apiname>CouchbaseClusterManager</apiname>'s
                    <apiname>createBucket(string $name, array $opts)</apiname> method. The
                    <apiname>$opts</apiname> array is used to provide the configuration of the new
                bucket, while the string is the name given to the bucket. These are the default
                configuration options:</p>
            <codeblock outputclass="language-php">array(
  'authType' => 'sasl',
  'bucketType' => 'couchbase',
  'ramQuotaMB' => 100,
  'replicaNumber' => 1
);</codeblock>

            <note conref="../shared/flush-info-pars.dita#toplevel/update-bucket-warning"/>

            <p>Only the <parmname>$name</parmname> and <parmname>$opts['bucketType']</parmname>
                parameters are mandatory for configuring a bucket. This list of parameters is
                recognized for the <parmname>$opts</parmname> array, corresponding to those
                available in the REST API:</p>
            <ul id="ul_ngw_cbm_2w">
                <li><parmname>name</parmname>: The name of the bucket (actually taken from the <parmname>$name</parmname> method
                parameter, cannot be updated).</li>
                <li><parmname>bucketType</parmname>: The type of the bucket (mandatory to specify
                    one, cannot be changed). Defaults to <codeph>'couchbase'</codeph>, but can also
                    be <codeph>'memcached'</codeph> to create a cache bucket.</li>
                <li><parmname>ramQuotaMB</parmname>: How much memory should each cluster node use
                    for the bucket. This number is specified in megabytes, defaults to 100MB</li>
                <li><parmname>saslPassword</parmname>: If specified, makes this bucket password protected, forcing future connects
                (using the <apiname>Bucket</apiname>) to specify the <parmname>password</parmname> parameter. Must be
                used together with <parmname>$opts['authType'] = 'sasl'</parmname> (which is the default).</li>
                <li><parmname>flushEnabled</parmname>: Enables the <apiname>CouchbaseBucketManager->flush()</apiname> operation to
                be performed on this bucket <!-- PHP SDK does not implement it yet: (see the <xref href="#managing-cluster-php/flushing"/> section below) -->.</li>
                <li><parmname>replicaNumber</parmname>: The number of replicas to use for the bucket, default to 1.</li>
                <li><parmname>replicaIndex</parmname>: Whether or not to replicate indexes.</li>
            </ul>

            <!--TODO: PHP SDK does not have updateBucket() implemented -->
            <p>The following example creates a "hello" bucket. Note how all parameters are set:</p>
            <codeblock outputclass="language-php">$bucketSettings = array(
  'bucketType' => 'couchbase',
  'ramQuotaMB' => 120,
  'saslPassword' => '',
  'flushEnabled' => true,
  'replicaNumber' => 1,
  'replicaIndex' => true
);

$manager = $cluster->manager('Administrator', 'password');
$manager->createBucket('hello', $bucketSettings);</codeblock>

            <p>Once you no longer need to use the bucket, you may delete the bucket using the
                <apiname>CouchbaseClusterManager#removeBucket($name)</apiname>
                method:<codeblock outputclass="language-php">$cluster->removeBucket('hello');</codeblock></p></section>

            <!--TODO: PHP SDK does not have flush() implemented -->

        <section>
            <title>N1QL Index Management</title>
            <p conref="../shared/flush-info-pars.dita#toplevel/index-management"/>
            <p>You can manage indexes in the PHP SDK using the <apiname>CouchbaseBucketManager</apiname>
                class, with its various N1QL related methods: <apiname>listN1qlIndexes()</apiname>,
                <apiname>createN1qlIndex(...)</apiname>, etc...</p>
            <p>The following example creates a N1QL secondary index named "fullName" on the "test"
                bucket, indexing fields "firstName" and "lastName" (Boolean flags as the last
                argument mean do not throw an error if the index with the same name already
                exists):</p>
            <codeblock outputclass="language-php">$cluster = new CouchbaseCluster('couchbase://localhost');
$bucket = $cluster->openBucket("test");
$manager = $bucket->manager();

$manager->createN1qlIndex("fullName", array("firstName", "lastName" ), '`state` = "active"',
                          true, false);</codeblock>
        </section>

        <section>
            <title>View Management</title>
            <p conref="../shared/flush-info-pars.dita#toplevel/view-management"/>
            <p> In the PHP SDK, design documents and view definitions are represented by associative arrays.
                All operations on design documents are performed on a <codeph>CouchbaseBucketManager</codeph> instance.</p>
            <p>To inspect design documents, you can either retrieve them by name (<codeph>$bucketManager->getDesignDocument("landmarks");</codeph>) or iterate through an
                array of documents (<codeph>$bucketManager->getDesignDocuments();</codeph>).</p>
            <p>To create or update design documents, use the <apiname>insertDesignDocument($name, $data)</apiname> and
                <apiname>upsertDesignDocument($name, $data)</apiname> methods.</p>
            <p>The following example inserts design documents with two regular views and one spatial
                view into a bucket named <codeph>travel-sample</codeph>:</p>

            <codeblock outputclass="language-php">// Initialize design document
$designDoc = array(
    'views' => array(
        'by_country' => array(
            'map' => "function (doc, meta) {
                        if (doc.type == 'landmark') {
                           emit([doc.country, doc.city], null);
                        }
                      }"
        ),
        'by_activity' => array(
            'map' => "function (doc, meta) {
                        if (doc.type == 'landmark') {
                          emit(doc.activity, null);
                        }
                      }",
            'reduce' => "_count"
        )
    )
);

// Insert design document into the bucket, as "landmarks"
$manager->insertDesignDocument('landmarks', $designDoc);

$designDoc = array(
    'spatial' => array(
        'by_coordinates' => "function (doc, meta) {
                               if (doc.type == 'landmark') {
                                 emit([doc.geo.lon, doc.geo.lat], null);
                               }
                             }"
    )
);
$manager->insertDesignDocument('landmarks_spatial', $designDoc);</codeblock>

            <note conref="../shared/flush-info-pars.dita#toplevel/one-view-update-warning"/>
            <codeblock outputclass="language-php">// Get design document to be updated
$designDoc = $manager->getDesignDocument('landmarks');

// Update the "by_country" view, adding a reduce
$designDoc['views']['by_country'] += array('reduce' => "_count"); //added reduce function

// Resend to server
$bucketManager->upsertDesignDocument($designName, $designDoc);</codeblock>
            <p>To remove a design document from a bucket, call the
                    <codeph>removeDesignDocument</codeph> method with the name of the design
                document.</p>
        </section>


   <section>
     
    <title>
      Configuration Cache File
    </title>
    
    <p>
      The legacy client configuration cache file records the current cluster configuration, which
      Couchbase Server uses at startup.
    </p>
    
    <p>
      Client applications use <i>libcouchbase</i> to connect to Couchbase Server. By means of libcouchbase,
      the client can react to changes in cluster-topology. Whenever the client is started, libcouchbase is
      instantiated, and checks the local filesystem for a <i>configuration cache file</i>, containing information on the
      cluster-toplogy. If no such file exists, libcouchbase
      connects to the cluster by means of a REST method, in order to receive the latest topology details.
      Once acquired, these details are written to the configuration cache file, locally. 
    </p>
    
    <p>
      Subsequently, when starting, the client uses the local configuration cache file to acquire its topology data. If at any time, when
      using this data, the client
      attempts to access a data item on a node, and is informed by Couchbase Server that the node is
      incorrect (due to the cluster configuration having changed), the current configuration cache file is duly invalidated. The 
      client then requests an updated set of
      toplogy details from Couchbase Server; which are themselves then saved locally by the client, as a 
      new configuration cache file.
    </p>
    
    <p>
      Use of the configuration cache-file is available only through 
      PHP (not through Java or .NET), Node.js, and Python.
      Therefore, to use the cache file, add the following
      to the <codeph>php.ini</codeph>:
    </p>
    
    <codeblock>couchbase.config_cache = /tmp </codeblock>
    
   </section> 


    </body>
</topic>
