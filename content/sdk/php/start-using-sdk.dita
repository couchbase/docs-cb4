<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_qkc_cnm_qv">
    <title>Install and Start Using the PHP SDK with Couchbase Server</title>
    <titlealts><navtitle>Start Using the SDK</navtitle></titlealts>
    <shortdesc>The Couchbase PHP SDK allows you to connect to a Couchbase cluster from PHP. The
        Couchbase PHP SDK is a native PHP extension and uses the Couchbase high-performance C library
        to handle communicating to the cluster over Couchbase binary protocols.</shortdesc>
    <body>

        <p>Before installing the PHP SDK, you must first install the C SDK.</p>
        <section conref="../c/start-using-sdk.dita#toplevel/install-linux"/>
        <section conref="../c/start-using-sdk.dita#toplevel/install-osx"/>
	<p>Once the C SDK has been installed, use PECL to download and install the
	<codeph>couchbase</codeph> module:</p>
	<codeblock outputclass="language-bash">$ pecl install couchbase</codeblock>
	<section><title>Installing on OS X</title>On Mac OS X, you have additional way to 
	install extension. Using homebrew and bypassing pecl:
	<codeblock outputclass="language-bash">$ brew tap homebrew/homebrew-php
$ brew install php70-couchbase
</codeblock>
	Where <codeph>php70</codeph> is of the versions of PHP supported by <xref href="https://github.com/Homebrew/homebrew-php" format="html" scope="external">homebrew/homebrew-php</xref>.
	</section>
        <section><title>Installing on Microsoft Windows</title>When using Microsoft Windows,
            download one of the prebuilt binaries (below), matching your environment because
            PECL does not currently support building for Windows. You also have the option of
            downloading the <xref href="https://github.com/couchbaselabs/php-couchbase"
                format="html" scope="external">source</xref> for the SDK and building it
            directly.</section>
        <section><title>php.ini</title>Once the PHP SDK has been installed, you need to specify
            that the PHP interpreter should load the Couchbase SDK as an extension. To do
            this:<ol id="ol_rr1_cpz_zv">
                <li>Locate the location of your php.ini file. This can be done by <codeph>php
                    --ini</codeph><screen>$ php --ini
Configuration File (php.ini) Path: /usr/local/etc/php/7.0
Loaded Configuration File:         /usr/local/etc/php/7.0/php.ini
Scan for additional .ini files in: /usr/local/etc/php/7.0/conf.d
Additional .ini files parsed:      (none)</screen></li>
                <li>Insert the following line in the <codeph>php.ini</codeph> file; this should be
                    in the <codeph>[PHP]</codeph> section. If you don't know where that is, simply
                    search for existing commented or uncommented <codeph>extension=</codeph> entries
                    in the
                    file.<codeblock spectitle="Linux and OS X">extension=couchbase.so</codeblock><codeblock spectitle="Windows">extension=couchbase.dll</codeblock>
                    The Couchbase SDK depends on JSON PHP extension, so make sure that load order is
                    correct. For example, in case of single <codeph>php.ini</codeph> file, just
                    insert line after <codeph>extension=json.so</codeph> Couchbase SDK, and if
                        <codeph>conf.d</codeph>-style used, name file with Couchbase SDK ini file so
                    that it will be alphabetically ordered after JSON extension.
                    <note type="important">Because the extension depends on the C library (libcouchbase), the shared object
                    <codeph>libcouchbase.so</codeph> or <codeph>libcouchbase.dll</codeph> has to be accessible by the
                    PHP process when loading the extension. On UNIX-like systems no additional steps are necessary, because the
                    libcouchbase package installs shared objects into a common system location. For Windows though, it must
                    be copied into either into a location from the <codeph>PATH</codeph> for the PHP executable or into a
                    directory with like executables (like apache2, IIS or php.exe). This is controlled by your PHP distribution's
                    setup, so see its documentation for further information.</note></li>
            </ol></section>
        <p>Information on
            new features, fixes, known issues as well as information on how to install
            older release versions is <xref
                href="/server/other-products/release-notes-archives/php-sdk"
                format="html" scope="peer">in the release notes</xref>.
        </p>
        <section>
            <title>Hello Couchbase</title>
            <p>The Hello Couchbase example consists of one PHP file,
                <filepath>hello-couchbase.php</filepath>. The code opens a connection to
                Couchbase Server, retrieves a document, modifies the document, and stores the
                updated document in the database. Here's the
                <filepath>hello-couchbase.php</filepath> code:</p>
            <codeblock outputclass="language-php" spectitle="hello-couchbase.php">&lt;?php
// Connect to Couchbase Server

$cluster = new CouchbaseCluster("couchbase://127.0.0.1");
$bucket = $cluster->openBucket("default");

// Store a document
echo "Storing u:king_arthur\n";
$result = $bucket->upsert('u:king_arthur', array(
    "email" => "kingarthur@couchbase.com",
    "interests" => array("African Swallows")
));

var_dump($result);

// Retrieve a document
echo "Getting back u:king_arthur\n";
$result = $bucket->get("u:king_arthur");
var_dump($result->value);

// Replace a document
echo "Replacing u:king_arthur\n";
$doc = $result->value;
array_push($doc->interests, 'PHP 7');
$bucket->replace("u:king_arthur", $doc);
var_dump($result);

echo "Creating primary index\n";
// Before issuing a N1QL Query, ensure that there is
// is actually a primary index.
try {
    // Do not override default name, fail if it is exists already, and wait for completion
    $bucket->manager()->createN1qlPrimaryIndex('', false, false);
    echo "Primary index has been created\n";
} catch (CouchbaseException $e) {
    printf("Couldn't create index. Maybe it already exists? (code: %d)\n", $e->getCode());
}

// Query with parameters
$query = CouchbaseN1qlQuery::fromString("SELECT * FROM `default` WHERE \$p IN interests");
$query->namedParams(array("p" => "African Swallows"));
echo "Parameterized query:\n";
var_dump($query);
$rows = $bucket->query($query);
echo "Results:\n";
var_dump($rows);</codeblock>
            <p>The console output should look similar to this:</p>
            <screen>Storing u:king_arthur
object(CouchbaseMetaDoc)#4 (4) {
  ["error"]=>
  NULL
  ["value"]=>
  NULL
  ["flags"]=>
  NULL
  ["cas"]=>
  string(9) "mdzlfqp04"
}
Getting back u:king_arthur
object(stdClass)#5 (2) {
  ["email"]=>
  string(24) "kingarthur@couchbase.com"
  ["interests"]=>
  array(1) {
    [0]=>
    string(16) "African Swallows"
  }
}
Replacing u:king_arthur
object(CouchbaseMetaDoc)#6 (4) {
  ["error"]=>
  NULL
  ["value"]=>
  object(stdClass)#5 (2) {
    ["email"]=>
    string(24) "kingarthur@couchbase.com"
    ["interests"]=>
    array(2) {
      [0]=>
      string(16) "African Swallows"
      [1]=>
      string(5) "PHP 7"
    }
  }
  ["flags"]=>
  int(33554438)
  ["cas"]=>
  string(9) "mdzlfqp04"
}
Creating primary index
Primary index has been created
Parameterized query:
object(CouchbaseN1qlQuery)#7 (2) {
  ["options"]=>
  array(1) {
    ["statement"]=>
    string(45) "SELECT * FROM `default` WHERE $p IN interests"
  }
  ["adhoc"]=>
  bool(true)
}
Results:
array(1) {
  [0]=>
  object(stdClass)#9 (1) {
    ["default"]=>
    object(stdClass)#8 (2) {
      ["email"]=>
      string(24) "kingarthur@couchbase.com"
      ["interests"]=>
      array(2) {
        [0]=>
        string(16) "African Swallows"
        [1]=>
        string(5) "PHP 7"
      }
    }
  }
}</screen>
        </section>
        <section>
            <title>API Reference</title>
            <p>The API reference is generated for each version. The API reference for version
                    <keyword keyref="php-current-version"/> is at <xref keyref="php-api-link"/></p>
        </section>
    </body>
</topic>
