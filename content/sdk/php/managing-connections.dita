<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="managing-connections-php">
	<title>Managing Connections Using the PHP SDK with Couchbase Server</title>
	<titlealts><navtitle>Managing Connections</navtitle></titlealts>
 <shortdesc>This section describes how to connect the PHP SDK to a Couchbase cluster and bucket. It contains best
     practices as well as information on the connection string, SSL and other advanced connection options.</shortdesc>
<body>
	<p>To manage Couchbase Server connections, you need to configure the client, connect to a bucket,
			and configure SSL.</p>
	<section>
		<title>Configuring the Client</title>

		<p>To configure the client, instantiate a new <codeph>Cluster</codeph> object:</p>
		<codeblock outputclass="language-php">$myCluster = new CouchbaseCluster('couchbase://10.4.4.1,10.4.4.2,10.4.4.3');</codeblock>
		<p>In addition to the connection string passed to the <codeph>Cluster</codeph> object, you can
				include a username and password. The username and password are required to perform
				management operations against your cluster. If you do not use the cluster management
				aspects of the SDK, the username and password parameters are optional. Keep in mind
				that these credentials are the same ones you use to log in to the Couchbase
				administrator console, not those specified for the bucket itself.</p>
	</section>

        <section>
            <title>Authentication</title>

            <p>Regular authentication is where you provide a password to the <codeph>openBucket()</codeph>
            and <codeph>manager()</codeph> methods. It is also possible to define all credentials in single place,
            and associate with a container, which can be used for all future connections.</p>
            <p>Since version 2.3.0, the PHP SDK provides the interface <codeph>\Couchbase\Authenticator</codeph> which
            is implemented by all credentials containers. The library can pull authentication parameters
            from it when necessary. At the moment there is only one implementation of this interface:
            <codeph>\Couchbase\ClassicAuthenticator</codeph>, but upcoming releases will also have RBAC support.
            The use of the authenticator is simple:</p>
            <codeblock outputclass='language-php'><![CDATA[$authenticator = new \Couchbase\ClassicAuthenticator();
$authenticator->cluster('Administrator', 'password');
$authenticator->bucket('protected', 'secret');

$cluster = new \Couchbase\Cluster("couchbase://localhost");
$cluster->authenticate($authenticator);

$cluster->openBucket('protected'); // successfully opens connection
$cluster->manager()->createBucket('hello'); // automatically use admin credentials]]></codeblock>
            <p>It is still possible to provide a password to the <codeph>openBucket()</codeph> or <codeph>manager()</codeph> method,
            which will take precedence over the authenticator. Such behaviour is discouraged, and future
            implementations of the <codeph>\Couchbase\Authenticator</codeph> interface are likely to prevent 
		    mixing of authentication sources.</p>
        </section>

	<section>

		<title>Connecting to a Bucket</title>
		<p>To connect to a bucket, call the <codeph>openBucket()</codeph> method against your
			<codeph>Cluster</codeph> instance, passing in the name of the bucket that you want to
			connect to. If no bucket name is specified, the default bucket is opened. The following
			example shows how to connect to a bucket:</p>
		<codeblock outputclass="language-php">$myCluster = new CouchbaseCluster();
$myBucket = $myCluster->openBucket('default');</codeblock>
		<p>In addition to the bucket name, you can optionally include the bucket password if one has been
			defined, as shown in the following example:</p>
		<codeblock outputclass="language-php">$myCluster = new CouchbaseCluster();
$myBucket = $myCluster->openBucket('default', 'password');</codeblock></section>
<section><title>Disconnecting from a
	Bucket</title>
		<p>To close the connection to a bucket, call its <codeph>disconnect()</codeph> method. This method
			queues the disconnection of all open connections and causes any pending operations to fail.
		</p>
	</section>

        <section>
            <title>Scalability and concurrency</title>
            <p>Creating a new <apiname>Bucket</apiname> object is relatively expensive, and keeping
                many idle <apiname>Bucket</apiname> objects will negatively impact server
                performance (if done at a large scale).</p>
            <p>PHP SDK by default uses persistent connections to reuse underlying IO objects if the
                connection strings are the same.</p>
        </section>

        <section conref="../c/managing-connections.dita#toplevel/connstr-begin"
            conrefend="../c/managing-connections.dita#toplevel/connstr-end"/>
</body>

</topic>
