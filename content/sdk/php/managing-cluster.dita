<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<topic id="managing-cluster-php">
  <title>Managing Clusters</title>
  <body>
        <p conref="../shared/flush-info-pars.dita#toplevel/management-intro"/>
        <p>The PHP SDK also comes with some convenience functionality for common Couchbase management requests.</p>
        <p>Mangement operations in the PHP SDK may be performed through several interfaces
            depending on the object:<ul id="ul_scg_czl_2w">
                <li><apiname>CouchbaseClusterManager</apiname> class (obtained via
                <apiname>Couchbasecluster#manager(string usename, string password)</apiname>)
                (administrative username and password).</li>
                <li><apiname>CouchbaseBucketManager</apiname> class (obtained
                        via <apiname>CouchbaseBucket#manager()</apiname>).</li>
            </ul></p>

        <section><title>Getting Information About the Cluster</title>
            <p>When you call <codeph>ClusterManager->info()</codeph> it returns a <codeph>mixed</codeph> object that contains
            information on the overall cluster state.</p>
            <!--TODO flesh out the content of the result? -->
        </section>

        <section><title>Creating and Removing Buckets</title>
            <p>The <apiname>CouchbaseClusterManager</apiname> class may be used to create and delete buckets from the Couchbase
            cluster. It is instantiated through the <apiname>Cluster</apiname>'s <apiname>manager()</apiname> method, providing the administrative username and password.</p>
            <codeblock>$cluster = new CouchbaseCluster('http://127.0.0.1:8091');
$clusterManager = $cluster->manager('Administrator', '123456');</codeblock>

            </p><p>To create a bucket, use the <apiname>CouchbaseClusterManager</apiname>'s <apiname>createBucket(string $name,
            array $opts)</apiname> method. The <apiname>$opts</apiname> array is used to provide the configuration of the new
            bucket, while the string is the name given to the bucket. Below is an example array with all the values that
            are set by default:</p>
            <codeblock>array(
    'authType' => 'sasl',
    'bucketType' => 'couchbase',
    'ramQuotaMB' => 100,
    'replicaNumber' => 1
);</codeblock>

            <note conref="../shared/flush-info-pars.dita#top-level/update-bucket-warning" />

            <p>Only the <parmname>$name</parmname> and <parmname>$opts['bucketType']</parmname> parameters are mandatory for
            configuring a bucket. Here is the list of parameters recognized for the <parmname>$opts</parmname> array, which
            corresponds to those available in the REST API:</p>
            <ul id="ul_ngw_cbm_2w">
                <li><parmname>name</parmname>: The name of the bucket (actually taken from the <parmname>$name</parmname> method
                parameter, cannot be updated).</li>
                <li><parmname>bucketType</parmname>: The type of the bucket (mandatory to create one, cannot be changed). Defaults
                to <codeph>'couchbase'</codeph>, but can also be <codeph>'memcached'</codeph> to create a cache bucket.</li>
                <li><parmname>ramQuotaMB</parmname>: How much memory should each node use for the bucket. This number is specified
                in megabytes, defaults to 100MB</li>
                <li><parmname>saslPassword</parmname>: If specified, makes this bucket password protected, forcing future connects
                (using the <apiname>Bucket</apiname>) to specify the <parmname>password</parmname> parameter. Must be
                used together with <parmname>$opts['authType'] = 'sasl'</parmname> (which is the default).</li>
                <li><parmname>flushEnabled</parmname>: Enables the <apiname>CouchbaseBucketManager->flush()</apiname> operation to
                be performed on this bucket (see the <xref href="#managing-cluster-php/flushing"/> section below).</li>
                <li><parmname>replicaNumber</parmname>: The number of replicas to use for the bucket, default to 1.</li>
                <li><parmname>replicaIndex</parmname>: Wether or not to replicate indexes.</li>
            </ul>

            <!--TODO no updateBucket?? -->
            <p>The following example creates a "hello" bucket (notice how all parameters are set):</p>
            <codeblock>$bucketSettings = array(
    'bucketType' => 'couchbase',
    'ramQuotaMB' => 120,
    'saslPassword' => '',
    'flushEnabled' => true,
    'replicaNumber' => 1,
    'replicaIndex' => true
);

$manager = $cluster->manager('Administrator', '123456');
$manager->createBucket('hello', $bucketSettings);</codeblock>

<!-- TODO if the PHP SDK doesn't wait for the bucket to be ready, add the shared content on waiting/polling for bucket readiness -->

            <p>Once you no longer need to use the bucket, you may delete the bucket using the
                <apiname>CouchbaseClusterManager#removeBucket($name)</apiname>
                method:<codeblock>$clusterManager->removeBucket('hello');</codeblock></p></section>

        <section id="flushing">
            <title>Flushing Buckets</title>
            <p conref="../shared/flush-info-pars.dita#toplevel/flush-intro"/>
            <p>You may flush a bucket in the PHP SDK by using the <apiname>CouchbaseBucketManager#flush()</apiname> method.</p>

<!-- TODO paste a console output of what happens when a flush fails between the <screen> tags -->
<!--            <p>The <apiname>flush</apiname> operation may fail if the bucket does not have flush
                enabled:<screen>
</screen></p>-->
        </section>

        <section>
            <title>N1QL Index Management</title>
            <p conref="../shared/flush-info-pars.dita#toplevel/index-management"/>
            <p>You can manage indexes in the PHP SDK using the <apiname>CouchbaseBucketManager</apiname>
                class, with its various N1QL related methods: <apiname>listN1qlIndexes()</apiname>,
                <apiname>createN1qlIndex(...)</apiname>, etc...</p>
            <p>The following example creates a N1QL secondary index named "fooBar" on the "test" bucket,
                indexing fields "foo" and "bar":</p>
            <codeblock>$cluster = new CouchbaseCluster('http://127.0.0.1:8091');
$bucket = $cluster->openBucket("test");
$testManager = $bucket->manager();

$testManager->createN1qlIndex("fooBar", array(Â "foo", "bar" ), $ignoreIfExist = true, $defer = false);</codeblock>
        </section>

        <section>
            <title>View Management</title>
            <p conref="../shared/flush-info-pars.dita#toplevel/view-management"/>
            <p> In the PHP SDK, design documents and view definitions are represented by associative arrays.
                All operations on design documents are performed on a <codeph>CouchbaseBucketManager</codeph> instance.</p>
            <p>To inspect design documents, you can either retrieve them by name (<codeph>$bucketManager->getDesignDocument("landmarks");</codeph>) or iterate through an
                array of documents (<codeph>$bucketManager->getDesignDocuments();</codeph>).</p>
            <p>To create or update design documents, use the <apiname>insertDesignDocument($name, $data)</apiname> and
                <apiname>upsertDesignDocument($name, $data)</apiname> methods.</p>
            <p>The following example inserts a design document with two regular views and one spatial
                view into a bucket named <codeph>travel-sample</codeph>:</p>

            <codeblock>//(note: obtaining the bucketManager is omitted in this snippet)
// Initialize design document
$designDoc = array(
    'views' => array(
        'by_country' => array(
            'map' => "function (doc, meta) { if (doc.type == 'landmark') { emit([doc.country, doc.city], null); } }"
        ),
        'by_activity' => array(
            'map' => "function (doc, meta) { if (doc.type == 'landmark') { emit(doc.activity, null); } }",
            'reduce' => "_count"
        )
    ),
    'spatialViews' => array(
        'by_coordinates' => array(
            'map' => "function (doc, meta) { if (doc.type == 'landmark') { emit([doc.geo.lon, doc.geo.lat], null); } }"
        )
    )
);

// Insert design document into the bucket, as "landmarks"
$bucketManager->insertDesignDocument('landmarks', $designDoc);</codeblock>

            <note conref="../shared/flush-info-pars.dita#toplevel/one-view-update-warning"/>
            <codeblock>//(note: obtaining the bucketManager is omitted in this snippet)
// Get design document to be updated
$designDoc = $bucketManager->getDesignDocument('landmarks');

// Update the "by_country" view, adding a reduce
$designDoc['views']['by_country'] += array('reduce' => "_count"); //added reduce function

// Resend to server
$bucketManager->upsertDesignDocument($designDoc);</codeblock>
            <p>To remove a design document from a bucket, pass its name to the <codeph>removeDesignDocument</codeph> method.</p>
        </section>
    </body>
</topic>
