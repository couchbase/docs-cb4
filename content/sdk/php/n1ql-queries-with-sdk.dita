<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_bhv_nhq_44">
    <title>N1QL queries using the PHP SDK with Couchbase Server</title>
    <titlealts><navtitle>N1QL from the SDKs</navtitle></titlealts>
    <shortdesc>Perform Couchbase Query Language (N1QL) queries via the PHP SDK.</shortdesc>
    <conbody>
        <note>See Couchbase Developer documentation for a quick intro to <xref
                href="../../architecture/querying-data-with-n1ql.dita#concept_igg_kq4_vs"
                >N1QL</xref>.</note>

        <p>To issue N1QL queries, you should create a <apiname>CouchbaseN1qlQuery</apiname> object, and pass
            it to the <apiname>query</apiname> method in the <apiname>CouchbaseBucket</apiname>
            class. A few variants of such a query exist:
            <ul>
                <li>Simple queries, which are only strings and do not use placeholders;</li>
                <li>Parameterized queries, which use numbered or named placeholders.</li>
            </ul>You can create each via the corresponding factory method on
                <codeph>CouchbaseN1qlQuery</codeph> passing into it the statement as a string.</p>

                <p>The return value from <apiname>query()</apiname> is either
                <apiname>stdClass</apiname> instance (which is default) or a nested array depending
            on the third argument <apiname>$json_asarray</apiname>. Iterating over the
                <apiname>rows</apiname> property the object will yield the rows returned by the
            server for the given query. Each row represents a row received for the query. Each row
            exposes the representation of the JSON value.</p>
        <section>
            <title>Placeholders</title>
        <p>You can use N1QL placeholders in the query. Placeholders allow you to specify variable
            constraints for an otherwise constant query. To use placeholders, manually construct a
            <codeph>CouchbaseN1QLQuery</codeph> object with the base query string, and pass an
            array of positional arguments for named or positional placeholders to <apiname>query</apiname> method, or set them
            inside the <codeph>options</codeph> property within the query object:
      <codeblock outputclass="language-php" spectitle="N1QL Query with positional and named parameters">// Positional parameters example
$query = CouchbaseN1qlQuery::fromString('select * from `travel-sample` limit $0');
$query->options['$0] = 9;
$result = $bucket->query($query, array(10)); // overrides 9
foreach ($result as $row)
{
    // ...
}

// Named parameters example
$query = CouchbaseN1qlQuery::fromString('select * from `travel-sample` limit $limit');
$query->options['$limit'] = 9;
$result = $bucket->query($query, array('limit' => 10)); // overrides 9
foreach ($result as $row)
{
    // ...
}</codeblock></p>
<p>
    <note type="tip">Be careful with placeholders and PHP interpolation, they both use
                        <codeph>$</codeph> (dollar sign) for the substitution variable. If you want
                    to use double quotes for your query string, make sure you escape N1QL
                    placeholders properly.</note>
        </p>
        </section>
        <section><title>Query Options</title>
        <p>You can set other options in the query object as well:<ul id="ul_cn1_ln4_1w">
                <li><codeph>consistency</codeph> controls the <xref
                            href="../n1ql-query.dita#toplevel/consistency">version of the documents
                            to be scanned</xref>, and can either be
                            <apiname>CouchbaseN1qlQuery::NOT_BOUNDED</apiname> (which is the
                        default) or <apiname>CouchbaseN1qlQuery::REQUEST_PLUS</apiname> (which
                        ensures that only the most recent version of documents are used).</li>
                <li><codeph>adhoc</codeph> determines whether the query will be <xref
                            href="../n1ql-query.dita#toplevel/prepare-stmts">optimized</xref> and
                        cached at the SDK level. If this is set to <codeph>false</codeph> then an
                        optimized version of this query will be stored on the SDK and used for
                        subsequent queries.</li>
            </ul></p></section>
    </conbody>
</concept>
