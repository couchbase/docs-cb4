<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_bhv_nhq_44">
    <title>N1QL from the SDK</title>
    <shortdesc>Perform Couchbase Query Language (N1QL) queries via the PHP SDK.</shortdesc>
    <conbody>
        <p>You can issue a N1QL query by creating a <apiname>CouchbaseN1qlQuery</apiname> object
            using the <apiname>CouchbaseN1qlQuery::fromString</apiname> function. The function
            accepts the actual N1QL query string to be sent to the server. Once the query object has
            been created, you can pass it to the <apiname>CouchbaseBucket::query</apiname> method,
            which returns an array of result
            rows.<codeblock>$query = CouchbaseN1qlQuery::fromString('SELECT airportname FROM `travel-sample` LIMIT 10');
$rows = $bucket->query($query);
foreach ($rows as $row) {
    echo "Airport name is: " . $row->airportname . "\n";
}</codeblock>The
            content of the rows is dependent on the format of the query itself. In the example above
            we ask the server to return the <codeph>airportname</codeph> from each document, so we
            can expect an <codeph>$row->airportname</codeph> property to exist.</p>
        <p>You can use N1QL placeholders in the query. Placeholders allow you to specify variable
            constraints for an otherwise constant query. To use placeholders, construct a
                <apiname>CouchbaseN1qlQuery</apiname> object with the base query string, and then
            supply placeholder values inside the <codeph>options</codeph> property within the query
            object.<codeblock outputclass="language-python" spectitle="N1QL Query with placeholders">$query = CouchbaseN1qlQuery::fromString('SELECT fname, lname, age FROM default WHERE age > $age')
$query->options['$age'] = 22;
$bucket->query($query);
// ...</codeblock>
        <note type="tip">Be careful with placeholders and PHP interpolation, they both use <codeph>$</codeph> (dollar sign) for substitution variable. So if you want to use double quotes for query string, make sure you escaped N1QL placeholders properly.</note>
        </p>
        <p>You can set other options in the query object as well:<ul id="ul_cn1_ln4_1w">
                <li><codeph>consistency</codeph> controls the version of the documents to be scanned
                    [LINKME!!!], and can either be
                        <apiname>CouchbaseN1qlQuery::NOT_BOUNDED</apiname> (which is the default) or
                        <apiname>CouchbaeN1qlQuery::REQUEST_PLUS</apiname> (which ensures that only
                    the most recent version of documents are used).</li>
                <li><codeph>adhoc</codeph> determines whether the query will be optimized and cached
                    [LINKME!!!] at the SDK level. If this is set to <codeph>false</codeph> then an
                    optimized version of this query will be stored on the SDK and used for
                    subsequent queries.</li>
            </ul></p>
    </conbody>
</concept>
