<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="devguide_kvcore_generic">
  <title>Core Operations</title>
    <shortdesc>At the core of a database is its ability to store and retrieve data. This section
        discusses the various ways in which you can access data (Documents) in Couchbase: creating,
        updating, retrieving, querying, and deleting documents.</shortdesc>
    <prolog>
        <metadata>
            <othermeta name="langSelector" content="hidden"/>
        </metadata>
    </prolog>
  <body>
        <section>
            <title>Document</title>
            <p>A <term>document</term> refers to an entry in the database (other databases may refer
                to the same concept as a <i>row</i>). A document has an ID (<i>primary key</i> in
                other databases), which is unique to the document and by which it can be located.
                The document also has a value which contains the actual application data.</p>
            <p><b>Document IDs</b> are assigned by application. A valid document ID must:<ul
                    id="ul_rht_rnm_zs">
                    <li>Conform to UTF-8 encoding</li>
                    <li>Be no longer than 250 bytes<note type="note">There is a difference between
                            bytes and characters: most non-Latin characters occupy more than a
                            single byte.</note></li>
                </ul>You are free to choose any ID for your document, so long as they conform to the
                above restrictions. Unlike some other database, Couchbase does not automatically
                generate IDs for you, though you may use a separate <xref
                    href="#devguide_kvcore_generic/devguide_kvcore_counter_generic" format="dita"
                    >counter</xref> to increment a serial number.</p>
            <p>The <b>document value</b> contains the actual application data; for example, a
                    <i>product</i> document may contain information about the price and description.
                Documents are usually (<xref href="nonjson.dita#devguide_nonjson">but not
                    always</xref>) stored as JSON on the server. Because JSON is a structured
                format, it can be subsequently searched and
                queried.<codeblock outputclass="language-json">{
    "type": "product",
    "sku": "CBSRV45DP",
    "msrp": [5.49, "USD"],
    "ctime": "092011",
    "mfg": "couchbase",
    "tags": ["server", "database", "couchbase", "nosql", "fast", "json", "awesome"]
}</codeblock></p>
        </section>
        <section id="crud-overview"><title>Primitive Key-Value Operations</title><p>
                <codeblock outputclass="language-python">upsert(docid, document)
insert(docid, document)
replace(docid, document)
get(docid)
remove(docid)</codeblock>
            </p><p>In Couchbase documents are stored using one of the operations: <i>upsert</i>,
                    <i>insert</i>, and <i>replace</i>. These operations will all write a JSON
                document with a given document ID (key) to the database. The update methods differ
                in behavior in respect to the existing state of the document:</p><ul
                id="ul_wjj_zlm_zs">
                <li><i>insert</i> will only create the document if the given ID is not found within
                    the database.</li>
                <li><i>replace</i> will only replace the document if the given ID already exists
                    within the database.</li>
                <li><i>upsert</i> will always replace the document, ignoring whether the ID has
                    already existed or not.</li>
            </ul><p>Documents can be retrieved using the <i>get</i> operation, and finally removed
                using the <i>remove</i> operations.</p><p>Since Couchbase’s KV store may be thought
                of as a distributed hashmap or dictionary, the following code samples are
                explanatory of Couchbase’ update operations in
            pseudo-code:</p><codeblock outputclass="language-cpp">map&lt;string,object> KV_STORE;

void insert(string doc_id, object value) {
    if (!KV_STORE.contains(doc_id)) {
        KV_STORE.put(doc_id, value);
    } else {
        throw DocumentAlreadyExists();
    }
}

void replace(string doc_id, object value) {
    if (KV_STORE.contains(doc_id)) {
        KV_STORE.put(doc_id, value);
    } else {
        throw DocumentNotFound();
    }
}

void upsert(string doc_id, object value) {
    KV_STORE.put(doc_id, value);
}

object get(string doc_id) {
    if (KV_STORE.contains(doc_id)) {
        return KV_STORE.get(doc_id);
    } else {
        throw DocumentNotFound();
    }
}</codeblock>You
            can also use <xref href="n1ql-query.dita#toplevel">N1QL queries</xref> and <xref
                href="full-text-search-overview.dita#full-text-search">Full Text Search</xref> to
            access documents by means other than their IDs, however these query operations Couchbase
            eventually translate into primitive key-value operations, and exist as separate services
            outside the data store.</section>
        <section>
            <title>Storing and Updating Documents</title>
            <p>Documents can be stored and updated using either the SDK, Command line, or Web UI.
                When using a storage operation, the <i>full content</i> of the document is replaced
                with a new value.</p>
            <p>The following example shows a document being stored using the <xref
                    href="webui-cli-access.dita#concept_j3z_zhm_zs/cli-access"
                    ><codeph>cbc</codeph></xref> utility. The ID of the document is
                    <codeph>docid</codeph> and its value is JSON containing a single field
                    (<codeph>json</codeph>) with the value of <codeph>value</codeph>.</p>
            <screen># When storing JSON data using cbc, ensure it is properly quoted for your shell:
$ cbc create docid -V '{"json":"value"}' -M upsert -U couchbase://<i>cluster-node</i>/<i>bucket-name</i>
docid               Stored. CAS=0x8234c3c0f213</screen>
            <p>You can also specify additional options when storing a document in Couchbase<ul
                    id="ul_gfq_mhg_45">
                    <li><xref href="#devguide_kvcore_generic/expiry" format="dita">Expiry</xref> (or
                            <i>TTL</i>) value which will instruct the server to delete the document
                        after a given amount of time. This option is useful for transient data (such
                        as sessions). By default documents do not expire. See <xref
                            href="#devguide_kvcore_generic/expiry" format="dita">Expiry</xref> for
                        more information on expiration.</li>
                    <li><xref href="concurrent-mutations-cluster.dita#concept_iq4_bts_zs">CAS</xref>
                        value to protect against concurrent updates to the same document. See<xref
                            href="concurrent-mutations-cluster.dita#concept_iq4_bts_zs">CAS</xref>
                        for a description on how to use CAS values in your application.</li>
                    <li><xref href="durability.dita#concept_gyg_14s_zs">Durability
                            Requirements</xref></li>
                </ul></p>
            <note>If you wish to only modify certain parts of a document, you can use <xref
                    href="subdocument-operations.dita#subdoc-operations">sub-document</xref>
                operations which operate on specific subsets of
                documents:<codeblock outputclass="language-python">cb.mutate_in('docid', subdoc.array_addunique('tags', 'fast'))</codeblock>or
                    <xref href="../n1ql/n1ql-language-reference/update.dita#topic_11_8">N1QL
                    UPDATE</xref> to update documents based on specific query
                criteria:<codeblock outputclass="language-sql">update `default` SET sale_price = msrp * 0.75 WHERE msrp &lt; 19.95;</codeblock></note>
        </section>
        <section id="devguide_kvcore_get_generic"><title>Retrieving Documents</title><note
                type="fastpath">This section discusses retrieving documents using their IDs, or
                primary keys. Documents can also be accessed using secondary lookups via <xref
                    href="n1ql-query.dita#toplevel">N1QL queries</xref> and MapReduce. Primary key
                lookups are performed using the key-value API, which simplifies use and increases
                performance (as applications may interact with the KV store directly, rather than a
                secondary index or query processor).</note><p>In Couchbase, documents are stored
                with their IDs. Retrieving a document via its ID is the simplest and quickest
                operation in
                Couchbase.<screen>>>> result = cb.get('docid')
>>> print result.value
{'json': 'value'}</screen></p><codeblock outputclass="language-bash">$ cbc cat docid
docid                CAS=0x8234c3c0f213, Flags=0x0. Size=16
{"json":"value"}</codeblock><p>Once
                a document is retrieved, it is accessible in the native format by which it was
                stored; meaning that if you stored the document as a list, it is now available as a
                list again. The SDK will automatically deserialize the document from its stored
                format (usually JSON) to a native language type. It is possible to store and
                retrieve non-JSON documents as well, using a <xref
                    href="nonjson.dita#devguide_nonjson">transcoder</xref>.</p><p>You can also
                modify a document's expiration time while retrieving it; this is known as
                    <i>get-and-touch</i> and allows you to keep temporary data alive while
                retrieving it in one atomic and efficient operation.</p>Documents can also be
            retrieved with N1QL. While N1QL is generally used for secondary queries, it can also be
            used to retrieve documents by their primary keys (ID) (though it is recommended to use
            the key-value API if the ID is known). Lookups may be done either by comparing the
                <codeph>META(from-term).id</codeph> or by using the <codeph>USE KEYS</codeph> [...]
            keyword:
                <codeblock outputclass="language-sql">SELECT * FROM default USE KEYS ["docid"];</codeblock>or<codeblock outputclass="language-sql">SELECT * FROM default WHERE META(default).id = "docid";</codeblock><p>You
                can also retrieve <i>parts</i> of documents using <xref
                    href="subdocument-operations.dita#subdoc-operations">sub-document
                    operations</xref>, by specifying one or more sections of the document to be
                retrieved<codeblock outputclass="language-python">name, email = cb.retrieve_in('user:kingarthur', 'contact.name', 'contact.email')</codeblock></p></section>
        <section id="devguide_kvcore_counter_generic"><title>Counters</title><p>You can atomically
                increment or decrement the numerical value of special counter document </p>
              <note type="note">Do not increment or decrement counters if using XDCR. Within a single cluster the <codeph>incr()</codeph> is atomic, as is <codeph>decr()</codeph>;
                 across XDCR however, if two clients connecting to two different (bidirectional) 
                clusters issue <codeph>incr</codeph> concurrently, this may (and most likely will) result in the 
                value only getting incremented once in total. The same is the case for <codeph>decr()</codeph>.</note>
            A document may be used as a counter if its value is a simple ASCII number, like
                <codeph>42</codeph>. Couchbase allows you to increment and decrement these values
            atomically using a special <apiname>counter</apiname> operation. The example below (in
            Python) shows how to use
            counters:<codeblock outputclass="language-python">>>> cb.counter('counter_id', delta=20, initial=100).value
100L
>>> cb.counter('counter_id', delta=1).value
101L
>>> cb.counter('counter_id', delta=-50).value
51L</codeblock>In
            the above example, a counter is created by using the <apiname>counter</apiname> Python
            method with an <parmname>initial</parmname> value. The initial value is the value the
            counter uses if the counter ID does not yet exist.<p>Once created, the counter can be
                incremented or decremented atomically by a given <i>amount</i> or <i>delta</i>.
                Specifying a positive delta increments the value and specifying a negative one
                decrements it. When a counter operation is complete, the application receives the
                current value of the counter, after the increment.</p><p>Couchbase counters are
                64-bit unsigned integers in Couchbase and do not wrap around if decremented beyond
                0. However, counters will wrap around if incremented past their maximum value (which
                is the maximum value contained within a 64-bit integer). Many SDKs will limit the
                    <i>delta</i> argument to the value of a <i>signed</i> 64-bit
                    integer.</p><p><xref href="#devguide_kvcore_generic/expiry" format="dita"
                    >Expiration</xref> times can also be specified when using counter
                operations.</p><p><xref href="concurrent-mutations-cluster.dita#concept_iq4_bts_zs"
                    >CAS</xref> values are not used with counter operations since counter operations
                are atomic. The intent of the counter operation is to simply increment the current
                server-side value of the document. If you wish to only increment the document if it
                is at a certain value, then you may use a normal <apiname>upsert</apiname> function
                with
                CAS:<codeblock outputclass="language-python">rv = cb.get('counter_id')
value, cas = rv.value, rv.cas
if should_increment_value(value):
  cb.upsert('counter_id', value + increment_amount, cas=cas)</codeblock></p><p>You
                can also use <xref
                    href="subdocument-operations.dita#subdoc-operations/ul_fp2_2yw_mv"
                    >sub-document counter operations</xref> to increment numeric values
                    <i>within</i> a document containing other content.</p></section>

        <section id="devguide_datastructures"><title>Datastructures - List, Map, Set, Queue</title>
        <p>You can use collection data structures such as lists, maps, sets and queues in Couchbase.
        These data structures may be manipulated with basic operations without retrieving and
        storing the entire document.</p>
        
        <p>See the data structures <xref href="python/datastructures.dita">documentation for each SDK language</xref> for details on implementation. 
        Some Python examples are provided below for easy reference, but more advanced Collections frameworks
        are accessible in <xref href="java/datastructures.dita">Java</xref> and <xref href="dotnet/datastructures.dita">.NET</xref> as well.</p>

        <p>Data structures in Couchbase are similar in concept to data structures in, for example, Python:<ul
                id="ul_txf_32t_5x">
                <li><b>Map</b> is like Python <codeph>dict</codeph>, and is a key-value structure,
                    where a value is accessed by using a key string.</li>
                <li><b>List</b> is like a Python <codeph>list</codeph> and is a sequential data
                    structure. Values can be placed in the beginning or end of a list, and can be
                    accessed using numeric indexes.</li>
                <li><b>Queue</b> is a wrapper over a <i>list</i> which offers FIFO
                    (first-in-first-out) semantics, allowing it to be used as a lightweight job
                    queue.</li>
                <li><b>Set</b> is a wrapper over a <i>list</i> which provides the ability to handle
                    unique values.</li>
            </ul></p>

        <p>These data structures are stored as JSON documents in Couchbase, and can therefore be
            accessed using N1QL, Full Text Search, and normal key-value operations. Data structures
            can also be manipulated using the traditional sub-document and full-document key-value
            APIs.</p>

        <p>To add an item to a map, specify
            the <i>document ID</i> of the map itself (i.e. the ID which uniquely identifies the map
            in the server), the key <i>within</i> the map, and the value to store under the
            key:<codeblock outputclass="language-python">bucket.map_add('map_id', 'name', 'Mark Nunberg', create=True)</codeblock></p>

        <p>Data structures can be accessed using their
            appropriate methods. Most data access methods will return an
                <apiname>ValueResult</apiname>-like object with the actual returned value under the
                <varname>value</varname>
            property.<codeblock outputclass="language-python">bucket.list_get(0).value  # 'hello'
bucket.map_get('map_id', 'name').value  # 'mark nunberg'</codeblock></p>


        </section>


        <section id="devguide_kvcore_append_prepend_generic"><title>Raw Byte
                Concatenation</title><note id="messagepanel_xx2_btg_vt" type="warning">The following
                    methods should not be used with JSON documents. <p>The append and prepend operations
                        operate at the byte level and are unsuitable for dealing with JSON documents. Use
                        these methods only when explicitly dealing with binary or UTF-8 documents. Using the
                        append and prepend methods may invalidate an existing JSON document. You can use
                        <xref href="subdocument-operations.dita#subdoc-operations">sub-document
                            operations</xref> if you want to have true JSON-aware prepend and append
          operations which add values to JSON arrays.</p></note>
          
          <codeblock outputclass="language-python">append(docid, fragment)
prepend(docid, fragment)</codeblock><p>The
                    <i>append</i> and <i>prepend</i> operations atomically add bytes to the end or
                beginning of a binary document. They are an efficient alternative to retrieving a
                binary document in its entirety, appending the contents locally, and then saving the
                contents back to the server.</p><p>Because these methods do raw string manipulation,
                they are only suitable for non-JSON documents: Prepending or appending anything to a
                JSON document will invalidate the JSON and make it unparseable by standard JSON
                parsers.</p><p>The semantics of the <i>append</i> and <i>prepend</i> operations are
                similar to those of the <i>upsert</i> family of operations, except that they accept
                the fragment to append as their value, rather than the entire document. These
                functions may be used to add efficiency for custom binary data structures (such as
                logs), as they avoid transferring the contents of the entire document for each
                operation. Consider the following versions (which are
                equivalent)</p><p><codeblock outputclass="language-python" spectitle="Append using get() and replace() (slow)"># Store the document
cb.upsert('binary_doc', '\x01', format=couchbase.FMT_BYTES)

while True:
    # Retrieve the entire document
    rv = cb.get('binary_doc')
    value = rv.value + '\x02'
    try:
        # Upload the entire document
        cb.replace('binary_doc', value, format=couchbase.FMT_BYTES)
        break
    except couchbase.exceptions.KeyExistsError:
        continue

print repr(cb.get('binary_doc').value)</codeblock><codeblock spectitle="Append using append() (fast)" outputclass="language-python"># Store the document
cb.upsert('binary_doc', '\x01', format=couchbase.FMT_BYTES)

# Append a fragment
cb.append('binary_doc', '\x02', format=couchbase.FMT_BYTES)

print repr(cb.get('binary_doc').value)</codeblock>Note
                that since the <i>append</i> operation is done atomically, there is no need for a
                CAS check (though one can still be supplied if the document must be at a specific
                state).</p>Users of the <i>append</i> and <i>prepend</i> operations should ensure
            that the resulting documents do not become too large. Couchbase has a hard document size
            limit of 20MB.<p>Using <i>append</i> and <i>prepend</i> on larger documents may cause
                performance degradation and memory fragmentation at the server level, as for each
                append operation the server must allocate memory for the new document size and then
                append the fragment to the new memory. The performance impact may be significant
                when document sizes reach beyond 100KB.</p><p>Finally, note that while append saves
                network traffic from the client to server (by only specifying the fragment to
                append), the entire document is replicated for each mutation. Five append operations
                on a single 10MB document will result in 50MB of traffic to each
            replica.</p></section>
        <section id="expiry">
            <title>Expiration Overview</title>
            <p>Most data in a database is there to be persisted and long-lived. However, the need
                for transient or temporary data does arise in applications, such as in the case of
                user sessions, caches, or temporary documents representing a given process
                ownership. You can use expiration values on documents to handle transient data.</p>
            <p>In databases without a built-in expiration feature, dealing with transient data may
                be cumbersome. To provide "expiration" semantics, applications are forced to record
                a time stamp in a record, and then upon each access of the record check the time
                stamp and, if invalid, delete it.</p>
            <p>Since some logically ‘expired’ documents might never be accessed by the application,
                to ensure that temporary records do not persist and occupy storage, a scheduled
                process is typically also employed to scan the database for expired entries
                routinely, and to purge those entries that are no longer valid.</p>
            <p>Workarounds such as those described above are not required for Couchbase, as it
                allows applications to declare the lifetime of a given document, eliminating the
                need to embed "validity" information in documents and eliminating the need for a
                routine "purge" of logically expired data.</p>
            <p>When an application attempts to access a document which has already expired, the
                server will indicate to the client that the item is not found. The server internally
                handles the process of determining the validity of the document and removing older,
                expired documents.</p>
        </section>
        <section>
            <title>Setting Document Expiration</title>
            <p>By default, Couchbase documents do not expire. However, the expiration value may be
                set for the <i>upsert</i>, <i>replace</i>, and <i>insert</i> operations when
                modifying data.</p>
            <p>Couchbase offers two additional operations for setting the document's expiration
                without modifying its contents:</p>
            <ul id="ul_m4y_lrd_3v">
                <li>
                    <p>The <i>get-and-touch</i> operation allows an application to retrieve a
                        document while modifying its expiration time. This method is useful when
                        reading session data from the database: since accessing the data is
                        indicative of it still being "alive", <i>get-and-touch</i> provides a
                        natural way to extend its lifetime.</p>
                </li>
                <li>
                    <p>The <i>touch</i> operation allows an application to modify a document’s
                        expiration time without otherwise accessing the document. This method is
                        useful when an application is handling a user session but does not need to
                        access the database (for example, if a particular  document is already
                        cached locally).</p>
                </li>
            </ul>
            <p>For Couchbase SDKs which accept simple integer expiry values (as opposed to a proper
                date or time object) allow expiration to be specified in two flavors.<ol
                    id="ol_uk5_2qs_zs">
                    <li>As an offset from the current time.</li>
                    <li>As an absolute Unix time stamp </li>
                </ol>If the absolute value of the expiry is less than 30 days (such as <codeph>60 *
                    60 * 24 * 30</codeph>), it is considered an <i>offset</i>. If the value is
                greater, it is considered an <i>absolute time stamp</i>. </p>
            <p>It might be preferable for applications to normalize the expiration value, such as by
                always converting it to an absolute time stamp. The conversion is performed to avoid
                issues when the intended offset is larger than 30 days, in which case it is taken to
                mean a Unix time stamp and, as a result,  the document will expire automatically as
                soon as it is stored.</p>
            <note type="remember">
                <ul>
                    <li>If you wish to use the expiry feature, then you should supply the
                        expiry value for every mutation operation.</li>
                    <li>When dealing with expiration, it is important to note that most
                        operations will implicitly remove any existing expiration. Thus, when
                        modifying a document with expiration, it is important to pass the desired
                        expiration time.</li>
                    <li>A document is expired as soon as the current time on the Couchbase Server node responsible
                    for the document exceeds the expiration value. Bear this in mind in situations where the time on your application servers
                    differs from the time on your Couchbase Server nodes.</li>
                </ul>
            </note>
            <p>Note that expired documents are not deleted from the server as soon as they expire.
                While a request to the server for an expired document will receive a response
                indicating the document does not exist, expired documents are actually deleted (i.e.
                cease to occupy storage and RAM) when an <i>expiry pager</i> is run. The <i>expiry
                    pager</i> is a routine internal process which scans the database for items which
                have expired and promptly removes them from storage.</p>
            <p>When gathering resource usage statistics, note that expired-but-not-purged items
                (such as the expiry pager has not scanned this item yet) will still be considered
                with respect to the overall storage size and item count.</p>
        </section>
    </body>
</topic>
