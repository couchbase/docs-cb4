<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="sdk_authentication">
    
    <title>
        Authentication
    </title>
    
    <shortdesc>
        RBAC requires that
        users pass appropriate <i>credentials</i> to Couchbase Server in order to access
        cluster-resources. The SDK provides enhanced support for the passing of credentials.
    </shortdesc>
    
    <body>
        
        <section conref="../shared/reusable/sdk-authentication-overview.dita#sdk_authentication/RBAC_and_the_SDK">
        </section>
        
        <section conref="../shared/reusable/sdk-authentication-overview.dita#sdk_authentication/authenticating_with_legacy_sdk_versions">   
        </section>
        
        <section>
            
            <title>
                Legacy Connection Code
            </title>
            
            <p>
                These code snippets will enable you to use older, non-RBAC SDK clients with Couchbase Server 5.0 (and beyond).
              <dl>
                <dlentry>
                  <dt>Upgraded Couchbase Server 5.0 with passwordless buckets set up in an older version of Couchabse Server:</dt>
                  <dd>If a cluster with passwordless buckets is upgraded to Couchbase Server 5.0, the corresponding RBAC user entries are generated with username equal to the bucket name and with role set to "Full Bucket Access".
                      This process enables older SDK versions to access the buckets without creating the "Authentication Object".
                      The following snippet for a Java SDK with version &lt; 2.4.4 will successfully return the bucket object as there is a user which has the username "beer-sample" (the same as the bucket name).
<codeblock>Cluster cluster = CouchbaseCluster.create(&lt;hostname>);
Bucket bucket = cluster.openBucket("beer-sample");</codeblock>
                  </dd>
                </dlentry>

                <dlentry>
                  <dt>Connecting to buckets created in Couchbase Server 5.0 from pre-RBAC SDK Verison:</dt>
                  <dd>To connect to buckets created in Couchbase Server 5.0 itself, using older client versions, you need to manually create a user with username equal the bucket name, and with role set to "Bucket Full Access".
                      The client can then connect to the bucket using the following sample snippet:
<codeblock>Cluster cluster = CouchbaseCluster.create(&lt;hostname>);
Bucket bucket = cluster.openBucket(&lt;bucket-name>, &lt;password for the newly created user>);</codeblock>
                  </dd>
                </dlentry>
              </dl>   
            </p>
        </section>
                    
        <section>
            
            <title>
                Passing Credentials
            </title>
            
            <p>
                The most recent versions of the SDK are RBAC-enabled, and provide 
                enhanced support for authentication. Code examples for Java can be found in 
                <xref href="./start-using-sdk.dita" scope="local" format="dita">Getting Started with the SDK</xref>,
                and also as part of the
                <xref href="./sdk-user-management-example.dita" scope="local" format="dita">Sample Code</xref>
                provided to demonstrate user management.
            </p>
            
        </section>
        
        <section id="java_upgrading_to_rbac_sdk_versions">
            <title>
                Upgrading to RBAC-Enabled SDK-Versions
            </title>
            
            <p>
                The last pre-RBAC version of the Java SDK was 2.4.3. The first 
                RBAC-enabled version was
                2.4.4. See the SDK 
                <xref href="/server/other-products/release-notes-archives/java-sdk" format="html" scope="peer">Release Notes</xref>
                for more information.
            </p>
            
            <p>
                With the most recent versions of the SDK, the legacy authentication interface
                and
                the new, optimized authentication
                interface can both be used: each supports access to buckets on Couchbase Servers
                whose version is either 5.0 and beyond, or pre-5.0.
            </p>
        </section>
        
        <section>
            <title>
                Further Information on RBAC 
            </title>
            
            <p>
                All aspects of the Couchbase RBAC system are covered in the section
                <xref href="../../security/security-authorization.dita" scope="local" format="dita">Authorization</xref>.
                Specifically, for information on:
            </p>
            
            <ul>
                <li>
                    Adding <i>Users</i> and assigning <i>roles</i>, by means of
                    the Couchbase Web Console, see 
                    <xref href="../../security/security-rbac-for-admins-and-apps.dita" scope="local" format="dita">Creating
                        and Managing Users with the UI</xref>.
                    
                    <p>
                        
                    </p>
                </li>
                
                <li>
                    <i>Roles</i> required for resource-access, and the privileges they
                    entail, see
                    <xref href="../../security/security-roles.dita" scope="local" format="dita">Roles</xref>.
                    
                    <p>
                        
                    </p>
                </li>
                
                <li>
                    <i>Resources</i> controlled by Couchbase RBAC, see
                    <xref href="../../security/security-resources-under-access-control.dita" scope="local" format="dita">Resources
                        Under Access Control</xref>.
                </li>
            </ul>
        </section>
        
        <section>
            <title>
                Certificate-Based Authentication
            </title>
            
            <p>
                Couchbase Server supports the use of X.509 certificates to authenticate clients (only available in 
                the Enterprise Edition, not the Community Edition). This allows
                authenticated users to access specific resources by means of the data service (no other service
                is currently available to clients through this form of authentication). 
            </p>
            
            <p>    
                The process relies on a certificate
                authority, for the issuing of certificates that validate identities. A certificate includes
                information such as the name of the entity it identifies, an expiration date, the name of the authority
                that issued the certificate, and the digital signature of the authority.
                A client attempting to access Couchbase Server can present a certificate to the server, allowing
                the server to check the validity of the certificate. If the certificate is valid, the user
                under whose identity the client is running,
                and the roles assigned that user, are verified. If the assigned roles are appropriate for
                the level of access requested to the specified resource, access is granted.
            </p>
            
            <p>
                Note that this means that the explicit authentication process otherwise required by Couchbase <i>Role-Based
                    Access Control</i> &#8212; whereby, in Java, username and password are passed by means of the 
                <codeph>authenticate</codeph> method on the <codeph>Cluster</codeph> object &#8212; must not be used (instead the <i>CertAuthenticator</i> is passed in).
                (See
                <xref href="./start-using-sdk.dita" scope="local" format="dita">Start Using the SDK</xref> for
                an example of such standard authentication.)
            </p>
            
            <p>
                For a more detailed conceptual description of using certificates, see
                <xref href="../../security/security-certs-auth.dita" scope="local" format="dita">Certificate-Based
                    Authentication</xref>.
            </p>
            
            <p>
                For sample procedures whereby certificates can be generated and deployed, see
                <xref href="../../security/security-x509certsintro.dita" scope="local" format="dita">X.509 for TLS</xref>.
                Note that this page includes the steps whereby a Java keystore is created, to enable
                certificate-based authentication by a Java client.
            </p>
            
        </section>
        
        <section id="authenticating-a-java-client-by-certificate">
            <title>
                Authenticating a Java Client by Certificate
            </title>
            
            <p>
                To authenticate with Couchbase Server by means of a client certificate, a Java application
                must have access to an appropriate <i>keystore</i> or <i>truststore</i>. A
                procedure for the creation of such a keystore is provided in
                <xref href="../../security/security-x509certsintro.dita" scope="local" format="dita">X.509 for TLS</xref>.
                The following Java code assumes that this procedure has been followed. The procedure's resulting
                keystore assigns the <codeph>travel-sample</codeph> user-identity to the client.
                The Couchbase Server-node that is accessed is expected to feature
                a user-definition where the username is indeed <codeph>travel-sample</codeph>, and where the <b>Bucket Full
                    Access</b> role has been granted to that user for the <i>travel-sample</i> bucket. 
            </p>
            
            <codeblock outputclass="language-java">package certificatetest.java;
                
import com.couchbase.client.java.Bucket;
import com.couchbase.client.java.Cluster;
import com.couchbase.client.java.CouchbaseCluster;
import com.couchbase.client.java.auth.CertAuthenticator;
import com.couchbase.client.java.document.JsonDocument;
import com.couchbase.client.java.env.CouchbaseEnvironment;
import com.couchbase.client.java.env.DefaultCouchbaseEnvironment;

public class CertificateTest {

    public static void main(String... args) {

        CouchbaseEnvironment env = DefaultCouchbaseEnvironment
            .builder()
            .sslEnabled(true)
            .sslKeystoreFile("/user/ubuntu/my.keystore")
            .sslKeystorePassword("storepass")
            .certAuthEnabled(true)
            .build();

        Cluster userCluster = CouchbaseCluster.create(env, "10.143.173.101");
        userCluster.authenticate(CertAuthenticator.INSTANCE);
        Bucket travelSample = userCluster.openBucket("travel-sample");

        JsonDocument returnedAirline10doc = travelSample.get("airline_10");
        System.out.println("Found: " + returnedAirline10doc);
    }

}</codeblock>
        </section>
        
        <p>
            As this example shows, certificate-based authentication is enabled by means of
            the <codeph>CouchbaseEnvironment</codeph> class as well as passing in the <codeph>CertAuthenticator</codeph>. (See
            <xref href="./client-settings.dita" scope="local" format="dita">Client Settings</xref>
            for details). The certificate-related options are as follows:
        </p>
        
        <ul>
            <li>
                <codeph>.sslEnabled</codeph>: Enables use of Secure Sockets: the default value
                is true.
            </li>
            
            <li>
                <codeph>.sslKeystoreFile</codeph>: Specifies the local pathname of the keystore to be 
                used by the Java client in authentication: the default value is null. (Alternatively,
                the keystore can be specified as a Java object, in which case the default
                value is none.)
            </li>
            
            <li>
                <codeph>.sslKeystorePassword</codeph>: Specifies the password of the keystore. The
                default value is null.
            </li>
            
            <li>
                <codeph>.certAuthEnabled</codeph>: Enables the server's authentication of the client by 
                means of the certificates within the client's keystore. Can only be used
                in combination with <codeph>.sslEnabled</codeph> and related methods. The default is false.
            </li>
            
        </ul>
        
        <p>
            The username <codeph>travel-sample</codeph> is specified within the keystore: therefore,
            neither the username or associated password need be explicitly
            passed in the Java code (only the bucket-name, <codeph>travel-sample</codeph> is specified,
            in order to open the bucket).
        </p>
        
        <p>
            A formatted version of the program-output is as follows:
        </p>
        
        <codeblock outputclass="language-json">Found: JsonDocument
{
    id='airline_10', 
    cas=1506602602177888256, 
    expiry=0, 
    content={
        "country":"United States",
        "iata":"Q5",
        "callsign":"MILE-AIR",
        "name":"40-Mile Air","icao":"MLA",
        "id":10,
        "type":"airline"}, 
    mutationToken=null
}</codeblock>
        
    </body>
        
</topic>
