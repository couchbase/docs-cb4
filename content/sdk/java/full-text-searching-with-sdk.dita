<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="java-fts">
    <title>Full Text Search (FTS) Using the Java SDK with Couchbase Server</title>
    <titlealts><navtitle>Searching from the SDK</navtitle></titlealts>
    <shortdesc>You can use the Full Text Search service (FTS) to create queryable full-text indexes in Couchbase Server.</shortdesc>
    <body>
        <p>Couchbase offers Full-text search support, allowing you to search for documents that
            contain certain words or phrases. In the Java SDK you can search full-text indexes by
            using the <apiname>Bucket.query(SearchQuery)</apiname> API.</p>
        <note conref="../shared/experimental-pars.dita#experimental/fts"/>
        <p>Querying a FTS index through the Java client is performed through the <apiname>Bucket.query(SearchQuery q)</apiname>
            method, providing a <apiname>SearchQuery</apiname>. Building a <apiname>SearchQuery</apiname> takes two
            parameters, the index name to query and the actual search query itself (kind of a statement). Additional
            search options may be specified by using the <apiname>SearchQuer</apiname> as a builder, chaining setters
            for each relevant option.</p>
        <p>This method returns a <apiname>SearchQueryResult</apiname> whose iterator yields the results of the query (in the
            form of <apiname>SearchQueryRow</apiname> objects). It also exposes a <codeph>status()</codeph> for the request,
            some execution <codeph>metrics()</codeph> and <codeph>facets()</codeph> results if some facets have been requested.
            Instead of iterating directly on the result, you can access rows as a list through the <codeph>hits()</codeph> method,
            and in case of execution errors you can inspect the error messages in the <codeph>errors()</codeph> method. Note that
            partial results can happen in this case (and hits() will return them). Instead of getting partial results through
            <codeph>hits()</codeph>, one can combine results and errors and get an exception through the use of <codeph>hitsOrFail()</codeph>.
        </p>
        <p>The <apiname>SearchQueryRow</apiname> object contains the <codeph>index</codeph>, <codeph>id</codeph> and
            <codeph>score</codeph> properties, respectively identifying the exact FTS index that returned the hit, the id of the
            document that matched and a decimal score for the match. It also contains optional sections depending on the request
            and the availability of all relevant settings in the FTS mapping. Those are <codeph>explanation()</codeph> (an
            explanation of the plan followed by the FTS index to execute the query), <codeph>locations()</codeph> (a map-like
            listing of the location of all matching terms inside each relevant field that was queried), <codeph>fragments()</codeph>
            (a map-like listing of occurrences of the search terms in each field, with the context of the terms) and
            <codeph>fields()</codeph> (a map of the complete value of each requested field). Most of these need that the index be
            configured to store the data of a searched field.
<codeblock outputclass="language-java">Bucket bkt = CouchbaseCluster.create("192.168.33.101").openBucket("travel-sample");
MatchQuery fts = SearchQuery.match("term");
SearchQueryResult result = bkt.query(new SearchQuery("travel-search", fts));
for (SearchQueryRow row : result) {
    System.out.println(row);
}</codeblock>
        </p>

        <section><title>Query Types</title>There are many different flavours of search queries, and each can be constructed
            through static factory methods in the <apiname>SearchQuery</apiname> class. All of these types derive from the
            <apiname>AbstractFtsQuery</apiname> and can be found in the
            <codeph>com.couchbase.client.java.search.queries.AbstractFtsQuery</codeph> package. It contains query classes
            corresponding to those enumerated in <xref href="../full-text-search-overview.dita#full-text-search">the FTS
            generic documentation</xref>. <p>It is important to distinguish between <i>query options</i> and general <i>search
            options</i>. Some options affect the search process in general (such as the <parmname>limit</parmname>, indicating how
            many results to return) while others only affect a specific query (such as <parmname>fuzziness</parmname> for a given
            query). Because multiple queries can be combined in a single search operation, <i>query specific options</i> can be
            specified only in the query object itself, while <i>search options</i> are specified at the level of the
            <apiname>SearchQuery</apiname> class, using builder methods.
<codeblock outputclass="language-java">Bucket bkt = CouchbaseCluster.create("192.168.33.101").openBucket("travel-sample");
MatchQuery fts = SearchQuery.match("term")
    //query options:
    .fuzziness(2).field("content");
SearchQuery query = new SearchQuery("travel-search", fts)
    //search options:
    //will show value for activity and country fields
    .fields("activity", "country")
    //will have max 3 hits
    .limit(3);

SearchQueryResult result = bkt.query(query);
for (SearchQueryRow row : result) {
    System.out.println(row);
}</codeblock></p>

        <p>Here's some sample output for the previous query:</p>
        <screen>DefaultSearchQueryRow{index='travel-search_33760129d0737bff_b7ff6b68', id='landmark_11778', score=0.0313815325019958, explanation={}, \
locations=DefaultHitLocations{size=3, locations=[HitLocation{field='content', term='tea', pos=39, start=254, end=257},HitLocation{field='content', \
term='teas', pos=56, start=353, end=357},HitLocation{field='content', term='tart', pos=17, start=95, end=99}]}, fragments={}, fields={activity=eat, \
country=United States}}

DefaultSearchQueryRow{index='travel-search_33760129d0737bff_b7ff6b68', id='landmark_25547', score=0.02536160834515202, explanation={}, \
locations=DefaultHitLocations{size=3, locations=[HitLocation{field='content', term='tea', pos=33, start=191, end=194},HitLocation{field='content', \
term='try', pos=30, start=177, end=180},HitLocation{field='content', term='per', pos=57, start=337, end=340}]}, fragments={}, fields={activity=eat, \
country=United States}}

DefaultSearchQueryRow{index='travel-search_33760129d0737bff_8b80958a', id='landmark_26854', score=0.02079624734659704, explanation={}, \
locations=DefaultHitLocations{size=10, locations=[HitLocation{field='content', term='trim', pos=227, start=1255, end=1259},HitLocation{field='content', \
term='steam', pos=7, start=41, end=46},HitLocation{field='content', term='steam', pos=38, start=213, end=218},HitLocation{field='content', \
term='steam', pos=74, start=424, end=429},HitLocation{field='content', term='steam', pos=93, start=532, end=537},HitLocation{field='content', \
term='steam', pos=114, start=651, end=656},HitLocation{field='content', term='steam', pos=126, start=715, end=720},HitLocation{field='content', \
term='steam', pos=145, start=819, end=824},HitLocation{field='content', term='steam', pos=300, start=1611, end=1616},HitLocation{field='content', \
term='team', pos=59, start=335, end=339}]}, fragments={}, fields={activity=see, country=United States}}</screen>
        </section>

        <section>
            <title>Query Facets</title>
            <p>Query <xref href="../full-text-search-overview.dita#facets">facets</xref> may also be
            added to the <i>general search parameters</i> by using the <apiname>addFacet(String name, SearchFacet facet)</apiname>
            builder method on <apiname>SearchQuery</apiname>. You can create facet queries by instantiating facets through factory
            methods in the <apiname>SearchFacet</apiname> class.</p>
            <codeblock outputclass="language-java">SearchQuery query = new SearchQuery("travel-search", fts)
    //will have max 3 hits
    .limit(3)
    //will have a "category" facet on the top 3 countries in terms of hits
    .addFacets(SearchFacet.term("countries", "country", 3));
SearchQueryResult result = bkt.query(query);
System.out.println(result.facets());</codeblock>

            <p>Here is the facet part of the result from the query above:</p>
            <screen>{countries=TermFacetResult{name='countries', field='country', total=451, missing=0, other=0, terms=[{name='United States', \
                count=217}, {name='United Kingdom', count=188}, {name='France', count=46}]}}</screen>
        </section>

	</body>
</topic>
