<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="managing-clusters-java">
  <title>Managing Clusters</title>
  <body>
        <p conref="../shared/flush-info-pars.dita#toplevel/management-intro"/>
        <p>The Java SDK also comes with some convenience functionality for common Couchbase management requests.</p>
        <p>Management operations in the Java SDK may be performed through several interfaces
            depending on the object:<ul id="ul_scg_czl_2w">
                <li><apiname>ClusterManager</apiname> class (obtained via <apiname>Cluster#clusterManager(string,
                string)</apiname> with the administrative username and password).</li>
                <li><apiname>BucketManager</apiname> class (obtained
                        via <apiname>Bucket#bucketManager()</apiname>).</li>
            </ul></p>

            <section><title>Getting Information About the Cluster</title>
                <p>When you call <codeph>ClusterManager#info()</codeph> it returns a
                            <codeph>ClusterInfo</codeph> object that contains both raw and typed
                        information on the overall cluster state. In addition to the
                            <codeph>ClusterInfo#raw()</codeph> method that provides direct access to
                        everything returned by the server, the following methods are available:</p><ul>
                        <li>
                            <p>To find out the minimum version of all nodes in the cluster, you can use
                                the <codeph>ClusterInfo#getMinVersion()</codeph> method. For example, if
                                you have 3 nodes running version 3.1 and one running version 3.0.3, it
                                reports version 3.0.3.</p>
                        </li>
                        <li>
                            <p>If you want to check if a certain feature is enabled on the cluster, you
                                can use the <codeph>checkAvailable</codeph> method and pass in one of
                                    the<codeph>CouchbaseFeature</codeph> enumerations. It uses the
                                minimum cluster version as a basis and then asserts it against the
                                minimum version of the passed in feature. The SDK uses this internally
                                to determine if specific integration tests can be executed against the
                                connected cluster, and so can you.</p>
                        </li>
                        <li>
                            <p>The <codeph>getAllVersions</codeph> method returns the version number of
                                all nodes in the cluster.</p>
                        </li>
                    </ul>
            </section>

        <section><title>Creating and Removing Buckets</title>
        <p>The <apiname>ClusterManager</apiname> class
                may be used to create and delete buckets from the Couchbase cluster. It is
                instantiated through the <apiname>Cluster</apiname>'s <apiname>clusterManager</apiname> method, providing the administrative username and password.</p><p>
                <codeblock>Cluster cluster = CouchbaseCluster.create("127.0.0.1");
ClusterManager clusterManager = cluster.clusterManager("Administrator", "123456");</codeblock>

            </p><p>To create a bucket, use the <apiname>ClusterManager#insertBucket(BucketSettings)</apiname> method. The <apiname>BucketSettings</apiname> can be created via a builder, <apiname>DefaultBucketSettings.builder()</apiname>.
            This class is also used to expose information about an existing bucket (<apiname>ClusterManager#getBucket(string)</apiname>) or to update an existing bucket (<apiname>ClusterManager#updateBucket(BucketSettings)</apiname>).</p>

            <note conref="../shared/flush-info-pars.dita#toplevel/update-bucket-warning" />

            <p>Only <parmname>name</parmname> and <parmname>type</parmname> parameters are mandatory for the <apiname>BucketSettings</apiname>. Here is the list of parameters available:</p><ul id="ul_ngw_cbm_2w">
                <li><parmname>name</parmname>: The name of the bucket (mandatory to create one, cannot be updated).</li>
                <li><parmname>type</parmname>: The type of the bucket (mandatory to create one, cannot be changed). Defaults to <codeph>BucketType.COUCHBASE</codeph>, but can also be <codeph>BucketType.MEMCACHED</codeph> to create a cache bucket.</li>
                <li><parmname>quota</parmname>: How much memory should each node use for the bucket. This number is specified in megabytes.</li>
                <li><parmname>password</parmname>: If specified, makes this bucket password
                    protected, forcing future connects (using the <apiname>Bucket</apiname>) class
                    to specify the <parmname>password</parmname> parameter.</li>
                <li><parmname>enableFlush</parmname>: Enables the
                        <apiname>BucketManager#flush()</apiname> operation to be performed on this
                    bucket (see the <xref href="#managing-clusters-java/flushing"/> section below).</li>
                <li><parmname>replicas</parmname>: The number of replicas to use for the bucket.</li>
                <li><parmname>indexReplicas</parmname>: Wether or not to replicate indexes.</li>
                <li><parmname>port</parmname>: The optional proxy port.</li>
            </ul>
            <p>The following example updates an existing "hello" bucket (notice how all parameters are set):</p>
            <codeblock>BucketSettings bucketSettings = new DefaultBucketSettings.Builder()
    .type(BucketType.COUCHBASE)
    .name("hello")
    .password("")
    .quota(120) // megabytes
    .replicas(1)
    .indexReplicas(true)
    .enableFlush(true)
    .build();

manager.updateBucket(bucketSettings);</codeblock>
            <p>Once you no longer need to use the bucket, you may delete the bucket using the
                    <apiname>ClusterManager#removeBucket(string)</apiname>
                method:<codeblock>clusterManager.removeBucket("new_bucket");</codeblock></p></section>

        <section id="flushing">
            <title>Flushing Buckets</title>
            <p conref="../shared/flush-info-pars.dita#toplevel/flush-intro"/>
            <p>You may flush a bucket in the Java SDK by using the
                    <apiname>BucketManager#flush()</apiname> method:<codeblock>bucket.bucketManager().flush()</codeblock></p>
            <p>The <apiname>flush</apiname> operation may fail if the bucket does not have flush
                enabled:<screen>com.couchbase.client.java.error.FlushDisabledException: Flush is disabled for this bucket.
    at com.couchbase.client.java.bucket.BucketFlusher$6.call(BucketFlusher.java:145)
    at com.couchbase.client.java.bucket.BucketFlusher$6.call(BucketFlusher.java:140)
    ...</screen></p>
        </section>

        <section>
            <title>N1QL Index Management</title>
            <p conref="../shared/flush-info-pars.dita#toplevel/index-management"/>
            <p>You can manage indexes in the Java SDK using the <apiname>BucketManager</apiname>
                class, with its various N1QL related methods: <apiname>listN1qlIndexes()</apiname>, <apiname>createN1qlIndex(...)</apiname>, etc...</p>
            <p>The following example creates a N1QL secondary index named "fooBar" on the "test" bucket,
                indexing fields "foo" and "bar":</p>
            <codeblock>//shortcut for the purpose of this snippet only
BucketManager testManager = CouchbaseCluster.open("127.0.0.1").openBucket("test").bucketManager();

boolean ignoreIfExists = true; // if index exists, don't throw exception
boolean defer = false; // create the index immediately
testManager.createN1qlIndex("fooBar", ignoreIfExists, defer, "foo", "bar");
</codeblock>
        </section>

        <section>
            <title>View Management</title>
            <p conref="../shared/flush-info-pars.dita#toplevel/view-management"/>
            <p> In the Java SDK, design documents are represented by the <codeph>DesignDocument</codeph>
                class and <codeph>View</codeph> interface. All operations on design documents are performed on
                a <codeph>BucketManager</codeph> instance. Use the <codeph>DefaultView.create()</codeph> factory method to create a <apiname>View</apiname>.</p>
            <p>To inspect design documents, you can either retrieve them by name (<codeph>bucketManager.getDesignDocument("landmarks")</codeph>) or iterate through a
                list of documents (<codeph>bucketManager.getDesignDocuments();</codeph>).</p>
            <p>To create or update design documents, use the <apiname>insertDesignDocument(DesignDocument)</apiname> and
                <apiname>upsertDesignDocument(DesignDocument)</apiname> methods. You can also publish a design document that
                is in development mode (that is, running only on a small fraction of the documents) to production mode by
                using the <apiname>publishDesignDocument(string)</apiname> method.</p>
            <p>When you initialize the design document, you can also specify how often to trigger
                indexing on documents and replicas. The following table lists the available options:</p>

            <table>
                <title><codeph>DesignDocument.create()</codeph> method <codeph>options</codeph>
                    parameter</title>
                <tgroup cols="2">
                    <colspec colname="c1" colnum="1" />
                    <colspec colname="c2" colnum="2" />
                    <thead>
                        <row>
                            <entry>Option</entry>
                            <entry>Description</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <codeph>UPDATE_MIN_CHANGES</codeph>
                            </entry>
                            <entry>The minimum changes to perform on a design document before indexing is
                                triggered.</entry>
                        </row>
                        <row>
                            <entry>
                                <codeph>REPLICA_UPDATE_MIN_CHANGES</codeph>
                            </entry>
                            <entry>The minimum changes to perform on a design document before replica
                                indexing is triggered.</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <p>The following example inserts a design document with two regular views and one spatial
                view into a bucket named <codeph>travel-sample</codeph>:</p>

            <codeblock>//shortcut for the purpose of this snippet only
BucketManager bucketManager = CouchbaseCluster.open("127.0.0.1").openBucket("travel-sample").bucketManager();

// Initialize design document
DesignDocument designDoc = DesignDocument.create(
    "landmarks",
    Arrays.asList(
        DefaultView.create("by_country",
            "function (doc, meta) { if (doc.type == 'landmark') { emit([doc.country, doc.city], null); } }"),
        DefaultView.create("by_activity",
            "function (doc, meta) { if (doc.type == 'landmark') { emit(doc.activity, null); } }",
            "_count"),
        SpatialView.create("by_coordinates",
            "function (doc, meta) { if (doc.type == 'landmark') { emit([doc.geo.lon, doc.geo.lat], null); } }")
    )
);
// Insert design document into the bucket
bucketManager.insertDesignDocument(designDoc);</codeblock>

            <note conref="../shared/flush-info-pars.dita#toplevel/one-view-update-warning"/>
                <codeblock>//(note: obtaining the bucketManager is omitted in this snippet)
// Get design document to be updated
DesignDocument designDoc = bucketManager.getDesignDocument("landmarks");

// Update the "by_country" view, adding a reduce
designDoc.views().add(
    DefaultView.create("by_country", //reuse same name
        "function (doc, meta) { if (doc.type == 'landmark') { emit([doc.country, doc.city], null); } }", //same map function
        "_count" //added reduce function
        )
    );

// Resend to server
bucketManager.upsertDesignDocument(designDoc);</codeblock>
            <p>To remove a design document from a bucket, pass its name to the <codeph>removeDesignDocument</codeph> method.</p>
        </section>
    </body>
</topic>
