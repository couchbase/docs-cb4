<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_java_datastructures">
    <title>Data Structures</title>
    <shortdesc>You can use complex data structures such as dictionaries and lists in Couchbase.
        These data structures may be manipulated with basic operations without retrieving and
        storing the entire document.</shortdesc>
    <body>
        <p>Data structures in Couchbase are similar in concept to data structures in the Java
            Collections Framework:<ul id="ul_txf_32t_5x">
                <li><b>Map</b> is like Java <codeph>Map&lt;String, Object&gt;</codeph> and is a
                    key-value structure, where a value is accessed by using a key string.</li>
                <li><b>List</b> is like a Java <codeph>List&lt;Object&gt;</codeph> and is a
                    sequential data structure. Values can be placed in the beginning or end of a
                    list, and can be accessed using numeric indexes.</li>
                <li><b>Queue</b> is a wrapper over a <i>list</i> which offers FIFO
                    (first-in-first-out) semantics, allowing it to be used as a lightweight job
                    queue.</li>
                <li><b>Set</b> is a wrapper over a <i>list</i> which ensures each value in the
                    list is unique.</li>
            </ul></p>

        <p>
            In fact, the Java SDK provides implementations of the
            <apiname>Map</apiname>, <apiname>List</apiname>, <apiname>Set</apiname>, and <apiname>Queue</apiname>
            interfaces which are described in the <xref href="#topic_java_datastructures/jcf" format="dita"/> section.
        </p>
        <p>These data structures are stored as JSON documents in Couchbase, and can therefore be
            accessed using N1QL, Full Text Search, and normal key-value operations. Data structures
            can also be manipulated using the traditional sub-document and full-document KV
            APIs.</p>
        <p>Using the data structures API may help your application in two ways:<ul
                id="ul_kd3_tcb_vx">
                <li><b>Simplicity</b>: Data structures provide high level operations by which you
                    can deal with documents as if they were container data structures. Adding an
                    item to a dictionary is expressed as <codeph>mapAdd</codeph>, rather than
                    retrieving the entire document, modifying it locally, and then saving it back to
                    the server.</li>
                <li><b>Efficiency</b>: Data structure operations do not transfer the entire document
                    across the network. Only the relevant data is exchanged between client and
                    server, allowing for less network overhead and lower latency.</li>
            </ul></p>
        <section><title>Creating a Data Structure</title>
            <p>
                When adding an element to a data structure, you can use a <apiname>MutationOptionBuilder</apiname>
                to request the document be created if it does not already exist.
                For example, to add an item to a map that may or may not already exist,
                specify the <i>document ID</i> of the map itself
                (i.e. the ID which uniquely identifies the map document in the server),
                the key <i>within</i> the map, the value to associate with the key, and finally the mutation options:
                <codeblock outputclass="language-java">bucket.mapAdd("map_id", "name", "Mark Nunberg",
        MutationOptionBuilder.builder().createDocument(true));</codeblock>
                Likewise, to create a list, specify the document ID and the value to add,
                along with the mutation options:
                <codeblock outputclass="language-java">bucket.listAppend("list_id", "hello",
        MutationOptionBuilder.builder().createDocument(true));</codeblock>
                Note that if the document already exists it will not be overwritten;
                the specified element will be added to the existing data structure document.
            </p><p>
                Data structures are stored on the Couchbase server as ordinary JSON documents. It is therefore
                possible to create and reset them using full-document methods like <apiname>insert</apiname>
                or <apiname>upsert</apiname>. To create a new empty list, set, or queue, use:
                <codeblock outputclass="language-java">bucket.insert(JsonArrayDocument.create("list_id", JsonArray.empty()));</codeblock>
                To create an empty map, use:
                <codeblock outputclass="language-java">bucket.insert(JsonDocument.create("map_id", JsonObject.empty()));</codeblock>
            </p><p>
            <note type="warning">
                The methods described below which modify the contents of a data structure have overloaded versions
                that accept a <apiname>MutationOptionBuilder</apiname> argument. If this argument is
                not provided, or if the option builder is not configured with <codeph>createDocument(true)</codeph>,
                the default behavior is to throw <apiname>DocumentDoesNotExistException</apiname>
                instead of automatically creating the data structure.
            </note>
            </p>
        </section>
        <section><title>Accessing Data Structures</title>The <apiname>Bucket</apiname> interface provides
        several methods for interacting with each kind of data structure. Most data access methods will
        return a generic type
                <apiname>V</apiname> which is provided as a generic parameter such as
                <codeph>Class&lt;V&gt;</codeph>.
            <codeblock outputclass="language-java">bucket.listGet("list_id", 0, String.class); // "hello"
bucket.mapGet("map_id", "name", String.class);  // "mark nunberg"</codeblock>The
            same subdocument exceptions are forwarded on the datastructures API, as
            occurs when the map key or
            list index is not found within the document. If the document itself does not exist, a
                <apiname>com.couchbase.client.java.error.DocumentDoesNotExistException</apiname>
            will be raised instead.<p>Here is a list of common operations:<table frame="all"
                    rowsep="1" colsep="1" id="table_c5w_jg5_5x">
                    <title>Data Structure Operations</title>
                    <tgroup cols="2">
                        <colspec colname="c1" colnum="1" colwidth="1*"/>
                        <colspec colname="c2" colnum="2" colwidth="3.76*"/>
                        <thead>
                            <row>
                                <entry/>
                                <entry/>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry><apiname>mapAdd</apiname></entry>
                                <entry>Add a key to the
                                    map.<codeblock outputclass="language-java">bucket.mapAdd("map_id", "some_key", "value")</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>mapRemove</apiname></entry>
                                <entry>Remove a key from a
                                    map.<codeblock outputclass="language-java">bucket.mapRemove("map_id", "some_key")</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>mapGet</apiname></entry>
                                <entry>Get an item from a
                                    map.<codeblock outputclass="language-java">bucket.mapGet("map_id", "some_key", String.class) //=> value</codeblock>If
                                    the key is not found, a
                                        <apiname>PathNotFoundException</apiname> is raised.</entry>
                            </row>
                            <row>
                                <entry><apiname>listAppend</apiname></entry>
                                <entry>Add an item to the <i>end</i> of a
                                    list.<codeblock outputclass="language-java">bucket.listAppend("list_id", 1234)</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>listPrepend</apiname></entry>
                                <entry>Add an item to the <i>beginning</i> of a
                                    list.<codeblock outputclass="language-java">bucket.listPrepend("list_id", "hello world")</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>listRemove</apiname></entry>
                                <entry>Remove a value from a
                                    list.<codeblock outputclass="language-java">bucket.listRemove("list_id", 2)</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>listSet</apiname></entry>
                                <entry>Set an element at a specific index in the
                                    list.<codeblock outputclass="language-java">bucket.listSet("list_id", 0, "first value")</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>listGet</apiname></entry>
                                <entry>Get an item from a list by its
                                    index.<codeblock outputclass="language-java"> bucket.listGet("list_id", 0, String.class)</codeblock>If
                                    the index is out of range, a
                                        <apiname>PathNotFoundException</apiname> will be thrown.
                                    Note that you can get the <i>last</i> array element by
                                    specifying <codeph>-1</codeph> as the index.</entry>
                            </row>
                            <row>
                                <entry><apiname>setAdd</apiname></entry>
                                <entry>Add an item to a set, if the item does not yet exist in the
                                    set.<codeblock outputclass="language-java">bucket.setAdd("set_id", "some_value")</codeblock>Note
                                    that a <i>set</i> is just a list. You can retrieve the entire
                                    set by simply using a full-document <apiname>get</apiname>
                                        operation:<codeblock outputclass="language-java">set = bucket.get("set_id").content()</codeblock><note>Currently,
                                        you can only store primitive values in sets, such as
                                        strings, ints, and booleans.</note></entry>
                            </row>
                            <row>
                                <entry><apiname>setContains</apiname></entry>
                                <entry>Check if a value exists in the
                                    set.<codeblock outputclass="language-java">bucket.setContains("set_id", "value")</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>setRemove</apiname></entry>
                                <entry>Remove an item from a set, if it exists. An exception is not
                                    thrown if the item does not exist. You can determine if an item
                                    existed or not by the return value. If the item did not exist
                                    beforehand, <codeph>null</codeph> is
                                    returned.<codeblock outputclass="language-java">bucket.setRemove("set_id", "some_value")</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>queuePush</apiname></entry>
                                <entry>Add an item to the beginning of the
                                    queue.<codeblock outputclass="language-java">bucket.queuePush("a_queue", "job123")</codeblock>Note
                                    that a queue is just a list. You can retrieve items from the
                                    middle of the queue by using <apiname>listGet</apiname></entry>
                            </row>
                            <row>
                                <entry><apiname>queuePop</apiname></entry>
                                <entry>Remove an item from the end of the queue and return
                                    it.<codeblock outputclass="language-java">item = bucket.queuePop("a_queue") //=> "job123"</codeblock>If
                                    the queue is empty, then <apiname>null</apiname> is
                                    returned.</entry>
                            </row>
                            <row>
                                <entry><apiname>mapSize</apiname>, <apiname>listSize</apiname>,
                                        <apiname>setSize</apiname>,
                                    <apiname>queueSize</apiname></entry>
                                <entry>These methods get the length of the data structure. For maps,
                                    this is the number of key-value pairs inside the map. For lists,
                                    queues, and sets, this is the number of elements in the
                                    structure.<codeblock outputclass="language-java">len = bucket.listSize('a_list') //=> 42</codeblock></entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table></p><p>Note that there are only <b>two</b> basic types: map and list. Types
                such as <i>queue</i> and <i>set</i> are merely derivatives of
            <i>list</i>.</p></section>


            <section><title>Data Structures and Key-Value APIs</title>Data structures can be accessed
                using key-value APIs as well. In fact, the data structure API is actually a client-side
                wrapper <i>around</i> the key-value and sub-document API. Most of the data structure
                APIs wrap the sub-document API directly. <note>Because the data structure API is just a
                    wrapper around the various key-value APIs, you are free to switch between them in
                    your code.</note></section>

            <section id="jcf"><title>Collections Framework Integration</title>
            <p>
                In addition to the <apiname>Bucket</apiname> level methods for working with data structures,
                the Java SDK provides implementations of the
                <apiname>Map</apiname>, <apiname>List</apiname>, <apiname>Set</apiname>, and <apiname>Queue</apiname>
                interfaces from the Java Collections Framework.
                Instead of maintaining in-memory storage, these implementations are backed by JSON documents
                stored in Couchbase Server. The implementations are thread-safe and suitable for concurrent use.

                The <apiname>Map</apiname>, <apiname>List</apiname>, 
                and <apiname>Queue</apiname> implementations may contain values of the following types:
                <ul>
                    <li>String</li>
                    <li>Integer</li>
                    <li>Long</li>
                    <li>Double</li>
                    <li>Boolean</li>
                    <li>BigInteger</li>
                    <li>BigDecimal</li>
                    <li>JsonObject</li>
                    <li>JsonArray</li>
                </ul>
                The <apiname>Set</apiname> implementation may contain values of
                all of the above types except
                <apiname>JsonObject</apiname> and <apiname>JsonArray</apiname>.
            </p>
            </section>

            <section><title>CouchbaseMap</title>
            <p><![CDATA[
                The CouchbaseMap<V> class implements Map<String, V>.
                It allows null values, but does not allow null keys.
            ]]></p><p>
                Example usage:
                <codeblock outputclass="language-java"><![CDATA[Map<String, String> favorites = new CouchbaseMap<String>("mapDocId", bucket);
favorites.put("color", "Blue");
favorites.put("flavor", "Chocolate");

System.out.println(favorites); //=> {flavor=Chocolate, color=Blue}

// What does the JSON document look like?
System.out.println(bucket.get("mapDocId").content());
        //=> {"flavor":"Chocolate","color":"Blue"}
]]></codeblock>
            </p>
            </section>

            <section><title>CouchbaseArrayList</title>
            <p><![CDATA[
                The CouchbaseArrayList<V> class implements List<V>. It allows null values.
            ]]></p><p>
                Example usage:
                <codeblock outputclass="language-java"><![CDATA[List<String> names = new CouchbaseArrayList<String>("listDocId", bucket);
names.add("Alice");
names.add("Bob");
names.add("Alice");

System.out.println(names); //=> [Alice, Bob, Alice]

// What does the JSON document look like?
System.out.println(bucket.get(JsonArrayDocument.create("listDocId")).content());
        //=> ["Alice","Bob","Alice"]
]]></codeblock>
            </p>
            </section>

            <section><title>CouchbaseArraySet</title>
            <p><![CDATA[
                The CouchbaseArraySet<V> class implements Set<V>. It allows null values.
            ]]></p><p>
                Example usage:
                <codeblock outputclass="language-java"><![CDATA[Set<String> uniqueNames = new CouchbaseArraySet<String>("setDocId", bucket);
uniqueNames.add("Alice");
uniqueNames.add("Bob");
uniqueNames.add("Alice");

System.out.println(uniqueNames); //=> [Alice, Bob]

// What does the JSON document look like?
System.out.println(bucket.get(JsonArrayDocument.create("setDocId")).content());
        //=> ["Alice","Bob"]
]]></codeblock>
            </p>
            </section>

            <section><title>CouchbaseQueue</title>
            <p><![CDATA[
                The CouchbaseQueue<V> class implements Queue<V>. It does not allow null values.
            ]]></p><p>
                Example usage:
                <codeblock outputclass="language-java"><![CDATA[Queue<String> shoppingList = new CouchbaseQueue<String>("queueDocId", bucket);
shoppingList.add("loaf of bread");
shoppingList.add("container of milk");
shoppingList.add("stick of butter");

// What does the JSON document look like?
System.out.println(bucket.get(JsonArrayDocument.create("queueDocId")).content());
        //=> ["stick of butter","container of milk","loaf of bread"]

String item;
while ((item = shoppingList.poll()) != null) {
    System.out.println(item);
    // => loaf of bread
    // => container of milk
    // => stick of butter
}

// What does the JSON document look like after draining the queue?
System.out.println(bucket.get(JsonArrayDocument.create("queueDocId")).content());
        //=> []
]]></codeblock>
            </p>
            </section>
    </body>
</topic>
