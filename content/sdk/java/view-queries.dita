<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="java-views">
    <title>MapReduce from the SDK</title>
    <shortdesc>You can use MapReduce views to create queryable indexes in Couchbase Server.</shortdesc>
    <conbody>
        <p>The normal CRUD methods allow you to look up a document by its ID. A MapReduce
            (<i>view</i> query) allows you to look up one or more documents based on various
            criteria. MapReduce views are comprised of a <i>map</i> function that is executed once per
            document (this is done incrementally, so this is not run each time you query the view) and
            an optional <i>reduce</i> function that performs aggregation on the results of the
            <i>map</i> function. The <i>map</i> and <i>reduce</i> functions are stored on the server
            and written in JavaScript.</p>
        <p>MapReduce queries can be further customized during query time to allow only a subset (or
            range) of the data to be returned.</p>
        <p>The following example queries a <codeph>by_name</codeph> view in a beer design document.
            This view checks whether a document is a beer and has a name. If it does, it emits the
            beer's name into the index. This view allows beers to be queried for by name.</p>
        <codeblock outputclass="language-javascript">function (doc, meta) {
  if (doc.type &amp;&amp; doc.type == "beer" &amp;&amp; doc.name) {
     emit(doc.name, null);
  }
}</codeblock>
        <p>Query a view through the Java client through the <codeph>query(ViewQuery q)</codeph>
            method on the <apiname>Bucket</apiname> class. This method returns a
                <apiname>ViewResult</apiname> whose iterator yields the results of the query (in the
            form of <apiname>ViewRow</apiname> objects). The <apiname>ViewResult</apiname> also
            exposes the list of rows (<codeph>allRows()</codeph>), the <codeph>success()</codeph>
            status and potential <codeph>error()</codeph>. The <apiname>ViewRow</apiname> object
            contains the <codeph>key</codeph> and <codeph>value</codeph> properties (which are the
            first and second arguments to the view's <codeph>emit()</codeph> function, respectively)
            as well as the <codeph>id</codeph> property, which may be passed to the
                <apiname>get()</apiname> method to return the actual document. Alternatively,
            directly call the <apiname>document()</apiname> method on the view row. </p>
        <codeblock outputclass="language-java">Bucket bkt = CouchbaseCluster.create("192.168.33.101").openBucket("beer-sample");
ViewResult result = bkt.query(ViewQuery.from("beer", "by_name");
for (ViewRow row : result) {
    System.out.println(row); //prints the row
    System.out.println(row.document().content()); //retrieves the doc and prints content
}</codeblock>

        <p>You can also set various properties on the query:</p>
        <codeblock outputclass="language-java">Bucket bkt = CouchbaseCluster.create("192.168.33.101").openBucket("beer-sample");
ViewQuery q = ViewQuery.from("beer", "by_name")
    limit(5) // Limit to 5 results
    .startKey("A")
    .endKey("A\u0fff");

ViewResult result = bkt.query(q);
for (ViewRow row : result) {
    System.out.println(row);
}</codeblock>
        <p>Here's some sample output for the previous query:</p>
        <codeblock>DefaultViewRow{id=harvey_son_lewes-a_lecoq_imperial_extra_double_stout_1999, key=A. LeCoq Imperial Extra Double Stout 1999, value=null}
DefaultViewRow{id=harvey_son_lewes-a_lecoq_imperial_extra_double_stout_2000, key=A. LeCoq Imperial Extra Double Stout 2000, value=null}
DefaultViewRow{id=mickey_finn_s_brewery-abana_amber_ale, key=Abana Amber Ale, value=null}
DefaultViewRow{id=brasserie_lefebvre-abbaye_de_floreffe_double, key=Abbaye de Floreffe Double, value=null}
DefaultViewRow{id=brasserie_de_brunehaut-abbaye_de_saint_martin_blonde, key=Abbaye de Saint-Martin Blonde, value=null}</codeblock>

        <p><note type="tip">
            <p><b><codeph>includeDocs</codeph></b>: This parameter allows for eager retrieval of the document associated with each row.
                It is only beneficial in the synchronous API (in the async API you could just call <codeph>get(row.id())</codeph> on the async bucket with the same effects).
                It impacts the row's <codeph>document(...)</codeph> method by preloading the return value of said method.</p>

            <p>However, since the simple signature of <codeph>row.document()</codeph> assumes a <codeph>JsonDocument</codeph>,
                if you want a different document type you have to call both <codeph>includeDocs()</codeph> and <codeph>document()</codeph>
                with the desired target class: <codeph>query.includeDocs(SomeDocumentClass.class)</codeph> <b>and</b> <codeph>row.document(SomeDocumentClass.class)</codeph>.</p>

            <p>Note that the <codeph>ViewQuery</codeph> has a getter for the target class: <codeph>includeDocsTarget()</codeph>.</p>
        </note></p>

        <section><title>Querying Geospatial Views</title><note>Geospatial queries are present since
                Couchbase Server 3.0.1 (as experimental), and since Couchbase Server 4.0.0 (as
                stable).</note>To query a geospatial view, you will need to construct a
                <apiname>SpatialViewQuery</apiname> object
                (<apiname>com.couchbase.client.java.view.SpatialViewQuery</apiname>). Spatial
            queries accept a <parmname>startRange</parmname> and an <parmname>endRange</parmname>
            parameter which allow you to limit the enclosing bounding boxes of the result. The
            arguments to these parameters are <apiname>JsonArray</apiname> with each element
            corresponding to a component emitted by the key (the first two components implicitly
            being the longitude and latitude of the result itself). <p>On output, spatial queries
                yield instances of <apiname>SpatialViewRow</apiname> classes. A
                    <apiname>SpatialViewRow</apiname> is similar to a <apiname>ViewRow</apiname>,
                with an added <codeph>geometry</codeph> property.</p>
            <codeblock outputclass="language-java" spectitle="Querying a spatial view">SpatialViewQuery q = SpatialViewQuery.from("geodesign", "geoview")
    .startRange(JsonArray.from(0, -90, null))
    .endRange(JsonArray.from(180, 90, null));
SpatialViewResult result = bkt.query(q);

for (SpatialViewRow row : result) {
    System.out.println("Key:" + row.key());
    System.out.println("Value:" + row.value());
    System.out.println("Geometry:" + row.geometry());
}</codeblock>
            <p><apiname>SpatialView</apiname> also has the <apiname>includeDocs()</apiname>
                parameter to preload the document for the <apiname>SpatialViewRow</apiname>'s
                    <apiname>document()</apiname> method.</p>
        </section>
	</conbody>
</concept>
