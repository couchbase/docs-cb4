<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_bhl_2cv_xv">
    <title>Compatibility of Couchbase Features, Couchbase Versions and the Couchbase Java SDK</title>
    <titlealts><navtitle>Compatibility</navtitle></titlealts>
    <body>
        <section id="feature-matrix">
            <title>Couchbase Version/SDK Version Matrix</title>
            <p>Couchbase SDKs are tested against a variety of different environments to ensure both
                backward and forward compatibility with different versions of Couchbase Server. The matrix
                below denotes the version of Couchbase Server, the version of the Java SDK, and whether the SDK
                is: <ul id="ul_mdv_42h_hw">
                    <li> ✖ <b>Unsupported</b>: This combination is not tested, and is not within the scope of
                        technical support if you have purchased a support agreement. </li>
                    <li> ◎ <b>Compatible</b>: This combination has been tested previously, and should be
                        compatible. This combination is not recommended by our technical support
                        organization. It is best to upgrade either the SDK or the Couchbase version you are
                        using. </li>
                    <li> ✔ <b>Supported</b>:This combination is subject to ongoing quality assurance, and is
                        fully supported by our technical support organization. </li>
                </ul></p>
            <table frame="all" rowsep="1" colsep="1" id="table_sdk_versions">
                <title>Recommended SDK per Server Version Matrix</title>
                <tgroup cols="5">
                    <colspec colname="c1" colnum="1" colwidth="1*"/>
                    <colspec colname="c2" colnum="2" colwidth="1*"/>
                    <colspec colname="c3" colnum="3" colwidth="1*"/>
                    <colspec colname="c4" colnum="4" colwidth="1*"/>
                    <colspec colname="c5" colnum="5" colwidth="1*"/>
                    <thead>
                        <row>
                            <entry/>
                            <entry><i>SDK 2.0</i></entry>
                            <entry><b>SDK 2.1</b></entry>
                            <entry><b>SDK 2.2, 2.3, 2.4</b></entry>
                            <entry><b>SDK 2.5</b></entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><b>Server 3.1</b></entry>
                            <entry>◎</entry>
                            <entry>◎</entry> <entry><b>◎</b></entry>
                            <entry><b>✖</b></entry>
                        </row>
                        <row>
                            <entry><b>Server 4.0-4.6</b></entry>
                            <entry>◎</entry>
                            <entry>◎</entry> <entry><b>✔</b></entry>
                            <entry><b>✔</b></entry>
                        </row>
                        <row>
                            <entry><b>Server 5.0-5.1</b></entry>
                            <entry>◎</entry>
                            <entry>◎</entry> <entry><b>✔</b></entry>
                            <entry><b>✔</b></entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <p>Note the <xref href="https://www.couchbase.com/support-policy" scope="external" format="html">
                End of Life dates</xref> for Couchbase Server and SDK versions. 
                See the notes there for Support details.</p>

            <p>To take advantage of all features offered by Couchbase Server, you need to know what
                version of the Java SDK provides compatibility for the features you want to use. The
                following matrix shows which versions of the Couchbase Java SDK support the major
                features of each version of Couchbase Server.</p>
            <table frame="all" rowsep="1" colsep="1" id="table_qpl_ttq_44">
                <title>Couchbase Server and SDK Supported Version Matrix</title>
                <tgroup cols="8">
                    <colspec colname="c1" colnum="1" colwidth="1*"/>
                    <colspec colname="c2" colnum="2" colwidth="1*"/>
                    <colspec colname="c3" colnum="3" colwidth="1*"/>
                    <colspec colname="c4" colnum="4" colwidth="1*"/>
                    <colspec colname="c5" colnum="5" colwidth="1*"/>
                    <colspec colname="c6" colnum="6" colwidth="1*"/>
                    <colspec colname="c7" colnum="7" colwidth="1*"/>
                    <colspec colname="c8" colnum="8" colwidth="1*"/>
                    <thead>
                        <row>
                            <entry/>
                            <entry>Server 1.8</entry>
                            <entry>Server 2.0</entry>
                            <entry>Server 2.5</entry>
                            <entry>Server 3.0, 3.1</entry>
                            <entry>Server 4.0, 4.1</entry>
                            <entry>Server 4.5, 4.6</entry>
                            <entry>Server 5.0</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry namest="c1" nameend="c8"><b>Basic Features</b></entry>
                        </row>
                        <row>
                            <entry>CRUD Operations</entry>
                            <entry namest="c2" nameend="c8">Since 1.0</entry>
                        </row>
                        <row>
                            <entry>View Querying APIs</entry>
                            <entry namest="c2" nameend="c8">Since 1.1</entry>
                        </row>
                        <row>
                            <entry>Geospatial Views</entry>
                            <entry namest="c2" nameend="c2">Not Supported</entry>
                            <entry namest="c3" nameend="c4">1.1 - 1.4</entry>
                            <entry namest="c5" nameend="c8">Since 2.1</entry>
                        </row>
                        <row>
                            <entry namest="c1" nameend="c8"><b>Advanced Features</b></entry>
                        </row>
                        <row>
                            <entry>Durability Requirements</entry>
                            <entry namest="c2" nameend="c8">Since 1.1</entry>
                        </row>
                        <row>
                            <entry>Carrier Publication Configuration</entry>
                            <entry namest="c2" nameend="c3">Not Supported</entry>
                            <entry namest="c4" nameend="c8">Since 1.4</entry>
                        </row>
                        <row>
                            <entry>SSL Connectivity</entry>
                            <entry namest="c2" nameend="c4">Not Supported</entry>
                            <entry namest="c5" nameend="c8">Since 2.0</entry>
                        </row>
                        <row>
                            <entry>Bulk Operations</entry>
                            <entry namest="c2" nameend="c8">Since 1.0</entry>
                        </row>

                        <row>
                            <entry>N1QL Querying</entry>
                            <entry namest="c2" nameend="c5">Since 2.0 (experimental)</entry>
                            <entry namest="c6" nameend="c8">Since 2.2</entry>
                        </row>
                        <row>
                            <entry>Multi-Dimensional Scaling</entry>
                            <entry namest="c2" nameend="c5">Not Supported</entry>
                            <entry namest="c6" nameend="c8">Since 2.2</entry>
                        </row>
                        <row>
                            <entry>Sub-document API</entry>
                            <entry namest="c2" nameend="c6">Not Supported</entry>
                            <entry namest="c7" nameend="c8">Since 2.3</entry>
                        </row>

                        <row>
                            <entry>Full Text Search</entry>
                            <entry namest="c2" nameend="c6">Not Supported</entry>
                            <entry namest="c7" nameend="c7">Since 2.3 (Experimental)</entry>
                            <entry namest="c8" nameend="c8">Since 2.4</entry>
                        </row>
                        <row>
                            <entry namest="c1" nameend="c8"><b>Administrative Features</b></entry>
                        </row>
                        
                        <row>
                            <entry>Datastructures</entry>
                            <entry namest="c2" nameend="c6">Not Supported</entry>
                            <entry namest="c7" nameend="c8">Since 2.3</entry>
                        </row>
                        
                        <row>
                            <entry>Extended Attributes</entry>
                            <entry namest="c2" nameend="c7">Not Supported</entry>
                            <entry namest="c8" nameend="c8">Since 2.4</entry>
                        </row>

                        <row>
                            <entry>Administrative API</entry>
                            <entry namest="c2" nameend="c8">Since 1.0</entry>
                        </row>
                        
                        <row>
                            <entry>RBAC</entry>
                            <entry namest="c2" nameend="c7">Not Supported</entry>
                            <entry namest="c8" nameend="c8">Since 2.4</entry>
                        </row>
                        
                    </tbody>
                </tgroup>
            </table>
            <note type="important">With <xref href="https://developer.couchbase.com/documentation/server/5.0/sdk/java/sdk-authentication-overview.html" format="html" scope="external">RBAC</xref>,
                in Couchbase Server 5.0, authentication will depend upon access privileges, and upgrading to 5.0
                with existing buckets, or upgrading Server, will require taking these changes into account.</note> 
        </section>
        <section id="jdk-compat">
            <title>JDK Version Compatibility</title>
            <p>The Java SDK is tested with the Oracle JDK which should be used for best experience and supportability. Other JDK implementations might
                work but are  not tested and are unsupported.</p>
            <p>The following Oracle JDKs are supported for <b>Java SDK 1.4 and 2.0 - 2.5</b>:</p>
            <ul>
                <li>Oracle JDK 1.6</li>
                <li>Oracle JDK 1.7</li>
                <li>Oracle JDK 1.8 (recommended)</li>
            </ul>

            <p>Please make sure you run on one of the latest patch releases, since they provide stability improvements and security fixes in general.</p>
        </section>
        <section id="spring-compat">
          <title>Spring Data Couchbase Compatibility</title>
          <p><xref href="http://projects.spring.io/spring-data-couchbase/" format="html" scope="external">Spring Data Couchbase</xref> uses
          the Java SDK underneath and as a result is also provides different compatibilities with Couchbase Server. The following table
          provides an overview.</p>

          <table frame="all" rowsep="1" colsep="1" id="table_spring_versions">
              <title>Recommended Spring Data Couchbase per Server Version Matrix</title>
              <tgroup cols="3">
                  <colspec colname="c1" colnum="1" colwidth="1*"/>
                  <colspec colname="c2" colnum="2" colwidth="1*"/>
                  <colspec colname="c3" colnum="3" colwidth="1*"/>
                  <thead>
                      <row>
                          <entry/>
                          <entry><i>SDC 2.1.x</i></entry>
                          <entry><i>SDC 2.2 &amp; 3.0</i></entry>
                      </row>
                  </thead>
                  <tbody>
                      <row>
                          <entry><i>Status ></i></entry>
                          <entry><i>Bug fixes only</i></entry>
                          <entry><i>New Features, Active Development</i></entry>
                      </row>
                      <row>
                          <entry><b>Server 3.1</b></entry>
                          <entry>Compatible</entry>
                          <entry><b>Recommended</b></entry>
                      </row>
                      <row>
                          <entry><b>Server 4.0-4.6</b></entry>
                          <entry>Compatible</entry>
                          <entry><b>Recommended</b></entry>
                      </row>
                      <row>
                          <entry><b>Server 5.0</b></entry>
                          <entry>Compatible</entry>
                          <entry><b>Recommended</b></entry>
                      </row>
                  </tbody>
              </tgroup>
          </table>

        </section>
        <section id="migrating">
            <title>Migrating from Java SDK 1.4.x to 2.x</title>
            <p>Couchbase recommends that you migrate to the Java 2.x SDK to take advantage of
                enhancements to the SDK as well as new features available in Couchbase Server.</p>
            <p>The 2.x Java SDK is based on the reactive programming model and has a different architecture
                that uses a core I/O layer and a Java client layer. It's asynchronous by design and
                offers performance, scalability, and durability enhancements.</p>
            <p>This guide helps you migrate from the previous generation of the Java SDK (version
                <codeph>1.4.x</codeph>) to this new generation SDK (version <codeph>2.x</codeph>).</p>
            <p>If you plan on using the synchronous blocking API, you can follow the simple migration
                path. Or, you can follow the optional migration path to fully reactive and asynchronous
                code by using the asynchronous API, which provides the best performance.</p>

            <p>To get the full benefit of using the asynchronous code with this new generation SDK,
                you need to understand how to build asynchronous yet expressive code by leveraging
                the <codeph>Observable</codeph> paradigm. The <xref
                    href="async-programming.dita#async-programming-java"/> has more information on
                reactive programming with the Java SDK.</p>
        </section>
        <section>
            <title>1.x-2.x Migration: Getting Started</title>

            <p>The 2.x generation of the Java SDK is a complete rewrite of the 1.x SDK. It is layered
                into <codeph>core-io</codeph> and <codeph>java-client</codeph> pieces. The
                <codeph>java-client</codeph> layer is more abstract and closer to the client. The
                <codeph>core-io</codeph> layer is purely asynchronous and message-oriented. It makes
                use of a reactive architecture based on <xref href="http://netty.io" format="html"
                    scope="external">Netty</xref>, the <xref
                        href="https://github.com/LMAX-Exchange/disruptor/wiki" format="html" scope="external"
                        >LMAX Disruptor</xref>, and most importantly <xref
                            href="https://github.com/ReactiveX/RxJava" format="html" scope="external"
                            >RxJava</xref>.</p>

            <note type="important">The <codeph>core-io</codeph> layer is not intended for broad consumption.
                In general, you should focus on using the <codeph>java-client</codeph> layer in your
                application. For advanced use cases, when you are trying to squeeze out the very
                last drop of performance working with the raw byte stream or building a client layer
                in another language, you can use the <codeph>core-io</codeph> layer. </note>

            <p>The client exposes the server-side concepts of a <codeph>Cluster</codeph> and
                <codeph>Bucket</codeph>s as first-class citizens that replace the previous
                <codeph>CouchbaseClient</codeph> class. Each class exposes a <b>synchronous</b> API
                by default, but an <b>asynchronous</b> API (based on RxJava <codeph>Observable</codeph>
                objects) can be accessed simply by calling <codeph>async()</codeph> on either one.</p>

            <p>This split also allows for much more efficient resource utilization. In the past, each
                <codeph>CouchbaseClient</codeph> (for each bucket) had its resources, but now
                they are as shared as much as possible, and the <codeph>Cluster</codeph> and
                <codeph>Bucket</codeph> references can always be reused.</p>

            <p>The <codeph>Maven</codeph> artifact has been renamed from <codeph>couchbase-client</codeph> to
                java-client to differentiate this rewrite from the previous generation. It has
                minimal transitive dependencies (by embedding a few internal dependencies like
                Netty), most notably RxJava 1.x:</p>

            <codeblock outputclass="language-xml"><![CDATA[<dependencies>
  <dependency>
    <groupId>com.couchbase.client</groupId>
    <artifactId>java-client</artifactId>
    <version>2.4.0</version>
  </dependency>
</dependencies>]]></codeblock>

            <p>
                <note type="important">After you've fully migrated, make sure that old dependencies to
                    <codeph>couchbase-client</codeph> or dependencies introduced in your POM because
                    of the <codeph>couchbase-client</codeph> have been removed.</note>
            </p>

            <p>You'll most probably want the SDK to perform some logging, which can easily be activated
                by adding a logging framework such as <xref href="http://logging.apache.org/log4j/2.x/"
                    format="html" scope="external">log4j</xref> to your dependencies. For more
                information about configuring logging, see <xref href="collecting-information-and-logging.dita" />.</p>
        </section>
        <section>
            <title>1.x-2.x Migration: Cluster Connections</title>

            <p><codeph>CouchbaseClient</codeph> is replaced by the <codeph>Cluster</codeph> and
                <codeph>Bucket</codeph> classes, bringing real-world concepts of Couchbase into the
                SDK as first-class citizens. For more information about using these classes, see <xref
                    href="managing-connections.dita" />. </p>
            <p>Compared to the 1.4.x SDK, when providing a list of nodes for bootstrapping, you only need
                hostnames or IP addresses in <codeph>String</codeph> form. No need for the URI
                anymore, and no need for the port and pools path either: </p>
            <codeblock outputclass="language-java"><![CDATA[Cluster cluster = CouchbaseCluster.create("192.168.0.1");]]></codeblock>
            <p>The SDK uses the factory method pattern to create the Cluster object. This pattern is
                heavily used throughout the SDK in place of constructors.</p>

            <p>The <codeph>Cluster</codeph> and each <codeph>Bucket</codeph> reference must be reused as much
                as possible. Make them singletons, which can be used by multiple threads safely. Here's
                an example that uses a naive helper approach: </p>

            <codeblock outputclass="language-java"><![CDATA[public class CouchbaseHelper {
    //the IPs / hostnames would be obtained from configuration file
    private static final List<String> SEED_IPS = Arrays.asList("192.168.0.1", "192.168.0.2");
    public static final Cluster CLUSTER = CouchbaseCluster.create(SEED_IPS);
    public static final Bucket EXAMPLEBUCKET = CLUSTER.openBucket("example", "p4ssW0rd");
}]]></codeblock>

            <p>You can <xref href="client-settings.dita#topic_rwk_h3v_xv">customize</xref> the
                connection to the <codeph>Cluster</codeph> via the
                    <codeph>CouchbaseEnvironment</codeph> interface. </p>

            <codeblock outputclass="language-java"><![CDATA[public class CouchbaseHelper {
    //the IPs / hostnames would be obtained from configuration file
    private static final List<String> SEED_IPS = Arrays.asList("192.168.0.1", "192.168.0.2");
    //the environment configuration
    private static final CouchbaseEnvironment ENV = DefaultCouchbaseEnvironment.builder()
        .connectTimeout(8 * 1000) // 8 Seconds in milliseconds
        .keepAliveInterval(3600 * 1000) // 3600 Seconds in milliseconds
        .build();
    public static final Cluster CLUSTER = CouchbaseCluster.create(ENV, SEED_IPS);
    public static final Bucket EXAMPLEBUCKET = CLUSTER.openBucket("example", "p4ssW0rd");
}]]></codeblock>
        </section>
        <section>
            <title>1.x-2.x Migration: Document Operations</title>
            <p>In the new SDK, a new model of data within Couchbase was introduced: the
                    <codeph>Document</codeph> class. It encapsulates both the content itself and the
                metadata ( <codeph>id</codeph>, <codeph>expiry</codeph> and <codeph>cas</codeph>
                information). The <xref href="document-operations.dita#sdk-operations-java"/>  page
                shows more specifics regarding document operations with the 2.x version of the
                SDK.</p>
            <p>The SDK has several implementations of <codeph>Document</codeph>. By default, most SDK methods
                assume the content is JSON and return a <codeph>JsonDocument</codeph>. This kind of
                document use standardized storing flags, which make it compatible with the other
                second generation SDKs in other languages. If you already deal with JSON transcoding
                to domain objects, use the <codeph>RawJsonDocument</codeph> instead, which exposes
                the JSON String as content instead of a superfluous <codeph>JsonObject</codeph>. </p>
            <note>To interact with documents stored by an older Java SDK, use the
                <codeph>LegacyDocument</codeph> class. This class provides 1:1 compatibility
                with the 1.4 SDK, but consider to migrate to a new implementation after backward
                compatibility isn't required anymore. </note>
            <p>Concerning optimistic locking—because the CAS is now part of the
                    <codeph>Document</codeph>, the SDK picks it up if it is non-zero during mutating
                operations.  </p>
        </section>
        <section>
            <title>1.x-2.x Migrations: Reactive and Batched Programming</title>

            <p>In the 2.x SDK, asynchronous processing is done via RxJava. The asynchronous API is not mixed
                with the synchronous API, but rather accessible via the <codeph>async()</codeph>
                method on <codeph>Cluster</codeph> and <codeph>Bucket</codeph>. </p>

            <p>The SDK is thread-safe and uses a pool of threads internally for operations (so they are
                effectively processed in a separate thread). Additionally, some Rx operators use one
                of the <codeph>Schedulers</codeph> provided by RxJava (meaning it could execute in
                another thread). </p>

            <p>The SDK doesn't use <codeph>Future</codeph> objects anymore. For progressive
                migration purposes, you can convert an <codeph>Observable</codeph> into a
                    <codeph>Future</codeph> and vice versa. Here's an example of how to do that:</p>
            <codeblock outputclass="language-java"><![CDATA[//converting these to/from Future
Observable<String> myStringObservable;
Future<String> myStringFuture;
//this expects exactly one item emitted
Future<String> f = myStringObservable.toBlocking().toFuture();
//when several items expected, use a List
Future<List<String>> f = myStringObservable.toList().toBlocking().toFuture();
//convert back from a Future<String>
Observable<String> o = Observable.from(myStringFuture)]]></codeblock>
        </section>
        <section conref="../interface-stability-pars.dita#toplevel/interface-stability-section">In the
            Java SDK, the stability of an interface is listed in its API documentation as well as in
            the headers themselves.</section>
    </body>
</topic>
