<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="java-fle">
  <title>Field Level Encryption from the Java SDK</title>
  <shortdesc>Field Level Encryption is available in Couchbase Data Platform 5.5, from Java SDK version 2.6.0</shortdesc>
  <conbody>
        <section id="package">
          <title>Packaging</title>
            <p>The Couchbase Java SDK uses 
              the <xref href="https://github.com/couchbase/java-couchbase-encryption" format="html" scope="external">java-couchbase-encryption</xref> library 
              to provide support for encryption and decryption of JSON fields.</p>

    <p>The Couchbase Java Field Level Encryption (FLE) uses entity annotations/<codeph>JsonObject</codeph> methods to specify which field(s) to apply encryption and which algorithm to use. Hereâ€™s an example POJO entity definition:<codeblock outputclass="language-java">public static class Person {

    @Id
    public String id;

    @EncryptedField(provider = "AES")
    public String password;

    //The rest will be transported and stored unencrypted
    public String firstName;
    public String lastName;
    public String userName;
    public int age;
  }</codeblock></p>
        </section>


        <section id="encryption_configuration">
          <title>Configuration</title>
    <p>Create a configuration to connect to your Couchbase cluster and configure the crypto manager in the Couchbase environment with the encryption crypto algorithm and key store providers.<note>The alias used for registering the provider should match the provider name string in the annotation/parameter.</note><codeblock outputclass="language-java">JceksKeyStoreProvider kp = new JceksKeyStoreProvider("secret");
kp.storeKey("SecretKey", "mysecretkey".getBytes());
kp.storeKey("HMACsecret", "myauthsecret".getBytes());
kp.publicKeyName("secret_key");
kp.signingKeyName("hmac_key");
AES256CryptoProvider aes256CryptoProvider = new AES256CryptoProvider(kp);
CryptoManager cryptoManager = new CryptoManager();
cryptoManager.registerProvider("AES", aes256CryptoProvider);
CouchbaseEnvironment environment = DefaultCouchbaseEnvironment.builder().cryptoManager(cryptoManager).build();</codeblock></p>

      <p>To apply encryption to a repository entity, use the <codeph>EncryptedField</codeph> annotation with provider name as registered on the crypto manager.<codeblock outputclass="language-java">@EncryptedField(provider = "AES")
public String password;</codeblock>
    </p>
    <p>Encryption can also be applied to JsonObjects.<codeblock outputclass="language-java">JsonObject.create().putAndEncrypt("foo", "bar", "AES");</codeblock>
    </p>
        </section>


        <section id="decryption">
          <title>Decryption</title>
    <p>Encrypted fields in entities are decrypted based on the annotations. To decrypt use fields 
      in <codeph>JsonObject</codeph>, use <codeph>getAndDecrypt</codeph> methods.<codeblock outputclass="language-java">JsonDocument stored = bucket.get("mydoc");
stored.content().getAndDecrypt("foo", "AES")</codeblock>
    </p>
    </section>



  </conbody>
</concept>