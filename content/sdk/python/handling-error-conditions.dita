<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="concept_ibc_p1w_tt">
    <title>Handling Exceptions and Other Errors with the Python SDK in Couchbase</title>
    <titlealts><navtitle>Handling Errors</navtitle></titlealts>
    <body>
        <p>All Couchbase exceptions are derived from <apiname>CouchbaseError</apiname>. Exceptions
            may be caught via <codeph>except</codeph>. You may catch specific exceptions for
            specific handling, or you may catch the <codeph>CouchbaseError</codeph> and handle
            exceptions based on their status codes. Note that a single error may be part of multiple
            categories.</p>
        <section>
            <title>CouchbaseDataError</title>
            <p>This error category is raised when there is a data logic error (for example, a
                missing document ID). Handling of this error depends on application logic (for
                example, either perform corrective action to insert the document, or return an error
                up the stack indicating the specified resource does not exist).</p>
        </section>
        <section><title>ArgumentError</title>This type of exception is thrown during argument/input
            validation. It indicates that one or more arguments passed to a method are invalid. You
            should determine how and why the application is passing invalid input to the
            SDK</section>
        <section><title>CouchbaseNetworkError and CouchbaseTransientError</title>This error category
            indicates a connectivity issue between the SDK and the Couchbase Cluster. This error
            might be a result of a <xref href="../shared/couchbase-errors.dita#toplevel/devguide-transient-errors">temporary condition</xref> or a systematic infrastructure
                    failure.<p><apiname>TimeoutError</apiname> and <apiname>NetworkError</apiname>
                are subclasses of these error types.</p></section>
        <section><title>ObjectThreadError</title>This error is thrown when access is detected from
            multiple concurrent threads.</section>
        <section><title>Anatomy of an Exception Object</title><p>The Python SDK makes full use of
                the fact that a Python exception is just an object. In addition to catching the
                exception itself, the exception object may be analyzed for more information
                regarding the failure, and in the case of batched operations, may be inspected to
                determine which operations failed and which succeeded.</p>Applications may use the
                <apiname>is_data</apiname> property on a <apiname>CouchbaseError</apiname> instance
            to determine if the error is a negative reply from the server; the property will
            evaluate to <codeph>True</codeph> for situations where a key is not found, already
            exists, and so on. Likewise applications may use the <apiname>is_network</apiname>
            property to determine if the exception is a result of a potential network issue (and is
            thus not an issue with the data, but rather an issue concerning the connectivity between
            client and server).<p>All exceptions which are either data errors or network errors will
                contain a non-zero status code from the underlying C library; this status code may
                be obtained using the <apiname>rc</apiname> property of the exception. Exceptions
                which contain an <apiname>rc</apiname> value of 0 are typically
                    <apiname>ArgumentErrors</apiname> which are thrown when a method was supplied
                with an invalid parameter, or an invalid combination of parameters.</p></section>
        <section>
            <title>Handling Errors from Multi Operations</title>
            <p>When executing multiple operations in a <codeph>_multi</codeph> methods (for example,
                    <apiname>Bucket.get_multi()</apiname>), some of those operations will fail and
                an exception will be raised. Some operations may have still succeeded, and in this
                case you need to inspect the exception object to see which operations failed and
                which succeeded using the
                <apiname>CouchbaseError.split_results</apiname><codeblock outputclass="language-python">try:
    cb.get_multi(keys)
except CouchbaseError as e:
    ok, fail = e.split_results()
    for k, v in fail.items():
        print 'Key {0} failed with error code {1}'.format(k, v.rc)
    for k, v in ok.items():
        print 'Retrieved {0} with value {1}'.format(k, v.value)</codeblock></p>
        </section>
        <section>
            <title>Converting Error Codes to Exception Objects</title>
            <p>In cases where exceptions are not raised but the operation fails, you may receive an
                    <i>error code</i> which is the status code returned by the C SDK. The Python SDK
                will not automatically convert the error code to an exception object for performance
                reasons. You can use the <apiname>CouchbaseError.rc_to_exctype</apiname> class
                method to get the exception class which <i>would have been raised</i> based on the
                error code. Note that an error code of 0 means success.</p>
        </section>
        <section>
            <title>Conceptual Error Types</title>
        </section>
        <section conref="../shared/couchbase-errors.dita#toplevel/begin" conrefend="../shared/couchbase-errors.dita#toplevel/end"/>
    </body>
</topic>
