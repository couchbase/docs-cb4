<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_ppz_lhq_44">
    <title>Managing Connections Using the Python SDK with Couchbase Server</title>
    <titlealts><navtitle>Managing Connections</navtitle></titlealts>
    <shortdesc>This section describes how to connect the Python SDK to a Couchbase cluster and bucket. It contains best
        practices as well as information on the connection string,  SSL and other advanced connection options.</shortdesc>
    <conbody>
        <p conref="../c/lcb-pars-shared.dita#toplevel/connstr-intro"/>
        <section>
            <title>Connecting to a Bucket</title>
            <p>All Couchbase Server-resources are protected by <i>Role-Based Access Control</i> (RBAC).
                Therefore, to connect to a bucket, you must
                pass appropriate <i>credentials</i>: these consist of a <i>username</i> and <i>password</i>
                that correspond to a user currently defined on Couchbase Server. This user-definition is associated with
                one or more <i>roles</i>, each of which in turn corresponds to a set of <i>privileges</i>. When
                authentication occurs, Couchbase Server checks to ensure that the authenticated user's privileges
                do permit access to the requested resource: if they do not, access is denied. 
            </p>
            
            <p>
                The following code 
                demonstrates how authentication can be managed:
            </p>
                
                <codeblock outputclass="language-python">from couchbase.cluster import Cluster
from couchbase.cluster import PasswordAuthenticator
cluster = Cluster('couchbase://localhost')
authenticator = PasswordAuthenticator('username', 'password')
cluster.authenticate(authenticator)
cb = cluster.open_bucket('bucket-name')</codeblock>
            
            <p>
                For more information on authentication and RBAC, see
                <xref href="./sdk-authentication-overview.dita" scope="local" format="dita">Authentication</xref>.
            </p>
            <p>Note that a bucket-connection closes once it falls out of scope and has no other objects
                referencing it. It is advised to create only a single bucket object per application
                (or thread) for each Couchbase bucket your application connects to.</p>
        </section>
        <section>
            <title>Disconnecting from a Bucket</title>
            <p>A <apiname>Bucket</apiname> object will disconnect from the cluster when it falls out
                of scope; that is, when it is no longer being referenced by anything in your Python
                application. You can still close a bucket manually via the synchronous API using the
                    <apiname>Bucket._close()</apiname> method. This method should only be used as a
                last resort, as it may cause unexpected behavior if there are pending operations on
                the object.</p>
        </section>
        <section>
            <title>Scalability and concurrency</title>
            <p>Creating a new <apiname>Bucket</apiname> object is relatively expensive, and keeping
                many idle <apiname>Bucket</apiname> objects will negatively impact server
                performance (if done at a large scale).</p>
            <p>If using an asynchronous framework (such as Gevent or Twisted), your application will
                require only one <apiname>Bucket</apiname> instance per Couchbase bucket. Likewise,
                if your Python application only contains a single thread then you need establish
                only a single <apiname>Bucket</apiname> object per Couchbase bucket.</p>
            <p>If using multiple Python threads, it may be possible to share a single
                    <apiname>Bucket</apiname> object across multiple threads (using locking). The
                exact number of <apiname>Bucket</apiname> objects to be created will depend on the
                activity pattern of the application. It is recommended to start off and develop with
                a single object for all threads. If you realize that your application is suffering
                in performance because of threads waiting for the <apiname>Bucket</apiname> object's
                lock, you may implement a form of pooling or sharing so that <i>n</i> number of
                buckets be available.</p>
            <p>If using multiple processes (such as with the <codeph>multiprocessing</codeph>
                module), or using a Python module which creates multiple processes, ensure that the
                    <apiname>Bucket</apiname> object is not created in the parent process! Your
                Python interpreter may crash if the same <apiname>Bucket</apiname> object exists in
                more than a single process.</p>
        </section>
        <section conref="../c/managing-connections.dita#toplevel/connstr-begin"
            conrefend="../c/managing-connections.dita#toplevel/connstr-end"/>
    </conbody>
</concept>
