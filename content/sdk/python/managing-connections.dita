<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_ppz_lhq_44">
    <title>Managing Connections</title>
    <shortdesc>Shows how to instantiate a client object to connect to a Couchbase
        cluster</shortdesc>
    <conbody>
        <p>Note that many of these examples will demonstrate a <i>connection string</i>. The
            connection string is interpreted by the underlying C library.</p>
        <section>
            <title>Connecting to a Bucket</title>
            <p>To connect to a bucket using the synchronous API, simply create a new
                    <apiname>Bucket</apiname> object by calling its constructor. You should pass a
                    <i>connection string</i> to the bucket indicating the host(s) and bucket you
                want to connect to. If your bucket is protected by a password, pass the
                    <varname>password</varname> keyword argument to the
                constructor.<codeblock outputclass="language-python">from couchbase.bucket import Bucket
bucket = Bucket('couchbase://10.1.1.1/default')
# With a password:
protected_bucket = Bucket('couchbase://10.1.1.1/default', password='s3cr3t')</codeblock></p>
            <p>The bucket connection will close once it falls out of scope and has no other objects
                referencing it. It is advised to create only a single bucket object per application
                (or thread) for each Couchbase bucket your application connects to.</p>
        </section>
        <section>
            <title>Disconnecting from a Bucket</title>
            <p>A <apiname>Bucket</apiname> object will disconnect from the cluster when it falls out
                of scope; that is, when it is no longer being referenced by anything in your Python
                application. You can still close a bucket manually via the synchronous API using the
                    <apiname>Bucket._close()</apiname> method. This method should only be used as a
                last resort, as it may cause unexpected behavior if there are pending operations on
                the object.</p>
        </section>
        <section>
            <title>Scalability and concurrency</title>
            <p>Creating a new <apiname>Bucket</apiname> object is relatively expensive, and keeping
                many idle <apiname>Bucket</apiname> objects will negatively impact server
                performance (if done at a large scale).</p>
            <p>If using an asynchronous framework (such as Gevent or Twisted), your application will
                require only one <apiname>Bucket</apiname> instance per Couchbase bucket. Likewise,
                if your Python application only contains a single thread then you need establish
                only a single <apiname>Bucket</apiname> object per Couchbase bucket.</p>
            <p>If using multiple Python threads, it may be possible to share a single
                    <apiname>Bucket</apiname> object across multiple threads (using locking). The
                exact number of <apiname>Bucket</apiname> objects to be created will depend on the
                activity pattern of the application. It is recommended to start off and develop with
                a single object for all threads. If you realize that your application is suffering
                in performance because of threads waiting for the <apiname>Bucket</apiname> object's
                lock, you may implement a form of pooling or sharing so that <i>n</i> number of
                buckets be available. See <xref
                    href="multiprocessing-threads.dita#topic_bxt_r2n_qv"/> for more information
                on using with threads.</p>
            <p>If using multiple processes (such as with the <codeph>multiprocessing</codeph>
                module), or using a Python module which creates multiple processes, ensure that the
                    <apiname>Bucket</apiname> object is not created in the parent process! Your
                Python interpreter may crash if the same <apiname>Bucket</apiname> object exists in
                more than a single process.</p>
        </section>
        <section conref="../c/managing-connections.dita#toplevel/connstr-begin"
            conrefend="../c/managing-connections.dita#toplevel/connstr-end"/>
    </conbody>
</concept>
