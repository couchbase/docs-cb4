<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_qkc_cnm_qv">
    <title>Install and Start Using the Python SDK with Couchbase Server</title>
    <titlealts><navtitle>Start Using the SDK</navtitle></titlealts>
    <shortdesc>The Couchbase Python SDK allows Python applications to access a Couchbase cluster.
        The Python SDK offers a traditional synchronous API as well as integration with
            <i>twisted</i>, <i>gevent</i>, and <i>asyncio</i>. It depends on the C SDK and utilizes
        it for performance and reliability.</shortdesc>
    <body>
        <section><title>Installing on Linux</title>For installation on Linux, install the
                <i>couchbase-release</i> repository, and then install the <i>libcouchbase</i>
            packages. The following examples download and install <i>couchbase-release</i>
            repsitory, a C and C++ compiler, the C SDK development files (<i>libcouchbase-devel</i>
            [RPM] or <i>libcouchbase-dev</i> [DEB]), Python development files, and finally the
            Python SDK using
            <i>pip</i>.<codeblock spectitle="Debian and Ubuntu" outputclass="language-bash"># Only needed during first-time setup:
wget http://packages.couchbase.com/releases/couchbase-release/couchbase-release-1.0-4-amd64.deb
sudo dpkg -i couchbase-release-1.0-4-amd64.deb
sudo apt-get update
sudo apt-get install libcouchbase-dev build-essential python-dev python-pip
sudo pip install couchbase</codeblock><codeblock spectitle="RHEL and CentOS" outputclass="language-bash"># Only needed during first-time setup:
wget http://packages.couchbase.com/releases/couchbase-release/couchbase-release-1.0-4-x86_64.rpm
sudo rpm -iv couchbase-release-1.0-4-x86_64.rpm
# Will install or upgrade existing packages
sudo yum install libcouchbase-devel gcc gcc-c++ python-devel python-pip
sudo pip install couchbase</codeblock><note>RHEL/CentOS
                distributions may not provide the <codeph>python-pip</codeph> package in the base
                repositories. It may be found in the <xref
                    href="https://fedoraproject.org/wiki/EPEL" format="html" scope="external"
                    >EPEL</xref> repository.</note></section>
        <section>
            <title>Installation on Mac OS X</title>
            <p>To install the library on Mac OS X, first install the de-facto package manager for OS
                X: <xref href="http://brew.sh/" format="html" scope="external">homebrew</xref>. Once
                    <i>homebrew</i> is
                configured:<codeblock outputclass="language-bash">brew update # get list of latest packages
brew install libcouchbase
brew install python
pip install couchbase</codeblock><note>The
                    above example uses the Python supplied by homebrew and not the vendor-supplied
                    Python which ships with OS X. The Python SDK will still work with the
                    vendor-supplied Python (though <i>pip install</i> may be a privileged command),
                    but it is recommended to use Homebrew's Python instead.</note></p>
        </section>
        <section><title>Installing on Microsoft Windows</title>Download the executable installer
            relevant to your platform and Python version from <xref
                href="https://pypi.python.org/pypi/couchbase#downloads" format="html"
                scope="external"/>
        <p>Note that installation by means of pip will <i>not</i> work on Windows.</p>
        </section>
        <section>
            <title>
                Hello Couchbase
            </title>

            <p>
                The code snippet below shows how the Python SDK may
                be used for some common operations.
            </p>

        <codeblock outputclass="language-python">from couchbase.cluster import Cluster
from couchbase.cluster import PasswordAuthenticator
cluster = Cluster('couchbase://localhost')
authenticator = PasswordAuthenticator('username', 'password')
cluster.authenticate(authenticator)
cb = cluster.open_bucket('bucket-name')
cb.upsert('u:king_arthur', {'name': 'Arthur', 'email': 'kingarthur@couchbase.com', 'interests': ['Holy Grail', 'African Swallows']})
# OperationResult&lt;RC=0x0, Key=u'u:king_arthur', CAS=0xb1da029b0000>

cb.get('u:king_arthur').value
# {u'interests': [u'Holy Grail', u'African Swallows'], u'name': u'Arthur', u'email': u'kingarthur@couchbase.com'}

cb.n1ql_query('CREATE PRIMARY INDEX ON bucket-name').execute()
from couchbase.n1ql import N1QLQuery
row_iter = cb.n1ql_query(N1QLQuery('SELECT name FROM bucket-name WHERE ' +\
'$1 IN interests', 'African Swallows'))
for row in row_iter: print row
# {u'name': u'Arthur'}</codeblock>

        </section>

        <section>
            <title>Connecting
            </title>

            <p>
                To connect to a Couchbase bucket, you must use Couchbase <i>Role-Based Access Control</i> (RBAC).
                This is fully described in the section
                <xref href="../../security/security-authorization.dita" scope="local" format="dita">Authorization</xref>.
                An <i>authenticator</i>, containing username and password, should be defined, and then passed to the cluster.
                Following successful authentication, the bucket can be opened.
            </p>

            <codeblock outputclass="language-python">from couchbase.cluster import Cluster
from couchbase.cluster import PasswordAuthenticator
cluster = Cluster('couchbase://localhost')
authenticator = PasswordAuthenticator('username', 'password')
cluster.authenticate(authenticator)
bucket = cluster.open_bucket('bucket-name')</codeblock>

            <p>
                Once defined, the authenticator can be passed to other clusters, as appropriate.
            </p>

            <p>
                See
                <xref href="managing-connections.dita#concept_ppz_lhq_44"/> for more connection
                options and details about the connection string.
            </p>

        </section>

        <section>

            <title>
                Document Operations
            </title>

            <p>
                <xref href="../core-operations.dita#devguide_kvcore_generic">Document
                    operations</xref>, such as storing and retrieving documents, can be done using
                simple methods on the <apiname>Bucket</apiname> class such as
                    <apiname>Bucket.get</apiname> and <apiname>Bucket.upsert</apiname>. Simply pass
                the key (and value, if applicable) to the relevant
                methods.<codeblock outputclass="language-python">rv = bucket.get('document-id')
                    print(rv.value)</codeblock><codeblock outputclass="language-python">bucket.upsert('document-id', {'application': 'data'})
                    </codeblock>
            </p>

        </section>

        <section>
            <title>
                N1QL Queries
            </title>

            <p>
                Couchbase N1QL queries are performed by creating a <apiname>N1QLQuery</apiname>
                object and passing that to the <apiname>Bucket.n1ql_query()</apiname>
                method<codeblock outputclass="language-python">from couchbase.n1ql import N1QLQuery
query = N1QLQuery("SELECT airportname, city, country FROM `travel-sample `
                  "WHERE type=\"airport\" AND city=$my_city", my_city="Reno")
for row in bucket.n1ql_query(query):
    print(row)</codeblock>
            </p>
        </section>

        <section>
            <title>
                API Reference
            </title>
            The API reference is generated for each release and can
            be found linked from the <xref href="https://developer.couchbase.com/server/other-products/release-notes-archives/python-sdk" format="html"
                scope="external">release notes for your version
            of the Python SDK</xref>. Most of the API
            documentation can also be accessed via <codeph>pydoc</codeph>.
        </section>

        <section>
            <title>
                Release Notes
            </title>
            Information on new features, fixes, known issues as well
            as information on how to install older release versions is <xref
                href="/server/other-products/release-notes-archives/python-sdk" format="html"
                scope="peer">in the release notes</xref>.</section>

        <section>
            <title>
                PyPy support
            </title>
            <p>
                Because the Python SDK is written primarily in C
                using the CPython API, the official SDK will not work on PyPy.
            </p>

            An unofficial
            module, <xref href="https://github.com/couchbaselabs/couchbase-python-cffi"
                format="html" scope="external">couchbase_ffi</xref> uses ffi rather than the CPython
            C API to implement the internals of the library, and may be used with pypy.
        </section>

        <section id="python-contributing">
            <title>
                Contributing
            </title>
            <p>
                Couchbase
            welcomes community contributions to the Python SDK. The <xref
                href="https://github.com/couchbase/couchbase-python-client" format="html"
                scope="external">Python SDK source code</xref> is available on
            GitHub.
            </p>
        </section>
    </body>
</topic>
