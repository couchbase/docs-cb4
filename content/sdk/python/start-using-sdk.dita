<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_qkc_cnm_qv">
    <title>Install and Start Using the Python SDK with Couchbase Server</title>
    <titlealts><navtitle>Start Using the SDK</navtitle></titlealts>
    <shortdesc>The Couchbase Python SDK allows Python applications to access a Couchbase cluster.
        The Python SDK offers a traditional synchronous API as well as integration with
            <i>twisted</i>, <i>gevent</i>, and <i>asyncio</i>. It depends on the C SDK and utilizes
        it for performance and reliability.</shortdesc>
    <body>

        <section conref="../c/start-using-sdk.dita#toplevel/install-linux"><p>Ensure you also have the
            Python development files and
            <i>pip</i>:</p><codeblock spectitle="Debian, Ubuntu">sudo apt-get install python-dev python-pip</codeblock><codeblock spectitle="RHEL, CentOS">sudo yum install python-devel python-pip</codeblock>Then,
            for all platforms:<codeblock>sudi pip install couchbase</codeblock></section>
        <section conref="../c/start-using-sdk.dita#toplevel/install-osx">The Python SDK is best tested
            with the Python available from <i>homebrew</i>, though it may also work on OS X's
            Python. For best results, install Python from
            homebrew:<codeblock>brew install python</codeblock>To install the actual SDK, install it
            using <i>pip</i>:<codeblock>pip install couchbase</codeblock></section>
        <section><title>Installing on Microsoft Windows</title>Download the executable installer
            relevant to your platform and Python version from <xref
                href="https://pypi.python.org/pypi/couchbase#downloads" format="html"
                scope="external"/>.</section>
        <section><title>Hello Couchbase</title>The code snippet below shows how the Python SDK may
            be used for some common operations. Make sure you've [installed](TODO) Couchbase Server
            and the Python SDK before running this example:</section>
        <codeblock>>>> from couchbase.bucket import Bucket
>>> cb = Bucket('couchbase://localhost/default')
>>> cb.upsert('u:king_arthur', {'name': 'Arthur',
...           'email': 'kingarthur@couchbase.com',
...           'interests': ['Holy Grail', 'African Swallows']})
OperationResult&lt;RC=0x0, Key=u'u:king_arthur', CAS=0xb1da029b0000>
>>> cb.get('u:king_arthur').value
{u'interests': [u'Holy Grail', u'African Swallows'], u'name': u'Arthur', u'email': u'kingarthur@couchbase.com'}
>>> cb.n1ql_query('CREATE PRIMARY INDEX ON default').execute()
>>> from couchbase.n1ql import N1QLQuery
>>> row_iter = cb.n1ql_query(N1QLQuery('SELECT name FROM default WHERE ' +\
... '$1 IN interests', 'African Swallows'))
>>> for row in row_iter: print row
...
{u'name': u'Arthur'}</codeblock>
        <section><title>Connecting</title><p>To connect to a Couchbase bucket, simply instantiate
                the <apiname>couchbase.Bucket</apiname> class, specifying any cluster node and the
                bucket name in the <i>connection
            string</i>.</p><codeblock>from couchbase.bucket import Bucket
bucket = Bucket('couchbase://hostname-or-ip/bucket-name</codeblock>See
                <xref href="managing-connections.dita#concept_ppz_lhq_44"/> for more connection
            options and details about the connection string.</section>
        <section>
            <title>Document Operations</title>
            <p><xref href="../core-operations.dita#devguide_kvcore_generic">Document
                    operations</xref>, such as storing and retrieving documents, can be done using
                simple methods on the <apiname>Bucket</apiname> class such as
                    <apiname>Bucket.get</apiname> and <apiname>Bucket.upsert</apiname>. Simply pass
                the key (and value, if applicable) to the relevant
                methods.<codeblock>rv = bucket.get('document-id')
print(rv.value)</codeblock><codeblock>bucket.upsert('document-id', {'application': 'data'})</codeblock></p>
        </section>
        <section>
            <title>N1QL Queries</title>
            <p>Couchbase N1QL queries are performed by creating a <apiname>N1QLQuery</apiname>
                object and passing that to the <apiname>Bucket.n1ql_query()</apiname>
                method<codeblock>from couchbase.n1ql import N1QLQuery
query = N1QLQuery("SELECT airportname, city, country FROM `travel-sample `
                  "WHERE type=\"airport\" AND city=my_city", my_city="Reno")
for row in bucket.n1ql_query(query):
    print(row)</codeblock></p>
        </section>
        <section><title>API Reference</title>The API reference is generated for each release and can
            be found at <xref href="http://pythonhosted.org/couchbase" format="html"
                scope="external">http://pythonhosted.org/couchbase</xref>. Most of the API
            documentation can also be accessed via <codeph>pydoc</codeph>.</section>
        <section>
            <title>Contributing</title>
            <p>Couchbase welcomes community contributions to the Python SDK. The <xref
                    href="https://github.com/couchbase/couchbase-python-client" format="html"
                    scope="external">Python SDK source code</xref> is available on GitHub.</p>
        </section>

        <section>
            <title>PyPy support</title>
            <p>Because the Python SDK is written primarily in C using the CPython API, the official
                SDK will not work on PyPy.</p>
            <p>An unofficial module, <xref
                    href="https://github.com/couchbaselabs/couchbase-python-cffi" format="html"
                    scope="external">couchbase_ffi</xref> uses ffi rather than the CPython C API to
                implement the internals of the library, and may be used with pypy.</p>
        </section>
    </body>
</topic>
