<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="python-fts">
    <title>Full Text Search (FTS) Using the Python SDK with Couchbase Server</title>
    <titlealts><navtitle>Searching from the SDK</navtitle></titlealts>
    <shortdesc>You can use the Full Text Search service (FTS) to create queryable full-text indexes in Couchbase Server.</shortdesc>
    <body>
        <p>Couchbase offers Full-text search support, allowing you to search for documents that
            contain certain words or phrases. In the Python SDK you can search full-text indexes by
            using the iterator-based <apiname>Bucket.search()</apiname> API.</p>
        <p>Querying a FTS index through the Python client is performed through the
                <apiname>Bucket.search()</apiname>. This method takes two parameters, the index name
            to query and the actual search query itself. Additional search options may be specified
            as keyword
            arguments.<codeblock outputclass="language-python">import couchbase.fulltext as FT
results = cb.search('travel-search', FT.TermQuery('office'), limit=25)
for result in results:
    print(result['id'])</codeblock></p>
        <p>The <apiname>Bucket.search()</apiname> method returns an object which may be iterated
            over to retrieve the results. Each result is a dictionary comprising the layout defined
            in <xref href="../../fts/fts-response-object-schema.dita#topic_uvg_4x1_4v"/>. </p>
        <p>Other search result data may be accessed using the iterator's <apiname>meta</apiname> and
                <apiname>facets</apiname>
            properties:<codeblock outputclass="language-python">results = cb.search(indexname, query)
for result in results:
    handle_result(result)
print(results.meta)
print(results.facets)</codeblock></p>
        <section><title>Query Types</title>Query types may be found inside the
                <codeph>couchbase.fulltext</codeph> module. The module contains query classes
            corresponding to those enumerated in <xref
                href="../../fts/fts-query-types.dita#topic_jfq_fn4_1v"/>. Query object should be
            instantiated by passing the search term (usually a string) as the first argument,
            followed by some query modifiers.<p>It is important to distinguish between <i>query
                    options</i> and general <i>search options</i>. Some options affect the search
                process in general (such as the <parmname>limit</parmname>, indicating how many
                results to return) while others only affect a specific query (such as
                    <parmname>fuzziness</parmname> for a given query). Because multiple queries can
                be combined in a single search operation, <i>query specific options</i> can be
                specified only in the query object itself, while <i>search options</i> are specified
                as keyword arguments to <apiname>search()</apiname>.</p></section>
        <section>
            <title>Query Facets</title>
            <p>Query <xref href="../full-text-search-overview.dita#full-text-search/facets"
                    >facets</xref> may also be added to the <i>general search parameters</i> by
                using the <parmname>facets={}</parmname> keyword argument. The
                    <parmname>facets</parmname> keyword argument accepts a dictionary with facet
                names as keys and facets themselves as values. You can create facet queries by
                instantiating <apiname>Facet</apiname> objects found in the
                    <apiname>couchbase.fulltext</apiname> module.</p>
            <codeblock outputclass="language-python">results = cb.search(
        'travel-search', FT.MatchQuery('wine'),
        facets={'countries': FT.TermFacet('country', limit=5)}, limit=0)

# Exhaust the iterator
for _ in results:
    pass

for info in results.facets['countries']['terms']:
    print('Got {} results from {}'.format(info['count'], info['term']))</codeblock>
        </section>
    </body>
</topic>
