<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
"topic.dtd">
<topic id="python-fts">
  <title>Full Text Search (FTS) Using the Python SDK with Couchbase
  Server</title>

  <titlealts>
    <navtitle>Searching from the SDK</navtitle>
  </titlealts>

  <shortdesc>You can use the Full Text Search service (FTS) to create
  queryable full-text indexes in Couchbase Server.</shortdesc>

  <body>
    <p>Couchbase offers Full-text search support, allowing you to search for
    documents that contain certain words or phrases. In the Python SDK you can
    search full-text indexes by using the iterator-based
    <apiname>Bucket.search()</apiname> API.</p>

    <p>Querying a FTS index through the Python client is performed through the
    <apiname>Bucket.search()</apiname>. This method takes two parameters, the
    index name to query and the actual search query itself. Additional search
    options may be specified as keyword arguments.<codeblock
    outputclass="language-python">import couchbase.fulltext as FT
results = cb.search('travel-search', FT.TermQuery('office'), limit=25)
for result in results:
    print(result['id'])</codeblock></p>

    <p>The <apiname>Bucket.search()</apiname> method returns an object which
    may be iterated over to retrieve the results. Each result is a dictionary
    comprising the layout defined in <xref
    href="../../fts/fts-response-object-schema.dita#topic_uvg_4x1_4v"/>.</p>

    <p>Other search result data may be accessed using the iterator's
    <apiname>meta</apiname> and <apiname>facets</apiname>
    properties:<codeblock outputclass="language-python">results = cb.search(indexname, query)
for result in results:
    handle_result(result)
print(results.meta)
print(results.facets)</codeblock></p>

    <section><title>Query Types</title>Query types may be found inside the
    <codeph>couchbase.fulltext</codeph> module. The module contains query
    classes corresponding to those enumerated in <xref
    href="../../fts/fts-query-types.dita#topic_jfq_fn4_1v"/>. Query object
    should be instantiated by passing the search term (usually a string) as
    the first argument, followed by some query modifiers.<p>It is important to
    distinguish between <i>query options</i> and general <i>search
    options</i>. Some options affect the search process in general (such as
    the <parmname>limit</parmname>, indicating how many results to return)
    while others only affect a specific query (such as
    <parmname>fuzziness</parmname> for a given query). Because multiple
    queries can be combined in a single search operation, <i>query specific
    options</i> can be specified only in the query object itself, while
    <i>search options</i> are specified as keyword arguments to
    <apiname>search()</apiname>.</p></section>

    <section><title>Query Facets</title> <p>Query <xref
    href="../full-text-search-overview.dita#full-text-search/facets">facets</xref>
    may also be added to the <i>general search parameters</i> by using the
    <parmname>facets={}</parmname> keyword argument. The
    <parmname>facets</parmname> keyword argument accepts a dictionary with
    facet names as keys and facets themselves as values. You can create facet
    queries by instantiating <apiname>Facet</apiname> objects found in the
    <apiname>couchbase.fulltext</apiname> module.</p> <codeblock
    outputclass="language-python">results = cb.search(
        'travel-search', FT.MatchQuery('wine'),
        facets={'countries': FT.TermFacet('country', limit=5)}, limit=0)

# Exhaust the iterator
for _ in results:
    pass

for info in results.facets['countries']['terms']:
    print('Got {} results from {}'.format(info['count'], info['term']))</codeblock></section>

    <section id="using-full-text-search-from-the-python-sdk"><title> Using
    Full Text Search from the Python SDK </title> <p> By means of the Python
    SDK, Full Text Search queries can be performed on Full Text Indexes; and
    result-sets sorted. </p> <p> A general introduction to Full Text Search,
    with pointers to detailed descriptions of its principal features, is
    provided in <xref format="dita" href="../../fts/full-text-intro.dita"
    scope="local">Full Text Search: Fundamentals</xref>. </p> <p> The current
    page features a code example that demonstrates the Python SDK Full Text
    Search API. The example assumes that Couchbase Server is running, and that
    the username <codeph>Administrator</codeph> and the password
    <codeph>password</codeph> provide authorization for performing the
    searches. It also assumes that the <codeph>travel-sample</codeph> bucket
    has been installed. For information on creating users and managing roles,
    see <xref format="dita" href="../../security/security-authorization.dita"
    scope="local">Authorization</xref>. For information on installing sample
    buckets, see <xref format="dita" href="../../settings/settings.dita"
    scope="local">Settings</xref>. </p> <p> The example also assumes the
    existence of three specific Full Text Indexes, defined on the
    <codeph>travel-sample</codeph> bucket. These are: </p> <ul>
        <li><codeph>travel-sample-index-unstored</codeph>: Uses only the
        default settings. <p> </p></li>

        <li><codeph>travel-sample-index-stored</codeph>: Uses default
        settings, with one exception: dynamic fields are <i>stored</i>, for
        the whole index. <p> </p></li>

        <li><codeph>travel-sample-index-hotel-description</codeph>: Indexes
        only the <codeph>description</codeph> fields of <codeph>hotel</codeph>
        documents, and disables the <codeph>default</codeph> type mapping. The
        index has a custom analyzer named <codeph>myUnicodeAnalyzer</codeph>
        defined on it: the analyzer's main characteristic is that it uses the
        <b>unicode</b> tokenizer. <p> </p></li>
      </ul> <p> See <xref format="dita"
    href="../../fts/fts-creating-indexes.dita" scope="local">Creating
    Indexes</xref> for details on how to create these indexes: they can be
    created interactively, by means of the Couchbase Web Console; however,
    there may be greater efficiency in using the Couchbase REST API, as
    described in the section <xref format="dita"
    href="../../fts/fts-creating-indexes.dita#topic_ksl_wwk_1v/index-creation-with-the-rest-api"
    scope="local">Index Creation with the REST API</xref>. The JSON objects
    that constitute index-definitions (for inclusion as bodies to the
    index-creation REST calls), are provided in <xref format="dita"
    href="../../fts/fts-demonstration-indexes.dita"
    scope="local">Demonstration Indexes</xref>. </p> <p> The example features
    the following Full Text Searches on the <codeph>travel-sample</codeph>
    bucket, within Couchbase Server: </p> <ul>
        <li><i>Simple Text Query</i> on a single word, targeting an index with
        dynamic fields unstored. <p> </p></li>

        <li><i>Simple Text Query on Non-Default Index</i>, specifying an index
        that consists only of content derived from a specific field from a
        specific document-type. <p> </p></li>

        <li><i>Simple Text Query on Stored Field</i>, specifying the field to
        be searched; targeting an index with dynamic fields stored, to ensure
        that field-content is included in the return object. <p> </p></li>

        <li><i>Match Query with Facet</i>, showing how query-results can be
        displayed either by row or by <i>hits</i>; and demonstrating use of a
        <i>facet</i>, which provides aggregation-data. <p> </p></li>

        <li><i>DocId Query</i>, showing results of a query on two document
        IDs. <p> </p></li>

        <li><i>Unanalyzed Term Query with Fuzziness Level of 0</i>,
        demonstrating how to query on a term with no analysis. <i>Zero
        fuzziness</i> is specified, to ensure that matches are exact. <p>
        </p></li>

        <li><i>Unanalyzed Term Query with Fuzziness Level of 2</i>, which is
        almost identical to the immediately preceding query; but which this
        time specifies a <i>fuzziness</i> factor of 2, allowing partial
        matches to be made. The output from this query can be compared to that
        of the one immediately preceding. <p> </p></li>

        <li><i>Match Phrase Query, using Analysis</i>, for searching on a
        phrase. <p> </p></li>

        <li><i>Phrase Query, without Analysis</i>, for searching on a phrase
        without analysis supported. <p> </p></li>

        <li><i>Query String Query</i>, showing how a query string is specified
        as search-input. <p> </p></li>

        <li><i>Conjunction Query</i>, whereby two separate queries are defined
        and then run as part of the search, with only the matches returned by
        both included in the result-object. <p> </p></li>

        <li><i>Wild Card Query</i>, whereby a wildcard is used in the string
        submitted for the search. <p> </p></li>

        <li><i>Numeric Range Query</i>, whereby minimum and maximum numbers
        are specified, and matches within the range returned. <p> </p></li>

        <li><i>Regexp Query</i>, whereby a <i>regular expression</i> is
        submitted, to generate the conditions for successful matches. <p>
        </p></li>
      </ul></section>

    <section id="python-fts-detailed-example"><title> Detailed Example
    </title> <p> The following example demonstrates Full Text Search queries
    that can be made with the Python SDK. It can be run using Nose tests.</p>
    <codeblock outputclass="language-python">import couchbase.fulltext as FT

class FTStringsTest:
    def setUp(self):
        cluster = couchbase.cluster.Cluster("couchbase://10.142.180.102")
        cluster.authenticate(couchbase.cluster.PasswordAuthenticator("default","password"))
        self.cb=cluster.open_bucket("travel-sample")

    @staticmethod
    def printResult(label, resultObject):
        print()
        print("= = = = = = = = = = = = = = = = = = = = = = =")
        print("= = = = = = = = = = = = = = = = = = = = = = =")
        print()
        print(label)
        print()

        for row in resultObject:
            print(row)

    def test_demo(self):
        results = self.cb.search(
            'travel-search',
            FT.MatchQuery('part', fuzziness=0, field='content'),
            limit=3,
            facets={'countries': FT.TermFacet('country', limit=3)})

        for row in results:
            pprint(row)

        print('Facet results:')

    def test_simple_text_query(self):
        indexName = "travel-sample-index-unstored"
        query = FT.MatchQuery("swanky")

        result = self.cb.search(indexName, query, limit=10)

        FTStringsTest.printResult("Simple Text Query", result)

    def test_simple_text_query_on_stored_field(self):
        indexName = "travel-sample-index-stored"
        query = FT.MatchQuery("MDG")
        query.field = "destinationairport"

        result = self.cb.query(indexName, query).limit(10).highlight()

        FTStringsTest.printResult("Simple Text Query on Stored Field", result)

    def test_simple_text_query_on_non_default_index(self):
        indexName = "travel-sample-index-hotel-description"
        query = FT.MatchQuery("swanky")

        result = self.cb.search(indexName, query, limit=10)

        FTStringsTest.printResult("Simple Text Query on Non-Default Index", result)

    def test_text_query_on_stored_field_with_facet(self):
        indexName = "travel-sample-index-stored"
        query = FT.MatchQuery("La Rue Saint Denis!!")
        query.field = "reviews.content"

        result = self.cb.search(indexName, query, limit=10, highlight_style="ansi",
                                facets={"Countries Referenced": FT.TermFacet("country", 5)})

        FTStringsTest.printResult("Match Query with Facet, Result by Row", result)

        print()
        print("Match Query with Facet, Result by hits:")
        print(result.hits())

        print()
        print("Match Query with Facet, Result by facet: ")
        print(result.facets())

    def test_doc_id_query_method(self):
        indexName = "travel-sample-index-unstored"
        query = FT.DocIdQuery(["hotel_26223", "hotel_28960"])

        result = self.cb.search(indexName, query)

        FTStringsTest.printResult("DocId Query", result)

    def test_un_analyzed_term_query(self):
        fuzzinessLevel = 5
        indexName = "travel-sample-index-stored"
        query = FT.TermQuery("sushi", field="reviews.content", fuzziness=fuzzinessLevel)

        result = self.cb.search(indexName, query, limit=50, highlight_style="ansi")

        FTStringsTest.printResult("Unanalyzed Term Query with Fuzziness Level of " + str(fuzzinessLevel) + ":", result)

    def test_match_phrase_query_on_stored_field(self):
        indexName = "travel-sample-index-stored"
        query = FT.MatchPhraseQuery("Eiffel Tower", field="description")

        result = self.cb.search(indexName, query, limit=10, highlight_style="ansi")

        FTStringsTest.printResult("Match Phrase Query, using Analysis", result)

    def test_un_analyzed_phrase_query(self):
        indexName = "travel-sample-index-stored"
        query = FT.PhraseQuery("dorm", "rooms", field="description")

        result = self.cb.search(indexName, query, limit=10, highlight_style="ansi")
        FTStringsTest.printResult("Phrase Query, without Analysis", result)

    def test_conjunction_query_method(self):
        indexName = "travel-sample-index-stored"
        firstQuery = FT.MatchQuery("La Rue Saint Denis!!", field="reviews.content")
        secondQuery = FT.MatchQuery("boutique", field="description")

        conjunctionQuery = FT.ConjunctionQuery(firstQuery, secondQuery)

        result = self.cb.search(indexName, conjunctionQuery, limit=10, highlight_style="ansi")

        FTStringsTest.printResult("Conjunction Query", result)

    def test_query_string_method(self):
        indexName = "travel-sample-index-unstored"
        query = FT.QueryStringQuery("description: Imperial")

        result = self.cb.search(indexName, query, limit=10)

        FTStringsTest.printResult("Query String Query", result)

    def test_wild_card_query_method(self):
        indexName = "travel-sample-index-stored"
        query = FT.WildcardQuery("bouti*ue").field("description")

        result = self.cb.search(indexName, query, limit=10, highlight_style="ansi")

        FTStringsTest.printResult("Wild Card Query", result)

    def test_numeric_range_query_method(self):
        indexName = "travel-sample-index-unstored"
        query = FT.NumericRangeQuery(min=10100, max=10200, field="id")

        result = self.cb.search(indexName, query, limit=10)

        FTStringsTest.printResult("Numeric Range Query", result)

    def test_regexp_query_method(self):
        indexName = "travel-sample-index-stored"
        query = FT.RegexQuery("[a-z]", field="description")

        result = self.cb.search(indexName, query, limit=10, highlight=True)

        FTStringsTest.printResult("Regexp Query", result)
</codeblock></section>
  </body>
</topic>
