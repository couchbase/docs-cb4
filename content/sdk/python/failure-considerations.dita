<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_wxg_cwb_mv" >
    
    <title>
        Failure Considerations for the Python SDK in Couchbase
    </title>
    
    <titlealts>
        <navtitle>
            Failure Considerations
        </navtitle>
    </titlealts>
    
    <shortdesc conref="../shared/env-errors.dita#env_errors/shortdesc"/>
    
    <body>
        
        <section conref="../shared/env-errors.dita#env_errors/failover_definition">
        </section>
        
        <section conref="../shared/env-errors.dita#env_errors/what_to_expect_in_application">
        </section>
        
        <section conref="../shared/env-errors.dita#env_errors/what_to_expect_during_failover">
        </section>
        
        <section conref="../shared/env-errors.dita#env_errors/missing-nodes">
        </section>
        
        <section conref="../shared/env-errors.dita#env_errors/timeouts">
        </section>
        
        <section conref="../shared/env-errors.dita#env_errors/network_failures">
        </section>
        
        <section id="devguide-replica-read">
            <title>
                Reading from replicas
            </title>
            
            <p>
                High-availability applications can read documents from replicas, exchanging
                consistency for availability.
            </p>
            
            <p>
                If your bucket is configured for replication, then multiple replicas of each item
                exist within the cluster. By default the client will attempt to access an item using
                its computed master or active node. This returns the current and authoritative
                version of the item as it is stored within Couchbase.
            </p>
            
            <p>
                In conditions where access to the active node is unavailable (for example, it is
                disconnected from the network), an application may be able to access a replica
                version of the item using the <i>get-from-replica</i> operation which queries a
                replica node for a copy of the item. 
                
                <note>The item received from a replica node may
                    be an older version. It is possible a newer version exists in the active node,
                    but did not manage to get replicated before the active node went
                    offline.
                </note>
            </p>
            
            <codeblock outputclass="language-python">try:
    result = cb.get("docid")
except CouchbaseNetworkError as e:
    print "Got error. Fetching from replica!"
    result = cb.get(‘docid’, replica=True)</codeblock>
        </section>
    </body>
</topic>
