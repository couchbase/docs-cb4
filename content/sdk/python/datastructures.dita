<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_h44_vct_5x">
    <title>Data Structures</title>
    <shortdesc>You can use complex data structures such as dictionaries and lists in Couchbase.
        These data structures may be manipulated with basic operations without retrieving and
        storing the entire document.</shortdesc>
    <body>
        <p>Data structures in Couchbase are similar in concept to data structures in Python:<ul
                id="ul_txf_32t_5x">
                <li><b>Map</b> is like Python <codeph>dict</codeph>, and is a key-value structure,
                    where a value is accessed by using a key string.</li>
                <li><b>List</b> is like a Python <codeph>list</codeph> and is a sequential data
                    structure. Values can be placed in the beginning or end of a list, and can be
                    accessed using numeric indexes.</li>
                <li><b>Queue</b> is a wrapper over a <i>list</i> which offers FIFO
                    (first-in-first-out) semantics, allowing it to be used as a lightweight job
                    queue.</li>
                <li><b>Set</b> is a wrapper over a <i>list</i> which provides the ability to handle
                    unique values.</li>
            </ul></p>
        <p>These data structures are stored as JSON documents in Couchbase, and can therefore be
            accessed using N1QL, Full Text Search, and normal key-value operations. Data structures
            can also be manipulated using the traditional sub-document and full-document key-value
            APIs.</p>
        <p>Using the data structures API can help your application in two ways:<ul
                id="ul_kd3_tcb_vx">
                <li><b>Simplicity</b>: Data structures provide high level operations by which you
                    can deal with documents as if they were container data structures. Adding an
                    item to a dictionary is expressed as <codeph>map_add</codeph>, rather than
                    retrieving the entire document, modifying it locally, and then saving it back to
                    the server.</li>
                <li><b>Efficiency</b>: Data structure operations do not transfer the entire document
                    across the network. Only the relevant data is exchanged between client and
                    server, allowing for less network overhead and lower latency.</li>
            </ul></p>
        <section><title>Creating a Data Structure</title>Data structures can be created implicitly
            using the <option>create=True</option>. For example, to add an item to a map, specify
            the <i>document ID</i> of the map itself (i.e. the ID which uniquely identifies the map
            in the server), the key <i>within</i> the map, and the value to store under the
            key:<codeblock>bucket.map_add('map_id', 'name', 'Mark Nunberg', create=True)</codeblock>Likewise,
            to create a list, specify the document ID and the value to
            add:<codeblock>bucket.list_append('list_id', 'hello', create=True)</codeblock>Note that
            the <option>create=True</option>
            <i>will not</i> overwrite an existing document with the same name if it already exists.
            It is therefore always safe to use, unless your application creates data structures
                independently.<p>Data structures can be explicitly created and reset using
                full-document methods, and you can initialize a data structure with its JSON
                equivalent. To create a new empty list, set, or queue, use
                    <codeph>bucket.upsert('list_id', [])</codeph>. To create an empty map, use
                    <codeph>bucket.upsert('map_id', {})</codeph>.</p></section>
        <section><title>Accessing Data Structures</title>Data structures can be accessed using their
            appropriate methods. Most data access methods will return an
                <apiname>ValueResult</apiname>-like object with the actual returned value under the
                <varname>value</varname>
            property.<codeblock>bucket.list_get(0).value  # 'hello'
bucket.map_get('map_id', 'name').value  # 'mark nunberg'</codeblock>Native
            Python exceptions such as <apiname>IndexError</apiname> will be thrown if a given map
            key or list index is not found within the document. If the document itself does not
            exist, a <apiname>couchbase.exceptions.NotFoundError</apiname> will be raised
                instead.<p>Here is a list of common operations:<table frame="all" rowsep="1"
                    colsep="1" id="table_c5w_jg5_5x">
                    <title>Data Structure Operations</title>
                    <tgroup cols="2">
                        <colspec colname="c1" colnum="1" colwidth="1*"/>
                        <colspec colname="c2" colnum="2" colwidth="3.76*"/>
                        <thead>
                            <row>
                                <entry>Operation</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry><apiname>map_exists</apiname></entry>
                                <entry>Determine if a key exists in a
                                    map.<codeblock>bucket.map_exists('map_id', 'some_key') #=> True or False</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>map_remove</apiname></entry>
                                <entry>Remove a key from a
                                    map.<codeblock>bucket.map_remove('map_id', 'some_key')</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>map_get</apiname></entry>
                                <entry>Get an item from a
                                    map.<codeblock>bucket.map_get('map_id', 'some_key').value #=> value</codeblock>If
                                    the key is not found, an <apiname>IndexError</apiname> is
                                    raised.</entry>
                            </row>
                            <row>
                                <entry><apiname>list_append</apiname></entry>
                                <entry>Add an item to the <i>end</i> of a
                                    list.<codeblock>bucket.list_append('list_id', 'some_value')</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>list_prepend</apiname></entry>
                                <entry>Add an item to the <i>beginning</i> of a
                                    list.<codeblock>bucket.list_prepend('list_id', 'some_value')</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>list_get</apiname></entry>
                                <entry>Get an item from a list by its
                                    index.<codeblock>bucket.list_get('list_id', 'some_key').value #=> value</codeblock>If
                                    the index is out of range, an <apiname>IndexError</apiname> will
                                    be thrown. Note that you can get the <i>last</i> array element
                                    by specifying <codeph>-1</codeph> as the index.</entry>
                            </row>
                            <row>
                                <entry><apiname>set_add</apiname></entry>
                                <entry>Add an item to a set, if the item does not yet exist in the
                                    set.<codeblock>bucket.set_add('list_id', 'some_value')</codeblock>Note
                                    that a <i>set</i> is just a list. You can retrieve the entire
                                    set by simply using a full-document <apiname>get</apiname>
                                        operation:<codeblock>set = bucket.get('list_id').value</codeblock><note>Currently,
                                        you can only store primitive values in sets, such as
                                        strings, integers, and Booleans.</note></entry>
                            </row>
                            <row>
                                <entry><apiname>set_remove</apiname></entry>
                                <entry>Remove an item from a set, if it exists. An exception is not
                                    thrown if the item does not exist. You can determine if an item
                                    exists or not by the return value. If the item did not exist
                                    beforehand, <codeph>None</codeph> is
                                    returned.<codeblock>bucket.set_remove('list_id', 'some_value')</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>queue_push</apiname></entry>
                                <entry>Add an item to the beginning of the
                                    queue.<codeblock>bucket.queue_push('a_queue', 'job123', create=True)</codeblock>Note
                                    that a queue is just a list. You can retrieve items from the
                                    middle of the queue by using <apiname>list_get</apiname></entry>
                            </row>
                            <row>
                                <entry><apiname>queue_pop</apiname></entry>
                                <entry>Remove an item from the end queue and return
                                    it.<codeblock>item = bucket.queue_pop('a_queue') #=> 'job123'</codeblock>If
                                    the queue is empty, then an
                                        <apiname>couchbase.exceptions.QueueEmpty</apiname> error is
                                    thrown.</entry>
                            </row>
                            <row>
                                <entry><apiname>map_size</apiname>, <apiname>list_size</apiname>,
                                        <apiname>set_size</apiname>,
                                    <apiname>queue_size</apiname></entry>
                                <entry>These methods get the length of the data structure. For maps,
                                    this is the number of key-value pairs inside the map. For lists,
                                    queues, and sets, this is the number of elements in the
                                    structure.<codeblock>len = bucket.list_size('a_list') #=> 42</codeblock></entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table></p><p>Note that there are only <b>two</b> basic types: map and list. Types
                such as <i>queue</i> and <i>set</i> are merely derivatives of
            <i>list</i>.</p></section>
        <section><title>Data Structures and Key-Value APIs</title>Data structures can be accessed
            using key-value APIs as well. In fact, the data structure API is actually a client-side
            wrapper <i>around</i> the key-value and sub-document API. Most of the data structure
            APIs wrap the sub-document API directly. Therefore, for example, the
                <apiname>map_set</apiname> can be implemented as
            follows:<codeblock>import couchbase.subdocument as SD
def map_set(bucket, docid, key, value):
    bucket.mutate_in(docid, SD.upsert(key, value)</codeblock>Some
            data structure operations are compound operations. This means that they do not
            correspond to a single server-side operation. For example, <apiname>set_remove</apiname>
            does not exist on the server. In order to implement <apiname>set_remove</apiname>, it
            would require an implementation like
            so:<codeblock>def set_remove(bucket, docid, value):
    rv = bucket.get(docid)
    doc = rv.value
    try:
        index = doc.index(value)
        bucket.mutate_in(docid, SD.remove('[{0}]'.format(index), cas=rv.cas)
    except ValueError:
        pass</codeblock>In
            the example above, the entire document is fetched and the index of the value is
            retrieved. If the value exists, the index of the value is removed at the server
                side.<note>Because the data structure API is just a wrapper around the various
                key-value APIs, you are free to switch between them in your code.</note></section>
    </body>
</topic>
