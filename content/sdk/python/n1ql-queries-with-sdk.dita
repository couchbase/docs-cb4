<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_bhv_nhq_44">
    <title>N1QL Queries Using the Python SDK with Couchbase Server</title>
    <titlealts><navtitle>N1QL from the SDK</navtitle></titlealts>
    <conbody>
        <note>See <xref href="../n1ql-query.dita#toplevel">Couchbase Developer
                documentation for a quick intro to developing with N1QL</xref></note>
        <section>
            <title>Simple Queries</title>
        <p>To issue N1QL queries, you should create a
            <apiname>couchbase.n1ql.N1QLQuery</apiname> object, and pass it (as the
            <parmname>query</parmname> keyword argument) to the <apiname>n1ql_query()</apiname>
            method in the <apiname>Bucket</apiname> class. Simple queries (that is, ones that are only
            strings and do not use placeholders) can be supplied directly to the
            <apiname>n1ql_query()</apiname> function, which will implicitly create the
            <apiname>N1QLQuery</apiname> object internally.</p>
        <p>The return value from <apiname>n1ql_query()</apiname> is a <apiname>N1QLRequest</apiname>
            object. Iterating over the object will yield the rows returned by the server for the
            given query (as a <codeph>dict</codeph>). Each row represents a row received for the
            query.</p>
        <codeblock outputclass="language-python" spectitle="Simple N1QL Query">for row in bkt.n1ql_query('SELECT * FROM default'):
    print row</codeblock>
        </section>
        <section>
            <title>Querying with Placeholders</title>
            <p>You can use N1QL <xref
                    href="../n1ql-query.dita#toplevel/devguide-named-placeholders"
                    >placeholders</xref> in the query. Placeholders allow you to specify variable
                constraints for an otherwise constant query. Only document fields can be specified using 
                positional and named parameters. To use placeholders, manually construct
                an N1QLQuery object with the base query string, and simply use keyword and
                positional arguments for named or positional placeholders,
                respectively:<codeblock outputclass="language-python" spectitle="Named Placeholders">from couchbase.n1ql import N1QLQuery
# ...
q = N1QLQuery('SELECT fname, lname, age FROM default WHERE age > $age', age=22)
for row in bkt.n1ql_query(q):
print row  # {'age': .., 'lname': ..., 'fname': ...}</codeblock><codeblock spectitle="Positional Placeholders" outputclass="language-python">q = N1QLQuery('SELECT fname, lname, age FROM default WHERE fname LIKE $1 or lname LIKE $2',
              '%ty%', '%thon%')</codeblock></p>
        </section>
        <section>
            <title>Options</title>
            <p>You may configure the <apiname>N1QLQuery</apiname> object with various options to
                control query behavior. You may set the <parmname>query.adhoc</parmname> parameter
                to <codeph>False</codeph> to make use of <xref
                    href="../n1ql-query.dita#toplevel/prepare-stmts">prepared
                    queries</xref><codeblock outputclass="language-python">query = N1QLQuery(query_string)
query.adhoc = False</codeblock>
                and you can also set <parmname>query.consistency</parmname> to
                    <apiname>couchbase.n1ql.CONSISTENCY_REQUEST</apiname> to employ the <xref
                    href="../n1ql-query.dita#toplevel/consistency"
                        ><i>read-your-own-writes</i></xref> consistency
                mechanism.<codeblock outputclass="language-python">from couchbase.n1ql import CONSISTENCY_REQUEST
query.consistency = CONSISTENCY_REQUEST</codeblock></p>
            <p>For queries which are expected to run for a long time, you may set the timeout on a
                per-query basis using the <parmname>query.timeout</parmname>
                parameter:<codeblock outputclass="language-python">query.timeout = 300  # 5 minutes</codeblock></p>
        </section>
        <section>
            <title>No-result queries</title>
            <p>As a convenience for queries which are not intended to yield multiple rows, you may use
                the returned <apiname>N1QLRequest</apiname> object's <apiname>execute()</apiname>
                method. For queries which are intended to return only a single result, you can use the
                <apiname>get_single_result()</apiname> method. Both of the aforementioned methods
                are wrappers that iterate over the object internally and are intended to provide
                additional clarity inside your application's
                code.<codeblock outputclass="language-python">bkt.n1ql_query("CREATE PRIMARY INDEX ON default").execute()</codeblock></p>
        </section>
        <section>
            <title>Index Creation</title>
            <p>In order to query a bucket, it must have an index defined. You can create indexes
                using raw N1QL statements (e.g. <xref
                    href="../../n1ql/n1ql-language-reference/createindex.dita#concept_npk_mth_rq"/>)
                or via the Python SDK's <xref href="managing-clusters.dita#topic_ah5_5hn_qv">cluster
                    management interface</xref></p>
        </section>

    </conbody>
</concept>
