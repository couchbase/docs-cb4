<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_iq4_bts_zs">
    <title>Concurrent Document Mutations</title>
    <shortdesc>You can use the CAS value to control how concurrent document modifications are
        handled. It helps avoid and control potential race conditions in which some mutations may be
        inadvertently lost or overridden by other mutations.</shortdesc>
    <prolog>
        <metadata>
            <othermeta name="langSelector" content="hidden"/>
        </metadata>
    </prolog>
    <conbody>
        <p>The <term>CAS</term> is a value representing the current state of an item. Each time the item
            is modified, its CAS changes.</p>
        <p>The CAS value itself is returned as part of a document’s metadata whenever a document is
            accessed. In the SDK this is present as the <apiname>cas</apiname> field in the
            applicable document container object when an operation is successful.</p>
        <p>CAS is an acronym for <i>Compare And Swap</i>, and is known as a form of optimistic
            locking. The CAS can be supplied as parameters to the <i>insert</i>, <i>upsert</i>,
                <i>replace</i>, and <i>remove</i> operations. When applications provide the CAS,
            server will check the application-provided version of CAS against its own version of the
                CAS:<ul id="ul_cxq_3ts_zs">
                <li>If the two CAS values match (they compare successfully), then the mutation
                    operation succeeds.</li>
                <li>If the two CAS values differ, then the mutation operation fails.</li>
            </ul>CAS, on the server-side might be implemented along these
            lines<codeblock outputclass="language-c">uint Replace(string docid, object newvalue, uint oldCas=0) {
    object existing = this.kvStore.get(docid);
    if (!existing) {
        throw DocumentDoesNotExist();
    } else if (oldCas != 0 &amp;&amp; oldCas != existing.cas) {
        throw CasMismatch();
    }
    uint newCas = ++existing.cas;
    existing.value = newValue;
    return newCas;
}</codeblock></p>
        <section><title>Demonstration</title>The following demonstrates how the server handles CAS.
            A use case for employing the CAS is when adding a new field to an existing document. At
            the application level, this requires the following steps:<ol id="ul_ehb_nts_zs">
                <li>Read entire document.</li>
                <li>Perform modification locally.</li>
                <li>Store new document to server.</li>
            </ol><p>Assume the following two blocks of code are executing concurrently in different
                application instances: <table frame="all" rowsep="2" colsep="2"
                    id="table_x23_rts_zs">
                    <title>CAS flow</title>
                    
                    
                    
                    
                    <tgroup cols="2">
                        <!-- Using an absolute width due to a rendering issue -->
                        <colspec colname="c1" colnum="1" colwidth="500pt"/>
                        <colspec colname="c2" colnum="2" colwidth="500pt"/>
                       
                        <thead>
                            <row>
                                <entry>Thread #1</entry>
                                <entry>Thread #2</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>
                                    <screen>>>> result = cb1.get('docid')
>>> new_doc = result.value
>>> new_doc['field1'] = 'value1'
>>> cb1.replace('docid', new_doc)</screen>
                                </entry>
                                <entry>
                                    <screen>>>> result = cb2.get('docid')
>>> new_doc = result.value
>>> new_doc['field2'] = 'value2'
>>> cb2.replace('docid', new_doc)</screen>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>Retrieving the document again
                yields:<codeblock outputclass="language-python">>>> cb1.get('docid').value
{u'field2': u'value2', u'a_field': u'a_value'}</codeblock></p><p>Note
                that <codeph>field1</codeph> is not present, even though the application inserted it
                into the document. The reason is because the replace on Thread #2 happened to run
                after the replace on Thread #1, however Thread #1’s replace was executed after
                Thread #2’s get: Since the local version of the document on Thread #2 did not
                contain field1 (because Thread #1’s update was not stored on the server yet), by
                executing the replace, it essentially overrode the replace performed by Thread
                #1.</p><table id="table_jvd_b5s_zs">
                <tgroup cols="2">
                    <colspec colnum="1" colname="col1" colwidth="1*"/>
                    <colspec colnum="2" colname="col2" colwidth="14.38*"/>
                    <tbody>
                        <row>
                            <entry dir="ltr">0.00ms</entry>
                            <entry dir="ltr">(#2): <codeph>new_doc =
                                get("docid").value</codeph></entry>
                        </row>
                        <row>
                            <entry dir="ltr">0.00ms</entry>
                            <entry dir="ltr">(#1): <codeph>new_doc =
                                get("docid").value</codeph></entry>
                        </row>
                        <row>
                            <entry dir="ltr">0.00ms</entry>
                            <entry dir="ltr">(#1): <codeph>new_doc["field1"] =
                                "value1"</codeph></entry>
                        </row>
                        <row>
                            <entry dir="ltr">0.00ms</entry>
                            <entry dir="ltr">(#2): <codeph>new_doc["field2"] =
                                "value2"</codeph></entry>
                        </row>
                        <row>
                            <entry dir="ltr">0.01ms</entry>
                            <entry dir="ltr">(#1): <codeph>cb.replace("docid",
                                new_doc)</codeph></entry>
                        </row>
                        <row>
                            <entry dir="ltr">0.02ms</entry>
                            <entry dir="ltr">(#2): <codeph>cb.replace("docid",
                                new_doc)</codeph></entry>
                        </row>
                    </tbody>
                </tgroup>
            </table></section>
        <section>
            <title>Using CAS - Example</title>
            <p>In the prior example, we saw that concurrent updates to the same document may result
                in some updates being lost. This is not because Couchbase itself has lost the updates,
                but because the application was unaware of newer changes made to the document and
                inadvertently override them.<table id="table_fw1_m5s_zs">
                    <title>CAS flow</title>
                    <tgroup cols="2">
                        <colspec colname="c1" colnum="1" colwidth="1.0*" />
                        <colspec colname="c2" colnum="2" colwidth="1.0*" />
                        <thead>
                            <row>
                                <entry />
                                <entry />
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>
                                    <screen>
>>> result = cb1.get('docid')
>>> new_doc = result.value
>>> print new_doc
{u'a_field': u'a_value'}
>>> <b>cur_cas = result.cas</b>
>>> print cur_cas
272002471883283
>>> new_doc['field1'] = 'value1'
>>> new_result = cb1.replace(
       'docid',
       new_doc,
       cas=cur_cas)</screen>
                                    <note>Server's CAS matches <codeph>cur_cas</codeph>. New CAS
                                        assigned</note>
                                    <screen>>>> print new_result.cas
195896137937427</screen>
                                </entry>
                                <entry>
                                    <screen>>>> result = cb2.get('docid')
>>> new_doc = result.value
>>> print new_doc
{u'a_field': u'a_value'}
>>> <b>cur_cas = result.cas</b>
>>> print cur_cas
272002471883283
>>> new_doc['field2'] = 'value2'
>>> new_result = cb2.replace(
       'docid',
       new_doc,
       cas=cur_cas)</screen>
                                    <note type="warning">CAS on server differs:
                                        <codeph>195896137937427</codeph> vs
                                        <codeph>272002471883283</codeph>!</note>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table></p>
        </section>
        <section>
            <title>Handling CAS errors</title>
            <p>If the item’s CAS has changed since the last operation performed by the current
                client (i.e. the document has been changed by another client), the CAS used by the
                application is considered <i>stale</i>. If a <i>stale</i> CAS is sent to the server
                (via one of the mutation commands, as above), the server will reply with an error,
                and the Couchbase SDK will accordingly return this error to the application (either
                via return code or exception, depending on the language).<note>The error returned
                    for a CAS mismatch is the same that is returned when trying to insert an
                    already-existing document. The error code is not ambiguous since the CAS option
                    is only accepted (and only makes sense) for documents which already
                    exist.</note></p>
            <p>How to handle this error depends on the application logic. If the application wishes
                to simply insert a new property within the document (which is not dependent on other
                properties within the document), then it may simply retry the read-update cycle by
                retrieving the item (and thus getting the new CAS), performing the local
                modification and then uploading the change to the server. For example, if a document
                represents a user, and the application is simply updating a user’s information (like
                an email field), the method to update this information may look like
                this:<codeblock outputclass="language-python">def update_email(cb, user_id, email):
    while True:
        result = cb.get(user_id)
        user_doc = result.value
        user_doc['email'] = email
        cb.upsert(user_id, user_doc, cas=result.cas)
        break # Mutation succeeded
    except KeyExistsError:
        # This means the CAS has been modified. We still need to
        # insert the email field, but do not want to override new changes
        continue</codeblock></p>
            <p>Sometimes more logic is needed when performing updates, for example, if a property is
                mutually exclusive with another property; only one or the other can exist, but not
                both.</p>
        </section>
        <section>
            <title>Performance considerations</title>
            <p>CAS operations incur no additional overhead. CAS values are always returned from the
                server for each operation. Comparing CAS at the server involves a simple integer
                comparison which incurs no overhead.</p>
        </section>
        <section>
            <title>CAS value format</title>
            <p>The CAS value should be treated as an opaque object at the application level. No
                assumptions should be made with respect to how the value is changed (for example, it
                is wrong to assume that it is a simple counter value). In the SDK, the CAS is
                represented as a 64 bit integer for efficient copying but should otherwise be
                treated as an opaque 8 byte buffer.</p>
        </section>
        <section>
            <title>Pessimistic locking</title>
            <p>While CAS is the recommended way to perform locking and concurrency control,
                Couchbase also offers explicit <i>locking</i>. When a document is locked, attempts
                to mutate it without supplying the correct CAS will fail.</p>
            <p>Documents can be locked using the <i>get-and-lock</i> operation and unlocked either
                explicitly using the <i>unlock</i> operation or implicitly by mutating the document
                with a valid CAS. While a document is locked, it may be retrieved but not modified
                without using the correct CAS value. When a locked document is retrieved, the server
                will return <codeph>-1</codeph> (or <codeph>0xffffffffffffffff</codeph>) as the CAS
                value.</p>
            <p>This handy table shows various behaviors while an item is locked:<table frame="all"
                    rowsep="1" colsep="1" id="table_ek5_hk5_sx">
                    <title>Behavior of various operations on a locked item</title>
                    <tgroup cols="2">
                        <colspec colname="c1" colnum="1" colwidth="1*"/>
                        <colspec colname="c2" colnum="2" colwidth="1*"/>
                        <thead>
                            <row>
                                <entry>Operation</entry>
                                <entry>Result</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry><i>get-and-lock</i></entry>
                                <entry>Temporary Failure Error.</entry>
                            </row>
                            <row>
                                <entry><i>get</i></entry>
                                <entry>Always succeeds, but with an invalid CAS value returned (so
                                    it cannot be used as an input to subsequent mutations).</entry>
                            </row>
                            <row>
                                <entry><i>unlock</i> with bad/missing CAS value</entry>
                                <entry>Temporary Failure Error</entry>
                            </row>
                            <row>
                                <entry><i>unlock</i> with correct CAS</entry>
                                <entry>Mutation is performed and item is unlocked. It can now be
                                    locked again and/or accessed as usual.</entry>
                            </row>
                            <row>
                                <entry>Mutate (<i>upsert</i>, <i>replace</i>, etc) with bad/missing
                                    CAS value</entry>
                                <entry>KeyExists/BadCAS Error</entry>
                            </row>
                            <row>
                                <entry>Mutate with correct CAS value</entry>
                                <entry>Mutation is performed and item is unlocked. It can now be
                                    locked again and/or accessed as usual.</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table></p>
            <p>A document can be locked for a maximum of 15 seconds, after which the server will
                unlock it. This is to prevent misbehaving applications from blocking access to
                documents inadvertently. You can modify the time the lock is held for (though it can
                be no longer than 15 seconds).</p>
            <p>Be sure to keep note of the <i>cas</i> value when locking a document. You will need
                it when unlocking. The following blocks show how to use <apiname>lock</apiname> and
                    <apiname>unlock</apiname> with the C SDK. This process should be similar for
                other
                SDKs.<codeblock outputclass="language-c">lcb_CMDGET cmd = { 0 };
LCB_CMD_SET_KEY(&amp;cmd, "key", 3);
cmd.lock = 1;
cmd.exptime = 5;
lcb_get3(instance, NULL, &amp;cmd);
lcb_wait(instance);</codeblock><codeblock>static int unlock_only = 0;

void get_handler(lcb_t instance, int cbtype, const lcb_RESPBASE *rb)
{
    const lcb_RESPGET *resp = (const lcb_RESPGET *)rb;

    union {
        lcb_CMDBASE base;
        lcb_CMDSTORE store;
        lcb_CMDUNLOCK unlock;
    } u;

    if (rb->rc == LCB_ETMPFAIL) {
        printf("Key already locked!");
    } else if (rb->rc == LCB_SUCCESS) {
        memset(&amp;u, 0, sizeof u);
        LCB_CMD_SET_KEY(&amp;u.base, rb->key, rb->nkey);
        u.base.cas = rb->cas;
        if (unlock_only) {
            lcb_unlock3(instance, NULL, &amp;u.unlock);
        } else {
            LCB_CMD_SET_VALUE(&amp;u.store, "value", 5);
            u.store.operation = LCB_REPLACE;
            lcb_store3(instance, NULL, &amp;u.store);
        }
    }
}</codeblock>The
                handler will unlock the item either via an explicit unlock operation
                    (<apiname>lcb_unlock3</apiname>) or implicitly via modifying the item with the
                correct CAS.</p>
            <p>If the item has already been locked, the server will respond with
                    <varname>LCB_ETMPFAIL</varname> which means that the operation could not be
                executed temporarily, but may succeed later on.</p>
        </section>
    </conbody>
</concept>
