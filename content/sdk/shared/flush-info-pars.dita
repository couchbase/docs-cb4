<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="toplevel">
  <title>Flushing Buckets</title>
  <body>
    <p id="management-intro">The primary means for managing clusters is through the Couchbase Web UI which provides an
            easy to use interface for adding, removing, monitoring and modfying buckets. In some
            instances you may wish to have a programmatic interface, for example if running as part
            of a setup script, or if setting up buckets for testing.</p>
    <p id="after-creation">Once the bucket has been created, you must wait for it to become
            ready. This is because the bucket is actually created in the background. You may need to
            wait some time until the bucket becomes ready by repeatedly trying to connect to it,
            until it succeeds.</p>
    <note id="update-bucket-warning" type="warning">Note that any property that is not explicitly set when building the
            <apiname>BucketSettings</apiname> will be using the default value. In the case of the update, this is
            not necessarily the currently configured value, so you should be careful to set all properties to their
            correct expected values when updating an existing bucket configuration.</note>
    <p id="flush-intro">When a bucket is flushed, all its content is removed. Because this
            operation is dangerous it is disabled by default for each bucket. Bucket flusing may be
            useful in test environments where it becomes a simpler alternative to removing and
            creating a test bucket. You may enable bucket flushing on a per-bucket basis using the
            Couchbase Web Console or when creating a bucket.</p>
    <p id="index-management">You can create and drop N1QL indexes using the SDK. This is
            especially useful when setting up new applications, or simply when ensuring that a given
            bucket has certain indexes defined. Indexes can be defined using actual N1QL statements
            or by using convenience functions within the SDK.</p>
    <p id="ddoc-intro">You can create, delete, retrieve, and publish design documents (used for MapReduce views)
            using the SDK. This is useful when setting up new applications, updating view
            definitions, or running tests.</p>
    <note id="ddoc-async-warning">Management APIs are considered to be asynchronous, which means you may need to
            wait some time (or poll manually) until the design document becomes available. This
            is done by repeatedly querying the newly created view until it no longer fails with
            a <i>not found</i> error.</note>
    <p id="view-management">Views are stored in design
            documents. The SDK provides convenient methods to create, retrieve, and remove design
            documents. To set up views, you create design documents that contain one or more view
            definitions, and then insert the design documents into a bucket.
            Each view in a design document is represented by a name and a set of MapReduce functions.
            The mandatory map function describes how to select and transform the data from the bucket,
            and the optional reduce function describes how to aggregate the results.</p>
    <note id="one-view-update-warning" type="warning">When you want to update an existing document with a new view (or a
            modification of a view's definition), you can use the <codeph>upsertDesignDocument</codeph> method.
        <p>The catch is that this method needs the list of views in the document to be exhaustive, meaning that if you just create
            the new view definition as previously and add it to a new <codeph>DesignDocument</codeph> that you upsert, all your
            other views will be erased!</p>
        <p>The solution is to perform a <codeph>getDesignDocument</codeph>, add your view definition to the DesignDocument's
            views list, then upsert it. This also works with view modifications, provided the change is in the
            <codeph>map</codeph> or <codeph>reduce</codeph> functions (just reuse the same name for the modified
            <codeph>View</codeph>), or for deletion of one out of several views in the document.</p></note>
  </body>
</topic>
