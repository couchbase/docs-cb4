<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="sdk_user_management">
    
    <!-- This file contains reusable sections, which are all applied to the files named
         "sdk-user-management-overview.dita", and reside in the sdk subfolders for the
         specific languages. Any change that is made here is therefore reflected in each of those
         files.
      -->
    
    <title>
        User Management
    </title>
    
    <shortdesc>
        The SDK now lets you create <i>users</i>, assign them <i>roles</i> and 
        associated <i>privileges</i>, and remove them from the system. 
    </shortdesc>
    
    <body>
        <section id="users_resources_roles_and_privileges">
            <title>
                Users, Resources, Roles, and Privileges
            </title>
            
            <p>
                Couchbase Server 5.0 Enterprise Edition introduces <i>Role-Based
                Access Control</i> for applications. This means that <i>resources</i>
                on a Couchbase cluster can only be accessed by an identified <i>user</i>.
            </p>
            
            <p>
                Each user who attempts resource-access is identified by means
                of the <i>credentials</i> they pass to Couchbase Server, for 
                purposes of <i>authentication</i>: these consist of a <i>username</i> and (typically) a
                <i>password</i>. Once the user is
                authenticated, an <i>authorization</i> process checks the <i>roles</i> with
                which the user is associated. If one or more of these roles correspond to <i>privileges</i>
                that permit the user-requested level of resource-access, access is duly
                granted; otherwise, it is denied.
            </p>
            
            <p>
                Users who have been assigned the <b>Admin</b> role for the cluster are able
                to create, edit, and remove users. The SDK provides APIs to support these
                activities.
            </p>
            
        </section>
        
        <section id="creating_a_user">
            <title>
                Creating a User
            </title>
            
            <p>
                The syntax required for creating a user varies according to language. The
                basic form is as follows:
            </p>
            
            <codeblock><i>boolean</i> <b>upsertUser</b> (<i>String</i> userid, <i>UserSettings</i> settings)</codeblock>
            
            <p>
                The method <b>upsertUser</b> creates a user and adds the user to the Couchbase
                Cluster. The user will subsequently be visible in the <b>Security</b> panel of the
                Couchbase Web Console. Note that successful user-addition results in a user
                <i>locally</i> defined, with <i>username</i> and <i>password</i> stored on
                Couchbase Server: <i>external</i> users (whose credentials reside on a
                network-available server, possibly accessed by means of LDAP) cannot be created
                by this SDK method. If the local user created by <b>upsertUser</b> already
                exists, the previous definition is overwritten.
            </p>
            
            <p>
                The method takes two arguments. The first, a <i>String</i>
                is the user ID of the user to be created: for example, <codeph>johnsmith0325</codeph>,
                or <codeph>user734</codeph>. This must be specified.
            </p>
                
            <p>
                The second is a <i>UserSettings</i> object. This takes
                the following form:
            </p>
                
            <codeblock><b>UserSettings</b> {
    <i>String</i> password;
    <i>String</i> name;
    <i>Role[]</i> roles;
}</codeblock>
            
            <p>
                The object contains three data-members. The first is a <i>String</i> that
                specifies the user's password: this must be provided. The second is a
                <i>String</i> that specifies the user's name (for example, <codeph>John Smith</codeph>):
                this is optional, and so may be omitted. The third is an
                array of <i>Role</i> objects: this must be specified. Each <i>Role</i> 
                object takes the following form:
            </p>
            
            <codeblock><b>Role</b> {
    <i>String</i> role;
    <i>String</i> bucket_name;
}</codeblock>
            
            <p>
                The object's two data-members are both <i>Strings</i>, and must both be
                specified.
                The <i>String</i> specified as the role must correspond to a role supported
                by Couchbase Server. The <i>String</i> specified as the bucket_name must 
                either correspond to
                a bucket currently defined on Couchbase Server; or be the asterisk 
                character (<i>*</i>), meaning <i>all buckets</i>.
            </p>
            
            <p>
                The method returns a <i>boolean</i>, which is <codeph>true</codeph> if
                the operation is successful, otherwise <codeph>false</codeph>.
            </p>
                
        </section>
        
        <section id="listing_users">
            <title>
                Listing Users
            </title>
            
            <p>
                The basic form of the method used to return currently defined
                users is as follows:
            </p>
            
            <codeblock><i>List&lt;User&gt;</i> <b>getUsers</b>()</codeblock>
            
            <p>
                The method returns a list of <i>User</i> objects, each of which
                takes the following form:
            </p>
                
            <codeblock><b>User</b> {
    <i>String</i> name;
    <i>String</i> id;
    <i>String</i> domain;
    <i>Role[]</i> roles;
}</codeblock>
            
            <p>
                The name is the full name of the user. The id is the user's ID.
                The domain is either <codeph>local</codeph> or <codeph>external</codeph>.
                Each Role object in the Role-array has the form already described above, 
                in 
                <i>Creating a User</i>. 
            </p>
            
        </section>
        
        <section id="getting_a_user">
            <title>
                Getting a User
            </title>
            
            <p>
                The basic form of the method used to return an already defined user
                is as follows:
            </p>
            
            <codeblock>User <b>getUser</b> (<i>String</i> userid)</codeblock>
            
            <p>
                The method returns a <i>User</i> object, which takes the
                following form:
            </p>
            
            <codeblock><b>User</b> {
    <i>String</i> name;
    <i>String</i> id;
    <i>String</i> domain;
    <i>Role[]</i> roles;
}</codeblock>

        <p>
            The name is the full name of the user. The id is the 
            user's ID. The domain is either 
            <codeph>local</codeph> or <codeph>external</codeph>. Each Role 
            object in the Role-array has the form described above, in 
            <i>Creating a User</i>.
        </p>

        </section>
        
        <section id="removing_a_user">
            <title>
                Removing a User
            </title>
            
            <p>
                The basic form of the method used to remove users is as follows:
            </p>
            
            <codeblock><i>boolean</i> <b>removeUser</b> (<i>String</i> userid)</codeblock>
            
            <p>
                The method's sole argument is the id of the user to be removed from
                the system, specified as a <i>String</i>. The method returns 
                a <i>boolean</i>, whose value is <codeph>true</codeph> if
                the operation is successful, otherwise <codeph>false</codeph>.
            </p>
            
        </section>
 
    </body>
        
</topic>
