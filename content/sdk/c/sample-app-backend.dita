<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="java-sample-app-backend">
    <title>C Sample App Backend Tutorial</title>
    <titlealts>
        <navtitle>Sample App Backend</navtitle>
    </titlealts>
    <body>
        <p>This page will walk you through how some of the queries may be constructed using the C
            SDK. The sample app uses the C API with a C++ JSON library (<xref
                href="https://github.com/open-source-parsers/jsoncpp" format="html" scope="external"
                >json-cpp</xref>), though you are free to use your own.</p>
        <section>
            <note type="tip"> This tutorial focuses on querying through N1QL and FTS rather than
                views. If you want information about using views, see the following resources: <ul>
                    <li>General Information about views: <xref
                            href="../../architecture/incremental-map-reduce-views.dita"/>
                    </li>
                    <li>Querying views:<xref
                            href="../../indexes/querying-using-map-reduce-views.dita"/>
                    </li>
                </ul></note>
        </section>
        <section>
            <title>Walking Through the API</title>
            <p>The following sections lead you through the primary functions of the sample
                application. </p>
            <p>This shows you how to use the various features and services of Couchbase including:
                    <b>connecting</b> to a cluster and bucket, <b>key/value</b> iteraction, document
                    <b>query through N1QL</b> and <b>full text searches</b>.</p>
        </section>
        <section><title>Configure and Bootstrap the SDK</title><p><b>Relevant Documentation
                    Topics</b>: <xref href="managing-connections.dita"/></p><p>The first step is to
                let the application connect to your cluster and obtain a reference to a
                    <codeph>lcb_t</codeph> (the Bucket is the entry point for the whole storage
                API). </p>
            <b>Connecting to a Bucket</b>
            <codeblock outputclass="language-cpp">lcb_t instance;
lcb_create_st options;
memset(&amp;options, 0, sizeof options);
options.version = 3;
options.v.v3.connstr = "couchbase://localhost/travel-sample";
/* Username and password for Couchbase 5.0+ */
options.v.v3.username = "mark";
options.v.v3.passwd = "secret";
lcb_create(&amp;instance, &amp;options);
lcb_connect(instance);
lcb_wait(instance);
if (lcb_get_bootstrap_status(instance) != LCB_SUCCESS) {
    printf("Error while bootstrapping: %s\n", lcb_strerror(NULL, lcb_get_bootstrap_status(instance)));
    // .. handle error further..
}</codeblock><note
                type="tip">You could make the bootstrap process safer by providing a list of
                hostnames/IPs to bootstrap from (in case the one node you provided for bootstrap is
                unavailable when creating the Cluster reference). In production the best practice is
                to provide at least 3 nodes in the boostrap list. You can separate the list of
                hostnames in the connection string using a comma, e.g.
                    <codeph>couchbase://host1,host2,host3</codeph></note>The
                <apiname>lcb_create</apiname> function creates the raw library handle. The
                <apiname>lcb_connect</apiname> function starts the connection attempt. The
                <apiname>lcb_wait</apiname> function must be called to actually wait for the
            connection to complete. Finally, the status of the initial bootstrapping connection can
            be obtained using <apiname>lcb_get_bootstrap_status</apiname>. If successful, it will
            return <codeph>LCB_SUCCESS</codeph>; otherwise a textual description of the error can be
            obtained using the <apiname>lcb_strerror</apiname> function.</section>
        <section><title>Manage Users using Key/Value API </title><p><b>Relevant Documentation
                    Topics</b>: <xref href="document-operations.dita"/>, <xref
                    href="async-programming.dita"/></p><p>Couchbase Server is a document-oriented
                database which provides access to your data both through its document ID (for high
                performance access), as well as through views, N1QL (as powerful query languages)
                and FTS.</p><b>Creating New Users</b>
            <p> Next, prepare the content for the new user (as a JSON object) and the associated
                document (in order to give it an ID):
                </p><codeblock outputclass="language-cpp">Json::Value doc(Json::objectValue);
std::string username = get_user();
doc["type"] = "user";
doc["name"] = username;
// make_pass_hash() is just a stub.
doc["password"] = make_pass_hash(password);

std::string docbuf(Json::FastWriter().write(doc));
std::string docid(std::string("user::") + username);

lcb_CMDSTORE scmd = { 0 };
LCB_CMD_SET_KEY(&amp;scmd, docid.c_str(), docid.size());
LCB_CMD_SET_VALUE(&amp;scmd, docbuf.c_str(), docbuf.size());
// Ensure you've set a callback using lcb_install_callback3(instance, LCB_CALLBACK_STORE, your_callback);</codeblock><note
                type="tip"> The <codeph>"user::"</codeph> prefix is arbitrary to this application,
                this is just a convention that the app uses to obtain unique keys and have
                additional information in it, but the key could have been anything (even sequence
                numbers or UUIDs).</note><p>Now it is time to use the Couchbase Server key/value API
                to store the document. Note that you need to install a callback to check the result
                of the storage operation (using <apiname>lcb_install_callback3</apiname>), in case
                it
                failed.</p><codeblock outputclass="language-cpp">lcb_store3(instance, NULL, &amp;scmd);</codeblock><note
                type="tip">When it comes to storing a document, you have three choices of operation,
                which you can set using the <apiname>lcb_CMDSTORE::operation</apiname> field<ul>
                    <li><codeph>LCB_ADD</codeph> will only work if no document currently exists for
                        the given ID, otherwise a <codeph>LCB_KEY_EEXISTS</codeph> will be received
                        in the callback.</li>
                    <li><codeph>LCB_REPLACE</codeph> on the contrary will only work if the document
                        does already exist (otherwise a <codeph>LCB_KEY_ENOENT</codeph> will be
                        received in the callback).</li>
                    <li><codeph>LCB_SET</codeph> will always work, replacing or creating the
                        document as needed. This is the default operation.</li>
                </ul></note>
            <b>Checking Login by Getting the User's Document</b>
            <codeblock outputclass="language-cpp">std::string docid(std::string("user::") + username);
lcb_CMDGET cmd = { 0 };
LCB_CMD_SET_KEY(&amp;cmd, docid.c_str(), docid.size());
lcb_get3(instance, NULL, &amp;cmd);
lcb_wait(instance);</codeblock>Most
            of the action takes place in the
            callback:<codeblock outputclass="language-cpp">static void get_callback(lcb_t, int, const lcb_RESPGET* resp) {
    if (resp->rc == LCB_KEY_ENOENT) {
        // User doesn't exist. Handle this!
    } else if (resp->rc != LCB_SUCCESS) {
        // Other error!?
    }

    Json::Value value;
    const char *encoded = reinterpret_cast&lt;const char *>(resp->value);
    // Decode JSON
    if (!Json::Reader().parse(encoded, encoded + resp->nvalue, value)) {
        // Parse error!
    }

    std::string input_pass = get_input_pass(resp->cookie);
    if (make_pass_hash(input_pass) != value["password"]) {
        // Password doesn't match!
    }
    // More handling here
}</codeblock></section>
        <section><title>A First N1QL Query: Finding Airports</title><p>In the SDK, there is a
                    <apiname>lcb_n1ql_query</apiname> function that can issue N1QL queries against
                Couchbase. The function accepts an <apiname>lcb_CMDN1QL</apiname> structure which
                contains the encoded query. You can use the <apiname>lcb_N1QLPARAMS</apiname>
                structure and its associated functions to help you construct the encoded query. If
                you're using C++ (as the sample application is), it might be simpler to simply
                encode the query per the specification.</p><note type="tip">N1QL is a super-set of
                SQL, so if you're familiar with SQL you'll feel at ease.</note><p>Only the airport
                names are required for this part of the application, therefore just the airport name
                from relevant documents in the bucket should be selected. As the application needs
                to filter relevant document on a criteria that depends on the input length, the
                SELECT and FROM clauses are performed
                first:</p><codeblock outputclass="language-cpp">std::string stmt("SELECT airportname FROM ");
stmt.append("`").append("travel-sample").append("`"); // Backticks, because '-' in the bucket name must be escaped
stmt.append(" WHERE ");</codeblock><p>Then
                the correct fields can be chosen to look into, depending on the length of the
                input.</p><codeblock outputclass="language-cpp">std::string query_arg;
if (params.size() == 3) {
    stmt.append("faa = $1");
    query_arg = params;
} else if (params.size() == 4) {
    stmt.append("icao = $1");
    query_arg = params;
} else {
    stmt.append("airportname LIKE $1");
    query_arg = "%" + params + "%";
}

// Now encode everything
Json::Value query(Json::objectValue);
query["statement"] = stmt;
query["args"].append(query_arg);

std::string encoded(Json::FastWriter().write(query));</codeblock><p>
                Then the statement is actually
                    executed:</p><codeblock outputclass="language-cpp">lcb_CMDN1QL cmd = { 0 };
cmd.query = query.c_str();
cmd.nquery = query.size();
cmd.callback = query_callback; // We'll show this function soon
if (lcb_n1ql_query(instance, NULL, &amp;cmd) != LCB_SUCCESS) {
    // Handle error
}
lcb_wait(instance);</codeblock><p><codeph>query_callback</codeph>
                then handles the
            results.</p><codeblock outputclass="language-cpp">static void query_callback(lcb_t, int, const lcb_RESPN1QL *resp) {
    if (resp->rc != LCB_SUCCESS) {
        // Problem! Handle this
    }
    if (resp->rflags &amp; LCB_RESP_F_FINAL) {
        // Last response in sequence. All rows have already been received
    }

    // Normal response:
    Json::Value json;
    // Decode the row as JSON
    Json::Reader().parse(resp->row, resp->row + resp->nrow, json);
    
    std::cout &lt;&lt; json["airportname"] &lt;&lt; std::endl;
}</codeblock>The
            query callback is invoked once for each result row received. It is invoked one last time
            with the <apiname>LCB_RESP_F_FINAL</apiname> flag set (in the response's
                <codeph>rflags</codeph> field) as a terminator to indicate that no more rows
            remain.</section>
        <section>
            <title>More Complex Queries: Finding Routes</title>
            <p><b>Relevant Documentation Topics</b>: <xref href="n1ql-queries-with-sdk.dita"/>.</p>
            <p>In this service, there are two more complex queries. The first aims at transforming
                the human-readable airport name for the departure and arrival airports to FAA codes: </p>
            <codeblock outputclass="language-sql"><![CDATA[SELECT faa AS fromAirport FROM `travel-sample` WHERE airportname = "Los Angeles Intl"
UNION SELECT faa AS toAirport FROM `travel-sample` WHERE airportname = "San Francisco Intl"]]></codeblock>
            <p>The second aims at constructing the result set of available flight paths that connect
                the two airports: </p>
            <codeblock outputclass="language-sql"><![CDATA[SELECT a.name, s.flight, s.utc, r.sourceairport, r.destinationairport, r.equipment
FROM `travel-sample` AS r
UNNEST r.schedule AS s
JOIN `travel-sample` AS a ON KEYS r.airlineid
WHERE r.sourceairport = "LAX" AND r.destinationairport = "SFO" AND s.day = 6
ORDER BY a.name ASC]]></codeblock>
            <p>A specificity of N1QL that can be seen in the second statement is
                    <codeph>UNNEST</codeph>. It extracts a sub-JSON object and puts it at the same
                root level as the bucket, so its possible to do joins on each element in this
                sub-JSON as if they were entries in a left-hand side bucket. </p>
        </section>
        <section>
            <title>Indexing the Data: N1QL &amp; GSI</title>
            <p>Index management is a bit more advanced (and is already done when loading the
                sample), so now that you've learned the bsaics of N1QL, you can have a look at it.
                For N1QL to work, you must first ensure that at least a <codeph>Primary
                    Index</codeph> has been created. For that you can issue the query: </p>
            <codeblock outputclass="language-sql">CREATE PRIMARY INDEX ON `travel-sample`</codeblock>
            <p>Refer to the above example on how to execute this query from the SDK. You'll still
                need a callback, though there will be no result rows (but the final callback will be
                invoked always).</p>
            <p>You can also create secondary indexes on specific fields of the document, for better
                performance: </p>
            <codeblock outputclass="language-sql">CREATE INDEX `def_username` ON `travel-sample`(username)</codeblock>
            <p>In this case, give a name to your index (<codeph>def_username</codeph>), specify the
                target bucket (<codeph>travel-sample</codeph>) AND the field(s) in the JSON to index
                    (<codeph>username</codeph>). </p>
        </section>
        <section>
            <title>Full Text Search: Finding Hotels</title>
            <p><b>Relevant Documentation Topics</b>: <xref href="full-text-searching-with-sdk.dita"
                />, <xref href="../subdocument-operations.dita"/>.</p>
            <p>In this service, hotels are searched for using more fuzzy criterias, like the content
                of the address or the description of an hotel. This is done using Full Text Search
                (FTS). When some results match the specified criteria, only the relevant data for
                each result to be displayed in the UI is fetched using the subdocument API. </p>
            <p>To find a hotel based on its location and its description, first a JSON query body is
                created:</p>
            <codeblock outputclass="language-cpp">Json::Value query(Json::objectValue);
query["query"]["conjuncts"] = Json::Value(Json::arrayValue);
Json::Value typeQuery(Json::objectValue);
typeQuery["term"] = "hotel";
typeQuery["field"] = "type";
query["query"]["conjuncts"].append(typeQuery)</codeblock>
            <p>A conjunction query allows you to combine multiple FTS queries into one, in an AND
                fashion. This query always includes an exact match criteria that restricts it to the
                    <codeph>hotel</codeph> data type (as reflected in the <codeph>type</codeph>
                field of the JSON document).</p>
            <p>If the user provided a location keyword, a second component is added to the FTS query
                that will look for that keyword in several address-related fields of the document.
                This is done in an OR fashion, using <codeph>disjuncts</codeph>:</p>
            <codeblock outputclass="language-cpp">if (!location.empty() &amp;&amp; location != "*") {
    Json::Value locationQuery(Json::objectValue);
    Json::Value disjuncts(Json::objectValue);
    disjuncts["disjuncts"] = Json::Value(Json::arrayValue);
    Json::Value matchPhrase(Json::objectValue);

    matchPhrase["match_phrase"] = location
    std::array&lt;const char*, 4> fields({"country", "city", "state", "address"});
    for (const auto ptr : fields) {
        matchPhrase["field"] = ptr;
        disjuncts.append(matchPhrase);
    }
    query["query"]["conjuncts"].append(disjuncts);
}</codeblock>
            <codeblock outputclass="language-cpp">if (!description.empty() &amp;&amp; description != "*") {
    Json::Value disjuncts(Json::objectValue);
    std::array&lt;const char *, 2> fields({"description", "name"});
    for (const auto field : fields) {
        Json::Value matchPhrase(Json::objectValue);
        matchPhrase["field"] = field;
        matchPhrase["match_phrase"] = description;
    }
    query["query"]["conjuncts"].append(disjuncts);
}</codeblock>
            <p>Before the query is executed, you can limit the number of results to be
                returned:<codeblock outputclass="language-cpp">query["size"] = 100;</codeblock></p>
            <p>The compound FTS query is now ready to be executed.</p>
            <codeblock outputclass="language-cpp">lcb_CMDFTS cmd = { 0 };
std::string buf(Json::FastWriter().write(query));
cmd.query = buf.c_str();
cmd.nquery = buf.size();
cmd.callback = search_callback; // Defined later
lcb_fts_query(instance, NULL, &amp;cmd);
lcb_wait(instance);</codeblock>
            <p>The second step of working with hotels is done inside the callback. The callback is
                very similar to the N1QL callback.</p>
            <p>The FTS are iterated over in the callback, and the document corresponding to each
                result is fetched. In actuality, only the parts of the document that will be
                displayed in the UI are required. This is where the sub-document API comes in.</p>
            <p>The sub-document API allows you to fetch or mutate only a set of paths inside a JSON
                document, without having to send the whole document back and forth. This can save
                network bandwidth if the document is large and the parts that we're interested in
                are small. The callback iterates over each result of the FTS search then triggers a
                subdoc call:</p>
            <p>
                <codeblock outputclass="language-cpp">static void search_callback(lcb_t instance, int, const lcb_RESPFTS* resp) {
    if (resp->rc != LCB_SUCCESS) {
        // ...
    }
    if (resp->rflags &amp; LCB_RESP_F_FINAL) {
        // ...
    }
    
    Json::Value row;
    Json::Reader().parse(resp->row, resp->row + resp->nrow, row);
    std::string docid(row["id"]);
    // Fetch the various subdoc fields:
    std::vector&lt;lcb_SDSPEC> specs;
    std::array&lt;const char *, 6> fields({"country", "city", "state", "address", "name", "description"});
    for (auto field : fields) {
        lcb_SDSPEC spec = { 0 };
        spec.sdcmd = LCB_SDCMD_GET;
        LCB_SDSPEC_SET_PATH(&amp;spec, field, strlen(field));
        specs.push_back(spec);
    }
    lcb_CMDSUBDOC cmd = { 0 };
    LCB_CMD_SET_KEY(&amp;cmd, docid.c_str(), docid.size());
    cmd.specs = &amp;specs[0];
    cmd.nspecs = specs.size();
    lcb_subdoc3(instance, NULL, &amp;cmd);
    // Note, the above requires that the subdoc callback has been installed.
}</codeblock>
            </p>
            <codeblock outputclass="language-cpp">static void subdoc_callback(lcb_t, int, const lcb_RESPSUBDOC *resp) {
    if (resp->rc != LCB_SUCCESS) {
        // Couldn't get hotel description!
    }
    // Fields are retrieved in order; so the first field is 'country',
    // the second is 'city', and so on:
    lcb_SDENTRY ent;
    size_t iter = 0;
    lcb_sdresult_next(resp, &amp;ent, &amp;iter);
    printf("Country is: %.*s\n", ent.value, ent.nvalue);
    // and so on..
}</codeblock>
        </section>
    </body>
</topic>
