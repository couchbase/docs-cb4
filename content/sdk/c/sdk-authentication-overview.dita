<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="sdk_authentication">
    
    <title>
        Authentication
    </title>
    
    <shortdesc>
        RBAC requires that
        users pass appropriate <i>credentials</i> to Couchbase Server in order to access
        cluster-resources. The SDK provides enhanced support for the passing of credentials.
    </shortdesc>
    
    <body>
        
        <section conref="../shared/reusable/sdk-authentication-overview.dita#sdk_authentication/RBAC_and_the_SDK">
        </section>
        
        <section conref="../shared/reusable/sdk-authentication-overview.dita#sdk_authentication/authenticating_with_legacy_sdk_versions">   
        </section>
        
        <section>
            
            <title>
                Passing Credentials
            </title>
            
            <p>
                The most recent versions of the SDK are RBAC-enabled, and provide 
                enhanced support for authentication. Code examples for C can be found in 
                <xref href="./start-using-sdk.dita" scope="local" format="dita">Getting Started with the SDK</xref>,
                and also as part of the
                <xref href="./sdk-user-management-example.dita" scope="local" format="dita">Sample Code</xref>
                provided to demonstrate user management.
            </p>
            
        </section>
        
        <section id="c_upgrading_to_rbac_sdk_versions">
            <title>
                Upgrading to RBAC-Enabled SDK-Versions
            </title>
            
            <p>
                The last pre-RBAC version of the C SDK was 2.7.3. The first RBAC-enabled version was
                2.7.4. See the SDK 
                <xref href="/server/other-products/release-notes-archives/c-sdk" format="html" scope="peer">Release Notes</xref>
                for more information.
            </p>
            
            <p>
                With the most recent versions of the SDK, the legacy authentication interface
                and
                the new, optimized authentication
                interface can both be used: each supports access to buckets on Couchbase Servers
                whose version is either 5.0 and beyond, or pre-5.0.
            </p>
        </section>
        
        <section>
            <title>
                Further Information on RBAC 
            </title>
            
            <p>
                All aspects of the Couchbase RBAC system are covered in the section
                <xref href="../../security/security-authorization.dita" scope="local" format="dita">Authorization</xref>.
                Specifically, for information on:
            </p>
            
            <ul>
                <li>
                    Adding <i>Users</i> and assigning <i>roles</i>, by means of
                    the Couchbase Web Console, see 
                    <xref href="../../security/security-rbac-for-admins-and-apps.dita" scope="local" format="dita">Creating
                        and Managing Users with the UI</xref>.
                    
                    <p>
                        
                    </p>
                </li>
                
                <li>
                    <i>Roles</i> required for resource-access, and the privileges they
                    entail, see
                    <xref href="../../security/security-roles.dita" scope="local" format="dita">Roles</xref>.
                    
                    <p>
                        
                    </p>
                </li>
                
                <li>
                    <i>Resources</i> controlled by Couchbase RBAC, see
                    <xref href="../../security/security-resources-under-access-control.dita" scope="local" format="dita">Resources
                        Under Access Control</xref>.
                </li>
            </ul>
        </section>
        
        <section>
            <title>
                Certificate-Based Authentication
            </title>
            
            <p>
                Couchbase Server supports the use of X.509 certificates to authenticate clients. This allows
                authenticated users to access specific resources by means of the data service (no other service
                is currently available to clients through this form of authentication). 
            </p>
            
            <p>    
                The process relies on a certificate
                authority, for the issuing of certificates that validate identities. A certificate includes
                information such as the name of the entity it identifies, an expiration date, the name of the authority
                that issued the certificate, and the digital signature of the authority.
                A client attempting to access Couchbase Server can present a certificate to the server, allowing
                the server to check the validity of the certificate. If the certificate is valid, the user
                under whose identity the client is running,
                and the roles assigned that user, are verified. If the assigned roles are appropriate for
                the level of access requested to the specified resource, access is granted.
            </p>
            
            <p>
                The C SDK has supported working with X.509 certificates since 2.8.4. Version 2.8.5 of libcouchbase added 
                the ability for the SSL trust store to be kept in a separate file. The trust store has to be specified 
                with option <codeph>truststorepath=â€¦</codeph>, otherwise the library will expect it to be stored with the 
                certificate in <codeph>certpath=</codeph>, and the trust store and certificate concatenated in the certpath.
            </p>
            
            <p>
                This shell script will generate the client certificate - you will need to ensure that you have 
                <xref href="https://www.openssl.org" format="html" scope="external">OpenSSL</xref> installed on your system:
                <codeblock>export CB_ROOT=/opt/couchbase
 
export TOPDIR=SSLCA
export ROOT_DIR=rootdir
export CLIENT_DIR=clientdir
export INT_DIR=intdir
export ROOT_CA=ca
export INTERMEDIATE=int
export CLIENT=client
export CHAIN=chain
 
export ADMINCRED=Administrator:password
export ip=127.0.0.1
export USERNAME=testuser
 
cd ${TOPDIR}
 
mkdir -p ${CLIENT_DIR}
 
cd ${CLIENT_DIR}
openssl genrsa -out ${CLIENT}.key 2048
openssl req -new -key ${CLIENT}.key -out ${CLIENT}.csr -subj "/CN=${USERNAME}/OU=None/O=None/L=None/S=None/C=US"
openssl x509 -req -in ${CLIENT}.csr -CA ../${INT_DIR}/${INTERMEDIATE}.pem \
  -CAkey ../${INT_DIR}/${INTERMEDIATE}.key -CAcreateserial \
  -CAserial ../${INT_DIR}/intermediateCA.srl -out ${CLIENT}.pem -days 365
 
cat ./${CLIENT}.pem ../${INT_DIR}/${INTERMEDIATE}.pem ../${ROOT_DIR}/${ROOT_CA}.pem > ./${CHAIN}.pem</codeblock>Which
                is then used by passing <codeph>${CLIENT_DIR}/${CHAIN}.pem</codeph> as the <codeph>certpath</codeph> 
                option, and <codeph>${CLIENT_DIR}/${CLIENT}.key</codeph> as <codeph>keypath</codeph> in the connection string (and don't forget couchbase<b><i>s</i></b> or http<b><i>s</i></b> in the schema). For
                example:<codeblock>couchbases://127.0.0.1?certpath=/path/to/chain.pem&amp;keypath=/path/to/client.key</codeblock></p>

        </section>

    </body>
        
</topic>
