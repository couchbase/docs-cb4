<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="toplevel">
    <title>Install and Start Using the C (libcouchbase) SDK with Couchbase Server</title>
    <titlealts><navtitle>Start Using the SDK</navtitle></titlealts>
    <shortdesc>The Couchbase C SDK (<codeph>libcouchbase</codeph>) enables C and C++ programs to access
        a Couchbase cluster. The C SDK is also commonly used as a core dependency of SDKs written in
        other language to provide a common implementation and high performance.</shortdesc>
    <body>
        <section>
            <title>Features</title>
            <p><ul id="ul_uny_zlc_bv">
                    <li>Cross-Platform: Officially supported on <i>Linux</i>, <i>Mac OS X</i>, and
                            <i>Microsoft Windows</i> (though it is also known to run on other
                        platforms).</li>
                    <li>Key-Value (CRUD) operations (<apiname>lcb_get3</apiname>,
                            <apiname>lcb_store3</apiname>, etc.)</li>
                    <li>N1QL query operations (<apiname>lcb_n1ql_query</apiname>)</li>
                    <li>Map Reduce (view) query operations (<apiname>lcb_view_query</apiname>)</li>
                    <li>Secure SSL connections (Couchbase Enterprise only)</li>
                <li>Pluggable non-blocking event loops such as <b>libevent</b>, <b>libev</b>, and <b>libuv</b>-
                        integrate with your own non-blocking application, or use
                            <apiname>lcb_wait</apiname> in blocking code</li>
                </ul>Note that SSL and N1QL features depend on server support. See <xref
                    href="compatibility-versions-features.dita#topic_xx5_sl5_qv"/> to see which
                server versions support which features.</p>
        </section>
        <section>
            <title>Platform support and installation</title>
            <p>The Couchbase C SDK can be installed via apt or deb repositories on Linux; homebrew
                on Mac OS X; and <xref href="#toplevel/install-windows">binary archives for
                    Microsoft Windows</xref>. It may also be <xref
                    href="https://github.com/couchbase/libcouchbase" format="html" scope="external"
                    >built from source</xref> on any of the platforms mentioned above, and more.</p>
        </section>
        <section id="install-linux"><title>Installing on Linux</title><p>For installation on Linux,
            install the <i>couchbase-release</i> repository, and then install the
                <i>libcouchbase</i> packages. The following examples download and install
                <i>couchbase-release</i> repsitory, a C and C++ compiler, and the C SDK core
                (<i>libcouchbase2-core</i>), command line tools (<i>libcouchbase2-bin</i>), and the
            development tools (<i>libcouchbase-devel</i> [RPM] or <i>libcouchbase-dev</i>
            [DEB]).</p> <codeblock spectitle="Debian and Ubuntu" outputclass="language-bash"># Only needed during first-time setup:
wget http://packages.couchbase.com/releases/couchbase-release/couchbase-release-1.0-4-amd64.deb
sudo dpkg -i couchbase-release-1.0-4-amd64.deb
# Will install or upgrade packages
sudo apt-get update
sudo apt-get install libcouchbase-dev libcouchbase2-bin build-essential</codeblock><codeblock spectitle="RHEL and CentOS" outputclass="language-bash"># Only needed during first-time setup:
wget http://packages.couchbase.com/releases/couchbase-release/couchbase-release-1.0-4-x86_64.rpm
sudo rpm -iv couchbase-release-1.0-4-x86_64.rpm
# Will install or upgrade existing packages
sudo yum install libcouchbase-devel libcouchbase2-bin gcc gcc-c++</codeblock>
            <note>You should install the <codeph>libcouchbase2-libevent</codeph> or <codeph>libcouchbase2-libev</codeph>
                plugin in case your application will use more than 1024 file descriptors. The default
                    <codeph>select()</codeph> based event loop only supports 1024 file
                descriptors.</note></section>
        <section id="install-osx">
            <title>Installation on Mac OS X</title>
            <p>To install the library on Mac OS X, first install the de-facto package manager for OS
                X: <xref href="http://brew.sh/" format="html" scope="external">homebrew</xref>. Once
                    <i>homebrew</i> is
                configured:<codeblock outputclass="language-bash">brew update # get list of latest packages
brew install libcouchbase</codeblock></p>
        </section>
        <section id="install-windows">
            <title>Installation on Microsoft Windows</title>
            <p>See <xref href="/server/other-products/release-notes-archives/c-sdk" format="html"
                    scope="peer">Installation and Release Notes</xref> section for details.</p>
        </section>
        <section><title>Installing from Source Code</title>You may install the library from source
            code, either via a repository checkout or using a release tarball (download links may be
            found at <xref href="/server/other-products/release-notes-archives/c-sdk" format="html"
                scope="peer">Installation and Release Notes</xref>. Follow the instructions in the
                <filepath>README.markdown</filepath> file at the top of the source tree.</section>
        <section>
            <title>Documentation and Examples</title>
            <p>
                <ul id="ul_hyq_xnc_bv">
                    <li>A reference guide (this manual) is suitable for a general overview and
                        learning how to use the library.</li>
                    <li>The <xref format="html" scope="external" keyref="lcb-api-link">API documentation</xref> is generated from comments in the header and covers
                        all the APIs of the library.</li>
                    <li>Small standalone examples can be found in the <xref
                            href="https://github.com/couchbase/libcouchbase/tree/master/example"
                            format="html" scope="external">github repository</xref>.</li>
                    <li>Other Couchbase SDKs are written on top of the C SDK and show more complex
                        usage of the library's features:<ul id="ul_i2y_l4c_bv">
                            <li><xref href="https://github.com/couchbase/couchbase-python-client"
                                    format="html" scope="external">Python SDK</xref></li>
                            <li><xref href="https://github.com/couchbase/couchnode" format="html"
                                    scope="external">Node.js SDK</xref></li>
                        </ul></li>
                    <li>The library's own <codeph>cbc</codeph> (<xref
                            href="https://github.com/couchbase/libcouchbase/blob/master/tools/cbc.cc"
                            format="html" scope="external"/>) and <codeph>cbc-pillowfight</codeph>
                            (<xref
                            href="https://github.com/couchbase/libcouchbase/blob/master/tools/cbc-pillowfight.cc"
                            format="html" scope="external"/>) utilities. Note that these tools may
                        use internal APIs not intended for public use.</li>
                    <li>C++11 wrapper (<xref
                            href="https://github.com/couchbaselabs/libcouchbase-cxx" format="html"
                            scope="external"/>, <i>not officially supported</i>)</li>
                </ul>
            </p>
            <p>Information on new features, fixes, known issues as well as information on how to
                install older release versions is available in the <xref
                    href="/server/other-products/release-notes-archives/c-sdk" format="html"
                    scope="peer">release notes</xref>.</p>
        </section>
        <section><title>Hello Couchbase</title>A simple example below (requires version 2.5.6 or
            higher to function). Error checking is omitted for
            brevity.<codeblock outputclass="language-c">#include &lt;libcouchbase/couchbase.h>

static void
opCallback(lcb_t instance, int cbtype, const lcb_RESPBASE *rb) {
    fprintf(stderr, "%.*s: %s... ", (int)rb->nkey, rb->key, lcb_strcbtype(cbtype));
    if (rb->rc != LCB_SUCCESS) {
        fprintf(stderr, "%s\n", lcb_strerror(NULL, rb->rc));
    } else {
        fprintf(stderr, "OK");
        if (cbtype == LCB_CALLBACK_GET) {
            const lcb_RESPGET *rg = (const lcb_RESPGET *)rb;
            fprintf(stderr, "... Value: %.*s\n", (int)rg->nvalue, rg->value);
        } else {
            fprintf(stderr, "\n");
        }
    }
}

int main(int argc, char **argv)
{
    assert(lcb_version_g >= 0x020506 &amp;&amp; "This example requires 2.5.6 or greater");

    lcb_t instance;
    lcb_create_st options;
    memset(&amp;options, 0, sizeof options);
    options.version = 3;
    options.v.v3.connstr = "couchbase://localhost/bucketname";
    options.v.v3.username = "mark";
    options.v.v3.passwd = "s3cr3t";
    lcb_error_t rc = lcb_create(&amp;instance, &amp;options);
    lcb_create(&amp;instance, &amp;options);
    lcb_connect(instance);
    lcb_wait(instance);

    lcb_install_callback3(instance, LCB_CALLBACK_GET, opCallback);
    lcb_install_callback3(instance, LCB_CALLBACK_STORE, opCallback);

    lcb_CMDSTORE scmd = { 0 };
    LCB_CMD_SET_KEY(&amp;scmd, "key", 3);
    LCB_CMD_SET_VALUE(&amp;scmd, "true", 4);
    scmd.operation = LCB_SET;
    lcb_store3(instance, NULL, &amp;scmd);
    lcb_wait(instance);

    lcb_CMDGET gcmd = { 0 };
    LCB_CMD_SET_KEY(&amp;gcmd, "key", 3);
    lcb_get3(instance, NULL, &amp;gcmd);
    lcb_wait(instance);
    lcb_destroy(instance);

    return 0;
}</codeblock></section>
        <section>
            <title>Scheduling, Blocking and non-blocking</title>
            <p>The library is designed to be non-blocking. As opposed to a blocking API where API
                calls themselves perform the operations and return results, the C SDK's non-blocking
                API <i>schedules</i> the operation, with the result of the operation being passed to
                a callback which is invoked when ready. The readiness and completion of an operation
                will only happen when the library has had a chance to send the operation to the
                server and await a response from the network.</p>
            <p>Most operations in the library do not <i>execute</i> the operation immediately, but
                rather <i>schedule</i> it to be executed when it is possible to perform network
                I/O.</p>
            <p>The <apiname>lcb_wait()</apiname> function will instruct the library to send all
                scheduled operations to the cluster and await the results for those operations. As
                results become available, designated callbacks (specified using
                    <apiname>lcb_install_callback3()</apiname>) are invoked with the results.</p>
            <p>If your application is built on top of an event loop (for example, <i>libev</i>) you
                can integrate the C SDK to perform its I/O within the context of your event loop,
                avoiding the need to block for I/O with <apiname>lcb_wait()</apiname>.</p>
        </section>
        <section>
            <title>Library Handle and Server Connections</title>
            <p>Almost all operations within the library are done with a library handle of type
                    <apiname>lcb_t</apiname>. The <apiname>lcb_t</apiname> is a handle representing
                a connection to a single bucket (though it is possible to access other buckets as
                well for certain operations).</p>
            <p>An <apiname>lcb_t</apiname> is created using the <apiname>lcb_create()</apiname>
                function. Once created the handle must be connected:
                    <apiname>lcb_connect()</apiname> schedules the connection and
                    <apiname>lcb_wait</apiname> waits for the connection to complete. Once
                    <apiname>lcb_wait</apiname> returns, <apiname>lcb_get_bootstrap_status</apiname>
                may be used to determine if the connection completed successfully.</p>
            <p>Once the handle has been successfully connected it may then be used for data
                access.</p>
            <p>When the library handle is no longer needed, it can be destroyed via
                    <apiname>lcb_destroy()</apiname>.</p>
        </section>
        <section>
            <title>API Reference</title>
            <p>The API reference is generated for each version. The API reference for version
                    <keyword keyref="lcb-current-version"/> is at <xref keyref="lcb-api-link"/></p>
        </section>
    </body>
</topic>
