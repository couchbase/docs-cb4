<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="toplevel">
    <title>Start Using the SDK</title>
    <shortdesc>The Couchbase C SDK (<codeph>libcouchbase</codeph>) enables C and C++ programs to access
        a Couchbase cluster. The C SDK is also commonly used as a core dependency of SDKs written in
        other language to provide a common implementation and high performance.</shortdesc>
    <body>
        <section>
            <title>Features</title>
            <p>
                <note>See the full feature matrix to see which features are available for which
                    versions.</note>
                <ul id="ul_uny_zlc_bv">
                    <li>Cross-Platform: Officially supported on <i>Linux</i>, <i>Mac OS X</i>, and
                            <i>Microsoft Windows</i> (though it is also known to run on other
                        platforms).</li>
                    <li>Key-Value (CRUD) operations (<apiname>lcb_get3</apiname>,
                            <apiname>lcb_store3</apiname>, etc.)</li>
                    <li>N1QL query operations (<apiname>lcb_n1ql_query</apiname>)</li>
                    <li>Map Reduce (view) query operations (<apiname>lcb_view_query</apiname>)</li>
                    <li>Secure SSL connections (Couchbase Enterprise only)</li>
                    <li>Pluggable non-blocking event loops such as <b>libevent</b> and <b>libuv</b>-
                        integrate with your own non-blocking application, or use
                            <apiname>lcb_wait</apiname> in blocking code</li>
                </ul>
            </p>
        </section>
        <section>
            <title>Platform support and installation</title>
            <p>The Couchbase C SDK can be installed via apt or deb repositories on Linux; homebrew
                on Mac OS X; and <xref href="#toplevel/install-windows"
                    >binary archives for Microsoft Windows</xref>. It may also be <xref
                    href="#toplevel/install-source">built from source</xref>
                on any of the platforms mentioned above, and more.</p>
        </section>
        <section id="install-linux"><title>Installing on Linux</title>For installation on Linux,
            install the <i>couchbase-release</i> repository, and then install the
                <i>libcouchbase</i> packages. The following examples download and install
                <i>couchbase-release</i> repsitory, a C and C++ compiler, and the C SDK core
                (<i>libcouchbase2-core</i>), command line tools (<i>libcouchbase2-bin</i>), and the
            development tools (<i>libcouchbase-devel</i> [RPM] or <i>libcouchbase-dev</i>
            [DEB]).<codeblock spectitle="Debian and Ubuntu"># Only needed during first-time setup:
wget http://packages.couchbase.com/releases/couchbase-release/couchbase-release-1.0-0-amd64.deb
sudo dpkg -i couchbase-release-1.0-0-amd64.deb
# Will install or upgrade packages
sudo apt-get update
sudo apt-get install libcouchbase-dev libcouchbase2-bin build-essential</codeblock><codeblock spectitle="RHEL and CentOS"># Only needed during first-time setup:
wget http://packages.couchbase.com/releases/couchbase-release/couchbase-release-1.0-0-x86_64.rpm
sudo rpm -ivH couchbase-release-1.0-0-x86_64.rpm
# Will install or upgrade existing packages
sudo yum install libcouchbase-devel libcouchbase2-bin gcc gcc-c++</codeblock></section>
        <section id="install-osx">
            <title>Installation on Mac OS X</title>
            <p>To install the library on Mac OS X, first install the de-facto package manager for OS
                X: <xref href="http://brew.sh/" format="html" scope="external">homebrew</xref>. Once
                    <i>homebrew</i> is
                configured:<codeblock>brew update # get list of latest packages
brew install couchbase</codeblock></p>
        </section>
        <section>
            <title>Installation on Microsoft Windows</title>
            <p>Refer to <xref href="#toplevel/install-windows"/></p>
        </section>
        <section>
            <title>Documentation and examples</title>
            <p>
                <ul id="ul_hyq_xnc_bv">
                    <li>A reference guide (this manual) is suitable for a general overview and
                        learning how to use the library.</li>
                    <li>The <xref format="html" scope="external" href="docs.couchbase.com/sdk-api/couchbase-c-client-2.6.0/">API documentation</xref> is generated from comments in the header and covers
                        all the APIs of the library.</li>
                    <li>Small standalone examples can be found in the <xref
                            href="https://github.com/couchbase/libcouchbase/tree/master/example"
                            format="html" scope="external">github repository</xref></li>
                    <li>Other Couchbase SDKs are written on top of the C SDK and show more complex
                        usage of the library's features:<ul id="ul_i2y_l4c_bv">
                            <li><xref href="https://github.com/couchbase/couchbase-python-client"
                                    format="html" scope="external">Python SDK</xref></li>
                            <li><xref href="https://github.com/couchbase/couchnode" format="html"
                                    scope="external">Node.js SDK</xref></li>
                        </ul></li>
                    <li>The library's own <codeph>cbc</codeph> (<xref
                            href="https://github.com/couchbase/libcouchbase/blob/master/tools/cbc.cc"
                            format="html" scope="external"/>) and <codeph>cbc-pillowfight</codeph>
                            (<xref
                            href="https://github.com/couchbase/libcouchbase/blob/master/tools/cbc-pillowfight.cc"
                            format="html" scope="external"/>) utilities. Note that these tools may
                        use internal APIs not intended for public use.</li>
                    <li>C++11 wrapper (<xref
                            href="https://github.com/couchbaselabs/libcouchbase-cxx" format="html"
                            scope="external"/>)</li>
                </ul>
            </p>
        </section>
        <section><title>Hello Couchbase</title>A simple example below (requires version 2.5.6 or
            higher to function). Error checking is omitted for
            brevity.<codeblock>#include &lt;libcouchbase/couchbase.h>

static void
opCallback(lcb_t instance, int cbtype, const lcb_RESPBASE *rb) {
    fprintf(stderr, "%.*s: %s... ", (int)rb->nkey, rb->key, lcb_strcbtype(cbtype));
    if (rb->rc != LCB_SUCCESS) {
        fprintf(stderr, "%s\n", lcb_strerror(NULL, rb->rc));
    } else {
        fprintf(stderr, "OK");
        if (cbtype == LCB_CALLBACK_GET) {
            const lcb_RESPGET *rg = (const lcb_RESPGET *)rb;
            fprintf(stderr, "... Value: %.*s\n", (int)rg->nvalue, rg->value);
        } else {
            fprintf(stderr, "\n");
        }
    }
}

int main(int argc, char **argv)
{
    assert(lcb_version_g >= 0x020506 &amp;&amp; "This example requires 2.5.6 or greater");

    lcb_t instance = NULL;
    lcb_create_st crst;
    memset(&amp;crst, 0, sizeof crst);
    crst.version = 3;
    crst.v.v3.connstr = "couchbase://localhost";
    lcb_create(&amp;instance, &amp;crst);
    lcb_connect(instance);
    lcb_wait(instance);

    lcb_install_callback3(instance, LCB_CALLBACK_GET, opCallback);
    lcb_install_callback3(instance, LCB_CALLBACK_STORE, opCallback);

    lcb_CMDSTORE scmd = { 0 };
    LCB_CMD_SET_KEY(&amp;scmd, "key", 3);
    LCB_CMD_SET_VALUE(&amp;scmd, "true", 4);
    scmd.operation = LCB_SET;
    lcb_store3(instance, NULL, &amp;scmd);
    lcb_wait(instance);

    lcb_CMDGET gcmd = { 0 };
    LCB_CMD_SET_KEY(&amp;gcmd, "key", 3);
    lcb_get3(instance, NULL, &amp;gcmd);
    lcb_wait(instance);
    lcb_destroy(instance);

    return 0;
}</codeblock></section>
        <section>
            <title>Scheduling, Blocking and non-blocking</title>
            <p>The library is designed to be non-blocking. As opposed to a blocking API where API
                calls themselves perform the operations and return results, the C SDK's non-blocking
                API <i>schedules</i> the operation, with the result of the operation being passed to
                a callback which is invoked when ready. The readiness and completion of an operation
                will only happen when the library has had a chance to send the operation to the
                server and await a response from the network.</p>
            <p>Most operations in the library do not <i>execute</i>the operation immediately, but
                rather <i>schedule</i> it to be executed when it is possible to perform network
                I/O.</p>
            <p>The <apiname>lcb_wait()</apiname> function will instruct the library to send all
                scheduled operations to the cluster and await the results for those operations. As
                results become available, designated callbacks (specified using
                    <apiname>lcb_install_callback3()</apiname>) are invoked with the results.</p>
            <p>If your application is built on top of an event loop (for example, <i>libev</i>) you
                can integrate the C SDK to perform its I/O within the context of your event loop,
                avoiding the need to block for I/O with <apiname>lcb_wait()</apiname>.</p>
        </section>
        <section>
            <title>Library Handle</title>
            <p>Almost all operations within the library are done with a library handle of type
                    <apiname>lcb_t</apiname>. The <apiname>lcb_t</apiname> is a handle representing
                a connection to a single bucket (though it is possible to access other buckets as
                well for certain operations).</p>
            <p>An <apiname>lcb_t</apiname> is created using the <apiname>lcb_create()</apiname>
                function. Once created the handle must be connected:
                    <apiname>lcb_connect()</apiname> schedules the connection and
                    <apiname>lcb_wait</apiname> waits for the connection to complete. Once
                    <apiname>lcb_wait</apiname> returns, <apiname>lcb_get_bootstrap_status</apiname>
                may be used to determine if the connection completed successfully.</p>
            <p>Once the handle has been successfully connected it may then be used for data
                access.</p>
            <p>When the library handle is no longer needed, it can be destroyed via
                    <apiname>lcb_destroy()</apiname>.</p>
        </section>
        <section>
            <title>Data Access</title>
            <p>Once the handle has been connected, it may be used to access data using the KV, N1QL,
                and MapReduce APIs.</p>
        </section>
        <section>
            <title>Installing Manually - Linux</title>
            <p>If you want to install the C SDK manually, either from a static binary package or by
                manually configuring the repositories, you can use the following procedures.</p>
            <p>The various Linux distributions contain the following packages:<ul id="ul_shp_qnc_bq">
                    <li><codeph>libcouchbase2-core</codeph>: The core library package</li>
                    <li><codeph>libcouchbase-dev</codeph> (or <codeph>libcouchbase-devel</codeph>):
                        The development package, required if building SDKs which depend on the C
                        SDK</li>
                    <li><codeph>libcouchbase2-bin</codeph>: The command line utilities
                            (<cmdname>cbc</cmdname> and <cmdname>cbc-pillowfight</cmdname>)</li>
                    <li><codeph>libcouchbase2-libevent</codeph>: Optional but recommended component
                        for I/O performance. Can also be used to integrate with
                            <apiname>libevent</apiname> (see <xref
                            href="async-programming.dita#concept_nf3_kz4_p4"/>).</li>
                    <li><codeph>libcouchbase2-libev</codeph>: Optional, for use with applications
                        that make use of event loop integration with <apiname>libev</apiname> (see
                            <xref href="async-programming.dita#concept_nf3_kz4_p4"/>). </li>
                </ul></p>
        </section>
        <section><title>Configuring yum repositories (CentOS, Redhat)</title>This section assumes
            you know how to add an external <xref href="http://yum.baseurl.org" format="html"
                scope="external">yum</xref> repository and Linux quick start explains the steps it
            will perform on your distribution. To configure the repository:<ol id="ol_b12_1lb_bq">
                <li>Find the appropriate repository location for your distribution in the following
                    table. CentOS and RHEL allow 32-bit packages to be installed on a 64-bit system.
                    This is usually not what you want, so ensure that you use the 64-bit repository
                    for your 64-bit system (unless you specifically want the 32-bit SDK). <table
                        id="table_tdg_4n2_2w">
                        <tgroup cols="3">
                            <thead>
                                <row>
                                    <entry>Version</entry>
                                    <entry>Architecture</entry>
                                    <entry>Repository</entry>
                                </row>
                            </thead>
                            <tbody>
                                <row>
                                    <entry>6</entry>
                                    <entry>32-bit</entry>
                                    <entry><codeph>http://packages.couchbase.com/rpm/6.2/i686</codeph></entry>
                                </row>
                                <row>
                                    <entry>6</entry>
                                    <entry>64-bit</entry>
                                    <entry><codeph>http://packages.couchbase.com/rpm/6.2/x86_64</codeph></entry>
                                </row>
                                <row>
                                    <entry>7</entry>
                                    <entry>64-bit</entry>
                                    <entry><codeph>http://packages.couchbase.com/rpm/7/x86_64</codeph></entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </table></li>
                <li>Create a <filepath>couchbase.repo</filepath> file in your
                        <filepath>/etc/yum.repos.d</filepath> directory. It should look similar to
                    the
                    following:<codeblock>[couchbase]
enabled = 1
name = Couchbase package repository
baseurl = REPLACE THIS WITH THE ACTUAL REPOSITORY FOR YOUR PLATFORM
gpgcheck = 1
gpgkey = http://packages.couchbase.com/rpm/couchbase-rpm.key </codeblock></li>
            </ol></section>
        <section><title>Configuring APT repositories (Debian, Ubuntu)</title>This section assumes
            some knowledge of <xref href="https://wiki.debian.org/Apt" format="html"
                scope="external">apt</xref> and Linux quick start explains the steps it will perform
            on your distribution. To configure the repository: <ol id="ol_alc_nmb_bq">
                <li>Download the Couchbase GPG key from
                        <filepath>http://packages.couchbase.com/ubuntu/couchbase.key</filepath>.</li>
                <li>Add the key to the list of trusted package keys. Use the <codeph>apt-key
                        add</codeph> command. For example, <codeph>apt-key add
                        couchbase.key</codeph>.</li>
                <li>Create a <filepath>couchbase.list</filepath> file in
                        <filepath>/etc/apt/sources.list.d</filepath>. The file should contain the
                    repository for your distribution. Repositories are available for the following
                    distributions: <table id="table_trf_ymb_bq">
                        <tgroup cols="2">
                            <thead>
                                <row>
                                    <entry>Distribution</entry>
                                    <entry>Repository Entry</entry>
                                </row>
                            </thead>
                            <tbody>
                                <row>
                                    <entry>Precise (Ubuntu 12.04)</entry>
                                    <entry><codeph>deb http://packages.couchbase.com/ubuntu precise
                                            precise/main</codeph></entry>
                                </row>
                                <row>
                                    <entry>Trusty (Ubuntu 14.04)</entry>
                                    <entry><codeph>deb http://packages.couchbase.com/ubuntu trusty
                                            trusty/main</codeph></entry>
                                </row>
                                <row>
                                    <entry>Xenial (Ubuntu 16.04)</entry>
                                    <entry><codeph>deb http://packages.couchbase.com/ubuntu xenial
                                            xenial/main</codeph></entry>
                                </row>
                                <row>
                                    <entry>Debian Wheezy (Old Stable)</entry>
                                    <entry><codeph>deb http://packages.couchbase.com/ubuntu wheezy
                                            wheezy/main</codeph></entry>
                                </row>
                                <row>
                                    <entry>Debian Jessie (Stable)</entry>
                                    <entry><codeph>deb http://packages.couchbase.com/ubuntu jessie
                                            jessie/main</codeph></entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </table></li>
            </ol><p>Note that only Ubuntu LTS (long term support) releases are supported. You may
                try to use an LTS repository for a non-LTS version, but success is not
                guaranteed.</p></section>
        <section>
            <title>Installing on Mac OS X with Homebrew</title>
            <p>The C SDK can be installed on Mac OS X via <xref href="http://brew.sh/" format="html"
                    scope="external">Homebrew</xref>:</p>
            <codeblock outputclass="language-bash">$ brew update # Needed if upgrading to a newer version
$ brew install libcouchbase </codeblock>
            <p>If you are using an extension for a 32-bit interpreter (check by executing
                    <codeph>lipo -info /path/to/interp</codeph>), you should install the C SDK with
                the following
                command:<codeblock>$ brew install libcouchbase --universal</codeblock></p>
        </section>
        <section>
            <title>Installing binary packages without a repository</title>
            <p>You can install standalone packages by downloading a
                <!--<xref href="download-list.dita">TAR archive </xref>-->containing the necessary
                binary packages for your platform. </p>
            <screen spectitle="Installing RPMs manually">$ tar xf libcouchbase-2.4.0_centos62_x86_64.tar
$ cd libcouchbase-2.4.0_centos62_x86_64/
$ sudo rpm -ivh libcouchbase-devel-2.4.0-1.el6.x86_64.rpm libcouchbase2-core-2.4.0-1.el6.x86_64.rpm \
libcouchbase2-bin-2.4.0-1.el6.x86_64.rpm libcouchbase2-libevent-2.4.0-1.el6.x86_64.rpm
Preparing...                ########################################### [100%]
   1:libcouchbase2-core     ########################################### [ 25%]
   2:libcouchbase-devel     ########################################### [ 50%]
   3:libcouchbase2-bin      ########################################### [ 75%]
   4:libcouchbase2-libevent ########################################### [100%]</screen>
            <screen spectitle="Installing DEBs manually">$ tar xf libcouchbase-2.2.0_ubuntu1204_amd64.tar
$ cd libcouchbase-2.2.0_ubuntu1204_amd64
$ sudo dpkg -i libcouchbase2-core_2.2.0-2453_amd64.deb libcouchbase2-libevent_2.2.0-2453_amd64.deb \
libcouchbase-dev_2.2.0-2453_amd64.deb libcouchbase2-bin_2.2.0-2453_amd64.deb
Selecting previously unselected package libcouchbase2-core.
(Reading database ... 28297 files and directories currently installed.)
Unpacking libcouchbase2-core (from libcouchbase2-core_2.2.0-2453_amd64.deb) ...
Selecting previously unselected package libcouchbase2-libevent.
Unpacking libcouchbase2-libevent (from libcouchbase2-libevent_2.2.0-2453_amd64.deb) ...
Selecting previously unselected package libcouchbase-dev.
Unpacking libcouchbase-dev (from libcouchbase-dev_2.2.0-2453_amd64.deb) ...
Selecting previously unselected package libcouchbase2-bin.
Unpacking libcouchbase2-bin (from libcouchbase2-bin_2.2.0-2453_amd64.deb) ...
Setting up libcouchbase2-core (2.2.0-2453) ...
Processing triggers for man-db ...
Setting up libcouchbase2-bin (2.2.0-2453) ...
Setting up libcouchbase2-libevent (2.2.0-2453) ...
Setting up libcouchbase-dev (2.2.0-2453) ...
Processing triggers for libc-bin ...
ldconfig deferred processing now taking place</screen>
        </section>
        <section>
            <title>Installation from source</title>
            <p id="install-source">You may install the library from source either by downloading a
                source archive, or by checking out the <xref
                    href="https://github.com/couchbase/libcouchbase" format="html" scope="external"
                    >git repository</xref>. Follow the instructions in the archive's
                    <codeph>README.markdown</codeph> for further instructions.</p>
        </section>
        <section id="install-windows">
            <title>Windows Installation</title>
            <p>Windows binary packages can be found in
                <!--<xref href="download-list.dita"></xref>-->. Included are the header files,
                release and debug variants of the DLLs and import libraries, and release and debug
                variants of the command line tools. Note that the C SDK does not have any preferred
                installation path, and it is up to you to determine where to place
                    <codeph>libcouchbase.dll</codeph>.</p>
            <p>Be sure to select the proper package for the compiler and architecture your
                application is using.</p>
            <note>
                <p>If there are no binaries available for your visual studio version, then using a
                    binary from any other visual studio version is <i>likely</i> to work. Most of
                    the issues related to mixing Visual Studio binary versions involve changing and
                    incompatible C++ APIs or incompatible C Runtime (CRT) objects and functions.
                    Since the Couchbase C SDK does not expose a C++ API, and since it does not
                    directly expose any CRT functionality, it should be safe for use so long as your
                    application can link to the library at compile-time. The windows runtime linker
                    will ensure that each binary is using the appropriate version of the Visual C
                    Runtime (<i>MSVCRT.DLL</i>).</p>
            </note>
            <p>If for some reason you cannot use any of the prebuilt Windows binaries, follow the
                instructions in <i>installation from source</i> (above) to build on Windows.</p>
        </section>
    </body>
</topic>
