<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="toplevel">
    <title>Client Settings for the C (libcouchbase) SDK with Couchbase Server</title>
    <titlealts><navtitle>Client Settings</navtitle></titlealts>
	<body>
	    <section id="begin-section"/>
        <section><title>Configuring Overview</title><p>In addition to the initial settings passed to
                the client via the connection string, you can adjust properties of the client to
                better function in your specific environment. The <apiname>lcb_cntl()</apiname>
                function is used to retrieve or modify library settings on a per-instance basis. The
                general syntax for retrieving a setting
                is:<codeblock outputclass="language-c">lcb_U32 curval;
lcb_cntl(instance, LCB_CNTL_GET, LCB_CNTL_OPTIMEOUT, &amp;curval);</codeblock>And
                the general syntax for modifying a setting
                is:<codeblock outputclass="language-c">lcb_U32 newval = 4000000; // Set to 4 seconds
lcb_cntl(instance, LCB_CNTL_SET, LCB_CNTL_OPTIMEOUT, &amp;newval);</codeblock>By
                design, this API works similarly to the <codeph>setsockopt()</codeph>,
                    <codeph>getsockopt()</codeph>, and <codeph>ioctl()</codeph> interfaces. It is
                passed an instance to operate on, a <i>mode</i> constant (what sort of access to
                perform), a <i>setting</i> constant (which setting to access) and finally the
                    <i>value</i>, which is either written to or read from depending on whether the
                    <i>mode</i> indicates a modification or a retrieval, respectively.</p><p>The
                    <apiname>lcb_cntl()</apiname> function returns an error code of
                    <codeph>LCB_SUCCESS</codeph> if successful, <codeph>LCB_NOT_SUPPORTED</codeph>
                (or <codeph>LCB_ECTL_UNKNOWN</codeph>) if the <i>setting</i> is not known. Always
                check the return code and be prepared to take action if the specific operation is
                not supported in the specific version of the library.</p><p>The constants are well
                defined and do not change between versions. Thus, if you intend to modify an
                optional setting and also intend to compile against a possibly older version of the
                library where the constant is not defined, you can use the raw numeric literal (for
                example, <codeph>0x1E</codeph>) rather than the symbolic name.</p><p>The most recent
                settings are always found in the <filepath>&lt;libcouchbase/cntl.h></filepath>
                header file.</p><p>Some options are also available in a simplified string format, in
                which the option names and values are strings. These may be set with the
                    <apiname>lcb_cntl_string()</apiname> function or directly embedded into the
                connection string.</p>Most of the information in this section applies to any
            component that uses the C SDK, assuming they accept a connection string as the way to
            connect to the cluster. Such is the case with the command-line tools or higher level
            SDKs that build on the C SDK. Some specific options are C-only and are marked as
                such.<note type="note">This section provides connection string options as well as
                those options that can be passed to <apiname>lcb_cntl_string()</apiname> and only
                documents options that have a string alias. Other options are available directly via
                the <apiname>lcb_cntl()</apiname> function. For more details about those options,
                see the header file and API documentation for the <apiname>lcb_cntl()</apiname>
                function.</note>The options listed in the following table can be passed to the
            connection string by using the form
                <codeph>couchbase://hosts/bucket?option1=value1&amp;option2=value2</codeph> or via
            the <apiname>lcb_cntl_string()</apiname> function. Some options (where specified) are
            valid only in the connection string. Here's an example that shows how to use the
                <apiname>lcb_cntl_string()</apiname> function:</section>
        <codeblock outputclass="language-c">lcb_cntl_string(instance, "option", "value")</codeblock>
        <p>Connection strings are only available in version 2.4.0 and later. Some options were
            introduced in a later version (indicated next to the option). Almost all of the options
            have programmatic <apiname>lcb_cntl()</apiname> equivalents, which can be used instead.
            Some settings are only available via <apiname>lcb_cntl()</apiname> and are thus not
            listed here.</p>
        <section id="settings-list">
            <title>Selected Configuration Options</title>
            <note>This list does not contain <i>all</i> possible settings, only the most common
                ones. See <i>&lt;libcouchbase/cntl.h></i> for the full list of publically available
                settings.</note>
            <p><b>Timeout values</b> should be specified using the decimal point, and are
                interpreted as seconds. To specify fractional second intervals, just use the
                fractional part of the value. For example, <codeph>operation_timeout=2.75</codeph>
                will set the timeout to 2750 milliseconds. </p>
            <p><b>Boolean values</b> can be specified using 0 for false, and 1 for true. The strings
                    <codeph>true</codeph> and <codeph>false</codeph> are also recognized. If this
                appears as a value type for <apiname>lcb_cntl()</apiname> then it is a pointer to an
                    <codeph>int</codeph>, where a value of 0 indicates <codeph>false</codeph>, and a
                non-zero value indicates <codeph>true</codeph>.</p>
            <p><b>Microsecond values</b>. These values are only applicable for
                    <apiname>lcb_cntl()</apiname> and only usable directly with the C library. They
                indicate the value as a time interval specified in microseconds. The value itself
                should be a <codeph>lcb_U32</codeph>, a pointer to which is passed into
                    <apiname>lcb_cntl()</apiname> as its last argument.</p>
            <note>These settings may be combined in the connection string in a similar manner as
                query parameters in a URI; for example, you may
                use:<codeblock>couchbase://cb1,cb2,cb3/bucket?operation_timeout=4&amp;http_poolsize=0&amp;fetch_mutation_tokens=1</codeblock>To
                modify the operation timeout, disable HTTP socket pooling, and enable mutation
                tokens.</note>
            <table frame="all" rowsep="1" colsep="1" id="table_tpx_q25_4r">
                <title>Options reference</title>
                <tgroup cols="3">
                    <colspec colname="c1" colnum="1" colwidth="1*"/>
                    <colspec colname="newCol2" colnum="2" colwidth="1*"/>
                    <colspec colname="c2" colnum="3" colwidth="2.93*"/>
                    <thead>
                        <row>
                            <entry>Option Name (for use in connection string or
                                    <apiname>lcb_cntl_string()</apiname>)</entry>
                            <entry>Macro/Constant name (for direct use with the C
                                    SDK's<apiname>lcb_cntl()</apiname>).</entry>
                            <entry>Description</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><codeph>operation_timeout</codeph> (Timeout)</entry>
                            <entry><option>LCB_CNTL_OP_TIMEOUT</option> (microseconds)</entry>
                            <entry>The operation timeout is the maximum amount of time the library
                                will wait for an operation to receive a response before invoking its
                                callback with a failure status. <p>An operation might time-out
                                    if:</p><ul id="ul_fny_525_4r">
                                    <li>A server is taking too long to respond</li>
                                    <li>An updated cluster configuration has not been promptly
                                        received </li>
                                </ul>When an operation times out, it will fail with the
                                    <apiname>LCB_ETIMEDOUT</apiname> error
                                code.<codeblock spectitle="Connection String Example">operation_timeout=2.5</codeblock></entry>
                        </row>
                        <row>
                            <entry><codeph>config_total_timeout</codeph> (Timeout)</entry>
                            <entry><option>LCB_CNTL_CONFIGURATION_TIMEOUT</option>
                                (microseconds)</entry>
                            <entry>
                                <p>This is how long the client will wait to obtain the initial
                                    configuration. This affects the maximum amount of time that the
                                    call to <apiname>lcb_wait()</apiname> will take after having
                                    called <apiname>lcb_connect()</apiname>. If
                                        <apiname>lcb_get_bootstrap_status</apiname> is returning
                                    with <apiname>LCB_ETIMEDOUT</apiname> and you are running on a
                                    slow network, modifying this setting may increase the chances of
                                    success.</p>
                                <p>See also
                                    <codeph>config_node_timeout</codeph>.<codeblock spectitle="Connection String Example">config_total_timeout=5</codeblock></p>
                            </entry>
                        </row>
                        <row>
                            <entry><codeph>config_node_timeout</codeph> (Timeout)</entry>
                            <entry><option>LCB_CNTL_CONFIG_NODE_TIMEOUT</option>
                                (microseconds)</entry>
                            <entry>The per-node configuration timeout sets the amount of time to
                                wait for each node within the bootstrap/configuration process. This
                                interval is a subset of the <codeph>config_total_timeout</codeph>
                                option mentioned above and is intended to ensure that the bootstrap
                                process does not wait too long for a given node. <p>Nodes that are
                                    physically offline may never respond, and it may take a long
                                    time until they are detected as being offline. See <xref
                                        href="http://issues.couchbase.com/browse/CCBC-261"
                                        format="html" scope="external">CCBC-261</xref> and <xref
                                        href="http://issues.couchbase.com/browse/CCBC-313"
                                        format="html" scope="external">CCBC-313</xref> for more
                                    reasons.<codeblock spectitle="Connection String Example">config_node_timeout=2</codeblock></p></entry>
                        </row>
                        <row>
                            <entry><codeph>views_timeout</codeph> (Timeout)</entry>
                            <entry><option>LCB_CNTL_VIEW_TIMEOUT</option> (Microseconds)</entry>
                            <entry>The I/O timeout for view
                                operations.<codeblock spectitle="Connection String Example">view_timeout=75</codeblock></entry>
                        </row>
                        <row>
                            <entry><codeph>n1ql_timeout</codeph> (Timeout). Since 2.5.3</entry>
                            <entry><option>LCB_CNTL_N1QL_TIMEOUT</option> (Microseconds)</entry>
                            <entry>The I/O timeout for N1QL
                                queries.<codeblock spectitle="Connection String Example">n1ql_timeout=75</codeblock></entry>
                        </row>
                        <row>
                            <entry><codeph>durabilty_timeout</codeph> (Timeout)</entry>
                            <entry><option>LCB_CNTL_DURABILITY_TIMEOUT</option>
                                (microseconds)</entry>
                            <entry>The default timeout for <codeph>lcb_durability_poll()</codeph>
                                This is the time the client will spend sending repeated probes to a
                                given key's vBucket masters and replicas before they are deemed not
                                to have satisfied the durability requirements.
                                <codeblock spectitle="Connection String Example">durability_timeout=5</codeblock></entry>
                        </row>
                        <row>
                            <entry><codeph>durabilty_interval</codeph> (Timeout)</entry>
                            <entry><option>LCB_CNTL_DURABILITY_INTERVAL</option>
                                (Microseconds)</entry>
                            <entry>This is the time the client will wait between repeated probes to
                                a given
                                server.<codeblock spectitle="Connection String Example">durability_interval=0.0001</codeblock></entry>
                        </row>
                        <row>
                            <entry><codeph>randomize_nodes</codeph> (Boolean)</entry>
                            <entry>
                                <i>connection string only</i>
                            </entry>
                            <entry>This option controls whether the connection attempts for
                                configuration retrievals should be done in the supplied order or
                                whether they should be randomized. This setting is off by default.
                                    <i>To affect the order of the initial connection, this option
                                    must be supplied in the connection string</i>. <p>For the
                                    initial connection, the default order is the list of hosts
                                    provided in the structure. For subsequent connections, this is
                                    the order of nodes as received by the
                                    server.<codeblock spectitle="Connection String Example">randomize_nodes=1</codeblock></p></entry>
                        </row>
                        <row>
                            <entry><codeph>config_cache</codeph> (Path)</entry>
                            <entry><option>LCB_CNTL_CONFIGCACHE</option> (Path, a pointer to
                                    <codeph>char</codeph> buffer).</entry>
                            <entry>The configuration cache allows bootstrapping from a cluster
                                without using the initial bootstrap connection, considerably
                                reducing latency. If the file passed does not exist, the normal
                                bootstrap process is performed, and the file is written to with the
                                current information. <note>The leading directories for the file must
                                    exist. Otherwise, the file will never be
                                    created.</note><note>Configuration cache is not supported for
                                    memcached
                                buckets</note><codeblock spectitle="Connection String Example">config_cache=/tmp/cb_config_cache</codeblock></entry>
                        </row>
                        <row>
                            <entry><codeph>config_cache_ro</codeph> (Path). Since 2.4.8</entry>
                            <entry><option>LCB_CNTL_CONFIGCACHE_RO</option> (Path)</entry>
                            <entry>This is identical to the <codeph>config_cache</codeph> option,
                                except that it guarantees that the library will never overwrite or
                                otherwise modify the path
                                specified.<codeblock spectitle="Connection String Example">config_cache_ro=1</codeblock></entry>
                        </row>
                        <row>
                            <entry><codeph>detailed_errcodes</codeph> (Boolean)</entry>
                            <entry><option>LCB_CNTL_DETAILED_ERRCODES</option> (Boolean)</entry>
                            <entry> Sets the behavior for reporting network errors. By default
                                network errors are returned as <codeph>LCB_NETWORK_ERROR</codeph>.
                                Return codes for compatibility reasons. More detailed error codes
                                may be available by enabling this option that will return
                                appropriate error codes with a category
                                    <codeph>LCB_ERRTYPE_NETWORK</codeph>. <p>Using this option means
                                    your programming model is centered around the various
                                        <codeph>LCB_EIF*</codeph> macros (see
                                        <filepath>&lt;libcouchbase/error.h&gt;</filepath>) rather
                                    than individual codes.</p>
                                <p>For users of higher level languages (wrapping the library), this
                                    may result in different exceptions being thrown, but may also
                                    help debug network
                                issues.</p><codeblock spectitle="Connection String Example">detailed_errcodes=1</codeblock></entry>
                        </row>
                        <row>
                            <entry><codeph>http_poolsize</codeph> (Integer)</entry>
                            <entry>
                                <option>LCB_CNTL_HTTP_POOLSIZE</option>
                            </entry>
                            <entry>
                                <p>Set the maximum pool size for pooled HTTP (view or N1QL request)
                                    sockets. A setting of <codeph>0</codeph> disables
                                    pooling.<codeblock spectitle="Connection String Example">http_poolsize=0</codeblock></p>
                            </entry>
                        </row>
                        <row>
                            <entry><codeph>error_thresh_delay</codeph> (Timeout)</entry>
                            <entry><option>LCB_CNTL_CONFDELAY_ERRTHRESH</option>
                                (microseconds)</entry>
                            <entry>This option controls refreshing the configuration upon the
                                receipt of errors. The client throttles how many requests for a new
                                configuration it will send in a given interval—this is to avoid
                                sending many successive requests in the event of a non-transient
                                error condition.<p>This setting controls the duration of this
                                    interval. The value can be adjusted upwards if operating in an
                                    environment where it is normal to receive many timeouts, such as
                                    in a resource-contented server or network. It can be adjusted
                                    downwards if timeouts are expected only in situations where the
                                    cluster has changed
                                state.</p><codeblock spectitle="Connection String Example">error_thresh_delay=7.5</codeblock></entry>
                        </row>
                        <row>
                            <entry><codeph>bootstrap_on</codeph> (String; see description)</entry>
                            <entry>
                                <i>connection string only</i>
                            </entry>
                            <entry>Controls how the client attempts to retrieve the configuration
                                from the cluster. By default, the client attempts to connect to the
                                data (memcached) port of each node listed and attempts to retrieve
                                the configuration from there. If the retrieval fails, the client
                                attempts the same process using the HTTP REST API port (8091) of
                                each node. <p>This setting can be used to have the client forcefully
                                    use a single mode. This might be helpful for quick
                                    initialization of memcached buckets, which can only send
                                    configurations over HTTP. It can also be used in the case of
                                    potential issues encountered with either mode.</p><p>Possible
                                    values for this setting are:</p><ul id="ul_vhj_vgg_45">
                                    <li><codeph>http</codeph>, to force bootstrap over HTTP
                                        only</li>
                                    <li><codeph>cccp</codeph>, to force bootstrap over memcached
                                        only</li>
                                    <li><codeph>both</codeph>, which attempts both (as above).
                                            <i>This option can only be set from within the
                                            connection string</i>.</li>
                                </ul><codeblock spectitle="Connection String Example">bootstrap_on=http</codeblock></entry>
                        </row>
                        <row>
                            <entry><codeph>fetch_mutation_tokens</codeph> (Boolean). Since
                                2.5.2</entry>
                            <entry><option>LCB_CNTL_FETCH_MUTATION_TOKENS</option> (Boolean)</entry>
                            <entry>Whether the server should send an additional 16 bytes of metadata
                                for each mutation response. This option is off by default but is
                                required for <xref
                                    href="../durability.dita#durability/enhanced-durability"/>. This
                                option should be set either in the connection string, or
                                    <i>immediately</i> calling <apiname>lcb_create()</apiname>. For
                                non-C applications, this must always be in the connection
                                string.<codeblock spectitle="Connection String Example">fetch_mutation_tokens=1</codeblock></entry>
                        </row>
                        <row>
                            <entry><codeph>dur_mutation_tokens</codeph> (Boolean). Since
                                2.5.2</entry>
                            <entry><option>LCB_CNTL_DURABILITY_MUTATION_TOKENS</option>
                                (Boolean)</entry>
                            <entry>Determines if <xref
                                    href="../durability.dita#durability/enhanced-durability"/> is
                                used automatically. It is enabled by default if
                                    <codeph>fetch_synctokens</codeph> is also enabled. Applications
                                can take advantage of this new feature without modifying any code
                                other than enabling these settings.<note>If you are checking
                                    durability constraints across client instances, and
                                        <codeph>fetch_synctokens</codeph> is enabled, then this
                                    setting should be disabled. Otherwise, the client will fail to
                                    retrieve the <apiname>lcb_SYNCTOKEN</apiname> (see more about
                                    this in the Enhanced Durability section). Alternatively, you can
                                    supply the sync token directly in the command
                                structure.</note><codeblock spectitle="Connection String Example">dur_mutation_tokens=1</codeblock></entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section>
            <title>Connection String</title>
            <p>This section provides a reference point for various schemes and port parameters that
                they represent (in case alternate ports are required).<note>Unless debugging a
                    specific network reachability issue or operating in an environment with
                    non-default ports or using SSL, you need only use the simple
                    form:<codeblock>couchbase://host1,host2,host3...hostN/bucket</codeblock></note></p>
            <table frame="all" rowsep="1" colsep="1" id="table_bsz_vd5_4r">
                <title>Schemes</title>
                <tgroup cols="2">
                    <colspec colname="c1" colnum="1" colwidth="1*"/>
                    <colspec colname="c2" colnum="2" colwidth="5.06*"/>
                    <thead>
                        <row>
                            <entry>Scheme</entry>
                            <entry>Documentation</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <codeph>couchbase://</codeph>
                            </entry>
                            <entry>This is the most common scheme and indicates that the client
                                performs a normal bootstrap process. It will first attempt to
                                bootstrap from "CCCP" using the memcached port. If that fails, the
                                client attempts HTTP bootstrap or the REST API port.<p>If ports are
                                    passed to this scheme (e.g.
                                        <codeph>couchbase://host1:4444,host2:5555,host3:6666</codeph>),
                                    then they have to be memcached ports. The ports cannot be HTTP
                                    ports and use the HTTP scheme. The default port for memcached is
                                        <b>11210</b> and the default port for HTTP is
                                    <b>8091</b>.<codeblock>couchbase://host1,host2/mybucket
couchbase://localhost:12000/mybucket</codeblock></p></entry>
                        </row>
                        <row>
                            <entry>
                                <codeph>couchbase<b>s</b>://</codeph>
                            </entry>
                            <entry>This is the scheme used to connect to the cluster via SSL. When
                                using this scheme, you must also pass the path to the local copy of
                                the cluster's certificate (e.g.
                                    <codeph>couchbases://host1,host2,host3/bucket?certpath=/path/to/cert.pem</codeph>).
                                If specifying ports for the hosts, the ports should point to the
                                SSL-enabled Memcached port for the node. The default Memcached SSL
                                port is <b>11207</b>. Currently bootstrapping over HTTP with SSL is
                                unsupported.<codeblock>couchbases://sslhost1,sslhost2,sslhost3/mybucket?certpath=/home/app/cbcert.pem</codeblock></entry>
                        </row>
                        <row>
                            <entry>
                                <codeph>http://</codeph>
                            </entry>
                            <entry>This is the scheme used to connect to the cluster using the HTTP
                                protocol and can be used in cases where there is a deliberate intent
                                to connect to an alternate HTTP REST API port. Note that when using
                                this scheme, the commonly used legacy idioms of
                                    <codeph>http://host:8091</codeph> or
                                    <codeph>http://host</codeph> will be converted into a simple
                                    <codeph>couchbase://host</codeph>. The bootstrap process will
                                function identically to the <codeph>couchbase://</codeph> scheme. If
                                using non-default ports, then only HTTP bootstrap will be
                                performed<codeblock>http://localhost:8091/mybucket</codeblock></entry>
                        </row>
                        <row>
                            <entry><codeph>memcached://</codeph> (<b>Experimental</b>)</entry>
                            <entry>This scheme may be used to connect to a standalone memcached
                                server. The scheme allows the client to communicate with any
                                implementation of the memcached binary protocol, and as such may be
                                used to communicate with <xref href="http://memcached.org"
                                    format="html" scope="external">http://memcached.org</xref>'s
                                implementation. When specifying this scheme, you must specify each
                                host in the cluster (including its port, if
                                needed):<codeblock>memcached://node1:11211,node2:11211,node3:11211/binary-username</codeblock>The
                                    <i>bucket</i> field becomes the binary protocol
                                username.</entry>
                        </row>
                        <row>
                            <entry><codeph>couchbase+explicit://</codeph>
                                (<b>Experimental</b>)</entry>
                            <entry>This scheme is experimental but provides the highest degree of
                                flexibility. <codeph><i>host:port</i></codeph> pairs are specified,
                                with a third specifier indicating the type of connection explicitly.
                                The format is <i>host:port=type</i> where <i>type</i> is one of
                                    <codeph>mcd</codeph> (for couchbase Memcached),
                                    <codeph>mcds</codeph> (for SSL-enabled Memcached),
                                    <codeph>http</codeph> (for the HTTP REST API) and
                                    <codeph>mccompat</codeph> (for standalone
                                Memcached)<codeblock>couchbase+explicit://host1:8091=http,host1:11210=mcd,host2:8091=http,host2:12000=mcd/mybucket</codeblock></entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
	    <section id="end-section"/>
    </body>
</topic>
