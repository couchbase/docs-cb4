<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_xx5_sl5_qv">
    <title>Compatibility of Couchbase Features, Couchbase Versions and the Couchbase C (libcouchbase) SDK</title>
    <titlealts><navtitle>Compatibility</navtitle></titlealts>
    <body>
        <section>
            <title>API Styles and versions</title>
            <p>Since the first release of libcouchbase 2.x in November 2012, we have added, in a
                compatible way, newer APIs to allow a faster and more efficient programming model.
                There are two broad categories of APIs in the library, one is known as <i>api2</i>
                and the other is known as <i>api3</i>.</p>
            <p>API2 is the original C 2.0 API, and is available in all versions of libcouchbase, but
                is considered <b>deprecated</b> since version 2.6.0. It looks something like
                this:<codeblock spectitle="API2 - Scheduling" outputclass="language-c">lcb_get_cmd_t gcmd = { 0 };
lcb_get_cmd_t* gcmd_p = &amp;gcmd;
gcmd.version = 0;
gcmd.v.v0.key = "key";
gcmd.v.v0.nkey = nkey;
lcb_get(instance, cookie, 1, &amp;gcmd);
lcb_wait(instance);</codeblock><codeblock spectitle="API2 - Callback" outputclass="language-c">lcb_set_get_callback(get_callback);

void get_callback(lcb_t instance, const void *cookie, lcb_error_t err, const lcb_resp_get_t *resp)
{
    if (err) {
        // ...
    } else {
        printf("Value is: %.*s\n", (int)resp->v.v0.nbytes, resp->v.v0.bytes);
    }
}</codeblock>API3
                is available since version 2.5.6 (but see note below) and offers a more concise way
                of performing
                operations:<codeblock spectitle="API3 - Scheduling" outputclass="language-c">lcb_CMDGET gcmd = { 0 };
LCB_CMD_SET_KEY(&amp;gcmd, "key", 3);
lcb_get3(instance, cookie, &amp;gcmd);</codeblock><codeblock spectitle="API3 - Callback" outputclass="language-c">lcb_install_callback(instance, LCB_CALLBACK_GET, (lcb_RESPCALLBACK)get_callback);

void get_callback(lcb_t instance, int cbtype, const lcb_RESPGET *resp)
{
    if (resp->rc) {
        //
    } else {
        printf("Value is: %.*s\n", (int)resp->nvalue, resp->value);
    }
}</codeblock></p>
            <p>
                <note>While API3 is available from version 2.4.0, the above example will only work
                    from version 2.5.6, although it will compile on any version. Versions prior to
                    2.5.6 require <i>explicit scheduling</i> to be used in the application. Explicit
                    scheduling requires invoking <apiname>lcb_sched_enter()</apiname> and
                        <apiname>lcb_sched_leave()</apiname> around any code scheduling operations.
                    Therefore the above snippet will work in version 2.4.0 and higher by using the
                    following:<codeblock outputclass="language-c">lcb_sched_enter(instance);
lcb_get3(instance, cookie, &amp;gcmd);
lcb_sched_leave(instance);</codeblock></note>
            </p>
            <p>It is recommended to upgrade to <i>api3</i>. Internally the older <i>api2</i>
                implementation is simply a wrapper around <i>api3</i>, and <i>api3</i> provides more
                concise code. Newer APIs and couchbase features will be added to <i>api3</i> but not
                    <i>api2</i>. Here are some things to keep in mind when porting:<ul
                    id="ul_jvl_jq1_cw">
                    <li>You can mix and match callback and scheduling styles. This means that you
                        can use <apiname>lcb_get3</apiname> together with
                            <apiname>lcb_set_get_callback</apiname>, or <apiname>lcb_get</apiname>
                        with <apiname>lcb_install_callback3</apiname>.</li>
                    <li>API3 allows you to have a single callback function that handles multiple
                        operation types (refer to <xref
                            href="document-operations.dita#topic_ltm_4n5_2v"/>), so you can
                        consolidate multiple <codeph>lcb_set_<i>operation</i>_callback</codeph> into
                        a single <i>API3</i> callback.</li>
                    <li>If you are using a version of libcouchbase prior to 2.5.6, be sure to invoke
                            <apiname>lcb_sched_leave</apiname>
                        <i>before</i>
                        <apiname>lcb_wait</apiname> (or before returning to the event loop, for
                        non-blocking applications). Calling <apiname>lcb_sched_leave</apiname> is no
                        longer required as of version 2.5.6</li>
                    <li>There is no explicit batching API in <i>api3</i>. If you wish to schedule
                        multiple operations, simply invoke the relevant scheduling API (e.g.
                                <codeph>lcb_<i>operation</i>3()</codeph>) multiple times, once for
                        each set of input.</li>
                    <li>The memory ownership model and callback semantics are the same for both API
                        versions. This means that key and value buffers provided to the library are
                        copied into the library's buffers. Likewise this means that buffers received
                        via callbacks are owned by the library's internal buffers.</li>
                </ul></p>
        </section>
        <section>
            <title>Feature Compatibility</title>
            <p>To take advantage of all features offered by Couchbase Server, you need to know what
                version of the client provides compatibility for the features you want to use. The
                following matrix shows which versions of the C SDK client support the major features
                of each version of Couchbase Server.</p>
            <p>
                <table frame="all" rowsep="1" colsep="1" id="table_cpq_bq5_qv">
                    <title>Couchbase Server and SDK Supported Version Matrix</title>
                    <tgroup cols="7" align="left">
                        <colspec colname="feature" colnum="1" colwidth="1.2*"/>
                        <colspec colname="v18" colnum="2" colwidth="1.0*"/>
                        <colspec colname="v20" colnum="3" colwidth="1.0*"/>
                        <colspec colname="v25" colnum="4" colwidth="1.0*"/>
                        <colspec colname="v30" colnum="5" colwidth="1.0*"/>
                        <colspec colname="v40" colnum="6" colwidth="1.0*"/>
                        <colspec colname="v45" colnum="7" colwidth="1.0*"/>
                        <thead>
                            <row>
                                <entry>Feature</entry>
                                <entry>Server 1.8</entry>
                                <entry>Server 2.0</entry>
                                <entry>Server 2.5</entry>
                                <entry>Server 3.0</entry>
                                <entry>Server 4.0</entry>
                                <entry>Server 4.5</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry namest="feature" nameend="v45"><b>Basic Features</b></entry>
                            </row>
                            <row>
                                <entry namest="feature" nameend="feature">CRUD Operations</entry>
                                <entry namest="v18" nameend="v45">SDK 2.4.0</entry>
                            </row>
                            <row>
                                <entry namest="feature" nameend="feature">View Querying APIs</entry>
                                <entry namest="v18" nameend="v45">Partial support since SDK 2.4.0.
                                    Full row-based support since SDK 2.4.7</entry>
                            </row>
                            <row>
                                <entry namest="feature" nameend="v45"><b>Advanced Features</b></entry>
                            </row>
                            <row>
                                <entry namest="feature" nameend="feature">Durability Requirements</entry>
                                <entry namest="v18" nameend="v45">2.4.0</entry>
                            </row>
                            <row>
                                <entry namest="feature" nameend="feature">Fast (CCCP) Bootstrapping</entry>
                                <entry namest="v18" nameend="v20">Not Supported</entry>
                                <entry namest="v25" nameend="v45">2.4.0</entry>
                            </row>
                            <row>
                                <entry namest="feature" nameend="feature">SSL Connectivity</entry>
                                <entry namest="v18" nameend="v25">Not Supported</entry>
                                <entry namest="v30" nameend="v45">2.4.0</entry>
                            </row>
                            <row>
                                <entry namest="feature" nameend="feature">Partial Cross-SDK Data types</entry>
                                <entry namest="v18" nameend="v20">Not Supported</entry>
                                <entry namest="v25" nameend="v45">Since 2.0</entry>
                            </row>
                            <row>
                                <entry namest="feature" nameend="feature">N1QL Querying</entry>
                                <entry namest="v18" nameend="v30">Not Supported</entry>
                                <entry namest="v40" nameend="v45">Since 2.5.0</entry>
                            </row>
                            <row>
                                <entry namest="feature" nameend="v45"><b>Administrative
                                    Features</b></entry>
                            </row>
                            <row>
                                <entry namest="feature" nameend="feature">Administrative API</entry>
                                <entry namest="v18" nameend="v45">Not Supported</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </p>
        </section>
        <section conref="../interface-stability-pars.dita#toplevel/interface-stability-section">In the
            C SDK, the stability of an interface is listed in its API documentation as well as in
            the headers themselves.</section>
    </body>
</topic>
