<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_wxg_cwb_mv">
    <title>Failure considerations for the C (libcouchbase) SDK in Couchbase</title>
    <titlealts><navtitle>Failure Considerations</navtitle></titlealts>
    <shortdesc conref="../shared/env-errors.dita#toplevel/shortdesc"/>
    <body>
    <section conref="../shared/env-errors.dita#toplevel/begin"
            conrefend="../shared/env-errors.dita#toplevel/end"/>
    <section>
        <title>Handling unresponsive servers</title>
            <p>If a server is unresponsive action should be taken to determine the cause and either
                fix the server or fail it over, depending on available replicas and the type of
                problem caused. The client SDK cannot determine if a server is unresponsive and by
                default assumes that any network or server failure is extremely temporary in nature
                and will attempt to reconnect as required.</p>
            <p>If a cluster node is unresponsive and the application determines (through a mechanism
                outside Couchbase) that the node may be unresponsive for some time, it is possible
                to avoid sending operations to that node:</p>
            <p>In Couchbase architecture, keys are mapped to [vBuckets], which in turn are mapped to
                cluster nodes. To avoid sending operations to a specific server, you need to
                retrieve the server index for the key and then the hostname corresponding to that
                index. This is done by using the <i>vBucket</i>
                API:<codeblock outputclass="language-c">bool maybe_skip_host(lcb_t instance,
                     const std::string&amp; key,
                     const std::vector&lt;std::string>&amp; badhosts) {
    lcbvb_CONFIG *vbc;
    lcb_cntl(instance, LCB_CNTL_GET, &amp;vbc);
    int ix, vbtmp;
    lcbvb_map_key(vbc, keybuf, keylen, &amp;vbtmp, &amp;ix);
    if (ix &lt; 0) {
        // Missing node. See next section!
        return false;
    } else {
        std::string hostname = lcbvb_get_hostname(ix);
        for (size_t ii = 0; ii &lt; badhosts.size(); ++ii) {
            if (hostname == badhosts[ii]) {
                return true;
            }
        }
    }
    return false;
}</codeblock></p>
    </section>
        </body>
</topic>
