<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_j2y_syz_lv">
    <title>Handling Exceptions and other Errors with the C (libcouchbase) SDK in Couchbase</title>
    <titlealts><navtitle>Handling Errors</navtitle></titlealts>
    <shortdesc>An error is received if an operation could not be executed. Sometimes errors are
        received directly from the server while other times they are generated internally by the
        client. This page describes how errors are reported in the C SDK, and how some error types
        should be handled.</shortdesc>
  <body>
        <section>
            <title>Error Codes</title>
            <p>Most functions in the C SDK return an error code of type
                    <apiname>lcb_error_t</apiname>. As an application developer, you should be
                prepared to handle non-successful error codes and treat them appropriately. If the
                library is not behaving as expected then your first action should be to determine if
                your application is properly handling (and checking) any error codes returned by the
                library. Remember that error codes are only significant when there is an error
                condition!</p>
            <p>A successful operation is defined by the return code of <codeph>LCB_SUCCESS</codeph>,
                while any other code indicates an error condition. You can find a full list of error
                codes in the <filepath>&lt;libcouchbase/error.h></filepath> header.<note>New
                    applications are advised to enable extended error codes by using the
                        <codeph>LCB_CNTL_DETAILED_ERRCODES</codeph> setting (see <xref
                        href="client-settings.dita#toplevel"/>). Extended error codes are not
                    enabled by default to avoid sending older applications error codes that they
                    cannot handle.</note></p>
        </section>
        <section>
            <title>When to Check for Errors, and What They Mean</title>
            <p>Success and failure depend on the context. A successful return code for one of the
                data operation APIs (for example, <apiname>lcb_store3()</apiname>) does not mean the
                operation itself succeeded and the key was successfully stored. Rather, it means the
                key was successfully placed inside the libraryâ€™s internal queue. The actual error
                code is delivered as the <apiname>lcb_RESPBASE::rc</apiname> parameter in the
                operation callback itself (that is, the callback installed with
                    <apiname>lcb_install_callback3()</apiname>).</p>
            <p>Non-successful error codes received in callbacks are <i>usually</i> a result of a
                negative server reply or a network connectivity issue.</p>
            <p>If an error was returned from a scheduling function (e.g.
                    <apiname>lcb_get3())</apiname>, it may be the result of a bad input (see
                    <apiname>LCB_EIFINPUT</apiname>). Scheduling functions may also return
                    <apiname>LCB_NOT_SUPPORTED</apiname> or
                    <apiname>LCB_CLIENT_FEATURE_UNAVAILABLE</apiname> which suggest that the server
                or the client do not support the given API.</p>
            <p>If a scheduling API returns anything but <codeph>LCB_SUCCESS</codeph>, the callback
                for that specific request will <i>not</i> be delivered. Conversely, it is guaranteed
                that the callback will always be delivered if the return code for the scheduling
                function is <codeph>LCB_SUCCESS</codeph>.</p>
            <p>You can print a textual representation of the error by using
                    <apiname>lcb_strerror</apiname>. This function is always guaranteed to return a
                valid
                string<codeblock outputclass="language-c">lcb_strerror(NULL, LCB_OPTIONS_CONFLICT);</codeblock><note>The
                    first argument to <apiname>lcb_strerror</apiname> is ignored and has never been
                    used.</note></p>
        </section>
      <section conref="../shared/couchbase-errors.dita#toplevel/begin" conrefend="../shared/couchbase-errors.dita#toplevel/end"/>
        <section>
            <title>Inspecting HTTP (N1QL, MapReduce, FTS) Errors</title>
            <p>Many of the SDK's APIs (<apiname>lcb_n1ql_query</apiname>,
                    <apiname>lcb_view_query</apiname>, <apiname>lcb_fts_query</apiname>) use HTTP
                internally. Unlike Key-Value based APIs which use a binary protocol and have a fixed
                internal format for errors, APIs using JSON-over-HTTP can report multiple errors
                anywhere during execution. The C SDK itself can only report a single top-level error
                code (i.e. the <parmname>rc</parmname> within the response structure).</p>
            <p>In cases where an HTTP API failed with a non-successful (non-<i>2xx</i>) HTTP reply,
                the <parmname>rc</parmname> field will be set to <apiname>LCB_HTTP_ERROR</apiname>
                and the <apiname>LCB_RESP_F_FINAL</apiname> bit set in the
                    <parmname>rflags</parmname> field. The <i>actual</i> cause may be determined
                using one or more of the following mechanisms within the response callback:<ul
                    id="ul_i5k_nrk_nw">
                    <li>Inspecting the underlying <apiname>lcb_RESPHTTP</apiname> object for
                            details.<codeblock outputclass="language-c">if (rv->rc == LCB_HTTP_ERROR &amp;&amp; rv->htresp) {
    printf("Underlying HTTP failed with code %d\n", rv->htresp->htstatus);
    printf("Raw payload: %.*s\n", (int)rv->htresp->nbody, rv->htresp->nbody);
}</codeblock><codeph>rv</codeph>
                        may be <apiname>lcb_RESPN1QL</apiname> or
                            <apiname>lcb_RESPVIEWQUERY</apiname> or other response types using a
                        row-like API. Ensure that you verify the <parmname>hresp</parmname> pointer
                        is not <codeph>NULL</codeph> before dereferencing. Be aware that the content
                        of the response body may be empty or only contain partial JSON.</li>
                    <li>Inspecting the row's <i>metadata</i>. The <i>metadata</i> is exposed via the
                        normal row fields (e.g. <parmname>row</parmname>, <parmname>nrow</parmname>)
                        of the response structure, but only when the
                            <apiname>LCB_RESP_F_FINAL</apiname> bit is set in the
                            <parmname>rflags</parmname>
                        field.<codeblock outputclass="language-c">if ((resp->rflags &amp; LCB_RESP_F_FINAL) &amp;&amp; resp->nrow) {
    printf("Metadata: %.*s\n", (int)resp->nrow, resp->row);
    json_parse(resp->nrow, resp->row);
}</codeblock>The
                            <i>metadata</i> is the raw JSON returned from the server-side API. It
                        will be emptied out of any row contents (i.e. any actual result set) as they
                        are dynamically parsed out from the stream. The metadata may contain errors,
                        warnings, and other metrics which may be useful when debugging. Unlike the
                        raw HTTP response, the metadata should always be valid JSON.</li>
                </ul>Note that any error codes other than <apiname>LCB_HTTP_ERROR</apiname> indicate
                that either the C SDK has handled and converted HTTP or metadata-reported errors, or
                that an error occurred at the transport or input validation layer. It may still be
                useful to inspect the raw HTTP response (if any) and/or the metadata as above in
                such situations.</p>
        </section>

      <section>
          <title>Program Crashes and Pitfalls</title>
          <p>If your application abnormally terminates while invoking a function with the
              library, you may have either encountered a bug or passed the library an invalid
              pointer. Keep in mind the following points:<ul id="ul_djj_bw1_mv">
                  <li>The library is <i>not</i> thread safe. While you may use multiple
                      <i>lcb_t</i> handles in different threads, you must never access the
                      same handle from multiple threads without using external synchronization
                      functions (such as mutexes).</li>
                  <li>The response structures within the callback are valid <i>only</i> in the
                      scope of the callback function itself. This means you must copy the
                      structure (and any contained keys and values) into another location in
                      memory if you wish to use it outside the callback.</li>
                  <li>Callbacks will <i>not</i> be invoked if the scheduling function returns
                      a failure status. This means that the following code will result in
                      accessing uninitialized
                      memory:<codeblock outputclass="language-c">struct myresult {
  char *value;
  lcb_error_t err;
}
static void get_callback(lcb_t instance, int cbtype, const lcb_RESPGET *resp)
{
  struct myresult *mr = (struct myresult *)resp->cookie;
  mr->err = resp->rc;
  if (mr->err == LCB_SUCCESS) {
    mr->value = malloc(resp->nkey + 1);
    memcpy(mr->value, resp->key, resp->nkey);
    mr->value[resp->nkey] = '\0';
  } else {
    mr->value = NULL;
  }
}

// Some lines later
struct myresult mr;
lcb_get3(instance, &amp;mr, &amp;cmd);
lcb_wait(instance);
if (mr.value) {
  // If lcb_get() returned an error, this will be uninitialized access!
  // ...
}</codeblock></li>
              </ul></p>
          <p>A crash can also be a result of a bug in the library. Sometimes the library will call
                abort when it detects an inconsistent state. If you think you have found a bug in
                the library you should file a bug in our <xref
                    href="http://www.couchbase.com/issues/browse/CCBC" format="html"
                    scope="external">issue tracker</xref> or contact <xref
                    href="http://support.couchbase.com" format="html" scope="external">Couchbase
                    support</xref>. When filing a bug, please be sure to include the library version
                and any relevant code samples.</p>
      </section>

    </body>
</topic>
