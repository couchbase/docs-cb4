<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="threshold-logging">
    <title>Threshold Logging Tracing through the SDK</title>
    <titlealts><navtitle>Threshold Logging</navtitle></titlealts>
    <shortdesc conref="../shared/tracing.dita#tracing/shortdesc"/>

    <body>
        <section conref="../shared/tracing.dita#tracing/why_tracing">
        </section>

        <section conref="../shared/tracing.dita#tracing/open_tracing">
        </section>

        <section id="tracing_c">
            <title>
                Threshold Logging in C SDK
            </title>

            <p>
            Response Time Observability is implemented as Threshold Logging in libcouchbase from release 2.9.0.</p>

            <table frame="all" rowsep="1" colsep="1" id="threshold-logging-tracer-ref-lcb">
                <title>Threshold Logging Tracer Properties</title>
                <tgroup cols="3">
                    <thead>
                        <row>
                            <entry>Setting name</entry>
                            <entry>Macro name for <codeph>lcb_cntl</codeph></entry>
                            <entry>Description</entry>
                            <entry>Default Value</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><codeph>enable_tracing</codeph></entry>
                            <entry><codeph>LCB_CNTL_ENABLE_TRACING</codeph></entry>
                            <entry>Boolean used to determine tracing is enabled. Defaults to using the
                            <codeph>ThesholdLoggingTracer</codeph> if enabled. When false a Noop or similar tracing
                            implementation should be used instead. Also when enabled the SDK will try and retrieve
                            duration metrics from the server for KV operations.</entry>
                            <entry>true</entry>
                        </row>
                        <row>
                            <entry><codeph>tracing_threshold_queue_flush_interval</codeph></entry>
                            <entry><codeph>LCB_CNTL_TRACING_THRESHOLD_QUEUE_FLUSH_INTERVAL</codeph></entry>
                            <entry>The interval between executions that processes the collected operation spans.
                            Expressed in seconds with fractions (or microseconds for <codeph>lcb_cntl</codeph>).
                            </entry>
                            <entry>10.0 seconds (or 10000000 microseconds)</entry>
                        </row>
                        <row>
                            <entry><codeph>tracing_threshold_queue_size</codeph></entry>
                            <entry><codeph>LCB_CNTL_TRACING_THRESHOLD_QUEUE_SIZE</codeph></entry>
                            <entry>The maximum number of items to keep in internal queue per service.</entry>
                            <entry>128</entry>
                        </row>
                        <row>
                            <entry><codeph>tracing_threshold_kv</codeph></entry>
                            <entry><codeph>LCB_CNTL_TRACING_THRESHOLD_KV</codeph></entry>
                            <entry>The KV operation operation threshold.
                            Expressed in seconds with fractions (or microseconds for <codeph>lcb_cntl</codeph>).
                            </entry>
                            <entry>0.5 second (500000 microseconds)</entry>
                        </row>
                        <row>
                            <entry><codeph>tracing_threshold_view</codeph></entry>
                            <entry><codeph>LCB_CNTL_TRACING_THRESHOLD_VIEW</codeph></entry>
                            <entry>The View query operation threshold.
                            Expressed in seconds with fractions (or microseconds for <codeph>lcb_cntl</codeph>).
                            </entry>
                            <entry>1 second (1000000 microseconds)</entry>
                        </row>
                        <row>
                            <entry><codeph>tracing_threshold_n1ql</codeph></entry>
                            <entry><codeph>LCB_CNTL_TRACING_THRESHOLD_N1QL</codeph></entry>
                            <entry>The N1QL query operation threshold.
                            Expressed in seconds with fractions (or microseconds for <codeph>lcb_cntl</codeph>).
                            </entry>
                            <entry>1 second (1000000 microseconds)</entry>
                        </row>
                        <row>
                            <entry><codeph>tracing_threshold_fts</codeph></entry>
                            <entry><codeph>LCB_CNTL_TRACING_THRESHOLD_FTS</codeph></entry>
                            <entry>The FTS query operation threshold.
                            Expressed in seconds with fractions (or microseconds for <codeph>lcb_cntl</codeph>).
                            </entry>
                            <entry>1 second (1000000 microseconds)</entry>
                        </row>
                        <row>
                            <entry><codeph>tracing_threshold_analytics</codeph></entry>
                            <entry><codeph>LCB_CNTL_TRACING_THRESHOLD_ANALYTICS</codeph></entry>
                            <entry>The Analytics query operation threshold.
                            Expressed in seconds with fractions (or microseconds for <codeph>lcb_cntl</codeph>).
                            </entry>
                            <entry>1 second (1000000 microseconds)</entry>
                        </row>
                        <row>
                            <entry><codeph>tracing_orphaned_queue_flush_interval</codeph></entry>
                            <entry><codeph>LCB_CNTL_TRACING_ORPHANED_QUEUE_FLUSH_INTERVAL</codeph></entry>
                            <entry>The interval between executions that processes the collected operation spans.
                            Expressed in seconds with fractions (or microseconds for <codeph>lcb_cntl</codeph>).
                            </entry>
                            <entry>10.0 seconds (or 10000000 microseconds)</entry>
                        </row>
                        <row>
                            <entry><codeph>tracing_orphaned_queue_size</codeph></entry>
                            <entry><codeph>LCB_CNTL_TRACING_ORPHANED_QUEUE_SIZE</codeph></entry>
                            <entry>The maximum number of items to keep in internal queue per service.</entry>
                            <entry>128</entry>
                        </row>
                    </tbody>
                </tgroup>
        </table>
        </section>


        <section id="customizing">
            <title>
                Customizing
            </title>
            <p>
                You can customise Tracer settings through the connection string, or using <apiname>lcb_cntl</apiname>. Here
                is an example on how to customize our default tracer to reduce the time interval when the information
                gets logged:
                <codeblock outputclass="language-java">
lcb_uint32_t tmoval = 10000000; /* in microseconds, 10 seconds */
lcb_cntl(instance, LCB_CNTL_SET, LCB_CNTL_TRACING_THRESHOLD_QUEUE_FLUSH_INTERVAL, &amp;tmoval);


/* the same as above, but using string-encoded float value, representing seconds with fraction part */
lcb_cntl_string("tracing_threshold_queue_flush_interval", "10.0");


/* the same, but using connection string */
lcb_t instance;
struct lcb_create_st cropts = {0};
lcb_error_t rc;

cropts.version = 3;
cropts.v.v3.connstr = "couchbase://127.0.0.1/default?tracing_threshold_queue_flush_interval=10.0";
cropts.v.v3.username = "Administrator";
cropts.v.v3.passwd = "password";

rc = lcb_create(&amp;instance, &amp;cropts);
if (rc != LCB_SUCCESS) {
    die(rc, "Creating instance");
}
</codeblock>
                Follow along with our example of <xref href="./tracing-from-the-sdk.dita" />, to discover how to use tracing in the C SDK for Response Time Observability.
            </p>
        </section>
    </body>
</topic>
