<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="travel-sample-app-generic">
  <title>Sample Application</title>
  <shortdesc>Couchbase Travel is a sample web application that demonstrates how to interact with the
      Couchbase query services via the SDKs</shortdesc>
    <prolog>
        <metadata>
            <othermeta name="langSelector" content="hidden"/>
        </metadata>
    </prolog>
  <body>
      <p>Each SDK comes with its own implementation of the backend for the application. You can download
          the complete source code and then build and run the app. While the app runs, you can get a peek of what is happening in
          the backend via the "Narration" (a console like UI element that can display N1QL queries for instance). It is only
          visible in components that communicate with the server (but can also be collapsed).
          <image href="shared/images/travel-app-narration.png" width="650px" placement="break"/></p>

      <p>The documentation for the travel app illustrates the data model and walks through the N1QL and FTS queries used to
	      select flights and search for hotels.</p>

      <p>The <xref href="https://github.com/couchbaselabs/try-cb-frontend" format="html" scope="external">travel app front-end</xref> is the same in each SDK implementation and is built on an <xref href="https://angular.io" format="html" scope="external">Angular2</xref> stack.</p>

      <p>The focus of this tutorial is the backend, which is a REST API available in the following languages:</p>
      <ul>
	    <li><xref href="nodejs/sample-app-backend.dita">Node.js</xref></li>
	    <li><xref href="java/sample-app-backend.dita">Java</xref></li>
	    <li><xref href="dotnet/sample-app-backend.dita">.NET</xref></li>
	    <li><xref href="python/sample-app-backend.dita">Python</xref></li>
	    <li><xref href="go/sample-app-backend.dita">Go</xref></li>
	    <li><xref href="c/sample-app-backend.dita">C/C++ (basic
            interaction with data model only)</xref></li>
        </ul>
      <p>Please refer to the travel-app documentation of your SDK of choice for specifics for that
          particular SDK, like backend dependencies, source-code checkout and running instructions.</p>
      <p>The application allows users to find flights by entering airports and travel dates. For the
          airport entries, the app uses a N1QL query bound to an Angular type ahead directive to
          suggest airport names based on the first few letters entered.</p>
      <p>If you want to try the sample app first, without having to build and run the sample code, take a
          look at the travel app hosted at <xref href="http://try.couchbase.com" format="com"
          scope="external"/>. See <xref href="#travel-sample-app-generic/using-travel-app" format="dita"/>
          below for guidelines on how to use the travel app.</p>

      <section id="note-installing">
          <title>Generic set up</title>
          <p> You'll need: <ul>
                  <li>Your favorite editor or IDE</li>
                  <li>Your SDK of choice and its specific dependencies</li>
                  <li>The sample app source code for your SDK from GitHub (check the instructions and make sure to use the implementation compatible with the v2 API)</li>
                  <li>A local <codeph>Couchbase 4.5</codeph> (or greater) installation (make sure that the
                          <codeph>travel-sample</codeph> bucket has been loaded from 4.5 and that there is,
                      at least, one node with data, query, index and full text search services in the cluster)</li>
                  <li>That's it!</li>
              </ul></p>

          <p>To start, it is easiest if you run Couchbase Server and the travel sample app on the same
              machine. It's not required to run your development environment this way, and
              advanced Multi-Dimensional Scaling (MDS) configurations are supported. It's just easier to start a development
              environment with components running locally.</p>

          <p>Download <xref href="http://www.couchbase.com/download" scope="external" format="html">Couchbase Server 4.6
              </xref>and install it. As you follow the download instructions and setup wizard, make sure you keep all the services
              (<codeph>data</codeph>, <codeph>query</codeph>, and <codeph>index</codeph>) selected. Make sure also to install the
              sample bucket named <codeph>travel-sample</codeph>
              (introduced in Couchbase Server 4.0) because it contains the data used in this
              tutorial.</p>
          <note type="warning">It is important to install the
          <codeph>travel-sample</codeph> bucket from a 4.5 or later version of
              Couchbase Server, as it has been enriched with hotels data. If you have installed the sample bucket from an earlier
              version, delete the bucket and follow the instructions below.</note>
          <p>If you already have Couchbase Server 4.5 or later installed but did not install the
              <codeph>travel-sample</codeph> bucket (or you installed it from a 4.0 version), open the Couchbase Web Console
              and select <menucascade><uicontrol>Settings</uicontrol> <uicontrol>Sample Buckets</uicontrol> </menucascade>.
              Select the <codeph>travel-sample</codeph> checkbox, and then click <uicontrol>Create</uicontrol>. A notification
              box in the upper-right corner disappears when the bucket is ready to use.</p>
          <p>Finally, in order to be able to search for hotels, an FTS index called <codeph>hotels</codeph> must be created on
              the <codeph>travel-sample</codeph> bucket. Go to <menucascade><uicontrol>Indexes</uicontrol> <uicontrol>Full Text</uicontrol> <uicontrol>New Full Text Index</uicontrol></menucascade> and create the <codeph>hotels</codeph>
              index:<image
                    href="shared/images/travel-app-fts-index.png" width="650px" placement="break"/>.</p>
          <p>Note that the index mapping could be better tuned, but a generic mapping will also work fine for this example.</p>
      </section>

      <section id="using-travel-app">
          <title>Using the Travel App</title>
          <p>To find a flight:</p>
          <ol>
              <li>Open a browser and navigate to the login URL that was displayed when you started the
                  app.</li>
              <li>Sign in to Couchbase Travel by providing your credentials, or create a new account (which
                will expire after some time depending on the backend used, usually 1 hour): <image
                      href="shared/images/travel-app-login.png" width="650px" placement="break"/></li>
              <li>Find a flight: <image href="shared/images/travel-app-screen-flight.png" width="650px" placement="break"/>
                  <p>In the <uicontrol>Airport or City</uicontrol> section, enter an airport code or city name in the
                  <uicontrol>From</uicontrol> and <uicontrol>To</uicontrol> fields. </p></li>
              <li>In the <uicontrol>Travel Dates</uicontrol> section, enter <uicontrol>Leave</uicontrol> and
                <uicontrol>Return</uicontrol> dates in <codeph>MM/DD/YYYY</codeph> format.</li>
              <li>Click <uicontrol>Find Flights</uicontrol>. The app displays the available flights for the outbound
                and return legs of the trip.</li>
              <li>Select one or more flights to add to your cart by clicking the <codeph>choose</codeph> button next
                to each flight.<image href="shared/images/travel-app-screen-flight-choose.png" width="650px" placement="break"/></li>
          </ol>
          <p>Now you have flights stored locally in your cart. Go to the cart page and review your flights:</p>
          <ol>
              <li>Click on the cart icon button in the navigation bar, top right</li>
              <li>See that the number of flights in the cart and the total cost are displayed in said navigation bar.</li>
              <li>Review the flights in your cart, and book one by clicking on the <codeph>book</codeph> button next to it.
                <image href="shared/images/travel-app-screen-cart.png" width="650px" placement="break"/>
                </li>
              <li>The flight is now booked, as confirmed by a message on the page</li>
            </ol>
          <p>The flights that you've booked are stored in the backend. You can see which flights you've booked by navigating
            to the "user" page. The backend uses authentication to control access to the endpoints for booking and listing
            flights.</p>
          <image href="shared/images/travel-app-screen-user.png" width="650px" placement="break"/>
          <p>To search for an hotel, navigate to the hotel page:</p>
          <ol>
            <li>click on the "earth" icon in the navigation bar (rightmost icon).</li>
            <li>click on the <codeph>Find Hotels</codeph> button if you want to have a look at any first 100 hotels.</li>
            <li>Refine your search using the input boxes, either by keyword, geographically or both.<image href="shared/images/travel-app-screen-hotels.png" width="650px" placement="break"/></li>

        </ol>
        <note type="warning">You should make sure that you have installed Couchbase 4.5 with FTS enabled. The API backend that
            is used by the hotels page makes use of an FTS index that you have to create, named <codeph>hotels</codeph>.</note>
      </section>

      <section id="datamodel">
          <title>The Travel App data model</title>
          <p>The data model for the travel app uses several distinct document types: airline, route, airport and landmark.
              In Couchbase Server 4.5 and later it has been enriched with a 5th type: hotel.</p>
          <p>The model for each kind of document contains: <ul>
                      <li>A key that acts as a primary key</li>
                      <li>An <codeph>id</codeph> field that identifies the document</li>
                      <li>A <codeph>type</codeph> field that identifies the kind of document</li>
                  </ul></p>
          <p>The following figure illustrates the relationship between the different kinds of documents in 4.0. It
              shows the primary key, ID, and type fields that each document has, plus a few
              representative fields in each type of document.</p>
          <fig>
              <title>Documents in the travel app 4.0 data model</title>
              <image href="shared/images/travel-app-data-model.png"></image>
          </fig>
          <p>Hotels, like landmarks, don't have relations to other types. The figure below displays essential information
              about the hotel type introduced in the sample in 4.5:</p>
          <fig>
              <title>The hotel type in the travel app 4.5 data model</title>
              <image href="shared/images/travel-app-hotel-data-model.png"></image>
          </fig>
      </section>

      <section>
          <title>Airline documents</title>
          <p><term>Airline documents</term> contain details about airlines such as the name of the airline,
                      International Air Transport Association (IATA) two-character airline designator,
                      International Civil Aviation Organization (ICAO) three-character airline designator,
                      and the airline call sign.</p>
                  <p>For airline documents, the value of the <codeph>type</codeph> field is
                          <codeph>airline</codeph>.</p>

      <codeblock spectitle="Airline document model" outputclass="language-json">airline_24 			   ←This is the key, which also acts as a primary key
{
  "active": "Y",
  "callsign": "AMERICAN",
  "country": "United States",
  "iata": "AA",
  "icao": "AAL",
  "id": "24",
  "name": "American Airlines",
  "type": "airline"              ←This is the type identifier for the document
}</codeblock>
      </section>

      <section>
      <title>Route documents</title>
          <p><term>Route documents</term> contain details about flights such as the name of the airline,
                      departure airport, destination airport, number of stops during the flight, type of
                      aircraft, flight number, and flight schedule. </p>
                  <p>Route documents also contain a foreign key identifier, <codeph>airlineid</codeph>, that
                      is used to retrieve the document that contains information about the airline that flies
                      the route. The value of the <codeph>airlineid</codeph> field is identical to the key for
                      the corresponding airline document.</p>
                  <p>For route documents, the value of the <codeph>type</codeph> field is
                          <codeph>route</codeph>.</p>

      <codeblock spectitle="Route document model" outputclass="language-json">route_5966                         ←This is the key, which also acts as a primary key
{
  "id": "5966",
  "type": "route",               ←This is the type identifier for the document
  "airline": "AA",
  "airlineid": "airline_24",     ←This is the foreign key identifier to an airline document
  "sourceairport": "MCO",
  "destinationairport": "SEA",
  "stops": "0",
  "equipment": "737",
  "schedule": [
      {"day": 1, "utc": "13:25:00", "flight": "AA788"},
      {"day": 4, "utc": "13:25:00", "flight": "AA419"},
      {"day": 5, "utc": "13:25:00", "flight": "AA519"}
  ]
}</codeblock>
      </section>

      <section>
          <title>Airport documents</title>
              <p><term>Airport documents</term> contain details about airports  such as name, location, time
                      zone, ICAO four-character alphanumeric airport code, and Federal Aviation
                      Administration (FAA) location identifier.</p>
                  <p>For airport documents, the value of the <codeph>type</codeph> field is
                          <codeph>airport</codeph>.</p>
          <codeblock spectitle="Airport document model" outputclass="language-json">airport_3577                       ←This is the key, which also acts as a primary key
{
  "travel-sample": {
      "airportname": "Seattle Tacoma Intl",
      "city": "Seattle",
      "country": "United States",
      "faa": "SEA",
      "geo": {
          "alt": 433,
          "lat": 47.449,
          "lon": -122.309306
      },
      "icao": "KSEA",
      "id": 3577,
      "type": "airport",         ←This is the type identifier for the document
      "tz": "America/Los_Angeles"
  }
}</codeblock>
      </section>
      <section>
      <title>Landmark documents</title>
              <p><term>Landmark documents</term> contain details about points of interest such as hotels. They
                      include information such as name, location, price, contact information, and the kind
                      of activity that the point of interest provides.</p>
                  <p>For landmark documents, the value of the <codeph>type</codeph> field is
                          <codeph>landmark</codeph>.</p>
              <p>Landmark documents are not used in the travel-sample application, which focuses on a more specific subset
                  of point of interests that have their own type: hotels.</p>
      </section>

      <section>
        <title>Hotel documents</title>
        <p><term>Hotel documents</term> are all about a specific type of point of interests: hotels. They include information
          such as a name, description, location (coutry, state, city and address), price and services, and even customer
          reviews.</p>
        <p>For hotel documents, the value of the <codeph>type</codeph> field is <codeph>hotel</codeph>.</p>

      <codeblock spectitle="Hotel document model" outputclass="language-json">hotel_10180                     ←This is the key, which also acts as a primary key
{
    "address": "8301 Hollister Ave",
    "checkin": "12PM",
    "checkout": "4PM",
    "city": "Santa Barbara",
    "country": "United States",
    "description": "Located on 78 acres of oceanfront property, this resort is an upscale experience that caters to luxury travelers. There are 354 guest rooms in 19 separate villas, each in a Spanish style. Property amenities include saline infinity pools, a private beach, clay tennis courts, a 42,000 foot spa and fitness center, and nature trails through the adjoining wetland and forest. The onsite Miro restaurant provides great views of the coast with excellent food and service. With all that said, you pay for the experience, and this resort is not for the budget traveler.  In addition to quoted rates there is a $25 per day resort fee that includes a bottle of wine in your room, two bottles of water, access to fitness center and spa, and internet access.",
    "free_breakfast": true,
    "free_internet": false,
    "free_parking": false,
    "geo": {
        "accuracy": "ROOFTOP",
        "lat": 34.43429,
        "lon": -119.92137
    },
    "id": 10180,
    "name": "Bacara Resort \u0026 Spa",
    "pets_ok": false,
    "price": "$300-$1000+",
    "reviews": [
        {
            "author": "Orval Lebsack",
            "content": "I stayed there with a friend for a girls trip around St. Patricks Day. This was my third time to NOLA, my first at Chateau Lemoyne. The location is excellent....very easy walking distance to everything, without the chaos of staying right on Bourbon Street. Even though its a Holiday Inn, it still has the historical feel and look of NOLA. The pool looked nice too, even though we never used it. The staff was friendly and helpful. Chateau Lemoyne would be hard to top, considering the price.",
            "date": "2013-10-26 15:01:39 +0300",
            "ratings": {
                "Cleanliness": 5,
                "Location": 5,
                "Overall": 4,
                "Rooms": 4,
                "Service": 4,
                "Sleep Quality": 5,
                "Value": 4
            }
        }
    ],
    "state": "California",
    "type": "hotel",         ←This is the type identifier for the document
    "url": "http://www.bacararesort.com/",
    "vacancy": true
}
}</codeblock>
      </section>

      <section id="architecture">
          <title>Architecture</title>

          <p>The application serves an HTML file named <filepath>index.html</filepath>
          (in an <filepath>src/app/</filepath> folder usually contained in a root folder
          dedicated to frontend files, eg. the <filepath>public</filepath> path in the Node.js
          application). This file contains references to various included script files for front
          side JavaScript components such as Bootstrap and jQuery. It also contains a small
          script snippet that bootstraps the Angular2 application, as well as an Angular loop
          (<codeph>{{#each scripts.polyfills}}</codeph>) to load <apiname>polyfills</apiname>
          (implementation of html5/web component elements that can be used as a backup if the
          browser doesn't provide the corresponding feature natively).</p>

          <p>Angular2 works in terms of <apiname>Components</apiname>, and the main component
          that gets displayed at bootstrap is in <filepath>src/app/try.component.ts</filepath>.
          It is in charge of displaying the common elements of the single-page app, and defines
          <apiname>Routes</apiname>, determining which component to show depending on the URL.
          The place at which said components are shown in the html is represented by a component
          <apiname>tag</apiname> provided by the angular <apiname>Router</apiname>:
          <codeph>&lt;router-outlet&gt;&lt;/router-outlet&gt;</codeph>.</p>

          <p>The application is then split into several packages.  Each talks to a specific
            subset of the REST API provided by the backend. Each package has a corresponding
            main Angular <apiname>Component</apiname> that provides the methods to interact
            with the API or perform work. Their corresponding views then use these methods
            to populate data in the application.</p>

          <p>The backend REST API, in its version associated with Couchbase Server 4.5 (version 2),
            can be found in the
            <xref href="https://github.com/couchbaselabs/try-cb-frontend/blob/master/documentation/try-cb-api-spec-v2.adoc" format="html" scope="external">couchbaselabs/try-cb-frontend</xref>
            repository on GitHub.</p>

          <fig>
              <title>The Application Services</title>
              <image href="shared/images/travel-app-archi.png" width="650px" />
          </fig>
      </section>


      <section>
          <title>The Home component</title>
          <p><filepath>src/app/+home</filepath> is the main page, dealing with flight searches.
            In the backend, these searches are performed using <apiname>N1QL</apiname> queries.
            It has three main methods:
          <ul>
              <li>Two at <apiname>getToAirport</apiname> and <apiname>getFromAirport</apiname>
              which are both REST API calls to the <filepath>/api/airports</filepath> REST endpoint</li>
              <li>And one at <apiname>findFlights</apiname>, which is a REST API call to the
                <filepath>/api/flightPaths/{to}/{from}</filepath> endpoint</li>
            </ul></p>

          <fig>
              <title>Home Component call hierarchy</title>
              <image href="shared/images/travel-app-archi-home.png" width="650px" />
          </fig>
          <p>The application attempts to find an airport based on the codes used for the
              <codeph>name</codeph> (case sensitive), and codes for Federal Aviation
              Administration (FAA) or International Civil Aviation Organization (ICAO).
              The backend method allows the user to search by FAA code,
              ICAO code or airport name. It then prepares a N1QL query based on the
              selection criteria (using bucket information from its configuration). The
              query is then sent to the Couchbase query service, all by using the
              backend's associated SDK.</p>

          <p>Using the data model, if you enter <userinput>SEA</userinput>, <userinput>KSEA</userinput>, or
                  <userinput>Seattle</userinput>, the typeahead directive gives you the option to
              select <uicontrol>Seattle Tacoma Intl.</uicontrol> To see the results of the query,
              watch the terminal window in which the application is running. The example is
              showing an output for the N1QL statements:</p>
          <codeblock outputclass="language-sql">QUERY: SELECT airportname FROM `travel-sample` WHERE faa ='SEA'
QUERY: SELECT airportname FROM `travel-sample` WHERE icao ='KSEA'
QUERY: SELECT airportname FROM `travel-sample` WHERE airportname LIKE 'Seattle%'</codeblock>

          <p>After the airports are selected and a leave date is entered, the application tries to find
              route and schedule information for an airline that services the requested flight
              path. The call to the REST API <filepath>/api/flightPaths/{to}/{from}</filepath> on the
              server is initiated when the user clicks the <uicontrol>Find Flights</uicontrol>
              button.</p>

          <p>The elements in the form bind their controls to corresponding objects in the
            component, which allows to perform some validation checking among other things.
            To learn more about forms and validation in Angular2, please refer to the
            <xref href="https://angular.io/docs/ts/latest/guide/forms.html" format="html" scope="external">official
            documentation</xref>.
            The submit button calls the component's <codeph>findFlights()</codeph> function, which in
            turn invokes the server REST API <filepath>/api/flightPaths/{to}/{from}/</filepath> function either
            once for a one way flight or twice for a round-trip flight. When it requests the return
            flight for a round trip, it just uses the reverse <codeph>to</codeph> and <codeph>from</codeph>
            sequence. While <codeph>to</codeph> and <codeph>from</codeph> are made part of the URL, the API
            also expects an additional query parameter, <codeph>leaves</codeph>, that contains the requested
            travel date.</p>

          <p>In the backend, the code corresponding to the <apiname>flightPaths</apiname> endpoint performs
            several important steps for processing the request to find flights:</p>
          <ul>
              <li>It determines the FAA identifier for the <codeph>to</codeph> and <codeph>from</codeph>
                  airports.</li>
              <li>It searches for routes and schedule information based on the source and destination airports
                  and the requested dates. The collection of schedule documents is nested in the route
                  document for each route. They are grouped by day of the week (1-7), and the requested
                  dates are compared to the day of the week to see what flights are available on those
                  particular dates. It returns a list of flights that includes data for the following
                  fields: airline, flight, departure time ("utc" field), from, to, price (randomly assigned
                  by the backend) and aircraft ("equipment" field). </li>
          </ul>

          <p> The Query can be seen in the terminal window that is running the backend application: </p>
          <codeblock outputclass="language-sql">QUERY:
SELECT a.name, s.flight, s.utc, r.sourceairport, r.destinationairport, r.equipment
FROM `travel-sample` r
UNNEST r.schedule s
JOIN `travel-sample` a
ON KEYS r.airlineid
WHERE r.sourceairport='SEA' AND r.destinationairport='MCO' AND s.day=6
ORDER BY a.name</codeblock>
      </section>

      <section>
          <title>N1QL query anatomy</title>
          <p>The Couchbase Query API is a powerful tool for efficient retrieval of information from a
              document data store. In each SDK-specific travel application, queries about flights are created by
              a dedicated module (for example in Node.js, the <filepath>flightPath.js</filepath> module).
              Here's an example of a query that finds flights between Seattle-Tacoma International Airport (SEA)
              and Orlando International Airport (MCO), followed by a description of what's happening in the query:</p>

          <codeblock outputclass="language-sql">SELECT a.name, s.flight, s.utc, r.sourceairport, r.destinationairport, r.equipment
FROM `travel-sample` r
UNNEST r.schedule s
JOIN `travel-sample` a ON KEYS r.airlineid
WHERE r.sourceairport='SEA' AND r.destinationairport='MCO' AND s.day=6
ORDER BY a.name</codeblock>

          <p>N1QL provides JOIN functionality, something previously not possible in a document
              database. For two documents to be joined in the result of a SELECT statement, one of
              them must contain a field whose value is equal to the Couchbase key of the other
              document. The following example shows two documents that demonstrate that requirement
              and a SELECT statement that joins them:</p>

          <codeblock>"keyA" is the Couchbase KV key for Doc A.
Doc A: { some fields }

Doc B: { some fields "joinField": "keyA" }

SELECT * FROM default b JOIN default a ON KEYS b.joinField</codeblock>

          <p>The data model for the travel application includes an <codeph>airlineid</codeph> field
              in each <codeph>route</codeph> document. That <codeph>airlineid</codeph> field is used
              as a foreign key identifier and corresponds to the key for an <codeph>airline</codeph>
              document. To select the airline name <codeph>a.name</codeph>, the query uses the
              following clause: <codeph>JOIN `travel-sample` a ON KEYS r.airlineid</codeph>.</p>

          <p>One of the powerful features available in the N1QL query language is the ability to
                  <codeph>UNNEST</codeph> or flatten, the results returned in the
                  <codeph>SELECT</codeph> statement. This is
                  frequently needed when working with JSON documents,
                  which may have rich heirarchies.  In the data model for the travel application,
              each route document contains a nested collection of schedule documents. To alleviate
              a complicated JSON parsing code pattern for the return
              results, you can have the query execution
                  <codeph>UNNEST</codeph> the schedule documents, so they become the root-level
              fields in the returned results.</p>

          <p>Standard SQL syntax is used in the <codeph>WHERE</codeph> clause for the
                  <codeph>SELECT</codeph> statement. The result set is ordered by the
                  <codeph>a.name</codeph> field, which contains the airline name.</p>

          <p>Refer to the <xref href="n1ql-query.dita#toplevel"/> section for
            more information on using N1QL with the SDKs.</p>
      </section>

      <section>
          <title>The Hotels component</title>
          <p><filepath>src/app/+hotels</filepath> allows to search for hotels. In the backend these
            searches are performed using <apiname>FTS</apiname> queries, performed using the
            <filepath>/api/hotel/</filepath> REST API endpoint.</p>

          <fig>
              <title>Hotels component call hierarchy</title>
              <image href="shared/images/travel-app-archi-hotel.png" width="650px" />
          </fig>
          <p>The form is bound to the component using a <apiname>FormBuilder</apiname>, and it has
            two optional text inputs: a description and a location field. When submitting the form,
            the component's <apiname>findHotels</apiname> method is called with a JSON
            representation of the form's content. The <apiname>findHotels</apiname> method will use
            these values to determine if it should hit a more specific endpoint, in the case where
            a particular description keyword or location are requested by the form.</p>
          <p>For instance, to search for an hotel in France with a description matching "golf" (in
              a full text search sense, possibly including alternative spellings, words with the
              same root, etc...), one should use the  <filepath>/api/hotel/France/golf</filepath>
              endpoint. The possible endpoints are:</p>
          <ul>
              <li><filepath>/api/hotel</filepath> to find all hotels</li>
              <li><filepath>/api/hotel/{description}/</filepath> to find all hotels matching a
              keyword/phrase in their name or description.</li>
              <li><filepath>/api/hotel/{description}/{location}/</filepath> to find all hotels
              matching the keyword/phrase and a location keyword (in either of the location-related
              fields: country, city, state, address...)</li>
              <li><filepath>/api/hotel/*/{location}/</filepath> to find all hotels within a
              location (not using keyword)</li>
          </ul>
          <p>As a second step, for each hit returned by the FTS service the information that we want to display
              is collected by the backend using the subdocument
              API. This allows the client to request that the cluster to only transmit specific parts
              of the hotel document to be sent back to the client for display.</p>
          <p>Refer to the <xref href="subdocument-operations.dita#subdoc-operations"/> section for
            more information on using the Subdocument API with the SDKs.</p>
          <p> Both parts of the request can be individually seen in the narration component: <image
                  href="shared/images/travel-app-narration.png" width="650px" placement="break"/></p>
      </section>

      <section>
          <title>FTS query anatomy</title>
          <p>The Couchbase Search API (FTS) is a powerful tool for searching text inside a document
              data store. In each SDK-specific travel application, queries about hotels are created
              by a dedicated module (for example in Java, the <filepath>Hotel</filepath> service).
              Here's an example of a query that finds hotels mentioning "golf" in France, followed
              by a description of what's happening in the query:</p>
              <codeblock outputclass="language-json">{"query":{"conjuncts": [
    {"field":"type","term":"hotel"},
    {"disjuncts":[
        {"field":"country","match_phrase":"France"},
        {"field":"city","match_phrase":"France"},
        {"field":"state","match_phrase":"France"},
        {"field":"address","match_phrase":"France"}
    ]},
    {"disjuncts":[
        {"field":"description","match_phrase":"golf"},
        {"field":"name","match_phrase":"golf"}
    ]}
]},
"size":100}</codeblock>
        <p>The <codeph>query</codeph> is actually a composite (<codeph>conjuncts</codeph>) of 3
        sub-queries: a <codeph>term</codeph> query and two
        <codeph>disjuncts</codeph> queries.</p>
        <ul>
            <li>The term query matches a term as-is, without performing any analysis: it must
                match <b>exactly</b> what is stored in the index (which could be just the root
                of a word). Here we use it to restrict our search to the <codeph>hotel</codeph>
                <apiname>type</apiname>.</li>
            <li>A disjunction query matches if any of its sub-queries matches. We use the first
                only when there is a <codeph>location</codeph> provided, to search for it in any
                of the <apiname>country</apiname>, <apiname>city</apiname>, <apiname>state</apiname>
                and <apiname>address</apiname> fields. We use a <apiname>match phrase</apiname>
                sub-query on each, which will attempt to find several keywords, analyzing them
                to remove stop words, include close results like words from the same root, etc...</li>
            <li>The second disjunction query is added whenever a description is provided for the
                search. It performs two match phrase queries on the description, respectively
                in the <apiname>name</apiname> and <apiname>content</apiname> fields of the
                landmark.</li>
            <li>There are quite a few other FTS query types. For instance, a match query is much
                like a match phrase query, except it only considers one term to search for, and can
                apply fuzzyness (eg. to match close words with a slightly different spelling).</li>
        </ul>
        <p>Finally, we notice that at the same level as the <codeph>query</codeph> entry there is
            also a <codeph>size</codeph> attribute. This is one of the many tunings applicable to
            the whole query, a top-level parameter that limits the results to 100 hits.</p>
        <p>Refer to the <xref href="full-text-search-overview.dita#full-text-search"/> section for
            more information on using FTS with the SDKs.</p>
      </section>

  </body>
</topic>
