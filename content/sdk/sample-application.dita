<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="travel-sample-app-generic">
  <title>Sample Application</title>
  <shortdesc>Couchbase Travel is a sample web application that demonstrates how to interact with the
      Couchbase query service via the SDKs</shortdesc>
    <prolog>
        <metadata>
            <othermeta name="langSelector" content="hidden"/>
        </metadata>
    </prolog>
  <body>
      <p>Each SDK comes with its own implementation of the backend for the application. You can download
          the complete source code and then build and run the app. While the app runs, you can view the
          log of N1QL queries that it sends. The documentation for the travel app illustrates the data
          model and walks through the N1QL queries used to select flights and search for points of
          interest, more specifically hotels.</p>
      <p>The travel app front-end is the same in each SDK implementation and is built on the following tools:</p>
          <ul>
              <li>
                  <xref href="https://angular.io" format="html" scope="external">Angular2</xref>
              </li>
              <li>
                  <xref href="http://getbootstrap.com" format="html" scope="external">Bootstrap</xref>
              </li>
              <li>
                  <xref href="https://www.typescriptlang.org/" format="html" scope="external">the TypeScript language</xref>
              </li>
              <li>
                  <xref href="https://github.com/Reactive-Extensions/RxJS" format="html" scope="external">RxJs (in Angular2)</xref>
              </li>
          </ul>
      <p>The backend is a REST API, and is available in the following languages:</p>
        <ul>
            <li><xref href="https://github.com/couchbaselabs/try-cb-nodejs" format="html" scope="external">Node.js</xref></li>
            <li><xref href="https://github.com/couchbaselabs/try-cb-java" format="html" scope="external">Java</xref></li>
            <li><xref href="https://github.com/couchbaselabs/try-cb-dotnet" format="html" scope="external">.NET</xref></li>
            <li><xref href="https://github.com/couchbaselabs/try-cb-golang" format="html" scope="external">Go</xref></li>
        </ul>
      <p>Please refer to the travel-app documentation of your SDK of choice for specifics for that
          particular SDK, like backend dependencies, source-code checkout and running instructions.</p>
      <p>The application allows users to find flights by entering airports and travel dates. For the
          airport entries, the app uses a N1QL query bound to an Angular type ahead directive to
          suggest airport names based on the first few letters entered.</p>
      <p>If you want to try the sample app first, without having to build and run the sample code, take a
          look at the travel app hosted at <xref href="http://try.couchbase.com" format="com"
          scope="external"/>. See <xref href="#travel-sample-app-generic/using-travel-app" format="dita"/>
          below for guidelines on how to use the travel app.</p>


      <section id="note-installing">
          <title>Generic set up</title>
          <p> You'll need: <ul>
                  <li>Your favorite editor or IDE</li>
                  <li>Your SDK of choice and its specific dependencies</li>
                  <li>The sample app source code for your SDK from GitHub</li>
                  <li>A local <codeph>Couchbase 4.5</codeph> installation (make sure that the
                          <codeph>travel-sample</codeph> bucket has been loaded and that there is,
                      at least, one node with data, query, index and search services in the cluster</li>
                  <li>That's it!</li>
              </ul></p>

          <p>To start with, it's easiest if you run Couchbase Server and the travel sample app on the same
              machine. It's not required to run your development environment this way, and
              advanced "MDS" configurations are supported. It's just easier to start a development
              environment with components running locally.</p>

          <p>Download <xref href="http://www.couchbase.com/download" scope="external" format="html">Couchbase Server 4.5
              </xref>and install it. As you follow the download instructions and setup wizard, make sure you keep all the services
              (<codeph>data</codeph>, <codeph>query</codeph>, and <codeph>index</codeph>) selected. Make sure also to install the
              sample bucket named <codeph>travel-sample</codeph> (introduced in CB 4.0) because it contains the data used in this
              tutorial. </p>
          <p>If you already have Couchbase Server installed but did not install the
              <codeph>travel-sample</codeph> bucket, open the Couchbase Web Console and select <menucascade>
              <uicontrol>Settings</uicontrol> <uicontrol>Sample Buckets</uicontrol> </menucascade>. Select the
              <codeph>travel-sample</codeph> checkbox, and then click <uicontrol>Create</uicontrol>. A notification box in the
              upper-right corner disappears when the bucket is ready to use. </p>
          <p>The travel app, as a REST API backend, will run in the terminal window, which you need to keep open. Please
              refer to SDK-specific instructions on how to run the application.</p>
      </section>

      <section id="datamodel">
          <title>The Travel App data model</title>
          <p>The data model for the travel app uses several distinct document types: airline, route, airport and landmark.</p>
          <p>The model for each kind of document contains: <ul>
                      <li>A key that acts as a primary key</li>
                      <li>An <codeph>id</codeph> field that identifies the document</li>
                      <li>A <codeph>type</codeph> field that identifies the kind of document</li>
                  </ul></p>
          <p>The following figure illustrates the relationship between the different kinds of documents. It
              shows the primary key, ID, and type fields that each document has, plus a few
              representative fields in each type of document.</p>
          <fig>
              <title>Documents in the travel app data model</title>
              <image href="shared/images/travel-app-data-model.png"></image>
          </fig>
      </section>

      <section>
          <title>Airline documents</title>
          <p><term>Airline documents</term> contain details about airlines such as the name of the airline,
                      International Air Transport Association (IATA) two-character airline designator,
                      International Civil Aviation Organization (ICAO) three-character airline designator,
                      and the airline call sign.</p>
                  <p>For airline documents, the value of the <codeph>type</codeph> field is
                          <codeph>airline</codeph>.</p>

      <codeblock spectitle="Airline document model" outputclass="language-json">airline_24 			   ←This is the key, which also acts as a primary key
{
  "active": "Y",
  "callsign": "AMERICAN",
  "country": "United States",
  "iata": "AA",
  "icao": "AAL",
  "id": "24",
  "name": "American Airlines",
  "type": "airline"              ←This is the type identifier for the document
}</codeblock>
      </section>

      <section>
      <title>Route documents</title>
          <p><term>Route documents</term> contain details about flights such as the name of the airline,
                      departure airport, destination airport, number of stops during the flight, type of
                      aircraft, flight number, and flight schedule. </p>
                  <p>Route documents also contain a foreign key identifier, <codeph>airlineid</codeph>, that
                      is used to retrieve the document that contains information about the airline that flies
                      the route. The value of the <codeph>airlineid</codeph> field is identical to the key for
                      the corresponding airline document.</p>
                  <p>For route documents, the value of the <codeph>type</codeph> field is
                          <codeph>route</codeph>.</p>

      <codeblock spectitle="Route document model" outputclass="language-json">route_5966                         ←This is the key, which also acts as a primary key
{
  "id": "5966",
  "type": "route",               ←This is the type identifier for the document
  "airline": "AA",
  "airlineid": "airline_24",     ←This is the foreign key identifier to an airline document
  "sourceairport": "MCO",
  "destinationairport": "SEA",
  "stops": "0",
  "equipment": "737",
  "schedule": [
      {"day": 1, "utc": "13:25:00", "flight": "AA788"},
      {"day": 4, "utc": "13:25:00", "flight": "AA419"},
      {"day": 5, "utc": "13:25:00", "flight": "AA519"}
  ]
}</codeblock>
      </section>

      <section>
          <title>Airport documents</title>
              <p><term>Airport documents</term> contain details about airports  such as name, location, time
                      zone, ICAO four-character alphanumeric airport code, and Federal Aviation
                      Administration (FAA) location identifier.</p>
                  <p>For airport documents, the value of the <codeph>type</codeph> field is
                          <codeph>airport</codeph>.</p>
          <codeblock spectitle="Airport document model" outputclass="language-json">airport_3577                       ←This is the key, which also acts as a primary key
{
  "travel-sample": {
      "airportname": "Seattle Tacoma Intl",
      "city": "Seattle",
      "country": "United States",
      "faa": "SEA",
      "geo": {
          "alt": 433,
          "lat": 47.449,
          "lon": -122.309306
      },
      "icao": "KSEA",
      "id": 3577,
      "type": "airport",         ←This is the type identifier for the document
      "tz": "America/Los_Angeles"
  }
}</codeblock>
      </section>
      <section>
      <title>Landmark documents</title>
              <p><term>Landmark documents</term> contain details about points of interest such as hotels. They
                      include information such as name, location, price, contact information, and the kind
                      of activity that the point of interest provides.</p>
                  <p>For landmark documents, the value of the <codeph>type</codeph> field is
                          <codeph>landmark</codeph>.</p>

      <codeblock spectitle="Landmark document model" outputclass="language-json">landmark_21661                     ←This is the key, which also acts as a primary key
{
  "activity": "sleep",
  "address": "12 Rue Boulainvilliers",
  "alt": null,
  "checkin": null,
  "checkout": null,
  "city": null,
  "content": "Small three star hotel (33 rooms).",
  "country": "France",
  "directions": null,
  "email": null,
  "fax": null,
  "geo": {
      "lat": 48.853,
      "lon": 2.27593
  },
  "hours": null,
  "id": 21661,
  "image": null,
  "name": "Hotel Eiffel Kennedy",
  "phone": "+33 1 45 24 45 75",
  "price": "~\u20ac150",
  "state": "Ile-de-France",
  "title": "Paris/16th arrondissement",
  "tollfree": null,
  "type": "landmark",            ←This is the type identifier for the document
  "url": "http://ww.eiffelkennedy.com"
}</codeblock>
      </section>

      <section id="architecture">
          <title>Architecture</title>

          <p>The application serves an HTML file named <filepath>index.html</filepath>
          (in an <filepath>src/app/</filepath> folder usually contained in a root folder
          dedicated to frontend files, eg. the <filepath>public</filepath> path in the Node.js
          application). This file contains references to various included script files for front
          side JavaScript components such as Bootstrap and jQuery. It also contains a small
          script snippet that bootstraps the Angular2 application, as well as an Angular loop
          (<codeph>{{#each scripts.polyfills}}</codeph>) to load <apiname>polyfills</apiname>
          (implementation of html5/web component elements that can be used as a backup if the
          browser doesn't provide the corresponding feature natively).</p>

          <p>Angular2 works in terms of <apiname>Components</apiname>, and the main component
          that gets displayed at bootstrap is in <filepath>src/app/try.component.ts</filepath>.
          It is in charge of displaying the common elements of the single-page app, and defines
          <apiname>Routes</apiname>, determining which component to show depending on the URL.
          The place at which said components are shown in the html is represented by a component
          <apiname>tag</apiname> provided by the angular <apiname>Router</apiname>:
          <codeph>&lt;router-outlet&gt;&lt;/router-outlet&gt;</codeph>.</p>

          <p>The application is then splitted in several packages that each talk to a specific
            subset of the REST API provided by the backend. Each package has a corresponding
            main Angular <apiname>Component</apiname> that provides the methods to interact
            with the API or perform work. Their corresponding views then use these methods
            to populate data in the application.</p>

          <fig>
              <title>The Application Services</title>
              <image href="shared/images/architecture-overview.png" width="650px" />
          </fig>
      </section>


      <section>
          <title>The Home component</title>
          <p><filepath>src/app/+home</filepath> is the main page, dealing with flight searches.
            In the backend, these searches are performed using <apiname>N1QL</apiname> queries.
            It has two main methods:
          <ul>
              <li><apiname>findFlightPath</apiname> which is a REST API call to the
                <filepath>/api/flightPath/findAll</filepath> REST endpoint</li>
              <li><apiname>findAirports</apiname>, which is a REST API call to the
                <filepath>/api/airport/findAll</filepath> endpoint</li>
            </ul></p>

          <fig>
              <title>Front End Framework REST calls</title>
              <image href="shared/images/angular-rest.png" width="350px" />
          </fig>
          <fig>
              <title>REST API for finding airports</title>
              <image href="shared/images/architecture-airport.png" width="650px" />
          </fig>
          <p>The application attempts to find an airport based on the codes used for the
                  <codeph>name</codeph> (case sensitive), and codes for Federal Aviation
              Administration (FAA) or International Civil Aviation Organization (ICAO). The backend
              method allows the user to search by FAA code,
              ICAO code or airport name. It then prepares a N1QL query based on the selection criteria
              (using bucket information from its configuration). The query is then sent to the Couchbase
              query service, all by using the backend's associated SDK.</p>

          <p>Using the data model, if you enter <userinput>SEA</userinput>, <userinput>KSEA</userinput>, or
                  <userinput>Seattle</userinput>, the typeahead directive gives you the option to
              select <uicontrol>Seattle Tacoma Intl.</uicontrol> To see the results of the query,
              watch the terminal window in which the application is running. The example is
              showing an output for the N1QL statements:</p>
          <codeblock>QUERY: SELECT airportname FROM `travel-sample` WHERE faa ='SEA'
QUERY: SELECT airportname FROM `travel-sample` WHERE icao ='KSEA'
QUERY: SELECT airportname FROM `travel-sample` WHERE airportname LIKE 'Seattle%'</codeblock>

          <fig>
              <title>REST API for finding flight paths</title>
              <image href="shared/images/architecture-flight-path.png" width="650px" />
          </fig>
          <p>After the airports are selected and a leave date is entered, the application tries to find
              route and schedule information for an airline that services the requested flight
              path. The call to the REST API <filepath>/api/flightPath/findAll</filepath> on the
              server is initiated when the user clicks the <uicontrol>Find Flights</uicontrol>
              button. The button is defined within the <codeph>travelForm</codeph> form element in
              the home component's template.</p>

          <p>The <codeph>travelForm</codeph> form binds its controls to a corresponding object in the
            component, which allows to perform some validation checking among other things.
            To learn more about forms and validation in Angular2, please refer to the
            <xref href="https://angular.io/docs/ts/latest/guide/forms.html" format="html" scope="external">official
            documentation</xref>.
            The submit button calls the component's <codeph>findFlights()</codeph> function, which in
            turn invokes the server REST API <filepath>/api/flightPath/findAll</filepath> function either
            once for a one way flight or twice for a round-trip flight. When it requests the return
            flight for a round trip, it just uses the reverse <codeph>to</codeph> and <codeph>from</codeph>
            sequence.</p>

          <p>In the backend, the code corresponding to the <apiname>findAll</apiname> endpoint performs
            several important steps for processing the request to find flights:</p>
          <ul>
              <li>It determines the FAA identifier for the <codeph>to</codeph> and <codeph>from</codeph>
                  airports.</li>
              <li>It searches for routes and schedule information based on the source and destination airports
                  and the requested dates. The collection of schedule documents is nested in the route
                  document for each route. They are grouped by day of the week (1-7), and the requested
                  dates are compared to the day of the week to see what flights are available on those
                  particular dates. It returns a list of flights that includes data for the following
                  fields: airline, flight, departure, from, to, and aircraft. </li>
          </ul>

          <p> The Query can be seen in the terminal window that is running the backend application: </p>
          <codeblock>QUERY:
SELECT a.name, s.flight, s.utc, r.sourceairport, r.destinationairport, r.equipment
FROM `travel-sample` r
UNNEST r.schedule s
JOIN `travel-sample` a
ON KEYS r.airlineid
WHERE r.sourceairport='SEA' AND r.destinationairport='MCO' AND s.day=6
ORDER BY a.name</codeblock>
      </section>

      <section>
          <title>N1QL query anatomy</title>
          <p>The Couchbase Query API is a powerful tool for efficient retrieval of information from a
              document data store. In each SDK-specific travel application, queries about flights are created by
              a dedicated module (for example in Node.js, the <filepath>flightPath.js</filepath> module).
              Here's an example of a query that finds flights between Seattle-Tacoma International Airport (SEA)
              and Orlando International Airport (MCO), followed by a description of what's happening in the query:</p>

          <codeblock outputclass="language-sql">SELECT a.name, s.flight, s.utc, r.sourceairport, r.destinationairport, r.equipment
FROM `travel-sample` r
UNNEST r.schedule s
JOIN `travel-sample` a ON KEYS r.airlineid
WHERE r.sourceairport='SEA' AND r.destinationairport='MCO' AND s.day=6
ORDER BY a.name</codeblock>

          <p>N1QL provides JOIN functionality, something previously not possible in a document
              database. For two documents to be joined in the result of a SELECT statement, one of
              them must contain a field whose value is equal to the Couchbase key of the other
              document. The following example shows two documents that demonstrate that requirement
              and a SELECT statement that joins them:</p>

          <codeblock>"keyA" is the Couchbase KV key for Doc A.
Doc A: { some fields }

Doc B: { some fields "joinField": "keyA" }

SELECT * FROM default b JOIN default a ON KEYS b.joinField</codeblock>

          <p>The data model for the travel application includes an <codeph>airlineid</codeph> field
              in each <codeph>route</codeph> document. That <codeph>airlineid</codeph> field is used
              as a foreign key identifier and corresponds to the key for an <codeph>airline</codeph>
              document. To select the airline name <codeph>a.name</codeph>, the query uses the
              following clause: <codeph>JOIN `travel-sample` a ON KEYS r.airlineid</codeph>.</p>

          <p>One of the most powerful features available in the Couchbase Query API is the ability to
                  <codeph>UNNEST</codeph> or flatten,the results returned in the
                  <codeph>SELECT</codeph> statement. In the data model for the travel application,
              each route document contains a nested collection of schedule documents. To alleviate
              a complicated JSON parsing code pattern for the return results, you can
                  <codeph>UNNEST</codeph> the schedule documents, so they become the root-level
              fields in the returned results.</p>

          <p>Standard SQL syntax is used in the <codeph>WHERE</codeph> clause for the
                  <codeph>SELECT</codeph> statement. The result set is ordered by the
                  <codeph>a.name</codeph> field, which contains the airline name.</p>
      </section>

      <section>
          <title>The Hotels component</title>
          <p><filepath>src/app/+hotels</filepath> is dealing with point of interests and searching
            for hotels. In the backend these searches are performed using <apiname>FTS</apiname>
            queries. It has one main method, <apiname>findHotels</apiname>, which takes the
            values of the form and performs the search using the <filepath>/api/hotel/</filepath>
            endpoint.</p>
          <p>The method may actually hit a more specific endpoint if a particular description
            or location are requested by the form, eg. <filepath>/api/hotel/France/golf</filepath>
            to search for an hotel in France with a description matching "golf" (in a full
            text search, possibly including alternative spellings, words with the same root,
            etc...).</p>
      </section>

      <section>
          <title>FTS query anatomy</title>
          <p></p>
      </section>

      <section id="using-travel-app">
          <title>Using the Travel App</title>
          <ol>
              <li>Open a browser and navigate to the login URL that was displayed when you started the
                  app.</li>
              <li>Sign in to Couchbase Travel by providing your credentials: <image
                      href="shared/images/travel-app-login.png" width="650px" placement="break"/></li>
              <li>Find a flight: <image href="shared/images/travel-app-screen.png" width="650px" placement="break"/>
                  <p>In the <uicontrol>Airport or City</uicontrol> section, enter an airport code
                      or city name in the <uicontrol>From</uicontrol> and
                          <uicontrol>To</uicontrol> fields. </p></li>
              <li>In the <uicontrol>Travel Dates</uicontrol> section, select
                      <uicontrol>Leave</uicontrol> and <uicontrol>Return</uicontrol> dates by using the
                  date picker that pops up when you click the date fields.</li>
              <li>Click <uicontrol>Find Flights</uicontrol>.<p>The app displays the available flights for the
                      outbound and return legs of the trip.</p></li>
          </ol>
      </section>
  </body>
</topic>
