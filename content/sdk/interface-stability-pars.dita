<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="toplevel">
  <title>Interface Stability Paragraphs</title>
  <body>
        <section id="interface-stability-section">
            <title>Interface Stability</title>
            <p id="interface-stability-par">Couchbase SDKs indicate the stability of an API through
                documentation. Since there are different meanings when developers mention stability,
                we mean <b>interface stability</b>: how likely the interface is to change or be
                removed entirely. A stable interface is one that is guaranteed not to change between
                versions, meaning that you may use an API of a given SDK version and be assured that
                the given API will retain the same parameters and behavior in subsequent versions.
                An unstable interface is one which may appear to work or behave in a specific way
                within a given SDK version, but may change in its behavior or arguments in future
                SDK versions, causing odd application behavior or compiler/API usage errors.
                    <b>Implementation stability</b> is implied to be more reliable at higher levels,
                but all are tested to the level that is appropriate for their stability.</p>
            <p>Couchbase uses three interface stability classifiers. You may find these classifiers
                appended as annotations or comments within documentation for each API:<ul
                    id="ul_dzk_f5h_hw">
                    <li><b>Committed</b>: This stability level is used to indicate the most stable
                        interfaces that are guaranteed to be supported and remain stable between SDK
                        versions.</li>
                    <li><b>Uncommitted</b>: This level is used to indicate APIs that are
                            <i>unlikely</i> to change, but <i>may</i> still change as final consensus
                        on their behavior has not yet been reached. <i>Uncommitted</i> APIs usually
                        end up becoming stable APIs.</li>
                    <li><b>Volatile</b>: This level is used to indicate experimental APIs that are
                        still in flux and may likely be changed. It may also be used to indicate
                        inherently private APIs that may be exposed, but "YMMV" (your mileage may
                        vary) principles apply. <i>Volatile</i> APIs typically end up being promoted
                        to <i>Uncommitted</i> after undergoing some modifications.</li>
                    <li><b>Internal</b>: This level is used to indicate you should not rely on this
                        API as it is not intended for use outside the module, even to other
                        Couchbase components.</li>
                </ul>APIs that are marked as <i>Committed</i> have a stable implementation.
                    <i>Uncommitted</i> and <i>Volatile</i> APIs should be stable within the bounds
                of any known and often documented issues, but Couchbase has not made a commitment to
                these APIs and may not respond to reported defects with the same priority.</p>
        </section>
  </body>
</topic>
