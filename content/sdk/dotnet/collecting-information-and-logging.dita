<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="collecting-information-and-logging-dotnet">
    <title>Collecting Information and Logging in the .NET SDK with Couchbase Server</title>
    <titlealts><navtitle>Collecting Information</navtitle></titlealts>
	<shortdesc>The logging infrastructure in the .NET SDK depends on which .NET runtime you're
    targerting. For applications that are targeting .NET Framework 4.5.2+ the SDK uses the Apache
    Common Infrastructure Libraries and applications that are targeting .NET Core the SDK uses
    Microsoft.Extensions.Logging.</shortdesc>

    <body>
    <section><title>Logging in applications targeting .NET Framework 4.5.2+</title>
      <p>The Apache Common Infrstucture libraries provides a common interface for logging adapters.
        The SDK currently uses version 3.4.1 of Common.Logging for versions Couchbase .NET SDK
        v2.6.0 and greater.</p>
        <p>In order to use logging within the SDK, you need to reference the packages for the
        adapter you want to use. There are adapters available for all the major logging
        implementations. More information and a list of available adapters is available on the
        project website <xref href="http://net-commons.github.io/common-logging/" format="html"
          scope="external">here</xref>.</p>
      <p>The recommended dependencies for Couchbase .NET SDK v2.6.0 greater are: <ul
          id="ul_icr_kdr_q2b">
          <li>Log4Net v2.07</li>
          <li>Common.Logging 3.4.1</li>
          <li>Common.Logging.Core 3.4.1</li>
          <li>Common.Logging.Log4Net207 v3.4.1 </li>
        </ul></p>
      <p>The following steps describe the process for using the Log4Net Adapter with the SDK: </p>
        <ol id="steps">
            <li> Using the NuGet Package Manager in Visual Studio, include the following package in
          your project: Common.Logging.Log4Net207 <image href="images/common-logging-log4net207.jpg"
            id="image_tpg_c32_3p"/>
        </li>
            <li>
                <p>In your <filepath>App.Config</filepath> or <filepath>Web.Config</filepath>, add the following elements between
                the <codeph>&lt;configuration> and &lt;/configuration></codeph> tags so that your configuration looks like
                this:</p>
                <codeblock outputclass="language-xml">&lt;?xml version="1.0" encoding="utf-8" ?>
&lt;configuration>
  &lt;configSections>
    &lt;sectionGroup name="common">
      &lt;section name="logging" type="Common.Logging.ConfigurationSectionHandler, Common.Logging" />
    &lt;/sectionGroup>
    &lt;section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
  &lt;/configSections>

  &lt;common>
    &lt;logging>
      &lt;factoryAdapter type="Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter, Common.Logging.Log4Net207">
        &lt;arg key="configType" value="INLINE" />
      &lt;/factoryAdapter>
    &lt;/logging>
  &lt;/common>

  &lt;log4net>
    &lt;appender name="FileAppender" type="log4net.Appender.FileAppender">
      &lt;param name="File" value="C:\temp\log.txt" />
        &lt;layout type="log4net.Layout.PatternLayout">
          &lt;conversionPattern value="%date [%thread] %level %logger - %message%newline" />
        &lt;/layout>
    &lt;/appender>
    &lt;root>
      &lt;level value="DEBUG" />
        &lt;appender-ref ref="FileAppender" />
    &lt;/root>
  &lt;/log4net>

  &lt;startup>
    &lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5.1" />
  &lt;/startup>
&lt;/configuration>                </codeblock>
                <note>This example creates a FileAppender. There's a wide variety of possible appenders and configuration options you can customize to your liking. For more information regarding customizing your configuration, check out the <xref href="http://logging.apache.org/log4net/release/manual/configuration.html" format="html" scope="external">Log4Net documentation</xref>.</note>
            </li>
        </ol>
    </section>
    <section><title>Logging in applications targeting .NET Core</title>
    <p>As part of the new .NET Core runtime, Microsoft have added a new abstraction interface. This
        is conceptually very similar to the Common.Logging, however it also has additional support built in
        for ASP.NET 5 and other Microsoft libraries. </p>
      <p>To get logging to work within the .NET SDK, you need will need to add a package for the
        adapter to connect with. There are a number of logging implementations based on
        Microsoft.Extensions.Logging that can be viewed <xref
          href="https://github.com/aspnet/Logging" format="html" scope="external">here</xref>. There
        are also some basic Microsoft provided adapters such as Debug, Console and EventLog.</p>
      <p>The following instructions show how to get up and running with the NLog adapter with the
        SDK in an ASP.NET 5 web application using the newer Visual Studio 2017 format:<ol
          id="ol_ef3_z1c_py">
          <li>Add the following two nuget dependencies: <i>CouchbaseNetClient</i> and
              <i>NLog.Web.AspNetCore</i>.</li>
          <li>Create a <i>nlog.config</i> in the root of your project and enable copy to output
            director. An example config could look like
            this:<codeblock outputclass="language-xml">&lt;?xml version="1.0" encoding="utf-8" ?>
&lt;nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Warn"
      internalLogFile="c:\temp\internal-nlog.txt">

	&lt;!-- Load the ASP.NET Core plugin -->
	&lt;extensions>
		&lt;add assembly="NLog.Web.AspNetCore"/>
	&lt;/extensions>

	&lt;!-- the targets to write to -->
	&lt;targets>
		&lt;!-- write logs to file -->
		&lt;target xsi:type="File" name="allfile" fileName="c:\temp\nlog-all-${shortdate}.log"
		        layout="${longdate}|${event-properties:item=EventId.Id}|${logger}|${uppercase:${level}}|${message} ${exception}" />

		&lt;!-- another file log, only own logs. Uses some ASP.NET core renderers -->
		&lt;target xsi:type="File" name="ownFile-web" fileName="c:\temp\nlog-own-${shortdate}.log"
		        layout="${longdate}|${event-properties:item=EventId.Id}|${logger}|${uppercase:${level}}|  ${message} ${exception}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}" />

		&lt;!-- couchbase log file -->
		&lt;target xsi:type="File" name="couchbase" fileName="c:\temp\couchbase-${shortdate}.log"
		        layout="${longdate}|${event-properties:item=EventId.Id}|${logger}|${uppercase:${level}}|  ${message} ${exception}" />

		&lt;!-- write to the void aka just remove -->
		&lt;target xsi:type="Null" name="blackhole" />
	&lt;/targets>

	&lt;!-- rules to map from logger name to target -->
	&lt;rules>
		&lt;!--All logs, including from Microsoft-->
		&lt;logger name="*" minlevel="Trace" writeTo="allfile" />

		&lt;!--Skip Microsoft logs and so log only own logs-->
		&lt;logger name="Microsoft.*" minlevel="Trace" writeTo="blackhole" final="true" />
		&lt;logger name="Couchbase.*" minlevel="Trace" writeTo="couchbase" final="true" />
		&lt;logger name="*" minlevel="Trace" writeTo="ownFile-web" />
	&lt;/rules>
&lt;/nlog>
</codeblock></li>
          <li>in startup.cs update both <i>Startup</i> and <i>Configure</i> methods to look like the
            following:<codeblock outputclass="language-csharp">public Startup(IHostingEnvironment env)
{
    var builder = new ConfigurationBuilder()
        .SetBasePath(env.ContentRootPath)
        .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
        .AddJsonFile($"appsettings.{env.EnvironmentName}.json", optional: true)
        .AddEnvironmentVariables();
    Configuration = builder.Build();

    // register and load NLog config
    env.ConfigureNLog("nlog.config");
}

public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
{
    //add NLog to ASP.NET Core
    loggerFactory.AddNLog();
    LogManager.ConfigureLoggerFactory(loggerFactory);

    //add NLog.Web plugin
    app.AddNLogWeb();

    app.UseMvc();
}
</codeblock></li>
          <li>Inject a <i>ILogger</i> and write a log using the Microsoft Logger interface, for
            example:<codeblock outputclass="language-csharp">public class HomeController : Controller
{
    private readonly ILogger _logger;

    public HomeController(ILogger logger)
    {
        _logger = logger;
    }

    public IActionResult Index()
    {
        _logger.LogInformation("Index page says hello");
        return View();
    }
}
</codeblock></li>
        </ol></p>
      <p>More details on configuring NLog with Microsoft.Extensions.Logging can be found <xref
          href="https://github.com/NLog/NLog.Extensions.Logging" format="html" scope="external"
          >here</xref>.</p>
    </section>
</body>
</topic>
