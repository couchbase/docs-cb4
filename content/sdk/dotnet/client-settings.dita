<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_vnp_51n_bw">
  <title>Client Settings for the .NET SDK with Couchbase Server</title>
  <titlealts><navtitle>Client Settings</navtitle></titlealts>
  <body>
    <p>The Couchbase .NET SDK offers a configuration API for customizing bootstrapping, timeouts,
      reliability and for performance tuning. You can configure the client programmatically via the
      <apiname>ClientConfiguration</apiname>, <apiname>PoolConfiguration</apiname> and <apiname>BucketConfiguration</apiname> classes, using XML
      configuration <codeph>App.Config</codeph> and or <codeph>Web.Config</codeph> files or by using JSON config files.</p>
    <section id="dotnet-configurationbasics-settings">
      <title>Configuration Basics</title>
      <p>There are three main levels of configuration which correlate to classes or config
          sections:<ol id="ol_ewh_pch_jw">
          <li>Client level - applies to each and every client instance globally</li>
          <li>Bucket level - applies to a specific bucket and will override any global settings</li>
          <li>Pool level - applies to the connection level of a specific bucket configuration and
            override any bucket or client level settings if applicable</li>
        </ol> At each level, there are specific classes or sections for configuring the behavior of
        the SDK. <note>defaults exists for all properties at each level. While some, like the
          bootstrap server list are often overridden since environment is different, others rarely
          need to be changed from their defaults. In general, rely on these defaults unless
          otherwise proven that they do not meet your needs.</note></p>
      <p>At the client level, the <apiname>ClientConfiguration</apiname> is the highest level
        configuration. Importantly, it contains the list of servers that the client will use to
        bootstrap against.<codeblock outputclass="language-csharp"><![CDATA[var clientConfig = new ClientConfiguration {
    Servers = new List<Uri> {
        new Uri("http://server1.somedomain.com:8091"),
        new Uri("http://server2.somedomain.com:8091"),
        new Uri("http://server3.somedomain.com:8091")
    }
};]]></codeblock></p>
    </section>
    <p>The listing above is an example of a client level configuration for bootstrapping against a
      cluster containing the following nodes: <codeph>http://server1.somedomain.com:8091</codeph>,
        <codeph>http://server2.somedomain.com:8091</codeph> and
        <codeph>http://server3.somedomain.com:8091</codeph>. This will override the default
      bootstrap host of <codeph>http://localhost:8091</codeph> and the client will use this list to
      bootstrap the itself to the cluster. </p>
    <p>Once you have a config, you'll either pass it into the constructor or the
        <codeph>Cluster</codeph> class:
      <codeblock outputclass="language-csharp"><![CDATA[var cluster = new Cluster(clientConfig);]]></codeblock>
  Alternatively, you can initialize the cluster
  helper:<codeblock outputclass="language-csharp"><![CDATA[ClusterHelper.Initialize(clientConfig);]]></codeblock></p><note>calling
        a Initialize more than once per process or application may cause inconsistent
        behavior.</note>
    <p>A more advanced configuration that uses all three levels might look something like this:</p>
    <codeblock outputclass="language-csharp"><![CDATA[ var config = new ClientConfiguration {
    BucketConfigs = new Dictionary<string, BucketConfiguration> {
      {"authenticated", new BucketConfiguration {
          PoolConfiguration = new PoolConfiguration {
              MaxSize = 6,
              MinSize = 4,
              SendTimeout = 12000
          },
          DefaultOperationLifespan = 123,
          Password = "password",
          Username = "username",
          BucketName = "authenticated"
      }}
    }
};]]></codeblock>
    <p>In this example we are creating a configuration that also overrides the default
      BucketConfiguration and PoolConfiguration settings.</p>
    <section id="dotnet-appconfig-webconfig-configuration">
      <title>Using an App.Config or Web.Config Configuration</title>
      <p>The section above shows how to programmatically configure the client, however in some
        situations you may want to use an App.Config or Web.Config to configure your client. For the
        most part, everything that is available programmatically can be done via the App.Config or
        Web.Config, for example:<codeblock outputclass="language-xml"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <sectionGroup name="couchbaseClients">
      <section name="couchbase" type="Couchbase.Configuration.Client.Providers.CouchbaseClientSection, Couchbase.NetClient" />
    </sectionGroup>]]>
  &lt;/configSections>
  &lt;couchbaseClients>
    &lt;couchbase>
     &lt;servers>
        &lt;add uri="http://server1.somedomain.com:8091">&lt;/add>
      &lt;/servers>
      &lt;buckets>
        &lt;add name="authenticated" password="secret">
          &lt;connectionPool name="custom" maxSize="6" minSize="4" />
        &lt;/add>
        &lt;add name="travel-sample" useSsl="true" />
      &lt;/buckets>
    &lt;/couchbase>
  &lt;/couchbaseClients>
&lt;/configuration></codeblock></p>
    </section>
    <p>This configures two buckets "<i>beer-sample</i>" and "<i>authenticated</i>" and overrides the
        "<i>authenticated</i>" buckets pool configuration. To use this configuration, the
      appropriate constructor is called, passing the section
      name:<codeblock outputclass="language-csharp"><![CDATA[var cluster = new Cluster("couchbaseClients/couchbase");]]></codeblock></p>
    <section id="dotnet-json-configuration">
      <title>JSON Configuration</title>
      <p>In support of .NET Core, the client can now be configured using JSON config
          files.<note>JSON configuration is only supported for versions of the SDK 2.3.0 and greater
          running on .NET Core 1.0 or greater.</note></p>
      <p>
        <codeblock outputclass="language-csharp"><![CDATA[{
  "basic": {
    "enableConfigHeartbeat": false,
    "servers": [
      "http://server1.somedomain.com:8091/", "http://server2.somedomain.com:8091/"
    ],
    "buckets": [
      {
        "name": "travel-sample"
      }
    ]
  }
}]]></codeblock>
      </p>
      <p>Here is an example of opening a cluster using the JSON configuration above:<codeblock outputclass="language-csharp"><![CDATA[var builder = new ConfigurationBuilder();
builder.AddJsonFile("config.json");

var jsonConfiguration = builder.Build();
var definition = new CouchbaseClientDefinition();
jsonConfiguration.GetSection("couchbase:basic").Bind(definition);
var clientConfig = new ClientConfiguration(definition);

var cluster = new Cluster(clientConfig);]]>
var bucket = cluster.OpenBucket("travel-sample");</codeblock></p>
      <p>The "travel-sample" bucket is opened using any of the overridden defaults.</p>
    </section>
    <section id="dotnet-clientconfiguration-settings">
      <title>ClientConfiguration Settings</title>
      <p>These settings apply to each and every client instance globally.</p>
      <table id="table_ivc_5mc_3p">
        <title>ClientConfiguration Properties</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="col1" colwidth="1.32*"/>
          <colspec colnum="2" colname="col2" colwidth="2.49*"/>
          <colspec colnum="3" colname="col3" colwidth="1*"/>
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Description</entry>
              <entry>Default</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><codeph>UseSsl</codeph></entry>
              <entry>Whether or not to use SSL encrypt data being sent to and from the
                server</entry>
              <entry>false</entry>
            </row>
            <row>
              <entry><codeph>SslPort</codeph></entry>
              <entry>Overrides the <codeph>DirectPort</codeph> and sets the SSL port to use for
                key-value operations using the binary memcached protocol id UseSsl is
                enabled</entry>
              <entry>11207</entry>
            </row>
            <row>
              <entry><codeph>ApiPort</codeph></entry>
              <entry>The port to use for the Views API</entry>
              <entry>8092</entry>
            </row>
            <row>
              <entry><codeph>DirectPort</codeph></entry>
              <entry>The port to use for standard memcached binary operations such as storing and
                retrieving documents by key</entry>
              <entry>11210</entry>
            </row>
            <row>
              <entry><codeph>MgmtPort</codeph></entry>
              <entry>The port to use for the Management API</entry>
              <entry>8091</entry>
            </row>
            <row>
              <entry><codeph>HttpsMgmtPort</codeph></entry>
              <entry>Overrides the <codeph>MgmtPort</codeph> and sets the SSL port to use for the
                Management API</entry>
              <entry>18091</entry>
            </row>
            <row>
              <entry><codeph>HttpsApiPort</codeph></entry>
              <entry>Overrides the <codeph>ApiPort</codeph> and sets the SSL port to use for the
                Views API</entry>
              <entry>18092</entry>
            </row>
            <row>
              <entry><codeph>OperationTimeout</codeph></entry>
              <entry>The amount of time the client will wait on a pending operation before timing
                out</entry>
              <entry>2500 ms</entry>
            </row>
            <row>
              <entry><codeph>ObserveInterval</codeph></entry>
              <entry>The interval to wait before each Observe attempt</entry>
              <entry>10 ms</entry>
            </row>
            <row>
              <entry><codeph>ObserveTimeout</codeph></entry>
              <entry>The maximum amount of time to wait before timing out</entry>
              <entry>500 ms</entry>
            </row>
            <row>
              <entry><codeph>Servers</codeph></entry>
              <entry>The list of servers to bootstrap from</entry>
              <entry>http://localhost:8091/pools</entry>
            </row>
            <row>
              <entry><codeph>MaxViewRetries</codeph></entry>
              <entry>The upper limit for the number of times a View request that has failed will be
                retried</entry>
              <entry>2</entry>
            </row>
            <row>
              <entry><codeph>ViewHardTimeout</codeph></entry>
              <entry>The maximum amount of time that a View request takes before timing out. This
                includes time for retries.</entry>
              <entry>30000 ms</entry>
            </row>
            <row>
              <entry><codeph>ViewRequestTimeout</codeph></entry>
              <entry>Sets the timeout for each HTTP View request.</entry>
              <entry>5000 ms</entry>
            </row>
            <row>
              <entry><codeph>ConfigPollEnabled</codeph>*</entry>
              <entry>Enables configuration <i>heartbeat</i> checks.</entry>
              <entry>true</entry>
            </row>
            <row>
              <entry><codeph>ConfigPollInterval</codeph>*</entry>
              <entry>Sets the interval for configuration "heartbeat" checks,
                which check for changes in the configuration that are otherwise undetected by the client.</entry>
              <entry>2500ms</entry>
            </row>
            <row>
              <entry><codeph>ConfigPollCheckFloor</codeph>*</entry>
              <entry>Gets or sets the heartbeat configuration check floor - the minimum time between config checks.</entry>
              <entry>50ms</entry>
            </row>
            <row>
              <entry><codeph>DefaultConnectionLimit</codeph></entry>
              <entry>Gets or sets the maximum number of concurrent connections allowed by a
                <codeph>ServicePoint</codeph> object used for making View and N1QL
                requests.</entry>
              <entry>5</entry>
            </row>
            <row>
              <entry><codeph>MaxServicePointIdleTime</codeph></entry>
              <entry>Gets or sets the maximum idle time of a <codeph>ServicePoint</codeph> object
                used for making View and N1QL requests.</entry>
              <entry>100,000 ms</entry>
            </row>
            <row>
              <entry><codeph>Expect100Continue</codeph></entry>
              <entry>Gets or sets a Boolean value that determines whether 100-Continue behavior is
                used.</entry>
              <entry/>
            </row>
            <row>
              <entry><codeph>DefaultOperationLifespan</codeph></entry>
              <entry>Gets or sets the default maximum time an operation is allowed to take (including
                processing and in-flight time on the wire).
                Note that in <codeph>App.config</codeph> this is
                set via <codeph>operationLifespan</codeph>
              </entry>
              <entry>2500ms</entry>
            </row>
            <row>
              <entry><codeph>BucketConfigs</codeph></entry>
              <entry>A map of bucket conifgurations and their names</entry>
              <entry/>
            </row>
            <row>
              <entry><codeph>BufferSize</codeph></entry>
              <entry>The size of each buffer to allocate per TCP connection for sending and
                recieving Memcached operations</entry>
              <entry>16k</entry>
            </row>
            <row>
              <entry><codeph>Converter</codeph></entry>
              <entry>Gets or sets the converter</entry>
              <entry>-</entry>
            </row>
            <row>
              <entry><codeph>EnableTcpKeepAlives</codeph></entry>
              <entry>Gets or sets a value indicating whether enable TCP keep alives.</entry>
              <entry>true</entry>
            </row>
            <row>
              <entry><codeph>TcpKeepAliveInterval</codeph></entry>
              <entry>Specifies the interval, in milliseconds, between when successive keep-alive
                packets are sent if no acknowledgement is received.</entry>
              <entry>1000ms</entry>
            </row>
            <row>
              <entry><codeph>TcpKeepAliveTime</codeph></entry>
              <entry>Specifies the timeout, in milliseconds, with no activity until the first
                keep-alive packet is sent.</entry>
              <entry>2hrs</entry>
            </row>
            <row>
              <entry><codeph>IOErrorCheckInterval</codeph></entry>
              <entry>
                <p>Gets or sets the interval that the <codeph>IOErrorThreshold</codeph> will be checked. If the
                  threshold is reached within the interval for a particular node, all keys mapped to
                  that node the SDK will fail with a <codeph>NodeUnavailableException</codeph> in the
                  <codeph>IOperationResult.Exception</codeph> field. The node will be flagged as "dead" and will try
                  to reconnect, if connectivity is reached, the node will continue to process
                  requests.</p>
              </entry>
              <entry>500ms</entry>
            </row>
            <row>
              <entry><codeph>IOErrorThreshold</codeph></entry>
              <entry>Gets or sets the interval that the <codeph>IOErrorThreshold</codeph> will be checked. If the
                threshold is reached within the interval for a particular node, all keys mapped to
                that node the SDK will fail with a <codeph>NodeUnavailableException</codeph> in the
                <codeph>IOperationResult.Exception</codeph> field. The node will be flagged as "dead" and will try to
                reconnect, if connectivity is reached, the node will continue to process
                requests.</entry>
              <entry>10</entry>
            </row>
            <row>
              <entry><codeph>NodeAvailableCheckInterval</codeph></entry>
              <entry> If the client detects that a node has gone offline it will check for
                connectivity at this interval.</entry>
              <entry>1000ms</entry>
            </row>
            <row>
              <entry><codeph>QueryFailedThreshold</codeph></entry>
              <entry>
                <p>Gets or sets the query failed threshold for a Uri before it is flagged as
                  "un-responsive". Once flagged as "un-responsive", no requests will be sent to that
                  node until a server re-config has occurred and the Uri is added back into the
                  pool. This is so the client will not send requests to a server node which is
                  un-responsive.</p>
              </entry>
              <entry>2</entry>
            </row>
            <row>
              <entry><codeph>QueryRequestTimeout</codeph></entry>
              <entry>
                <p>Gets or sets the timeout for a N1QL query request; this correlates to the
                  client-side timeout. Server-side timeouts are configured per request using the
                  QueryRequest.Timeout  method</p>
              </entry>
              <entry>75000ms</entry>
            </row>
            <row>
              <entry><codeph>SearchRequestTimeout</codeph></entry>
              <entry>Gets or sets the search request timeout.</entry>
              <entry>75000ms</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <p>* <codeph>ConfigPollEnabled</codeph>, <codeph>ConfigPollInterval</codeph>, and <codeph>ConfigPollCheckFloor</codeph>
        replace the <xref href="https://developer.couchbase.com/documentation/server/4.6/sdk/dotnet/client-settings.html" format="html">previously used, deprecated settings</xref>
        of, respectively, <codeph>EnableConfigHeartBeat</codeph>, <codeph>HeartbeatConfigInterval</codeph>, and <codeph>HeartbeatConfigCheckFloor</codeph>.</p>
    </section>
    <section id="dotnet-bucketconfiguration-settings">
      <title>BucketConfiguration Settings</title>
      <p>These settings apply to a specific bucket and will override any global settings.</p>
      <table id="table_ww5_t4c_3p">
        <title>BucketConfiguration Properties</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="col1" colwidth="1*"/>
          <colspec colnum="2" colname="col2" colwidth="2.8*"/>
          <colspec colnum="3" colname="col3" colwidth="1.06*"/>
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Description</entry>
              <entry>Default</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><codeph>BucketName</codeph></entry>
              <entry>The name of the bucket to connect to.</entry>
              <entry>"default"</entry>
            </row>
            <row>
              <entry><codeph>UseSsl</codeph></entry>
              <entry>Whether or not to use SSL encrypt data being sent to and from the
                server</entry>
              <entry>false</entry>
            </row>
            <row>
              <entry><codeph>Password</codeph></entry>
              <entry>The bucket password</entry>
              <entry>empty string</entry>
            </row>
            <row>
              <entry><codeph>ObserveInterval</codeph></entry>
              <entry>The interval to wait before each Observe attempt</entry>
              <entry>10ms</entry>
            </row>
            <row>
              <entry><codeph>ObserverTimeout</codeph></entry>
              <entry>The max amount of time to wait before timing out</entry>
              <entry>500ms</entry>
            </row>
            <row>
              <entry><codeph>PoolConfiguration</codeph></entry>
              <entry>The TCP socket pool configuration</entry>
              <entry>(see below)</entry>
            </row>
            <row>
              <entry><codeph>DefaultOperationLifespan</codeph></entry>
              <entry>The default lifespan for operations of this bucket (i.e.
                maximum time taken by the operation, including processing
                and in-flight time on the wire).
                Note that in <codeph>App.config</codeph> this is
                set via <codeph>operationLifespan</codeph>
              </entry>
              <entry>2500ms</entry>
            </row>
            <row>
              <entry><codeph>UseEnhancedDurability</codeph></entry>
              <entry>
                <p>Gets or sets a value indicating whether to use enhanced durability if the
                  Couchbase server version supports it; if it's not supported the client will use
                  Observe for Endure operations.</p>
              </entry>
              <entry>false</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section id="dotnet-poolconfiguration-settings">
      <title>PoolConfiguration Settings</title>
      <p>These settings apply to the connection level of a specific bucket configuration and
        override any bucket or client level settings, if applicable.</p>
      <table id="table_nny_z4c_3p">
        <title>PoolConfiguration Properties</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="col1" colwidth="1.53*"/>
          <colspec colnum="2" colname="col2" colwidth="3.43*"/>
          <colspec colnum="3" colname="col3" colwidth="1*"/>
          <thead>
            <row>
              <entry dir="ltr">Name</entry>
              <entry dir="ltr">Description</entry>
              <entry dir="ltr">Default</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry dir="ltr"><codeph>MaxSize</codeph></entry>
              <entry dir="ltr">The maximum number of TCP connections to use<p><b>Note</b>: Multiplexing
                  IO Service creates the number of MaxSize connections during the initialize phase.
                  </p></entry>
              <entry dir="ltr">2</entry>
            </row>
            <row>
              <entry dir="ltr"><codeph>MinSize</codeph></entry>
              <entry dir="ltr">The minimum or starting number of TCP connections to
                    use<p><b>Note</b>: not used with Multiplexing IO Service</p></entry>
              <entry dir="ltr">1</entry>
            </row>
            <row>
              <entry dir="ltr"><codeph>WaitTimeout</codeph></entry>
              <entry dir="ltr">The amount of time to wait for a TCP connection before timing out
                after the <codeph>MaxSize</codeph> has been reached and all connections are being
                    used<p><b>Note</b>: not used with Multiplexing IO Service</p></entry>
              <entry dir="ltr">2500 ms</entry>
            </row>
            <row>
              <entry dir="ltr"><codeph>ShutdownTimeout</codeph></entry>
              <entry dir="ltr">The amount of time to wait before the underlying socket closes its
                connection</entry>
              <entry dir="ltr">10000 ms</entry>
            </row>
            <row>
              <entry dir="ltr"><codeph>SendTimeout</codeph></entry>
              <entry dir="ltr">The amount of time to allow between an operation being written on the
                socket and being acknowledged.</entry>
              <entry dir="ltr">15000 ms</entry>
            </row>
            <row>
              <entry dir="ltr"><codeph>UseSsl</codeph></entry>
              <entry dir="ltr">Whether or not to use SSL encrypt data being sent to and from the
                server</entry>
              <entry dir="ltr">false</entry>
            </row>
            <row>
              <entry><codeph>BufferSize</codeph></entry>
              <entry>The size of each buffer to allocate per TCP connection for sending and
                recieving Memcached operations</entry>
              <entry>16k</entry>
            </row>
            <row>
              <entry><codeph>EnableTcpKeepAlives</codeph></entry>
              <entry>Gets or sets a value indicating whether enable TCP keep alives.</entry>
              <entry>true</entry>
            </row>
            <row>
              <entry><codeph>TcpKeepAliveTime</codeph></entry>
              <entry>Specifies the timeout, in milliseconds, with no activity until the first
                keep-alive packet is sent.</entry>
              <entry>2hrs</entry>
            </row>
            <row>
              <entry><codeph>TcpKeepAliveInterval</codeph>
              </entry>
              <entry>Specifies the interval, in milliseconds, between when successive keep-alive
                packets are sent if no acknowledgement is received.</entry>
              <entry>1000ms</entry>
            </row>
            <row>
              <entry><codeph>CloseAttemptInterval</codeph></entry>
              <entry>
                <p>Gets or sets the interval between close attempts on a IConnection if it's in use
                  and IConnectionPool has been disposed.</p>
              </entry>
              <entry>100ms</entry>
            </row>
            <row>
              <entry><codeph>MaxCloseAttempts</codeph></entry>
              <entry>
                <p> Gets or sets the maximum number of times the client will try to close a
                  IConnection if it's in use and IConnectionPool has been disposed.</p>
              </entry>
              <entry>5</entry>
            </row>
            <row>
              <entry><codeph>UseEnhancedDurability</codeph></entry>
              <entry>
                <p>Gets or sets a value indicating whether to use enhanced durability if the
                  Couchbase server version supports it; if it's not supported the client will use
                  Observe for Endure operations.</p>
              </entry>
              <entry>false</entry>
            </row>
            <row>
              <entry><codeph>ConnectTimeout</codeph></entry>
              <entry>The amount time allotted for the client to establish a TCP connection with a
                server before failing</entry>
              <entry>10000ms</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section id="section_afq_gyx_py">
      <title>IOService</title>
      <p>The IO Service is used to manage the TCP connections used by the SDK for Memcached (K/V)
        operations. There are two IO Services available; Multiplexing (MUX) and Pooled. You can
        configure the IOService either through the configuration file (app.config, web.config or
        json settings file) or programmatically using the SDK's ClientConfiguration when
        initializing the Cluster.</p>
      <p><b>Multiplexing IO Service</b></p>
      <p>Multiplexing is when a single TCP connection is used by multiple threads to send and
        receive requests simultaneously. The benefit's are improved throughput with less strain on
        the OS resources and importantly, a reduction on the number of TCP connections between the
        client and the server. The Multiplexing IO Service is the default IO Service if no custom
        configuration is provided.</p>
      <p><b>Pooled IO Service</b></p>
      <p>Pooled is when the SDK maintains a pool of TCP sockets and each thread uses a single socket
        at one time for Memcached K/V operations (Get, Insert, Remove, etc.). The connection pool
        limit is capped by the MinSize and MaxSize configuration settings; if MaxSize has been
        reached, the SDK would wait for a connection to become available or it would return an
        OperationTimeout response.</p>
      <p><b>Configuring the IO Service</b></p>
      <p>To configure the IO Service in your configuration file you would set the connectionPool
        element and ioService elements. An example of setting the configuration file to use
        PooledIOService would look like
        this:<codeblock outputclass="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;configuration>
   &lt;configSections>
      &lt;sectionGroup name="couchbaseClients">
         &lt;section name="couchbase" type="Couchbase.Configuration.Client.Providers.CouchbaseClientSection, Couchbase.NetClient" />
      &lt;/sectionGroup>
   &lt;/configSections>
   &lt;couchbaseClients>
      &lt;couchbase enableConfigHeartBeat="false">
         &lt;servers>
            &lt;add uri="http://127.0.0.1:8091" />
         &lt;/servers>
         &lt;connectionPool name="custom" type="Couchbase.IO.ConnectionPool`1[Couchbase.IO.Connection], Couchbase.NetClient" />
         &lt;ioService name="multiplexio" type="Couchbase.IO.Services.PooledIOService, Couchbase.NetClient" />
      &lt;/couchbase>
   &lt;/couchbaseClients>
&lt;/configuration></codeblock></p>
    </section>
    <section id="section_bfq_gyx_py">
      <p>To configure the IO Service programmatically you would use the ClientConfiguration and
        setting the ConnectionPoolCreator and IOServiceCreator properties. An example that
        configures the Multiplexing IO Service would look like
        this:<codeblock outputclass="language-csharp">var config = new ClientConfiguration
{
    Servers = newList&lt;Uri>
    {
        new Uri(ConfigurationManager.AppSettings["bootstrapUrl"])
    }
};
config.ConnectionPoolCreator = ConnectionPoolFactory.GetFactory&lt;ConnectionPool&lt;MultiplexingConnection>>();
config.IOServiceCreator = IOServiceFactory.GetFactory&lt;MultiplexingIOService>();
ClusterHelper.Initialize(config);</codeblock></p>
      <p><b>Caveats</b></p>
      <p>A couple of caveats are in order:</p>
      <ul id="ul_lgh_32d_py">
        <li>SSL is not yet supported for MUX (<xref
            href="https://issues.couchbase.com/browse/NCBC-1056" format="html" scope="external">JIRA
            ticket</xref>)</li>
        <li>Since MUX uses a single connection per node for Memcached (K/V) operations, some of the
          connection pool settings no longer apply, these are:<ul id="ul_lzf_4xx_py">
            <li>MinSize</li>
            <li>MaxSize</li>
            <li>WaitTimeout</li>
          </ul></li>
        <li>MUX has no effect on Views, N1QL or Full Text Search queries</li>
      </ul>
    </section>
  </body>
</topic>
