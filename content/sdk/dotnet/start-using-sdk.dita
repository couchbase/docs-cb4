<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_vpj_dh5_xv">
	<title>Install and Start Using the .NET SDK with Couchbase Server</title>
	<titlealts><navtitle>Start Using the SDK</navtitle></titlealts>
	<shortdesc>The Couchbase .NET SDK enables you to interact with a Couchbase Server cluster from
		the .NET Framework using C#. It offers both a traditional synchronous API and an
		asynchronous API based on the <i>Task-based Asynchronous Pattern (TAP)</i>.</shortdesc>
	<body>
		<section><title>Installing the SDK</title>
			<p>The following sections explain in detail how to get started using each method.</p>
		</section>
		<section>
			<title>Installing the Client</title>
			<p>At a minimum, Microsoft .NET Framework 4.5 is required, but any newer version is also
				supported. Microsoft Visual Studio 2013 or later is assumed in this guide, though
				you should use 2015 or later if possible. Add the Couchbase .NET SDK to your Visual
				Studio solution using one of the following methods: </p>
			<p>
				<ul>
					<li>Using NuGet (recommended method)</li>
					<li>Downloading and referencing the binaries</li>
					<li>Building from source yourself</li>
				</ul>
			</p>
			<p>Information on new features, fixes, known issues
				as well as information on how to install older release versions is <xref
					href="/server/other-products/release-notes-archives/dotnet-sdk" format="html"
					scope="peer">in the release notes</xref>.</p>
			<p>The following sections explain in detail how to get started using each method.</p>
		</section>
		<section>
			<title>Using NuGet</title>
			<p>For every release, we package the binaries and store the latest version in <xref
					href="https://www.nuget.org/packages/CouchbaseNetClient/" format="html"
					scope="external">NuGet</xref>. If you are not familiar with NuGet, it’s the
				official and most widely supported package manager for Microsoft Visual Studio and
				.NET in general. NuGet is a centralized repository for package authors and
				consumers, and it also defines a suite of tools for authoring and consuming
				packages.</p>
			<p>Using Visual Studio 2013 or later, follow these steps to get started with the
				Couchbase .NET SDK: </p>
			<ol>
				<li>From the IDE, right-click the project you want to add the dependency to.</li>
				<li>In the context menu, click <uicontrol>Manage NuGet Packages</uicontrol>. The
					NuGet package manager modal dialog opens.</li>
				<li>From the Tree View menu on the left, select <menucascade>
						<uicontrol>Online</uicontrol>
						<uicontrol>nuget.org</uicontrol>
					</menucascade>.</li>
				<li>In the search box at the top right-hand side of the dialog, type
						<userinput>CouchbaseNetClient</userinput> and then press enter on your
					keyboard.</li>
				<li>In the search results, select the CouchbaseNetClient package and then click
						<uicontrol>Install</uicontrol>.</li>
			</ol>
			<p>That’s it! NuGet will pull in all required dependencies and reference them. You're
				ready to start coding!</p>
			<p>As an alternative to using the Visual Studio IDE, you can include the binaries by
				using the Package Manager Console. The main advantage of using the Package Manager
				Console is that the NuGet Dialog by default always installs the latest version of
				the package published to NuGet.org, however the console allows you to define the
				version of the package you want to include. For users targeting older builds of the
				SDK, using the Package Manager Console is the best option.</p>
			<p>To use the Package Manager Console to include the SDK in your project:</p>
			<ol>
				<li>From the Visual Studio menu bar, click <uicontrol>Tools</uicontrol>.</li>
				<li>Select <menucascade>
						<uicontrol>NuGet Package Manager</uicontrol>
						<uicontrol>Package Manager Console</uicontrol>
					</menucascade>.</li>
				<li>In the console, enter the package installation command: <ul id="ul_bgb_lyc_kp">
						<li>To install the latest version:
							<pre>Install-Package CouchbaseNetClient</pre></li>
						<li>To install a specific version, include the version parameter. For
							example:
							<pre>Install-Package CouchbaseNetClient -Version 2.0.0 -Pre</pre></li>
					</ul></li>
			</ol>
		</section>
		<section>
			<title>Downloading and referencing the binaries</title>
			<p>If you do not want to use NuGet to include the Couchbase .NET SDK in your project,
				you can download and reference the binaries directly. If you chose this route,
				you’ll also be responsible for including and resolving dependencies used internally
				by the SDK.</p>
			<p>To download and reference the binaries directly:</p>
			<p>
				<ol>
					<li>Download the version of the SDK you want to install - <xref 
						href="https://developer.couchbase.com/server/other-products/release-notes-archives/dotnet-sdk"
						scope="external" format="html">Releases</xref></li>
					<li>In Visual Studio, right-click the project you want to include the SDK in and
						then click <uicontrol>Add</uicontrol>.</li>
					<li>Click <uicontrol>Reference</uicontrol> to open the Reference Manager.</li>
					<li>On the left side, click <uicontrol>Browse</uicontrol> and select the
						binaries you downloaded.</li>
					<li>Click <uicontrol>OK</uicontrol>.</li>
				</ol>
			</p>
			<p>After you have referenced the Couchbase .NET SDK binaries, you need to locate and
				reference the dependencies it uses in a similar fashion. At the time of this
				writing, the dependencies are: </p>
			<p>
				<ul>
					<li>Apache Common Infrastructure Libraries for .NET v2.0.0: <xref
							href="http://www.apache.org/licenses/LICENSE-2.0" format="html"
							scope="external"
						>http://netcommon.sourceforge.net/downloads.html</xref></li>
					<li>Json.NET v6.0.1: <xref href="https://json.codeplex.com/releases/view/126052"
							format="html" scope="external"
							>https://json.codeplex.com/releases/view/126052</xref></li>
				</ul>
			</p>
			<p>Other versions might not be compatible with the current SDK version. </p>
		</section>
		<section>
			<title>Building from source</title>
			<p>If none of the other installation options suffice or if you want to debug the source
				or perhaps contribute, building directly from the source is the best option for you.
				All source is located on GitHub.</p>
			<note>
				<p>The software provided via NuGet and S3 are the official releases that have been
					through a rigorous testing process. Code on GitHub that is not tagged as an
					official release is still in development.</p>
			</note>
			<p>To build the .NET SDK from source:</p>
			<p>
				<ol>
					<li>(<i>Optional</i>) Fork the GitHub repository: <xref format="html"
							href="https://github.com/couchbase/couchbase-net-client/fork"
							>https://github.com/couchbase/couchbase-net-client/fork</xref></li>
					<li>Using a Git console, enter the command to clone the repository:
						<pre>git clone https://github.com/couchbase/couchbase-net-client.git</pre></li>
					<li>Enter the command to retrieve the latest code from GitHub:
						<pre>git pull origin master</pre></li>
					<li>Navigate to the directory that the source was cloned to and open the
						solution. </li>
					<li>Build the solution.</li>
				</ol>
			</p>
			<p>After you have successfully built the source, it’s then just a matter of referencing
				the binaries (.DLL files) from your consuming project.</p>
		</section>

		<section><title>Hello Couchbase</title><p>This tutorial creates a simple console application using
				Visual Studio that illustrates the most basic usage of the Couchbase .NET SDK.
				</p><p>To begin, open Visual Studio and create a new Console Application Project
				called Couchbase.HelloCouchbase: </p><p>
				<image href="images/hello-couchbase-visual-studio.png" id="image_i31_yqb_3p"/>
			</p>
			<p>This creates a simple executable with a <codeph>main()</codeph> method that you can
				use to try reading and writing from a Couchbase Cluster.</p><p>Next, use the NuGet
				Package Manager to reference the Couchbase .NET SDK and its dependencies: </p>
			<image href="images/hello-couchbase-nuget.png" id="image_rmn_hsb_3p"/>
			<p>At this point, you should be ready to go. Add a <codeph>Cluster</codeph> object,
				which represents a factory and resource manager for Couchbase buckets. This is added
				to the <filepath>Program.cs</filepath> file that was added automatically by Visual
				Studio when the project was created:</p>
			<codeblock outputclass="language-csharp" spectitle="Creating the Cluster and Bucket">internal class Program
{
	private static readonly Cluster Cluster = new Cluster();

	private static void Main(string[] args)
	{
		using (var bucket = Cluster.OpenBucket())
		{
			...
		}
	}
}</codeblock>
			<p>The default <codeph>OpenBucket()</codeph> overload with no parameters opens the
					<codeph>default</codeph> bucket. Additionally, because the default constructor
				is used to create the <codeph>Cluster</codeph> object, the app connects to the
					<codeph>localhost</codeph> (<codeph>127.0.0.1</codeph>) instance of Couchbase
				Server.</p>
			<p>The <codeph>CouchbaseBucket</codeph> object (as well as the <codeph>Cluster</codeph>
				object) implements the dispose pattern. Because of this, the instance is wrapped in
				a <codeph>using</codeph> statement, which means that the internal resources
				allocated by the instance will be reclaimed as the bucket instance goes out of
				scope. Managing the lifetime or scope of these objects is critical to developing
				high-performing, robust applications with the .NET SDK.</p>
			<p> Now that you have connected to a Couchbase bucket, you can create a document and add
				it to the database: </p>
			<codeblock outputclass="language-csharp" spectitle="Storing and Getting a document">using (var bucket = Cluster.OpenBucket())
{
	var document = new Document&lt;dynamic>
	{
		Id = "Hello",
		Content = new
		{
			name = "Couchbase"
		}
	};

	var upsert = bucket.Upsert(document);
	if (upsert.Success)
		{
			var get = bucket.GetDocument&lt;dynamic>(document.Id);
			document = get.Document;
			var msg = string.Format("{0} {1}!", document.Id, document.Content.name);
			Console.WriteLine(msg);
		}
	Console.Read();
}</codeblock>
			<p>First, the code creates a new <codeph>Document</codeph> object, types it as
					<codeph>dynamic</codeph> and provides an <codeph>Id</codeph> value. Then, it
				creates the actual value that will be stored as JSON in Couchbase and assigns it to
				the <codeph>Content</codeph> property. After the <codeph>Document</codeph> object is
				created, it uses the <codeph>Upsert()</codeph> method to store it into the database.
				Finally, it checks whether the operation was successful and if it is, does a
					<codeph>GetDocument()</codeph> operation to retrieve the document and formats a
				string with the <codeph>Id</codeph> of the document and the <codeph>Name</codeph>
				property from the <codeph>Content</codeph> field (the actual JSON
				document).</p><p>If you build and run this from Visual Studio, you should see the
				following message output:</p><p>
				<codeblock outputclass="language-bourne">Hello Couchbase!</codeblock>
			</p><p>Congratulations, you have successfully created the Hello Couchbase Tutorial! The
				full source can be found on <xref
					href="https://github.com/couchbaselabs/couchbase-net-examples/tree/master/Src/Couchbase.HelloCouchbase"
					format="html" scope="external" id="xref_inm_v5m_bw">GitHub</xref>.</p>
		</section>

		<section><title>API Reference</title>The API reference is generated for each release and can
			be found <xref href="http://docs.couchbase.com/sdk-api/couchbase-net-client-2.3.3/" format="html"
				scope="external">here</xref>. </section>
		<section><title>Contributing</title><p>Couchbase welcomes community contributions to the
				.NET SDK. The <xref href="https://github.com/couchbase/couchbase-net-client"
					format="html" scope="external">.NET SDK source code</xref> is available on
				GitHub.</p>
		</section>
	</body>
</topic>
