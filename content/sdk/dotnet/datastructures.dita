<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="toplevel">
    <title>Data Structures</title>
    <shortdesc>You can use complex data structures such as dictionaries and lists in Couchbase.
        These data structures may be manipulated with basic operations without retrieving and
        storing the entire document.</shortdesc>
    <body>
        <p>Data structures in Couchbase are similar in concept to data structures in C# (.NET):<ul
                id="ul_txf_32t_5x">
                <li><b>Map</b> is like .NET <codeph>Dictionary&lt;TKey, TValue></codeph>, and is a
                    key-value structure, where a value is accessed by using a key string.</li>
                <li><b>List</b> is like a .NET <codeph>List&lt;TValue></codeph> and is a sequential
                    data structure. Values can be placed in the beginning or end of a list, and can
                    be accessed using numeric indexes.</li>
                <li><b>Queue</b> is like a <codeph>IQueue</codeph> implementation which offers FIFO
                    (first-in-first-out) semantics, allowing it to be used as a lightweight job
                    queue.</li>
                <li><b>Set</b> is a wrapper over a <codeph>List&lt;TValue></codeph> which provides
                    the ability to handle unique values.</li>
            </ul></p>
        <p>These data structures are stored as JSON documents in Couchbase, and can therefore be
            accessed using N1QL and normal key-value operations. Data structures can also be
            manipulated using the traditional sub-document and full-document KV APIs. </p>
        <p>Using the data structures API may help your application in two ways:<ul
                id="ul_kd3_tcb_vx">
                <li><b>Simplicity</b>: Data structures provide high level operations by which you
                    can deal with documents as if they were container data structures. Adding an
                    item to a dictionary is expressed as <codeph>MapAdd</codeph>, rather than
                    retrieving the entire document, modifying it locally, and then saving it back to
                    the server.</li>
                <li><b>Efficiency</b>: Data structure operations do not transfer the entire document
                    across the network. Only the relevant data is exchanged between client and
                    server, allowing for less network overhead and lower latency.</li>
            </ul><note>Besides the <apiname>IBucket</apiname> level data structure methods, there is
                a new namespace called <apiname>Couchbase.Collections</apiname> which contains
                implementations of some of the core interfaces in
                    <apiname>System.Collection.Generics</apiname> such as
                    <apiname>ISet&lt;TValue></apiname>, <apiname>IList&lt;TValue></apiname>,
                    <apiname>IDictionary&lt;Tkey, TValue></apiname> and a
                <apiname>CouchbaseQueue</apiname> class. See section 
                <xref href="#toplevel/couchbase-collections">The Couchbase.Collections Namespace</xref>
                below for more details.</note></p>
        <section><title>Creating a Data Structure</title>Data structures can be created implicitly
            using the <option>create=True</option>. For example, to add an item to a map, specify
            the <i>document ID</i> of the map itself (i.e. the ID which uniquely identifies the map
            in the server), the key <i>within</i> the map, and the value to store under the
            key:<codeblock outputclass="language-csharp">bucket.MapAdd("map_id", "name", "Mark Nunberg", create=True)</codeblock>Likewise,
            to create a list, specify the document ID and the value to
            add:<codeblock outputclass="language-csharp">bucket.ListAppend("list_id", "hello", create=True)</codeblock>Note that
            the <option>create=True</option> will not overwrite an existing document with the same
            name if it already exists. It is therefore always safe to use, unless your application
            creates data structures independently.<p>Data structures can be explicitly created and
                reset using full-document methods, and each
                can be initialized with its JSON equivalent. To
                create a new empty list, set, or queue, use <codeph>bucket.Upsert("list_id",
                    "[]")</codeph>. To create an empty map, use <codeph>bucket.Upsert("map_id",
                    "{}")</codeph>.</p></section>
        <section><title>Accessing Data Structures</title>Data structures can be accessed using their
            appropriate methods. Most data access methods will return a
                <apiname>ValueResult</apiname>-like object with the actual returned value under the
                <varname>value</varname>
            property.<codeblock outputclass="language-csharp">bucket.ListGet&lt;string>(0).Value  # 'hello'
bucket.MapGet&lt;string>("map_id", "name").Value  # 'mark nunberg'</codeblock>Native
            .NET exceptions such as <apiname>IndexOutOfRangeException</apiname> will be returned if
            a given map key or list index is not found within the document. If the document itself
            does not exist, a <apiname>Couchbase.DocumentDoesNotExistException</apiname> will be
            returned instead.<p>Here is a list of common operations:<table frame="all" rowsep="1"
                    colsep="1" id="table_c5w_jg5_5x">
                    <title>Data Structure Operations</title>
                    <tgroup cols="2">
                        <colspec colname="c1" colnum="1" colwidth="1*"/>
                        <colspec colname="c2" colnum="2" colwidth="3.76*"/>
                        <thead>
                            <row>
                                <entry/>
                                <entry/>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry><apiname>MapAdd</apiname></entry>
                                <entry>Add a key to a
                                    map.<codeblock outputclass="language-csharp">bucket.MapAdd("map_id", "some_key", "some value")</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>MapRemove</apiname></entry>
                                <entry>Remove a key from a
                                    map.<codeblock outputclass="language-csharp">bucket.MapRemove("map_id", "some_key")</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>MapGet</apiname></entry>
                                <entry>Get an item from a
                                    map.<codeblock outputclass="language-csharp">bucket.MapGet&lt;TValue>("map_id", "some_key").Value #=> value</codeblock>If
                                    the key is not found, an <apiname>IndexError</apiname> is
                                    raised.</entry>
                            </row>
                            <row>
                                <entry><apiname>ListAppend</apiname></entry>
                                <entry>Add an item to the <i>end</i> of a
                                    list.<codeblock outputclass="language-csharp">bucket.ListAppend("list_id", "some_value")</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>ListPrepend</apiname></entry>
                                <entry>Add an item to the <i>beginning</i> of a
                                    list.<codeblock outputclass="language-csharp">bucket.ListPrepend("list_id", "some_value")</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>ListSet</apiname></entry>
                                <entry>Adds an item to a list at a given
                                    index.<codeblock outputclass="language-csharp">bucket.ListSet("list_id", 0, "some_value")</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>ListRemove</apiname></entry>
                                <entry>Removes an item from a list at a given
                                    index.<codeblock outputclass="language-csharp">bucket.ListRemove("list_id", 0)</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>ListGet</apiname></entry>
                                <entry>Get an item from a list by its
                                    index.<codeblock outputclass="language-csharp">bucket.ListGet&lt;TValue>("list_id", 0).Value #=> value</codeblock>If
                                    the index is out of range, an
                                        <apiname>IndexOutOfRangeException</apiname> will be
                                    returned. Note that you can get the <i>last</i> array element by
                                    specifying <codeph>-1</codeph> as the index.</entry>
                            </row>
                            <row>
                                <entry><apiname>SetAdd</apiname></entry>
                                <entry>Add an item to a set, if the item does not yet exist in the
                                    set.<codeblock outputclass="language-csharp">bucket.SetAdd("list_id", "some_value")</codeblock>Note
                                    that a <i>set</i> is just a list. You can retrieve the entire
                                    set by simply using a full-document <apiname>get</apiname>
                                        operation:<codeblock outputclass="language-csharp">set = bucket.Get("list_id").Value</codeblock><note>Currently,
                                        you can only store primitive values in sets, such as
                                        strings, ints, and booleans.</note></entry>
                            </row>
                            <row>
                                <entry><apiname>SetRemove</apiname></entry>
                                <entry>Remove an item from a set, if it exists. An exception is not
                                    thrown if the item does not exist. You can determine if an item
                                    existed or not by the return value. If the item did not exist
                                    beforehand, <codeph>None</codeph> is returned. This operation
                                    uses <xref href="../../developer-guide/cas-concurrency.dita"
                                        format="dita">CAS</xref> to ensure the correct item is
                                    removed.<codeblock outputclass="language-csharp">bucket.SetRemove("list_id", "some_value")</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>SetContains</apiname></entry>
                                <entry>Checks if a value exists in a
                                    set.<codeblock outputclass="language-csharp">bucket.SetContains("set_id", "some_value").Value #=> True or False</codeblock></entry>
                            </row>
                            <row>
                                <entry><apiname>QueuePush</apiname></entry>
                                <entry>Add an item to the beginning of the
                                    queue.<codeblock outputclass="language-csharp">bucket.QueuePush("a_queue", "job123", create=True)</codeblock>Note
                                    that a queue is just a list. You can retrieve items from the
                                    middle of the queue by using <apiname>ListGet</apiname></entry>
                            </row>
                            <row>
                                <entry><apiname>QueuePop</apiname></entry>
                                <entry>Remove an item from the end of the queue and return it. This
                                    operation uses <xref
                                        href="../../developer-guide/cas-concurrency.dita"
                                        format="dita">CAS</xref> to ensure no two processs can
                                    retrieve the same
                                    item.<codeblock outputclass="language-csharp">item = bucket.QueuePop("a_queue").Value #=> 'job123'</codeblock>If
                                    the queue is empty, then a
                                        <apiname>couchbase.exceptions.QueueEmpty</apiname> error is
                                    thrown.</entry>
                            </row>
                            <row>
                                <entry><apiname>MapSize</apiname>, <apiname>ListSize</apiname>,
                                        <apiname>SetSize</apiname>,
                                    <apiname>QueueSize</apiname></entry>
                                <entry>These methods get the length of the data structure. For maps,
                                    this is the number of key-value pairs inside the map. For lists,
                                    queues, and sets, this is the number of elements in the
                                    structure.<codeblock outputclass="language-csharp">len = bucket.ListSize('a_list').Value #=> 42</codeblock></entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table></p><p>Note that there are only <b>two</b> basic types: map and list. Types
                such as <i>queue</i> and <i>set</i> are merely derivatives of
            <i>list</i>.</p></section>
        <section><title>Data Structures and Key-Value APIs</title>Data structures can be accessed
            using key-value APIs as well. In fact, the data structure API is actually a client-side
            wrapper <i>around</i> the key-value and sub-document API. Most of the data structure
            APIs wrap the sub-document API directly. <note>Because the data structure API is just a
                wrapper around the various key-value APIs, you are free to switch between them in
                your code.</note></section>
        <section id="couchbase-collections">
            <title>The Couchbase.Collections Namespace</title>
            <p>In addition to the <apiname>IBucket</apiname> level methods for working with Data
                Structures, the .NET SDK also has implementations of
                    <apiname>System.Collection.Generic</apiname> interfaces for Sets, Lists, Queues
                and Dictionaries. Instead of maintaining in-memory storage, these implementations
                persist to Couchbase Server as a JSON document as the structure is modified. </p>
            <note>These classes are idiomatic to the .NET framework and thus are available to the
                SDK. Other SDKs may or may not support equivalents and/or have implementations that
                are platform idiomatic.</note>
        </section>
        <section>
            <title><apiname>CouchbaseSet&lt;TValue></apiname></title>
            <p>This class is an implementation of <apiname>ISet&lt;TValue></apiname> and represents a set, which is a
                data structure that can store certain values in any order without duplicates. The
                underlying storage medium is a JSON document with a single array: "[]". The
                CouchbaseSet supports the following operations:<table id="table_wtl_rm3_vx">
                    <tgroup cols="2">
                        <colspec colnum="1" colname="c1" colwidth="1*"/>
                        <colspec colnum="2" colname="c2" colwidth="1.67*"/>
                        <tbody>
                            <row>
                                <entry><b>Method</b></entry>
                                <entry><b>Description</b></entry>
                            </row>
                            <row>
                                <entry><apiname>GetEnumerator</apiname></entry>
                                <entry>Returns an enumerator that iterates through the
                                    collection.</entry>
                            </row>
                            <row>
                                <entry><apiname>Add(TValue)</apiname></entry>
                                <entry>Adds a value to the set.</entry>
                            </row>
                            <row>
                                <entry><apiname>Clear()</apiname></entry>
                                <entry>Removes all values from the set.</entry>
                            </row>
                            <row>
                                <entry><apiname>Contains(TValue)</apiname></entry>
                                <entry>Checks if an item exists within the set.</entry>
                            </row>
                            <row>
                                <entry><apiname>CopyTo(TArray, startIndex)</apiname></entry>
                                <entry>Copies the set to another array at a given index.</entry>
                            </row>
                            <row>
                                <entry><apiname>Remove(TValue)</apiname></entry>
                                <entry>Removes an item from the set.</entry>
                            </row>
                            <row>
                                <entry><apiname>Count</apiname></entry>
                                <entry>Returns the total number of items in the set.</entry>
                            </row>
                            <row>
                                <entry><apiname>SetEquals(IEnumerable&lt;Tvalue>)</apiname></entry>
                                <entry>Compares two sets.</entry>
                            </row>
                            <row>
                                <entry><apiname>Overlaps(IEnumerable&lt;Tvalue>)</apiname></entry>
                                <entry>Determines whether the current set overlaps with the
                                    specified collection.</entry>
                            </row>
                            <row>
                                <entry><apiname>IsSupersetOf(IEnumerable&lt;TValue>)</apiname></entry>
                                <entry>Determines whether the current set is a superset of a
                                    specified collection.</entry>
                            </row>
                            <row>
                                <entry><apiname>IsSubsetOf(IEnumerable&lt;TValue> other)</apiname></entry>
                                <entry>Determines whether a set is a subset of a specified
                                    collection.</entry>
                            </row>
                            <row>
                                <entry><apiname>SymmetricExceptWith(IEnumerable&lt;TValue>)</apiname></entry>
                                <entry>Modifies the current set so that it contains only elements
                                    that are present either in the current set or in the specified
                                    collection, but not both.</entry>
                            </row>
                            <row>
                                <entry><apiname>ExceptWith(IEnumerable&lt;TValue>)</apiname></entry>
                                <entry>Removes all elements in the specified collection from the
                                    current set.</entry>
                            </row>
                            <row>
                                <entry><apiname>IntersectWith(IEnumerable&lt;TValue>)</apiname></entry>
                                <entry>Modifies the current set so that it contains only elements
                                    that are also in a specified collection.</entry>
                            </row>
                            <row>
                                <entry><apiname>UnionWith(IEnumerable&lt;TValue>)</apiname></entry>
                                <entry>Modifies the current set so that it contains all elements
                                    that are present in the current set, in the specified
                                    collection, or in both.</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table></p>
            <p>Here is an example of using the
            <apiname>CouchbaseSet</apiname>:<codeblock outputclass="language-csharp">public class Poco
{
    public string Key { get; set; }
    public string Name { get; set; }
    protected bool Equals(Poco other)
    {
        return string.Equals(Key, other.Key, StringComparison.OrdinalIgnoreCase);
    }
    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        if (obj.GetType() != this.GetType()) return false;
        return Equals((Poco) obj);
    }
    public override int GetHashCode()
    {
        return (Key != null ? StringComparer.OrdinalIgnoreCase.GetHashCode(Key) : 0);
    }
}

var collection = new CouchbaseSet&lt;Poco>(_bucket, "pocos");
collection.Add(new Poco { Key = "poco1", Name = "Poco-pica" });
collection.Remove(new Poco {Key = "poco1", Name = "Poco-pica"});

var exists = collection.Contains(new Poco {Key = "poco1", Name = "Poco-pica"});
foreach(var poco in collection){ Console.WriteLine(poco);}</codeblock></p>
            <p>The Poco class overrides <apiname>Equals()</apiname> and <apiname>GetHashCode()</apiname> will be used henceforth in each
                example.</p>
        </section>
        <section id="section_mlx_pq3_vx">
            <title>CouchbaseDictionary&lt;TKey, TValue></title>
            <p>The <apiname>CouchbaseDictionary</apiname> class is an implementation of
                    <apiname>IDictionary&lt;TKey, TValue></apiname> which stores its values as a
                hash map in a JSON document in Couchbase. It supports the following operations:</p>
            <p>
                <table id="table_ih1_2r3_vx">
                    <tgroup cols="2">
                        <colspec colnum="1" colname="c1" colwidth="1*"/>
                        <colspec colnum="2" colname="c2" colwidth="1.34*"/>
                        <tbody>
                            <row>
                                <entry><b>Method</b></entry>
                                <entry><b>Description</b></entry>
                            </row>
                            <row>
                                <entry><apiname>Key</apiname></entry>
                                <entry>Gets the key for this document.</entry>
                            </row>
                            <row>
                                <entry><apiname>GetEnumerator()</apiname></entry>
                                <entry>Returns an enumerator that iterates through the
                                    collection.</entry>
                            </row>
                            <row>
                                <entry><apiname>Add(KeyValuePair&lt;TKey, TValue>)</apiname></entry>
                                <entry>Adds an item to the hash map.</entry>
                            </row>
                            <row>
                                <entry><apiname>Clear()</apiname></entry>
                                <entry> Removes all items from the hash map.</entry>
                            </row>
                            <row>
                                <entry><apiname>Contains(KeyValuePair&lt;TKey, TValue>)</apiname></entry>
                                <entry>Determines if an item exists within the hash map.</entry>
                            </row>
                            <row>
                                <entry><apiname>CopyTo(KeyValuePair&lt;TKey, TValue>[], arrayIndex)</apiname></entry>
                                <entry>Copies the values to an array starting at an index.</entry>
                            </row>
                            <row>
                                <entry><apiname>Remove(KeyValuePair&lt;TKey, TValue> item)</apiname></entry>
                                <entry>Removes an item from the hash map.</entry>
                            </row>
                            <row>
                                <entry><apiname>Count</apiname></entry>
                                <entry>Returns the total number of items into the hash map.</entry>
                            </row>
                            <row>
                                <entry><apiname>Add(TKey key, TValue value)</apiname></entry>
                                <entry>Adds an item to the hash map.</entry>
                            </row>
                            <row>
                                <entry><apiname>Remove(TKey key)</apiname></entry>
                                <entry>Removes an item from the hash map.</entry>
                            </row>
                            <row>
                                <entry><apiname>TryGetValue(TKey key, out TValue value)</apiname></entry>
                                <entry>Gets a value from the hash map at a given key.</entry>
                            </row>
                            <row>
                                <entry><apiname>this[TKey key]</apiname></entry>
                                <entry>Indexer - gets a value from the hash map at a given
                                    key.</entry>
                            </row>
                            <row>
                                <entry>Keys<apiname></apiname></entry>
                                <entry>Get all of the keys in the document.</entry>
                            </row>
                            <row>
                                <entry><apiname>Values</apiname></entry>
                                <entry>Get all of the values in the document.</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </p>
            <p>Here is an example using the CouchbaseDictionary&lt;TKey,
                TValue>:<codeblock outputclass="language-csharp">var dictionary = new CouchbaseDictionary&lt;string, Poco>(_bucket, key);
dictionary.Add("somekey1", new Poco { Name = "poco1" });
dictionary.Add("somekey2", new Poco { Name = "poco2" });
var removed = dictionary.Remove("somekey2");

foreach(var kv in dictionary)
{
    Console.WriteLine("{0}=>{1}", kv.Key, kv.Value);
}            </codeblock></p>
        </section>
        <section>
            <title>CouchbaseList&lt;TValue></title>
            <p>The <apiname>CouchbaseList&lt;TValue></apiname> is an implementation of <apiname>IList&lt;TValue></apiname> and represents
                a list of items including duplicates. It supports the following operations:</p>
            <p>
                <table id="table_ihp_tt3_vx">
                    <tgroup cols="2">
                        <colspec colnum="1" colname="c1" colwidth="209.25pt"/>
                        <colspec colnum="2" colname="c2" colwidth="478.88pt"/>
                        <tbody>
                            <row>
                                <entry><b>Method</b></entry>
                                <entry><b>Description</b></entry>
                            </row>
                            <row>
                                <entry><apiname>Key</apiname></entry>
                                <entry>Gets the key for this document.</entry>
                            </row>
                            <row>
                                <entry><apiname>Add(T item)</apiname></entry>
                                <entry>Adds an item to the list.</entry>
                            </row>
                            <row>
                                <entry><apiname>GetEnumerator()</apiname></entry>
                                <entry>Returns an enumerator that iterates through the
                                    collection.</entry>
                            </row>
                            <row>
                                <entry><apiname>Contains(T item)</apiname></entry>
                                <entry>Determines if an item exists in the list.</entry>
                            </row>
                            <row>
                                <entry><apiname>Remove(T item)</apiname></entry>
                                <entry>Removes an item from the list.</entry>
                            </row>
                            <row>
                                <entry><apiname>IndexOf(T item)</apiname></entry>
                                <entry>Gets the index of an item in the list.</entry>
                            </row>
                            <row>
                                <entry><apiname>Insert(int index, T item)</apiname></entry>
                                <entry>Inserts an item into the list at a given index.</entry>
                            </row>
                            <row>
                                <entry><apiname>RemoveAt(int index)</apiname></entry>
                                <entry>Removes an item from the list at a given index.</entry>
                            </row>
                            <row>
                                <entry><apiname>this[int index]</apiname></entry>
                                <entry>Indexer - gets an item in the list at a given index.</entry>
                            </row>
                            <row>
                                <entry><apiname>Get(int index)</apiname></entry>
                                <entry>Gets an item in the list at a given index.</entry>
                            </row>
                            <row>
                                <entry><apiname>Clear()</apiname></entry>
                                <entry>Removes all items from the list.</entry>
                            </row>
                            <row>
                                <entry><apiname>Count</apiname></entry>
                                <entry>Returns the total number of items into the list.</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </p>
            <p>Here is an example using the
            <apiname>CouchbaseList&lt;TValue></apiname>:<codeblock outputclass="language-csharp">var collection = new CouchbaseList&lt;Poco>(_bucket, "BucketListTests_Test_Enumeration");

var numItems = 5;
for (var i = 0; i &lt; numItems; i++)
{
    collection.Add(new Poco {Key = "poco"+i, Name = "Poco-pica"+i});
}

foreach (var poco in collection)
{
    Console.WriteLine(poco);
}</codeblock></p>
        </section>
        <section>
            <title>CouchbaseQueue&lt;TValue></title>
            <p>The <apiname>CouchbaseQueue&lt;TValue></apiname> is 
                an implementation of a Queue data structure and offers
                similar functionality to <apiname>System.Collections.Generic.Queue&lt;TValue></apiname>. It offers the
                following operations:</p>
            <p>
                <table id="table_xbl_lv3_vx">
                    <tgroup cols="2">
                        <colspec colnum="1" colname="c1" colwidth="1.11*"/>
                        <colspec colnum="2" colname="c2" colwidth="1*"/>
                        <tbody>
                            <row>
                                <entry><b>Method</b></entry>
                                <entry><b>Description</b></entry>
                            </row>
                            <row>
                                <entry><apiname>Key</apiname></entry>
                                <entry>Gets the key for this document.</entry>
                            </row>
                            <row>
                                <entry><apiname>GetEnumerator()</apiname></entry>
                                <entry>Returns an enumerator that iterates through the
                                    collection.</entry>
                            </row>
                            <row>
                                <entry><apiname>Clear()</apiname></entry>
                                <entry>Removes all items from the queue.</entry>
                            </row>
                            <row>
                                <entry><apiname>CopyTo(KeyValuePair&lt;TKey, TValue>[],
                                        arrayIndex)</apiname></entry>
                                <entry>Copies the values to an array starting at an index.</entry>
                            </row>
                            <row>
                                <entry><apiname>Dequeue()</apiname></entry>
                                <entry>Removes and returns the object at the beginning of the queue.
                                    This operation uses <xref
                                        href="../../developer-guide/cas-concurrency.dita"
                                        format="dita">CAS</xref> to ensure no two calls gets the
                                    same item.</entry>
                            </row>
                            <row>
                                <entry><apiname>Enqueue(T item)</apiname></entry>
                                <entry>Adds an object to the end of the queue.</entry>
                            </row>
                            <row>
                                <entry><apiname>Peek()</apiname></entry>
                                <entry>Returns the object at the beginning of the queue without
                                    removing it.</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </p>
        </section>
        <p>Here is an example of using the <apiname>CouchbaseQueue&lt;TValue></apiname>:</p>
        <p>
            <codeblock outputclass="language-csharp">var queue = new CouchbaseQueue&lt;Poco>(_bucket, key);
queue.Enqueue(new Poco { Name = "pcoco1" });
queue.Enqueue(new Poco { Name = "pcoco2" });
queue.Enqueue(new Poco { Name = "pcoco3" });

var item = queue.Peek();
Console.WriteLine(item);</codeblock>
        </p>
        <section>
            <title>Concurrency</title>
            <p>Where appropriate, all of operations on the <apiname>IBucket</apiname> level and the
                implementations in <apiname>Couchbase.Collections</apiname> utilise the <xref
                    href="../../developer-guide/cas-concurrency.dita" format="dita">CAS</xref>
                (Compare and Swap) value when manipulating data to ensure that two different
                processes do not manipulate the same data at the same time. For example: when using
                    <apiname>QueuePop</apiname>, two threads could not receive the same item.</p>
        </section>
    </body>
</topic>
