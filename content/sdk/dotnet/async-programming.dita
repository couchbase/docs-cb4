<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="async-programming-java">
  <title>Asynchronous Programming</title>
  <topic id="mastering-observables">
    <title>Async and Await</title>
    <shortdesc>This section helps you to get up to speed with asynchronous programming using the
      <codeph>Task-based Asynchronous Pattern (TAP)</codeph> with the async and await
      keywords. </shortdesc>
    <body>
      <section>
        <title>Motivation</title>
        <p>Asynchronous and reactive methodologies allow you to utilize system resources
          better. Instead of wasting a thread waiting for network or disk I/O, it can be
          fully utilized to perform other work instead.</p>
        <p>If you are programming in .NET there are a wide variety of technologies that
          support asynchronous programming from the Asynchronous Programming Model (APM)
          and the Event-based Asynchronous Pattern (EAP) within the .NET Framework to OSS
          frameworks built for the asynchronous model like Akka.NET. </p>
        <p>We feel that a database driver must meet the following requirements:</p>
        <ul>
          <li>Rich functionality</li>
          <li>Interoperable and not opinionated</li>
          <li>Performant</li>
          <li>Small dependency and runtime footprint</li>
        </ul>
        <p>With the addition of the Task-based Asynchronous Pattern (TAP) released in .NET 4
          the <apiname>Task</apiname> and <apiname>Task&lt;Result></apiname> "futures" Types were added along with language
          support for the <codeph>async</codeph> and <codeph>await</codeph> keywords. TAP offers an easy to use, consistent
          model for performing asynchronous programming and it was a natural fit to
          support TAP in the Couchbase .NET SDK.</p>
        <p>Couchbase hopes that after you read through the introduction and get more
          familiar with the concept, you will never want to go back. Couchbase fully
          supports blocking operations as well, so you can still use a traditional
          blocking-based model if you indeed want to.</p>
      </section>
      <section id="section_abm_mvy_fw">
        <title>The async and await keywords</title>
        <p>In modern .NET applications the <codeph>async</codeph> and <codeph>await</codeph> keywords are used to perform
          asynchronous programming. The <codeph>async</codeph> keyword is part of the signature of the
          method, lambda expression or anonymous that will be executing the non-blocking,
          asynchronous code. A method signature with the the async keyword is called an
          "async method".<codeblock><![CDATA[public async Task<IDocumentResult<T>> GetDocumentAsync<T>(string id){
    //code goes here
}]]></codeblock></p>
        <p>Above is the signature of the <apiname>GetDocumentAsync</apiname> method of the <apiname>CouchbaseBucket</apiname>
          class in the SDK. The <codeph>async</codeph> keyword will enable the <codeph>await</codeph> keyword to within the
          method body. If the <codeph>await</codeph> keyword is not found in the method body, a compiler
          warning will be generated; if the body of the method contains an await keyword
          and the signature does not contain the <codeph>async</codeph> keyword, a compiler error will be
          generated. A method body can contain multiple await keywords. The "Async" suffix
          is simply a convention to make it easier to tell that a method is an
          asynchronous method.</p>
        <p>When the <apiname>GetDocumentAsync</apiname> method is called, it will run synchronously until an
          <codeph>await</codeph> keyword is encountered. At that point the execution will be suspended
          until the Task or Task&lt;Result> that was awaited on, returns. At this point
          the control will return back to the caller of the method. If the  <apiname>Task</apiname> has
          already completed, execution will continue on synchronously (there is no point
          in offloading execution to the thread pool if the task has already
          completed).</p>
      </section>
      <section id="section_fq3_w2z_fw"><title>Task and Task&lt;Result></title><p>In TAP, the
        <apiname>Task</apiname> and <apiname>Task&lt;Result></apiname> are equivalent to "futures" which is a special type
        that will notify the caller when they have completed. A <apiname>Task</apiname> represents a void
        return type (a method whose return type is void) and a <apiname>Task&lt;Result></apiname>
        represents the return type of the generic result - in the <apiname>GetDocumentAsync</apiname>
        method above, its a class that implements <apiname>IDocumentResult</apiname>. Within your code you
        will await on the <apiname>Task</apiname> or <apiname>Task&lt;Result></apiname> returned by the asynchronous method
        you are
        calling:</p><codeblock>DocumentResult&lt;string> docResult = await GetDocumentAsync&lt;string>("somekey");</codeblock>Note
        that if the await keyword is omitted, then a <apiname>Task&lt;IDocumentResult&lt;string>></apiname>
        would be
        returned:<codeblock><![CDATA[Task<DocumentResult<string>> docTask = GetDocumentAsync<string>("somekey");]]></codeblock>In
        this case the <apiname>Task</apiname> has not been awaited and it may or may have not been executed
        (remember its a "future"). In order to execute it the docResult would have to be
        awaited:
        <codeblock><codeph>DocumentResult&lt;string> docResult = await docTask;</codeph></codeblock>In
        this case we have seperated out the call to <apiname>GetDocumentAsync(..)</apiname> and awaiting for
        the execution of the <apiname>Task&lt;DocumentResult></apiname> it returned to be completed. Note that
        by the time <codeph>docTask</codeph> has been awaited, the execution may actually have already been
        completed. In this case the await will simply return the result of the operation;
        the document stored under the id or key "somekey".</section>
      <section id="section_wcj_w2z_fw"><title>An In-depth Example</title><p>Continuing from
        the section above, we will make a call to retrieve a document with an Id of
        "somekey" and display the results. We will assume that the server is installed
        on localhost and that we have a "default" CouchbaseBucket set
        up.</p><p><codeblock>using System;
          using System.Collections.Generic;
          using System.Threading.Tasks;
          using Couchbase;
          using Couchbase.Configuration.Client;
          
          namespace ConsoleApplication8 {
          class Program {
          static void Main(string[] args) {
          var config = new ClientConfiguration{
          Servers = new List&lt;Uri>{
          new Uri("http://localhost:8091/")
          }
          };            
          ClusterHelper.Initialize(config);
          Console.WriteLine("Before calling PrintDocumentAsync on thread {0}.",
          Thread.CurrentThread.ManagedThreadId);
          Task.Run(async () => await PrintDocumentAsync("somekey"));
          Console.WriteLine("After calling PrintDocumentAsync on thread {0}.",
          Thread.CurrentThread.ManagedThreadId);
          Console.Read();
          ClusterHelper.Close();
          }
          
          public static async Task PrintDocumentAsync(string id) {
          Console.WriteLine("Before awaiting GetDocumentAsync on thread {0}.",
          Thread.CurrentThread.ManagedThreadId);
          var bucket = ClusterHelper.GetBucket("default");
          var doc = await bucket.GetDocumentAsync&lt;string>(id);
          Console.WriteLine("After awaiting GetDocumentAsync on thread {0}.",
          Thread.CurrentThread.ManagedThreadId);
          Console.WriteLine(doc.Content);
          }
          }
          }</codeblock>In
          this example we construct a simple .NET Console application that initializes a
          ClusterHelper and makes a single call to an async method we have defined called
          <apiname>PrintDocumentAsync(..)</apiname>. To demonstrate that we are doing asynchronous
          programming and that the <apiname>Task</apiname> is being executed on a thread other than the main
          thread, we put some stdio output that shows the order of execution and then
          thread the code is running on:<codeblock><![CDATA[Before calling PrintDocumentAsync on thread 8.
After calling PrintDocumentAsync on thread 8.
Before awaiting GetDocumentAsync on thread 10.
After awaiting GetDocumentAsync on thread 15.]]></codeblock></p>In the output above we see that the
        order of execution went from the main thread (8) to the main thread before jumping
        onto thread ten (10) and finally completing on thread fifteen (15)! This make sense
        because this is completely non-blocking code until we hit <apiname>Console.Read()</apiname>.</section>
      <section>
        <title>Calling TAP Methods Synchronously</title>
        <p>The SDK has an equivalent non-async API with the only difference being that the
          method signatures are slightly different. For example, the synchronous version
          of <apiname>GetDocumentAsync()</apiname> looks like this:<codeblock><![CDATA[public IDocumentResult<T> GetDocument<T>(string id){
    ...
}]]></codeblock></p>
      </section>
      <section id="section_gq3_w2z_fw">However, in some situations you may want to call the
        asynchronous methods synchronously. To do this you would not use the <codeph>async</codeph> and <codeph>await</codeph>
        keywords (since you are not awaiting anything); instead you would use <apiname>Task.Wait(..)</apiname> and Task.Result:<codeblock><![CDATA[using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Couchbase;
using Couchbase.Configuration.Client;

namespace ConsoleApplication1 {
    class Program {
        static void Main(string[] args) {
            var config = new ClientConfiguration
            {
                Servers = new List<Uri>{
                    new Uri("http://10.141.151.101:8091/")
                }
            };
            ClusterHelper.Initialize(config);
            Console.WriteLine("Before calling PrintDocumentAsync on thread {0}.",
                Thread.CurrentThread.ManagedThreadId);
            PrintDocumentAsync("somekey").Wait();
            Console.WriteLine("After calling PrintDocumentAsync on thread {0}.",
                Thread.CurrentThread.ManagedThreadId);
            Console.Read();
            ClusterHelper.Close();
        }
        
        public static async Task PrintDocumentAsync(string id) {
            Console.WriteLine("Before awaiting GetDocumentAsync on thread {0}.",
                Thread.CurrentThread.ManagedThreadId);
            var bucket = ClusterHelper.GetBucket("default");
            var doc = bucket.GetDocumentAsync<string>(id).Result;
            Console.WriteLine("After awaiting GetDocumentAsync on thread {0}.",
                Thread.CurrentThread.ManagedThreadId);
            Console.WriteLine(doc.Content);
        }
    }
}
]]></codeblock>Note that by calling these asynchronous methods synchronously, you are adding
        additional overhead which is why in most cases you'll want to just use the
        synchronous API instead.<title>Batch Execution of Tasks</title><p>A common use-case
          is to execute a series of operations in parallel in a batch-like fashion. To do
          this you'll create a list of Task operations and then await on <apiname>Task.WhenAll(..)</apiname>
          to execute them:<codeblock><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Couchbase;
using Couchbase.Configuration.Client;

namespace ConsoleApplication8 {
    class Program {
        static void Main(string[] args) {
            var config = new ClientConfiguration{
                Servers = new List<Uri>{
                    new Uri("http://10.141.151.101:8091/")
                }
            };
            ClusterHelper.Initialize(config);
            Task.Run(async () => {
                var ids = new List<string> { "doc1", "doc2", "doc4" };
                await PrintAllDocumentsAsync(ids);
            });
            Console.Read();
            ClusterHelper.Close();
        }
        
        public static async Task PrintAllDocumentsAsync(List<string> ids) {
            var bucket = ClusterHelper.GetBucket("default");
            
            var tasks = new List<Task>IDocumentResult<string>>>();
            ids.ForEach(x => tasks.Add(bucket.GetDocumentAsync<string>(x)));
            
            var results = await Task.WhenAll(tasks);
            results.ToList().ForEach(doc => Console.WriteLine(doc.Status));
        }
    }
}]]></codeblock></p><p>The <apiname>Task.WhenAll(..)</apiname> method execute the entire list of in parallel in a
          non-blocking, asynchronous fashion. Note that there is a similarly named method
          for executing the list in a blocking manner: <apiname>Task.WaitAll(..)</apiname>. Depending upon
          your use-case you should understand the subtle differences between these two
          methods and use the one that fits your scenario - in most cases this will be
          <apiname>Task.WhenAll(..)</apiname>.</p></section>
      <section id="section_cfg_hfz_fw">
        <title>Handling Synchronization Contexts</title>
        <p>Every CLR hosting enviroment (ASP.NET, WinForms, etc) has its own specific
          SynchronizationContext for handling multi-threaded programs. Its important to
          note that in some cases (especially ASP.NET) using the default
          SynchronizationContext may cause deadlocks. The simplest way to handle these
          deadlocks is by using <apiname>Task.ConfigureAwait(false)</apiname>. You can read more about this
          <xref
            href="http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html"
            format="html" scope="external">here</xref>.</p>
      </section>
    </body>
  </topic>
</topic>
