<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_qqs_tnx_pr">
	<title>Travel App Walk-through</title>
	<shortdesc>The travel app is a single-page web application built using a decoupled AngularJS
		front-end that communicates with the application by using REST endpoints.</shortdesc>
	<conbody>

	
		<section>
			<title>Architecture</title>

			<p>The application serves an HTML file named <filepath>index.html</filepath> from the public path
				in the Node.js application. This file contains references to various included script
				files for front-side JavaScript components such as Bootstrap, jQuery, and AngularJS.
				The Angular controller script named <codeph>app.js</codeph>, which you can find
				in the <filepath>/public/js/</filepath> directory, controls how the application
				interacts with the Node.js REST API in the server application.</p>

			<fig>
				<title>The Application Services</title>
				<image href="images/architecture-overview.png" width="650px" />
			</fig>
		</section>
		<section>
			<title>REST API</title>
			<p>The application uses these methods to populate data in the application:</p>
			<ul>
				<li><apiname>$scope.findFlights</apiname>, which is a REST API call to the
						<filepath>/api/flightPath/findAll</filepath> endpoint</li>
				<li><apiname>$scope.findAirports</apiname>, which is a REST API call to the
						<filepath>/api/airport/findAll</filepath> endpoint</li>
			</ul>
			<fig>
				<title>Front End Framework REST calls</title>
				<image href="images/angular-rest.png" width="350px" />
			</fig>
			<fig>
				<title>REST API for finding airports</title>
				<image href="images/architecture-airport.png" width="650px" />
			</fig>
			<p>The application attempts to find an airport based on the codes used for the
					<codeph>name</codeph> (case sensitive), and codes for Federal Aviation
				Administration (FAA) or International Civil Aviation Organization (ICAO). The travel
				app uses the data model and binds the input field for the <codeph>from</codeph>
				airport to an Angular typeahead directive, which is defined in the
					<filepath>index.html</filepath> file as follows:</p>
			<codeblock outputclass="language-markup" spectitle="Angular typeahead directive from /public/index.html file"><![CDATA[<input type="text" 
    placeholder="find airport"
    typeahead="data.airportname for data in findAirports($viewValue)"
    typeahead-min-length="3"
    typeahead-wait-ms="250"
    ng-model="fromName"
    ng-minlength="3"
    class="input-small form-control"
    name="from" required/>]]></codeblock>
			<p>In the Angular controller script, the <apiname>findAirports()</apiname> function is:</p>
			<codeblock outputclass="language-javascript" spectitle="findAirports() function from /public/js/scripts.js file">$scope.findAirports=function(val){
    return $http.get("/api/airport/findAll",{
        params:{search:val}
    }).then(function(response){
        return response.data;
    });
}</codeblock>
			<p>The API call to the server application <filepath>/api/airport/findAll</filepath>
				function is defined in the <filepath>/routes/routes.js</filepath> file as:</p>
			<codeblock outputclass="language-javascript" spectitle="/api/airport/findAll function from /routes/routes.js file">//// ▶▶ airports ◀◀ ////
app.get('/api/airport/findAll',function(req,res) {
  if (req.query.search) {
      airport.findAll(req.query.search, function (err, done) {
          if (err) {
              res.status = 400;
              res.send(err);
              return;
          }
          res.status = 202;
          res.send(done);
      });
  }else{
      res.status = 400;
      res.send({"airport":"bad request"});
      return;
  }
});</codeblock>
			<p>The <filepath>/api/airport/findAll</filepath> route function in the
					<filepath>route.js</filepath> file points to the corresponding
					<apiname>findAll</apiname> function in the airport module in the<filepath>
					/model/airport.js</filepath> file. This method allows the user to search by FAA code,
				ICAO code or airport name. It then prepares a N1QL query based on the selection criteria
				and bucket information from the <filepath>/config.json</filepath> file. The query is
				passed to the Couchbase query service in the <filepath>/model/db.js</filepath> module
				that calls Couchbase.</p>
			<codeblock outputclass="language-javascript" spectitle="findAll() function from /model/airport.js file"><![CDATA[module.exports.findAll = function (queryStr, done) {
    var queryPrep;
    if (queryStr.length == 3) {
        queryPrep = "SELECT airportname FROM `" + config.couchbase.bucket + "` WHERE faa ='" + queryStr.toUpperCase() + "'";
    } else if (queryStr.length == 4 && (queryStr==queryStr.toUpperCase()||queryStr==queryStr.toLowerCase())) {
        queryPrep = "SELECT airportname FROM `" + config.couchbase.bucket + "` WHERE icao ='" + queryStr.toUpperCase() + "'";
    } else {
        queryPrep = "SELECT airportname FROM `" + config.couchbase.bucket + "` WHERE airportname LIKE '" + queryStr + "%'";
    }

    db.query(queryPrep, function (err, res) {
        if (err) {
            done(err, null);
            return;
        }
        if (res) {
            done(null, res);
            return;
        }
    });
}]]></codeblock>
			<p>Using the data model, if you enter <userinput>SEA</userinput>, <userinput>KSEA</userinput>, or
					<userinput>Seattle</userinput>, the typeahead directive gives you the option to
				select <uicontrol>Seattle Tacoma Intl.</uicontrol> To see the results of the query,
				watch the terminal window in which the Node application is running. The example is
				showing an output for the N1QL statements:</p>
			<codeblock>QUERY: SELECT airportname FROM `travel-sample` WHERE faa ='SEA'
QUERY: SELECT airportname FROM `travel-sample` WHERE icao ='KSEA'
QUERY: SELECT airportname FROM `travel-sample` WHERE airportname LIKE 'Seattle%'</codeblock>
			<p>You can enable or disable console logging for N1QL statements by changing the value of
				the <codeph>showQuery</codeph> property in the <filepath>/config.json</filepath> file to
					<codeph>true</codeph> or <codeph>false</codeph>.</p>
			<fig>
				<title>REST API for finding flight paths</title>
				<image href="images/architecture-flight-path.png" width="650px" />
			</fig>
			<p>After the airports are selected and a leave date is entered, the application tries to find
				route and schedule information for an airline that services the requested flight
				path. The call to the REST API <filepath>/api/flightPath/findAll</filepath> on the
				server is initiated when the user clicks the <uicontrol>Find Flights</uicontrol>
				button. The button is defined within the <codeph>travelForm</codeph> form element in
				the <filepath>index.html</filepath> file, as shown in the following code
				snippets:</p>
			<codeblock outputclass="language-markup" spectitle="travelForm form element from /public/index.html file"><![CDATA[<form class="form-horizontal" role="form" 
       name="travelForm" ng-submit="findFlights()" novalidate>]]></codeblock>
			<codeblock outputclass="language-markup" spectitle="Find Flights button element from /public/index.html file"><![CDATA[<button class="btn btn-primary pull-right btn-sm" 
         type="submit" ng-disabled="travelForm.$invalid">Find Flights</button>]]></codeblock>
			<p>The <codeph>travelForm</codeph> form element contains various Angular validation options
				that are used with the input directives. For more information about validation and the
				input directive see <xref href="https://docs.angularjs.org/api/ng/directive/input"
					format="html" scope="external"
					>https://docs.angularjs.org/api/ng/directive/input</xref>. After validating the input
				options, the Angular function in the <filepath>app.js</filepath> file is called to
				find flights.</p>
			<codeblock outputclass="language-javascript" spectitle="findFlights() function from /public/js/scripts.js file"><![CDATA[$scope.findFlights = function () {
    $scope.empty = true;
    $scope.rowCollectionLeave = [];
    $scope.rowCollectionRet = [];
    $http.get("/api/flightPath/findAll", {
        params: {from: this.fromName, to: this.toName, leave: this.leave}
    }).then(function (response) {
        if (response.data.length > 0) {
            $scope.empty = false;
        }
        for (var j = 0; j < response.data.length; j++) {
            $scope.rowCollectionLeave.push(response.data[j]);
        }
    });
    if (this.ret) {
        $http.get("/api/flightPath/findAll", {
            params: {from: this.toName, to: this.fromName, leave: this.ret}
        }).then(function (responseRet) {
            if (responseRet.data.length > 0) {
                $scope.retEmpty = false;
            }
            for (var j = 0; j < responseRet.data.length; j++) {
                $scope.rowCollectionRet.push(responseRet.data[j]);
            }
        });
    }
}]]></codeblock>
			<p>The <codeph>findFlights()</codeph> function checks the form input to determine whether the
				return option is enabled or disabled. It then calls the server REST API
					<filepath>/api/flightPath/findAll</filepath> function either once for a one way
				flight or twice for a round-trip flight. When it requests the return flight for a
				round trip, it uses the reverse <codeph>to</codeph> and <codeph>from</codeph>
				sequence. </p>
			<codeblock outputclass="language-javascript" spectitle="/api/flightPath/findAll function from /routes/routes.js file"><![CDATA[
//// ▶▶ flightPath ◀◀ ////
app.get('/api/flightPath/findAll',function(req,res){
    if(req.query.from && req.query.to && req.query.leave){
        flightPath.findAll(req.query.from, req.query.to,req.query.leave, function (err, done) {
            if (err) {
                res.status = 400;
                res.send(err);
                return;
            }
            res.status = 202;
            res.send(done);
        });
    }else{
        res.status = 400;
        res.send({"flightPath":"bad request"});
        return;
    }
});
]]></codeblock>
			<p>The <codeph>/api/flightPath/findAll</codeph> route function in the
					<filepath>route.js</filepath> file points to the corresponding
					<apiname>findAll</apiname> function in the <codeph>flightPath</codeph> module, found
				in the <filepath>/model/flghtPath.js</filepath> file. The <apiname>findAll</apiname>
				function performs several important steps for processing the request to find
				flights:</p>
			<ul>
				<li>It determines the FAA identifier for the <codeph>to</codeph> and <codeph>from</codeph>
					airports.</li>
				<li>It searches for routes and schedule information based on the source and destination airports
					and the requested dates. The collection of schedule documents is nested in the route
					document for each route. They are grouped by day of the week (1-7), and the requested
					dates are compared to the day of the week to see what flights are available on those
					particular dates. It returns a list of flights that includes data for the following
					fields: airline, flight, departure, from, to, and aircraft. </li>
			</ul>
			<p> This method in the <filepath>flightPath.js</filepath> module is: </p>
			<codeblock outputclass="language-javascript" spectitle="findAll function from the /model/flightPath.js file"><![CDATA[
module.exports.findAll = function (from, to, leave,done) {
    var queryPrep = "SELECT faa as fromAirport FROM `" + config.couchbase.bucket + "` WHERE airportname = '" + from +
        "' UNION SELECT faa as toAirport FROM `" + config.couchbase.bucket + "` WHERE airportname = '" + to + "'";
    db.query(queryPrep, function (err, res) {
        if (err) {
            done(err, null);
            return;
        }
        if (res) {
            var queryTo;
            var queryFrom;
            for(i=0;i<res.length;i++){
                if(res[i].toAirport){
                    queryTo=res[i].toAirport;
                }
                if(res[i].fromAirport){
                    queryFrom=res[i].fromAirport;
                }
            }
            queryPrep="SELECT a.name, s.flight, s.utc, r.sourceairport, r.destinationairport, r.equipment FROM `" + config.couchbase.bucket + "` r UNNEST r.schedule s JOIN `" + config.couchbase.bucket + "` a ON KEYS r.airlineid WHERE r.sourceairport='" + queryFrom + "' AND r.destinationairport='" + queryTo + "' AND s.day=" + convDate(leave) + " ORDER BY a.name";
            db.query(queryPrep,function (err, flightPaths) {
                         if (err) {
                             done(err, null);
                             return;
                         }
                         if (flightPaths) {
                             done(null, flightPaths);
                             return;
                         }
                     }
            );
        }
    });
}
]]></codeblock>
			<p> The Query can be seen in the terminal window that is running the node.js application: </p>
			<codeblock>QUERY: 
SELECT a.name, s.flight, s.utc, r.sourceairport, r.destinationairport, r.equipment 
FROM `travel-sample` r 
UNNEST r.schedule s 
JOIN `travel-sample` a 
ON KEYS r.airlineid 
WHERE r.sourceairport='SEA' AND r.destinationairport='MCO' AND s.day=6 
ORDER BY a.name</codeblock>
		</section>

		<section>
			<title>N1QL Query Anatomy</title>
			<p>The Couchbase Query API is a powerful tool for efficient retrieval of information from a
				document data store. In the travel application, queries about flights are created by the
					<filepath>flightPath.js</filepath> module. Here's an example of a query that finds
				flights between Seattle-Tacoma International Airport (SEA) and Orlando International
				Airport (MCO), followed by a description of what's happening in the query:</p>

			<codeblock outputclass="language-sql">SELECT a.name, s.flight, s.utc, r.sourceairport, r.destinationairport, r.equipment 
FROM `travel-sample` r 
UNNEST r.schedule s
JOIN `travel-sample` a ON KEYS r.airlineid 
WHERE r.sourceairport='SEA' AND r.destinationairport='MCO' AND s.day=6 
ORDER BY a.name</codeblock>

			<p>N1QL provides JOIN functionality, something previously not possible in a document
				database. For two documents to be joined in the result of a SELECT statement, one of
				them must contain a field whose value is equal to the Couchbase key of the other
				document. The following example shows two documents that demonstrate that requirement
				and a SELECT statement that joins them:</p>

			<codeblock>"keyA" is the Couchbase KV key for Doc A.
Doc A: { some fields }
 
Doc B: { some fields "joinField": "keyA" }

SELECT * FROM default b JOIN default a ON KEYS b.joinField</codeblock>

			<p>The data model for the travel application includes an <codeph>airlineid</codeph> field
				in each <codeph>route</codeph> document. That <codeph>airlineid</codeph> field is used
				as a foreign key identifier and corresponds to the key for an <codeph>airline</codeph>
				document. To select the airline name <codeph>a.name</codeph>, the query uses the
				following clause: <codeph>JOIN `travel-sample` a ON KEYS r.airlineid</codeph>.</p>

			<p>One of the most powerful features available in the Couchbase Query API is the ability to
					<codeph>UNNEST</codeph> or flatten,the results returned in the
					<codeph>SELECT</codeph> statement. In the data model for the travel application,
				each route document contains a nested collection of schedule documents. To alleviate
				a complicated JSON parsing code pattern for the return results, you can
					<codeph>UNNEST</codeph> the schedule documents, so they become the root-level
				fields in the returned results.</p>





			<p>Standard SQL syntax is used in the <codeph>WHERE</codeph> clause for the
					<codeph>SELECT</codeph> statement. The result set is ordered by the
					<codeph>a.name</codeph> field, which contains the airline name.</p>



		</section>
	</conbody>
</concept>
