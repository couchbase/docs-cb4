<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="eventing_statistics">
  <title> Debugging and Diagnosability </title>
  <shortdesc> Debugging and diagnostics in the Eventing Service comprise of:</shortdesc>
  <body>
    <section id="section_y2y_bdz_m2b"><title><b>Debugging Functions </b></title>Couchbase Server,
      for its Eventing Service framework, includes an online real-time Javascript Debugger. Debug is
      a special flag on a Function. The Debug option integrates seamlessly with the Google Chrome
      Debugger engine for running the Javascript code.</section>
    <section id="section_ajb_2dz_m2b">
      <title>Debugging Workflow</title>
      <p>
        <ul id="ul_isj_ddz_m2b">
          <li>During a debug session, a single mutation received by the Function is considered and
            sent to the Debugger. This technique ensures that processing of the other data mutations
            in the cluster does not get blocked.</li>
          <li>The Worker in the Debugger pauses to trap the next event-instance, opens an ephemeral
            TCP port, and generates a Chrome dev-tools URL, with a session cookie that controls the
            debug worker.</li>
          <li>All other events are unaffected except the trapped event-instance.</li>
          <li>Using the Debug option, you can place breakpoints in the code and run the Function
            execution, one line at a time. The step-step execution helps while troubleshooting the
            deployed Function. </li>
          <li>If the debugged event-instance completes execution, no further event-instance gets
            trapped for debugging.</li>
          <li>Debugging is a convenience-feature intended to help during Function development: it is
            not designed for production environments. Moreover, the Couchbase Server 5.5 integration
            of the v8 Debugger is a Developer Preview feature only: it does not provide correctness
            or functionality guarantees. </li>
          <li>In a production environment, debug sessions introduce timing issues. If a debug
            session gets terminated during execution, then a few mutations may not get
            captured.</li>
        </ul>
      </p>
    </section>
    <section id="section_n4t_3dz_m2b"><title>Debugging a Function</title>To use the Debug option:<p>
        <ol>
          <li>From the <b>Couchbase Web Console</b> > <b>Eventing </b>page, click on the name of a
            deployed Function. The deployed Function expands to provide additional options. Click
              <b>Edit JavaScript</b>.&lt;image><p/><p><image href="images/debug_1.png" scale="70"
                id="image_hbm_xfn_n2b"/></p><p/></li>
          <li>From the <b>Edit Function</b> page, click <b>Debug</b>. A debug session gets
            activated. As a result, the next event-instance gets trapped and is forwarded to the
            Debugger.<p/>In the below screen, you can notice the message: "Waiting for mutation."
                <p/><p><image href="images/debug_2.png" scale="80" id="image_f2l_ggn_n2b"
            /></p><p/></li>
          <li>Upon a data mutation, the debug URL in the Debugging pop-up gets
                populated.<p/><p><image href="images/debug_3.png" scale="70" id="image_ics_lgn_n2b"
              /></p><p/></li>
          <li>Copy the URL from the Debugging pop-up and paste it into your Google Chrome browser.
                <p/><p><image href="images/debug_4.png" scale="70" id="image_lh1_vgn_n2b"
            /></p><p/></li>
          <li>From your Google Chrome browser, you can add breakpoints and run step-step diagnosis
            to debug and troubleshoot the deployed Function.From the Debugging pop-up, click
                <b><i>Stop Debugging</i></b> to terminate a debug session.</li>
        </ol>
      </p></section>
    <section id="section_dgy_xdz_m2b">
      <title><b>Logging</b></title>
      <p dir="ltr">The Eventing Service creates two different types of logs:</p>
    </section>
    <section id="section_uwh_zdz_m2b">
      <title>System Logs</title>
      <p>For the Eventing Service, Couchbase Server creates a separate system log file, termed as
        eventing.log. The system log file captures all the Eventing Service related system errors
        depending on the level and severity of the reported problem. For every node, a single system
        log file gets created. </p>
      <p>The eventing.log contains redactable user data and the log is collected using the
        cbcollect_info tool. For log rotation, refer to {X-ref}. </p>
    </section>
    <section id="section_jyk_c2z_m2b"><title>Application Logs</title><p>Application logs allow you
        to identify and capture various Function related activities and errors. </p><p>All
        Function-related activities such as editing the handler code, debugging, or modifying feed
        boundaries conditions, get recorded in the Application logs. Couchbase Server creates an
        individual log file for every Function in the cluster. By default, the maximum size of an
        Application log file is 40MB, and the number of log files before rotation is 10. Unlike
        system logs, the Application logs are user configurable. You can access an Application log
        file using the command line interface. </p><p>
        <note>The cbcollect_info tool does not collect the Application log files. Couchbase Server
          creates different application log files depending on the level and severity of the
          reported problem, as configured during Function definition.</note>
      </p><p>
        <table frame="all" rowsep="1" colsep="1" id="table_gwz_g2z_m2b">
          <title>Application Logs Path in Platform</title>
          <tgroup cols="2">
            <colspec colname="c1" colnum="1" colwidth="1*"/>
            <colspec colname="c2" colnum="2" colwidth="1*"/>
            <thead>
              <row>
                <entry>Platform</entry>
                <entry>Location</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry/>
                <entry/>
              </row>
              <row>
                <entry dir="ltr">Linux</entry>
                <entry dir="ltr">/opt/couchbase/var/lib/couchbase/data/@eventing</entry>
              </row>
              <row>
                <entry dir="ltr">Windows</entry>
                <entry dir="ltr">C:\Program Files\Couchbase\Server\var\lib\couchbase\data\@eventing
                  (Assumes default installation location)</entry>
              </row>
              <row>
                <entry dir="ltr">Mac OS X</entry>
                <entry dir="ltr">/Users/&lt;user>/Library/Application
                  Support/Couchbase/var/lib/couchbase/data/@eventing </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </p><p dir="ltr">To configure an Application log, use the REST endpoint settings option.
        </p><p dir="ltr"><b>Sample URL</b>:
        192.168.1.5:8091/_p/event/api/v1/functions/&lt;Function_name>/settings </p><p dir="ltr"
          ><b>Sample Payload</b>: </p><table id="table_lkl_d2z_m2b">
        <tgroup cols="1">
          <colspec colnum="1" colname="col1"/>
          <tbody>
            <row>
              <entry>
                <p dir="ltr">{</p>
                <p dir="ltr">"settings":</p>
                <p dir="ltr">{</p>
                <p dir="ltr">"app_log_max_files": 10,</p>
                <p dir="ltr"> "app_log_max_size": 10485760</p>
                <p dir="ltr">}</p>
                <p dir="ltr">}</p>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table><p dir="ltr">The sample payload above illustrates that the system stores 10
        application log files and each file records about 10 MB of data. </p><p dir="ltr">At some
        point in time, old application log files that are no longer necessary need to be deleted to
        make way for new log records. When an Application log file reaches the set limit, a new log
        file gets created. All the recorded information from the active log file gets transferred to
        this newly created file.</p>For illustration, consider <b>enrich_ip_nums</b> as the name of
      the Function. A corresponding Application log file, <b>enrich_ip_nums.log</b>, gets created in
      the Couchbase cluster. Whenever the <b>enrich_ip_nums.log</b> reaches 10MB in size, assuming
      the maximum size of an Application log file is 10MB and the number of log files before
      rotation is 10, the system automatically generates the <b>enrich_ip_nums.log.1</b> file,
      during its first iteration. The file <b>enrich_ip_nums.log</b> transfers all the log
      information to this new log file. For this illustration, since the number of log files is 10,
      the system stores 10 such files, the currently active log file along with 9 truncated files,
      at any given instance.</section>
  </body>
</topic>
