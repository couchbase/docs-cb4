<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="eventing_statistics">
  <title>
    <b>Troubleshooting and Best Practices</b></title>
  <body>
    <section id="section_xlc_1fz_m2b">
      <title><b>What happens when more Workers are allocated for a Function?</b></title>
      <p dir="ltr">Couchbase Server for a specific Function limits the maximum number of workers to
        10. This upper limit is configured for system optimization purposes. In the Function
        definition, if the number of workers exceeds the set threshold, then the system
        automatically generates a warning message. However, the warning message does not prevent the
        Function deployment.</p>
      <p dir="ltr"><b>Warning Message</b>: "There are &lt;number_of_workers> eventing workers
        configured to run. System performance may be impacted."</p>
    </section>
    <section id="section_ylc_1fz_m2b">
      <title><b>Can the Couchbase Server 5.5 GA process cURL commands?</b></title>
      <p dir="ltr">Support for cURL commands in Functions is for demo purposes. Ensure not to use
        cURL commands in your production environment. </p>
      <p dir="ltr">The system generates a warning message. However, the warning message does not
        prevent the Function deployment.</p>
      <p dir="ltr"><b>Warning Message</b>: "Handler &lt;function_name> uses Developer Preview
        features. Do not use in production environments."</p>
      <p>
        <note type="important">cURL commands are a Developer Preview feature intended for
          development purposes only, do not use them in production; no Enterprise Support is
          provided for Developer Preview features.</note>
      </p>
    </section>
    <section id="section_zlc_1fz_m2b">
      <title><b>When should developers use the try-catch block in Function handlers?</b></title>
      <p dir="ltr">As a best practice, while programming the Function handler code, for basic error
        handling and debugging operations, it is recommended that application developers use the
        try-catch block.</p>
      <p dir="ltr">Before deployment, Couchbase Server verifies the Function handler code. Only
        valid Functions get deployed. Using the log option within a try-catch block, you can record
        errors. These error logs get stored in the application log file. By default, JavaScript
        runtime errors get stored in the system logs. Unlike system logs, troubleshooting and
        debugging operations are easy when you use the try-catch block and application log options. </p>
      <p dir="ltr">A sample try catch block is provided for
        reference:<codeblock>function OnUpdate(doc, meta)
{
  log('document', doc);
  try {
    var time_rand = random_gen();
    dst_bucket[meta.id + time_rand] = doc;
  }
  catch(e)
  {
    log(e);
  }
}</codeblock></p>
    </section>
    <section id="section_bmc_1fz_m2b">
      <title><b>What are bucket allocation considerations during a Function definition?</b></title>
      <p dir="ltr">Function handlers can trigger data mutations. To avoid a cyclic generation of
        data changes, ensure that you carefully consider the below aspects when you select the
        source and destination buckets:</p>
      <ul id="ul_cmc_1fz_m2b">
        <li dir="ltr">
          <p dir="ltr">Avoid infinite recursions. If you are using a series of handlers, then ensure
            that destination buckets to which event handlers perform a write operation, do not have
            other Function handlers configured to listen and track data mutations.</p>
        </li>
        <li dir="ltr">
          <p dir="ltr">Couchbase Server can flag simple infinite recursions. However, in a long
            chain of the source and destination buckets with a series of handlers, a complex
            infinite recursion condition may occur. As a developer, carefully consider these cases
            while allocating source and destination buckets.</p>
        </li>
        <li dir="ltr">
          <p dir="ltr">As a best practice, ensure that buckets to which Function handlers perform a
            write operation do not have other handlers configured for tracking data mutations. </p>
        </li>
      </ul>
    </section>
    <section id="section_dmc_1fz_m2b">
      <title><b>In the cluster, I notice a sharp increase in the Timeouts Statistics. What are my
          next steps? </b></title>
      <p dir="ltr">When the Timeout Statistics shows a sharp increase, it may be due to two possible
        scenarios: </p>
      <ul id="ul_emc_1fz_m2b">
        <li dir="ltr">
          <p dir="ltr">Increase in execution time: When the handler execution time increases, the
            Function execution latency gets affected, and this in turn, leads to Function backlog
            and failure conditions. </p>
        </li>
        <li dir="ltr">
          <p dir="ltr">Script timeout value: When the script timeout attribute value is not
            correctly configured, then you encounter timeout conditions frequently. </p>
        </li>
      </ul>
      <p dir="ltr">As a workaround, it is recommended to increase the script timeout value. Ensure
        that you configure the script timeout value after carefully evaluating the execution latency
        of the Function. </p>
      <p dir="ltr">As a best practice use a combination of try-catch block and the application log
        options. This way you can monitor, debug and troubleshoot errors during the Function
        execution. </p>
    </section>
  </body>
</topic>
