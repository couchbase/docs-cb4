<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_kp4_qth_t5">
  
  <title>Eventing Service: Fundamentals</title>
  <shortdesc> The Couchbase Eventing Service is a framework to operate on changes to data in real
    time. Events are changes to data in the Couchbase cluster.</shortdesc>
  
  <body>
    <p>The term 'mutation' generally refers to document changes happening in the Couchbase cluster.
      The Couchbase cluster considers create, update, expiry, or delete operations as a data
      mutation. Natively integrated with the Couchbase Data Platform, the Eventing Service does not
      require any third party solutions to manage data mutations. In an event-based architecture,
      all data changes are reactive and in real-time.</p>
    <p>For example, consider the number of mutations in the data cluster of an e-Commerce
      application when a customer places a new order. You can observe that: a new transaction record
      gets created, a new purchase-transaction gets appended to the User's account, sellers
      stock-inventory gets updated with a new purchase order. Each of these data mutations qualifies
      as an event in the cluster.  </p>
    <p>A few sample events are listed below: </p>
    <p>
      <ul id="ul_drd_dp4_m2b">
        <li>Capturing the sensor output from a patient </li>
        <li>Placing an order in an e-Commerce application </li>
        <li>A customerâ€™s order causing a drop in the inventory </li>
        <li>Change in the status of a project </li>
        <li>Removing a user from a transaction scoring application </li>
        <li>News article expires after a certain period of time</li>
      </ul>
    </p>
    <p>Using the Eventing Service, you can: </p>
    <p>
      <ul id="ul_q2x_fp4_m2b">
        <li>Set alerts in a document when a preconfigured threshold is breached </li>
        <li>Monitor specific parameters in a document </li>
        <li>Propagate changes to other systems </li>
        <li>Enrich a document in real time </li>
        <li>Cascade deletes to avoid orphaned documents</li>
      </ul>
    </p>
    <p><b>Why use the Eventing Service?</b></p> 
    <p>The Eventing Service helps you to streamline your business workflows. Using the Couchbase Eventing Service
      you can:</p><ul id="ul_zj2_lp4_m2b">
        <li>Manage a data-driven business logic across business-critical applications in a timely
          manner, thereby increasing your customer engagement. </li>
        <li>Handle inconsistencies in business logic while working with multiple client applications
          across domains. </li>
        <li>Design newer data products by leveraging lower technical barriers in the Eventing
          Service. </li>
        <li>Develop a reliable infrastructure that can execute your business logic in a rapidly
          changing data platform. </li>
        <li>Scale your throughput without making changes to your data configuration and
          infrastructure. </li>
        <li>Maximize your return on investment by minimising your TCO.</li>
      </ul>
      <p><b>Eventing Service versus Message Queue and Polling Implementations</b></p>
      <p>The following table compares the implementation of the Eventing Service with the message
      queue method that is used to solve the tracking of data mutations. </p>
    <table id="table_mwx_ytc_ndb">
      <tgroup cols="2" align="left">
        <colspec colname="c1" colnum="1" colwidth="1*"/>
        <colspec colname="c2" colnum="2" colwidth="1.62*"/>
        <thead>
          <row>
            <entry>Message Queue or Bus Implementation</entry>
            <entry>Eventing Service Implementation</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Needs an additional layer to propagate data changes.</entry>
            <entry>Inherent to Couchbase Server and does not need a new layer to propagate data
              changes.</entry>
          </row>
          <row>
            <entry>Encounters dual-write problems. Every write operation gets pushed twice; once to
              the message queue and the second time to the cluster.</entry>
            <entry>Eliminates the dual-write problem. Multiple application servers can perform
              simultaneous write operations.</entry>
          </row>
          <row>
            <entry>At any point, a write-failure condition can happen.</entry>
            <entry>Eliminates the write-failure condition; no transaction semantics.</entry>
          </row>
          <row>
            <entry>No easy debug option during troubleshooting.</entry>
            <entry>Integrated with native debugger support.</entry>
          </row>
          <row>
            <entry>Leads to inefficient data governance and data leakages.</entry>
            <entry>Provides a centralized control for aspects such as data auditing and data
              governance, thereby reduces data leakages. </entry>
          </row>
          <row>
            <entry>With the added license, infrastructure, and deployment expenses, the Total Cost
              of Ownership (TCO) increases many folds.</entry>
            <entry>No additional expenses, the TCO is reduced.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    
    <p>The following table compares the implementation of the Eventing Service with the polling
      method that is used to solve the tracking of data mutations. </p>
      <table id="table_rbt_f1l_n2b">
        <tgroup cols="2" align="left">
          <colspec colname="c1" colnum="1" colwidth="1*"/>
          <colspec colname="c2" colnum="2" colwidth="1.62*"/>
          <thead>
            <row>
              <entry>Polling Implementation</entry>
              <entry>Eventing Service Implementation</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>To record and propagate data changes, multiple applications are needed.</entry>
              <entry>Can record and propagate data changes to a database, message queue, an
                end-point, or to another bucket inside the Couchbase cluster.</entry>
            </row>
            <row>
              <entry>Batch systems are highly inefficient and are not reactive.</entry>
              <entry>Handles data mutations in real-time.</entry>
            </row>
            <row>
              <entry>Consumes a lot of CPU resources.</entry>
              <entry>Implements as a state-less compute operation and utilizes latest trends in
                compute (multi-core CPU).</entry>
            </row>
            <row>
              <entry>Leads to code duplications across multiple infrastructure applications.</entry>
              <entry>No code duplication.</entry>
            </row>
            <row>
              <entry>Difficult to scale. You need to scale for applications and also scale for
                transport layer requirements.</entry>
              <entry>Provides easy horizontal scaling options.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    
    <section id="eventing-functions"><title><b>Couchbase Functions</b></title><p dir="ltr">Couchbase
      Functions, also referred to as Functions, offers a computing paradigm that developers can
      use to handle data changes. In the Couchbase cluster, you can use the Functions to handle
      data-changes according to an Event-Condition-Action model. </p>For Application developers,
      the Functions offers a platform using which you can focus on building the business logic, than
      over configuration or infrastructure. Functions handle the event that is generated when a
      document is created, updated, or deleted. The serverless computing infrastructure gets closer
      to the datastore as the Couchbase Functions integrates with the Couchbase Data
      Platform.</section>
    
      <p><b>Features of Functions</b></p>
      <p>You can configure Functions to generate threshold-based alerts. If your business
        logic requires you to monitor specific parameters inside a document, then you can use
        Functions to trigger an alert upon a threshold breach.</p>
      <p>Apart from notifications and alerts, Functions provides an option to propagate
        data changes. You can propagate data changes and move documents to a different bucket inside
        your Couchbase cluster. Since Couchbase is a NoSQL document-oriented data platform,
        Functions provides an easy option to perform cascade deletes. </p>
    
      <p><b>Benefits of Functions</b></p>
    
      <ul>
        <li>Improves customer experience and engagement <ul id="ul_tg1_5w4_m2b">
          <li>Data enrichment: Before the introduction of the Eventing Service, data enrichment
            was accomplished through batch jobs. These batch jobs were not in real-time and often
            resulted in increasing the cost of infrastructure and management. Using the Eventing
            Service, the data enrichment capability was achievable in real-time. Functions involve
            moderate coding effort, time to market and restart capabilities can be achieved
            easily. </li>
          <li>Simple to use: Since Functions are developed within the Eventing Service framework,
            tracking data changes in your cluster is manageable. </li>
        </ul></li>
        <li>Faster innovation <ul id="ul_vh1_vw4_m2b">
          <li>With a focus on business logic, development cycles are reduced. The Eventing Service
            platform offers a developer-friendly environment which in turn aids the faster
            creation of Minimum-Viable-Products(MVPs). </li>
          <li>Using Functions, Application Developers can rapidly remodel their business workflows
            and thereby stay in-sync with any business change conditions. </li>
          <li>Functions offer a lower barrier to technology-adoption by emphasizing on business
            operations. </li>
        </ul></li>
        <li>Reducing infrastructure and operations-cost <ul id="ul_ohw_vw4_m2b">
          <li>Since the implementation of the Eventing Service is intrinsic to the Couchbase
            cluster, it offers a simple to deploy working model. </li>
          <li>The Eventing Service provides optimum utilization of resources and controls
            essential aspects such as data auditing, data governance, and node scaling.</li>
        </ul></li>
      </ul>
    <section id="eventing-use-cases">
      <title><b>Use Cases</b></title>
      <p>As an Organization, you can use the Eventing Service in a wide variety of use cases. Be it
        in domains such as retail, healthcare, telecommunications, media, or travel; you can
        leverage the Eventing Service to track data mutations. </p>
      <p>For an easy understanding, consider a sample use case in the banking and financial domain.
        Let us say the user performs a credit card transaction. Using the Event-Condition-Action
        model, you can design a custom workflow based on factors such as user's credit limit, usage
        currency, and risk propositions. </p>
      <p>As another sample use case, consider an organization operating in the Supply
        Chain Management domain. As a developer, using the Function's Event-Condition-Action model,
        you can design a custom workflow in your inventory for stock replenishment. Functions help
        you to construct a business workflow that automatically triggers new stock replacements and
        maintains a set stock threshold.</p>
      <p dir="ltr">The tabular column below lists popular scenarios where the Eventing Service
        across domains can be used.</p>
        <table>
          <title>Eventing Service - Use Cases</title>
          <tgroup cols="4" align="left">
            <colspec colname="c1" colnum="1" colwidth="1*"/>
            <colspec colname="c2" colnum="2" colwidth="1.62*"/>
            <colspec colname="newCol3" colnum="3" colwidth="1*"/>
            <colspec colname="newCol4" colnum="4" colwidth="1*"/>
            <thead>
              <row>
                <entry>Domain</entry>
                <entry>Eventing Trigger</entry>
                <entry>Condition Check</entry>
                <entry>Sample Workflow</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry dir="ltr">Banking &amp; Financial Services</entry>
                <entry dir="ltr">Card transaction</entry>
                <entry dir="ltr">Transaction threshold</entry>
                <entry dir="ltr">Generate risk alerts and quarantine user upon threshold
                  breach.</entry>
              </row>
              <row>
                <entry morerows="1">
                  <p dir="ltr">Inventory/</p>
                  <p dir="ltr">Warehousing</p>
                </entry>
                <entry dir="ltr">New sales voucher</entry>
                <entry dir="ltr">Stock availability</entry>
                <entry dir="ltr">Generate invoice for stock replenishment.</entry>
              </row>
              <row>
                <entry dir="ltr">New purchase order</entry>
                <entry dir="ltr">Saved wishlist/cart</entry>
                <entry dir="ltr">Notify price alerts for wishlist items.</entry>
              </row>
              <row>
                <entry morerows="1">
                  <p dir="ltr">Airline</p>
                </entry>
                <entry dir="ltr">New booking</entry>
                <entry dir="ltr">Booking history </entry>
                <entry dir="ltr">Enroll for frequent flyer program and notify special
                  promotions</entry>
              </row>
              <row>
                <entry dir="ltr">Enquiry</entry>
                <entry dir="ltr">User profile</entry>
                <entry dir="ltr">Notify price drop alerts </entry>
              </row>
              <row>
                <entry dir="ltr">Healthcare</entry>
                <entry dir="ltr">New report</entry>
                <entry dir="ltr">Check for vitals</entry>
                <entry dir="ltr">Schedule an appointment.</entry>
              </row>
              <row>
                <entry>
                  <p dir="ltr">Sports/</p>
                  <p dir="ltr">Gaming</p>
                </entry>
                <entry dir="ltr">New user creation</entry>
                <entry dir="ltr">User profile </entry>
                <entry dir="ltr">Generate notification about leaderboard and other
                  statistics.</entry>
              </row>
              <row>
                <entry dir="ltr">Media/ Entertainment</entry>
                <entry dir="ltr">Breaking news</entry>
                <entry dir="ltr">Query archives</entry>
                <entry dir="ltr">Enrich existing news with archival information.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
    </section>
    <section id="eventing-onboarding">
      <title>Eventing Service - Onboarding Information</title>
      <p>In your organization, if you are using the Couchbase data platform, then the Eventing
        Service is a good fit for managing data mutations. The Multi-Dimensional Scaling (MDS)
        service enables workload isolation and independent scalability in a Couchbase cluster. Using
        the MDS service, the Eventing Service is in line with your real-time data tracking
        requirements and integrates seamlessly with your existing Couchbase nodes such as the Query,
        GSI, and FTS nodes. Adding a new Eventing node is a simple and repeatable process. </p>
      <p>
        <fig id="fig_erj_ffw_m2b">
          <title>Eventing Service Onboarding Information</title>
          <p><image href="images/eventing-service-onboarding-information.jpg" width="570"
              id="image_fpg_qcl_n2b"/></p>
        </fig>
      </p>
      <p>Following are a few aspects during the onboarding process: <ul id="ul_eg3_fy4_m2b">
        <li>The Eventing Service is intrinsic to Couchbase Server; unlike Polling and Message
          Queue based external systems, it eliminates the need for an additional layer without
          involving multiple applications for tracking data mutations. All data mutations are
          handled in real-time, and the Eventing Service offers a centralized control for data
          governance. </li>
        <li>When you transition to leverage the Eventing Service, application developers can use
          Couchbase Functions to manage business workflow changes swiftly. Application developers
          can program, test, debug and troubleshoot on a single Eventing Service platform, instead
          of managing multiple application across different network layers. </li>
        <li>After onboarding, you can manage and optimize the system throughput efficiently. If
          your data resides in the Couchbase cluster, based on aspects such as data workload, data
          mutation rate, and Function execution latency, you can either use the scale out option
          by adding additional workers or use the elastic scaling option by adding another node. </li>
        <li>The Eventing Service provides an export and import option for code portability. Using
          this option, you can reuse the Function handler code to validate the execution logic in
          different environments with workload variations. </li>
        <li>The Eventing Service is highly performant during the recursive restartability
          operations. You can undeploy a Function, pause for few cycles and then start the
          Function handler-code. Deploying a Function after a time-lapse ensures that the Function
          execution is tested for restartability. </li>
        <li>Eventing leverages the latest trends in multi-core CPUs; therefore nodes selected for
          Eventing should optimally have a higher number of cores than those for indexing. </li>
      </ul></p>
    </section>
  </body>
  </topic>
