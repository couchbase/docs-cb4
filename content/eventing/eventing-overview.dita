<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_kp4_qth_t5">
  
  <title>
    Eventing: Fundamentals
  </title>
  
  <shortdesc>
    The Couchbase Eventing framework provides near real-time handling of changes to data. It consists of 
    event-oriented, programmable constructs: code can be executed both in response to document-mutations, 
    and as scheduled by timers.
  </shortdesc>
  
  <body>
    
    <section>
      
      <title>
        Eventing
      </title>
      
      <p>
        The Couchbase Eventing framework provides near real-time handling of changes to data. It consists of 
        event-oriented, programmable constructs: code can be executed both in response to document-mutations, 
        and as scheduled by timers.
      </p>
      
      <p>
        This page provides an overview of the framework, describing prominent use-cases and benefits. It also
        introduces the <i>Functions Service</i>, whereby changes to data are handled.
      </p>
    </section>
    
    <section>
      
      <title>
        Functions Service
      </title>
  
      <p>
        Within the Eventing framework, the Functions Service handles data-changes according to an 
        <i>Event-Condition-Action</i> model. This provides a highly performant, fault-tolerant 
        development platform that is highly supportive of business-logic, and so facilitates 
        the deployment of business-rules.
      </p>
  
      <p>
        Whenever a document is created, updated, or deleted on Couchbase Server, the Functions Service handles 
        the event that is duly generated. This <i>Function as a Service</i> approach eradicates the need for 
        multiple writes from the application tier; and makes polling from the middle tier unnecessary.  
        Architecturally, the possibility of layer consolidation is thereby increased. 
      </p>
  
      <p>
        The Functions Service is implemented in JavaScript. Note that some language-constructs have been constrained; 
        and others have been added, to enhance performance and semantics.
      </p>
      
    </section>
    
    <section>
      
      <title>
        Features Provided
      </title>
      
      <p>
        The Eventing framework and Functions Service provide the following features:
      </p>
      
      <ul>
        
        <li>
          Notification before expiry
          <p>
            
          </p>
        </li>
        <li>
          Threshold-based monitoring and alerting
          <p>
            
          </p>
        </li>
        <li>
          Propagation of changes to other systems
          <p>
            
          </p>
        </li>
        <li>
          Enrichment of content in near real-time
          <p>
            
          </p>
        </li>
        <li>
          Triggering of routines on given documents at specified intervals
          <p>
            
          </p>
        </li>
        <li>
          Deletion-cascade
          <p>
            
          </p>
        </li>
        
      </ul>
    </section>
    
    <section>
      
      <title>
        Use Cases
      </title>
      
      <p>
        A subset of important industry-specific use-cases is as follows:
      </p>
      
      <ul>
        <li>
          <i>Media and Entertainment</i>: News alerts, content expiration and archival, enrichment
          <p>
            
          </p>
          
        </li>
        
        <li>
          <i>Financial Technology</i>: Tickers, event propagation, risk modeling, trade summaries
          <p>
            
          </p>
          
        </li>
        
        <li>
        <i>Healthcare</i>: Monitoring vitals, A/B risk assessments
          <p>
            
          </p>
          
        </li>
        
        <li>
         <i>Telecommunications and Internet of Things</i>: Call monitoring and alerts, network performance, sensor monitoring
          
            <p>
              
            </p>
          
        </li>
        
        <li>
          <i>Travel and Hospitality</i>: Price alerts, special promotions
            <p>
              
            </p>
          
        </li>
        
        <li>
         <i>Law, Defense, and Security</i>: Transient event detection, real-time compliance
          <p>
            
          </p>
          
        </li>
        
        <li>
          <i>Retail, SCM, and Logistics</i>: Instant loyalty, wishlists, stock replenishments, price alerts
          <p>
            
          </p>
          
        </li>
        
        <li>
          <i>Sports and Gaming</i>: leaderboard, bet analysis, statistics products
          <p>
            
          </p>
          
        </li>
      
      </ul>
    </section>
    
    <section>
      
      <title>
        Benefits
      </title>
    
      <p>
        Benefits can be summarized as follows:
      </p>
      
      <ul>
        <li>

            Improving customer experience and engagement
            
            <ul>
              <li>
                Near real-time processing of customer interactions
                <p>
                </p>
              </li>
              
              <li>
                Easier data-enrichment capabilities, leading to a personalized customer experience
                <p>
                </p>
              </li>
              
              <li>
                Easier identification of <i>needles in the haystack</i>, with minimized overhead
                <p>
                </p>
              </li>
            </ul>
          
          
          <p>
            
          </p>
        </li>
        
        <li>

            Faster innovation and reduced time-to-market
            
            <ul>
              <li>
                Quicker development cycles, and improved developer experience, leading to earlier <i>Minimum-Viable-Products</i> (MVPs)
                <p>
                  
                </p>
              </li>
              
              <li>
                Lower barrier to technology-adoption by business operations
                <p>
                  
                </p>
              </li>
              
              <li>
                Faster response to business-change
                <p>
                  
                </p>
              </li>
              
            </ul>
          
          
        </li>
        
        <li>

            Reducing infrastructure and operations-cost
            
            <ul>
              <li>
                Simpler deployment-models, with an integrated approach to infrastructure
                <p>
                  
                </p>
              </li>
              
              <li>
                Avoidance of data-leaks, leading to better data-governance
                <p>
                  
                </p>
              </li>
              
              <li>
                Highly performant and fault-tolerant service at scale
                <p>
                  
                </p>
              </li>
              
            </ul>
            
          
          
        </li>
        
      </ul>
  
    </section>
    
    <section>
      
      <title>
        Terminology
      </title>
      
      <p>
        The following terms are frequently used in descriptions of Eventing.
      </p>
      
      <ul>
        <li>
          <p>
            <i>Binding</i>: A construct that allows the separating of environment-specific variables &#8212; such as bucket-names, 
            external endpoint URLs, and credentials &#8212; from handler source-code. It allows functions to be developed 
            without source changes being required to production workflows. 
          </p>
          
          <p>
            
          </p>
        </li>
        
        <li>
          <p>
            <i>Function</i>: A collection of handlers (each being either <codeph>OnUpdate</codeph> or <codeph>OnDelete</codeph>), 
            implementing a composite business-functionality. 
            Resources are managed at or above function level, and the state of all handlers is scoped by the containing 
            function.
          </p>
          
          <p>
            
          </p>
        </li>
        
        <li>
          <p>
            <i>Handler</i>: A stateless, short-running code-fragment that reacts to a specified event. One or more handlers 
            together constitute a function. A handler must execute from start to finish, prior to a specified timeout-duration. 
            <codeph>OnUpdate</codeph> or <codeph>OnDelete</codeph> are the only two handlers currently exposed.
          </p>
          
          <p>
            
          </p>
        </li>
        
        <li>
          <p>
            <i>Redeployment</i>: Functions do not have a native concept of redeployment in Couchbase Server 5.5. However, 
            deployment with the DCP provider option of starting with the last sequence-number processed by the prior deployment 
            of this function is sometimes referred to as redeployment.
          </p>

          <p>
            
          </p>
        </li>
        
        <li>
          <p>
          <i>Statelessness</i>: The persistent state of a function is captured by 
          entities listed below, while any state that appears on the execution stack is ephemeral.
          
          <ul>
            <li>
              The metadata bucket (which will eventually be a system collection)
              <p>
                
              </p>
            </li>
            
            <li>
              The document being observed and its Extended Attributes
              <p>
                
              </p>
            </li>
            
            <li>
              The storage-providers bound to the function
              <p>
                
              </p>
            </li>
            
          </ul>
          
          </p>

          <p>
            
          </p>
        </li>
        
      </ul>

    </section>
  </body>
</topic>
