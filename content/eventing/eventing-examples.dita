<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="eventing_examples">
  
  <title>
    Examples
  </title>
  
  <shortdesc> This page contains examples of how to use the Eventing Service, using the Couchbase
    Web Console. </shortdesc>
  
  <body>
    <section id="section_jm1_1sy_m2b"><title>Example 1</title><p dir="ltr"><b>Goal</b>: A document
        contains attributes whose form makes them difficult to search on. Therefore, on the
        document's creation or modification, a new attribute should be created to accompany each
        original attribute; this new attribute being instantiated with a value that directly
        corresponds to that of its associated, original attribute; but takes a different form,
        thereby becoming more supportive of search. Original attributes are subsequently retrievable
        based on successful searches performed on new attributes.</p><b><i>Implementation</i></b>:
      Create a JavaScript function that contains an <b>OnUpdate</b> handler. The handler listens for
      data-changes within a specified, source bucket. When any document within the bucket is created
      or mutated, the handler executes a user-defined routine. In this example, if the created or
      mutated document contains two specifically named fields containing IP addresses (these
      respectively corresponding to the beginning and end of an address-range), the handler-routine
      converts each IP address to an integer. A new document is created in a specified, target
      bucket: this new document is identical to the old, except that it has two additional fields,
      which contain integers that correspond to the IP addresses. The original document, in the
      source bucket, is not changed.</section>
    <section id="section_shs_csy_m2b">
      <title>Preparations</title>
      <p>This example requires the creation of three buckets: metadata, target and source buckets. </p>
      <p dir="ltr">Proceed as follows:</p>
      <ol id="ol_ers_gsy_m2b">
        <li>Create target and metadata buckets. To create a bucket, refer to Create a Bucket,
          {x-ref}. The target bucket contains documents that will be created by the Function. Don’t
          add any documents explicitly to this bucket.</li>
        <li>Follow Step 1. and create a source bucket. In the Source bucket screen:<p>
            <ol id="ol_cs2_zsy_m2b">
              <li>Click <b>Add Document</b>. </li>
              <li id="li_z4k_fty_m2b">In the <b>Add Document</b> window, specify the name
                    <b><i>SampleDocument</i></b> as the <b>New</b><b>Document ID</b></li>
              <li>Click <b>Save</b>.</li>
              <li>In the <b>Edit Document</b> dialog, paste the following within the edit panel.<p>
                  <table id="table_dcp_wsy_m2b">
                    <tgroup cols="1">
                      <colspec colnum="1" colname="col1"/>
                      <tbody>
                        <row>
                          <entry>
                            <p dir="ltr">{</p>
                            <p dir="ltr"> "country": "AD",</p>
                            <p dir="ltr"> "ip_end": "5.62.60.9",</p>
                            <p dir="ltr"> "ip_start": "5.62.60.1"</p>
                            <p dir="ltr">}</p>
                          </entry>
                        </row>
                      </tbody>
                    </tgroup>
                  </table>
                </p></li>
              <li>Click <b>Save</b>. This step concludes all required preparations.</li>
            </ol>
          </p></li>
      </ol>
    </section>
    <section id="section_qkq_gty_m2b">
      <title/>
      <p dir="ltr">Proceed as follows:</p>
      <ol id="ol_pzd_mty_m2b">
        <li>From the <b>Couchbase Web Console</b> > <b>Eventing </b>page, click <b>ADD FUNCTION</b>,
          to add a new Function.</li>
        <li>In the <b>ADD FUNCTION</b> dialog, for individual Function elements provide the below information:<p>
            <ul>
              <li>For the Source Bucket drop-down, select the <b><i>source </i></b><i>option
                </i>that was created for this purpose.</li>
              <li>For the Metadata Bucket drop-down, select the <b>metadata </b><i>option </i>that
                was created for this purpose.</li>
              <li>Enter <b>enrich_ip_nums</b> as the name of the Function you are creating in the
                  <b>Function</b><b>Name</b> text-box.</li>
              <li>Enter <b>Enrich a document, converts IP Strings to Integers that are stored in new
                  attributes,</b> in the <b>Description</b> text-box.</li>
              <li>For the <b>Settings</b> option, use the default values.</li>
              <li>For the Bindings option, specify <b>target</b> as the name of the bucket, and
                specify <b>tgt</b> as the associated value. </li>
            </ul>
          </p></li>
        <li>After providing all the required information in the <b>ADD FUNCTION </b>dialog, click
            <b>Next</b>:<b> Add Code</b>. The <b>enrich_ip_nums</b> dialog appears. The
            <b>enrich_ip_nums</b> dialog initially contains a placeholder code block. You will
          substitute your actual <b>enrich_ip_nums </b>code in this block.<p><image
              href="images/addfunctions.png" scale="50" id="image_cjr_ckl_n2b"/></p></li>
        <li>Copy the following Function, and paste it in the placeholder code block of the
            <b>enrich_ip_nums</b> dialog:<p><table id="table_jhs_3ty_m2b">
              <tgroup cols="1">
                <colspec colnum="1" colname="col1"/>
                <tbody>
                  <row>
                    <entry>
                      <p> function OnUpdate(doc, meta) {</p>
                      <p> log('document', doc);</p>
                      <p> doc["ip_num_start"] = get_numip_first_3_octets(doc["ip_start"]);</p>
                      <p> doc["ip_num_end"] = get_numip_first_3_octets(doc["ip_end"]);</p>
                      <p> tgt[meta.id]=doc; }</p>
                      <p>function get_numip_first_3_octets(ip)</p>
                      <p>{</p>
                      <p>var return_val = 0;</p>
                      <p> if (ip) {var parts = ip.split('.');</p>
                      <p> //IP Number = A x (256*256*256) + B x (256*256) + C x 256 + D </p>
                      <p> return_val = (parts[0]*(256*256*256)) + (parts[1]*(256*256)) +
                        (parts[2]*256) + parseInt(parts[3]);</p>
                      <p> return return_val; </p>
                      <p>}</p>
                      <p> }</p>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </table>After pasting, the screen appears as displayed below:</p><p><image
              href="images/enrich_ip_nums.png" scale="70" id="image_mkz_q3l_n2b"/></p>The
            <b>OnUpdate</b> routine specifies that when a change occurs to data within the bucket,
          the routine<b> get_numip_first_3_octets</b> is run on each document that contains
            <b>ip_start</b> and <b>ip_end</b>. A new document is created whose data and metadata are
          based on those of the document on which <b>get_numip_first_3_octets</b> is run; but with
          the addition of <b>ip_num_start</b> and <b>ip_num_end data-fields</b>, which contain the
          numeric values returned by <b>get_numip_first_3_octets</b>. The
            <b>get_numip_first_3_octets</b> routine splits the IP address, converts each fragment to
          a numeral, and adds the numerals together, to form a single value; which it returns.</li>
        <li>Click <b>Save</b>.</li>
        <li>To return to the Eventing screen, click <b>Eventing</b> and click on the newly created
          Function name. The Function <b>enrich_ip_nums </b>is listed as a defined Function.
              <p><image href="images/deploy_enrich_ip_nums.png" scale="70" id="image_hzy_nkl_n2b"
            /></p></li>
        <li>Click <b>Deploy</b>.</li>
        <li>From the <b>Confirm Deploy Function</b> dialog, click <b>Deploy Function</b>. <p/>From
          this point, the defined Function is executed on all existing documents and on subsequent
          mutations.</li>
        <li>To check results of the deployed Function, click the <b>Documents </b>tab.</li>
        <li>Select <b>target</b> bucket from the <b>Bucket</b> drop-down.<p/>As this shows, a
          version of <b>SampleDocument</b> has been added to the <b>target</b> bucket. It contains
          all the attributes of the original document, with the addition of <b>ip_num_start</b> and
            <b>ip_num_end</b>; which contain the numeric values that correspond to <b>ip_start</b>
          and <b>ip_end</b>, respectively.<p/>Additional documents added to the <b>source</b>
          bucket, which share the <b>ip_start</b> and <b>ip_end</b> attributes, will be similarly
          handled by the defined Function: creating such a document, and changing any attribute in
          such a document both cause the Function's execution.</li>
      </ol>
    </section>
    <section id="section_njv_p5y_m2b">
      <title><b>Example 2</b></title>
      <p dir="ltr"><b>Goal</b>: This example illustrates how to leverage Eventing Service in the
        Banking and Financial domain. When a credit card transaction exceeds the user’s available
        credit limit, to indicate a high-risk transaction, an alert can be generated.</p>
      <p dir="ltr">This example requires you to create four buckets: <b><i>flagged_transactions,
            users, metadata</i></b><i>and </i><b><i>transactions</i></b><i>buckets</i>. For steps on
        how to create buckets, see <xref
          href="https://developer.couchbase.com/documentation/server/5.1/clustersetup/create-bucket.html"
          format="html" scope="external"><u>Create Bucket</u></xref>.</p>
      <p dir="ltr"><b>Implementation</b>: Create a JavaScript Function that contains an
          <b>OnUpdate</b> handler. The handler listens to data-changes within a specified,
            <b><i>transactions</i></b> source bucket. When a document within the source bucket is
        created or mutated, the handler executes a user-defined routine. In this example, if the
        created or mutated document contains a high-risk transaction, a new document gets created in
        a specified, <b><i>flagged_transactions</i></b> bucket.</p>
      <p dir="ltr">Proceed as follows:</p>
      <ol id="ol_q43_lvy_m2b">
        <li>From the <b>Couchbase Web Console</b> > <b>Eventing </b>page, click <b>ADD
          FUNCTION</b>,to add a new Function. The <b>ADD FUNCTION</b> dialog appears.</li>
        <li>In the <b>ADD FUNCTION</b> dialog, for individual Function elements provide the below
          information: <p>
            <ul id="ul_ezg_y5y_m2b">
              <li>For the Source Bucket drop-down, select <b><i>transactions </i></b>that was
                created for this purpose.</li>
              <li>For the Metadata Bucket drop-down, select <b>metadata</b> that was created for
                this purpose.</li>
              <li>Enter <b><i>high_risks_transactions </i></b>as the name of the Function you are
                creating in the <b>Function</b><b>Name</b> text-box.</li>
              <li>Enter <b>Functions that computes risky transaction and flags them, </b>in the
                  <b>Description </b>text-box.</li>
              <li>For the <b>Settings</b> option, use the default values.</li>
              <li>For the <b>Bindings</b> option, add two bindings. For the first binding specify
                  <b>users</b> as the <b>name</b> of the bucket, and specify <b>user</b> as the
                associated <b>value</b>. For the second binding, specify
                    <b><i>flagged_transactions</i></b> as the <b>name</b> of the bucket, and specify
                    <b><i>high_risk</i></b> as the associated <b>value</b>.</li>
            </ul>
          </p></li>
        <li>After providing all the required information in the <b>ADD FUNCTION </b>dialog, click
            <b>Next</b>:<b> Add Code</b>. The <b><i>high_risks_transactions</i></b> dialog appears.
          <p/>The <b><i>high_risks_transactions</i></b> dialog initially contains a placeholder code
          block. You will substitute your actual <b><i>high_risks_transactions</i></b> code in this
              block.<p><image href="images/addfunctions.png" scale="50" id="image_wwn_xkl_n2b"
          /></p></li>
        <li>Copy the following Function, and paste it in the placeholder code block of the
              <b><i>high_risks_transactions</i></b> dialog:<table id="table_uc3_r5y_m2b">
            <tgroup cols="1">
              <colspec colnum="1" colname="col1"/>
              <tbody>
                <row>
                  <entry>
                    <p dir="ltr">function OnUpdate(doc, meta) {</p>
                    <p dir="ltr"> try </p>
                    <p dir="ltr"> { </p>
                    <p dir="ltr"> //log('txn id:', meta.id, '; user_id:', doc.user_id , ',
                      doc.amount:', doc.amount);</p>
                    <p dir="ltr"> var this_user = getUser(doc.user_id);</p>
                    <p dir="ltr"> if (this_user)</p>
                    <p dir="ltr"> {</p>
                    <p dir="ltr"> if(this_user['creditlimit'] &lt; doc.amount)</p>
                    <p dir="ltr"> {</p>
                    <p dir="ltr"> log('Txn['+String(meta.id)+']*****High Risk Transaction as Txn
                      Amount:'+ String(doc.amount)+' exceeds Credit
                      Limit:',this_user['creditlimit']);</p>
                    <p dir="ltr"> doc["comments"] = "High Risk Transaction as Txn Amount exceeds
                      Credit Limit " +String(this_user['creditlimit']);</p>
                    <p dir="ltr"> doc["reason_code"] = "X-CREDIT";</p>
                    <p dir="ltr"> high_risk[meta.id] = doc;</p>
                    <p dir="ltr"> return;</p>
                    <p dir="ltr"> }</p>
                    <p dir="ltr"> else</p>
                    <p dir="ltr"> {</p>
                    <p dir="ltr"> if(doc.txn_currency != this_user['currency'])</p>
                    <p dir="ltr"> {</p>
                    <p dir="ltr"> log('Txn['+ String(meta.id) +']*****High Risk Transaction -
                      Currency Mismatch:'+ this_user['currency']);</p>
                    <p dir="ltr"> doc["comments"] = "High Risk Transaction - Currency Mismatch:" +
                      this_user['currency'];</p>
                    <p dir="ltr"> doc["reason_code"] = "XE-MISMATCH";</p>
                    <p dir="ltr"> high_risk[meta.id] = doc;</p>
                    <p dir="ltr"> return;</p>
                    <p dir="ltr"> }</p>
                    <p dir="ltr"> }</p>
                    <p dir="ltr"> //log('Acceptable Transaction:',doc.amount, ' for Credit Limit:',
                      this_user['creditlimit']);</p>
                    <p dir="ltr"> }</p>
                    <p dir="ltr"> else</p>
                    <p dir="ltr"> {</p>
                    <p dir="ltr"> log('Txn['+ String(meta.id) + "] User Does not Exist:" +
                      String(doc.user_id) );</p>
                    <p dir="ltr"> }</p>
                    <p dir="ltr"> }</p>
                    <p dir="ltr"> catch (e) </p>
                    <p dir="ltr"> {</p>
                    <p dir="ltr"> log('Error OnUpdate :', String(meta.id), e);</p>
                    <p dir="ltr"> }</p>
                    <p dir="ltr">}</p>
                    <p dir="ltr">function OnDelete(meta) {</p>
                    <p dir="ltr"> log('Document OnDelete:', meta.id);</p>
                    <p dir="ltr">}</p>
                    <p dir="ltr">function getUser(userId)</p>
                    <p dir="ltr">{</p>
                    <p dir="ltr"> try</p>
                    <p dir="ltr"> {</p>
                    <p dir="ltr"> if(userId != null)</p>
                    <p dir="ltr"> {</p>
                    <p dir="ltr"> return user[userId];</p>
                    <p dir="ltr"> }</p>
                    <p dir="ltr"> }</p>
                    <p dir="ltr"> catch (e) </p>
                    <p dir="ltr"> {</p>
                    <p dir="ltr"> log('Error getUser :', userId,'; Exception:', e);</p>
                    <p dir="ltr"> }</p>
                    <p dir="ltr"> return null;</p>
                    <p dir="ltr">}</p>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </table><p dir="ltr">After pasting, the screen appears as displayed below: </p><p
            dir="ltr"><image href="images/high_risks_transactions_handler_code.png" scale="80"
              id="image_osk_3ll_n2b"/></p><p dir="ltr">The OnUpdate handler is triggered for every
            transaction. The handler checks if the transaction amount is less than the user’s
            available credit limit. When this condition is breached, then this transaction is
            flagged as a high-risk transaction. The Function <b><i>high_risks_transactions</i></b>
            then moves this transaction to a different bucket, <b><i>flagged_transactions
            </i></b>bucket. When the transaction is moved to a new bucket, the handler enriches the
            document with predefined <b><i>comments</i></b> and also provides a <b><i>reason
                code</i></b><b>. </b> In the last part, the handler performs a currency validation
            step. If the transaction currency is other than the preconfigured home currency of the
            user, then the handler flags the transactions and moves it to a different
          bucket.</p></li>
        <li>Click <b>Save</b>. </li>
        <li>To return to the Eventing screen, click <b>Eventing</b>. <p dir="ltr"><image
              href="images/high_risks_transactions_handler_deploy.png" scale="80"
              id="image_ytl_4ll_n2b"/></p><p dir="ltr">The Function
                <b><i>high_risks_transactions</i></b>is listed as a defined Function. Currently, it
            is listed as <b>Undeployed</b> and <b>Paused</b>.</p></li>
        <li>Click <b>Deploy</b>. </li>
        <li>From the <b>Confirm Deploy Function</b> dialog, click <b>Deploy Function</b>. This
          deploys the Function and displays the main <b>Eventing</b> screen. From this point, the
          defined Function is executed on all existing documents and on subsequent mutations.</li>
        <li>To check results of the deployed Function, after a sufficient time elapse, from the
            <b>Couchbase Web Console</b> > <b>Eventing </b>page, click <b>Buckets</b>.</li>
        <li>Click <b><i>flagged_transactions</i></b>bucket. All documents available in this bucket
          are transactions that are flagged as high-risk transactions.<p dir="ltr"><image
              href="images/buckets.png" scale="50" id="image_lcn_yll_n2b"/></p><p dir="ltr">This
            indicates that transactions which were flagged as high risk gets moved to the
                <b><i>flagged_transactions </i></b>bucket.</p></li>
        <li>From the <b>Couchbase Web Console</b> > <b>Query </b>page, execute the below N1QL
            query:<p dir="ltr"><b><i>N1QL Query: </i></b><i>select reason_code, count(1) num_txns,
              sum(amount) amount from `flagged_transactions` group by reason_code;</i></p><p><image
              href="images/N1QL%20Query.png" scale="70" id="image_bgv_2ml_n2b"/></p><p/></li>
      </ol>
    </section>
    <section id="section_jsw_jwy_m2b">
      <title><b><b>Example 3</b></b></title>
      <p dir="ltr"><b>Goal</b>: This example illustrates how to leverage the Eventing Service to
        perform a cascade delete operation. When a user is deleted, Couchbase Functions provide a
        reliable method to delete all the associated documents with the deleted user.</p>
      <p dir="ltr">This example requires you to create three buckets: users, metadata and
        transactions buckets. </p>
      <p dir="ltr">For steps to create buckets, see <xref
          href="https://developer.couchbase.com/documentation/server/5.1/clustersetup/create-bucket.html"
          format="html" scope="external"><u>Create Bucket</u></xref>.</p>
      <p dir="ltr"><b>Implementation</b>: Create a JavaScript Function that contains an
          <b>OnDelete</b> handler. The handler listens to data-changes within a specified,
            <b><i>users</i></b> source bucket. When a user within the source bucket gets deleted,
        the handler executes a routine to remove the deleted user. When the delete operation is
        complete, all associated documents of the delete users get removed. </p>
      <p dir="ltr">Proceed as follows:</p>
    </section>
    <section id="section_eqw_jwy_m2b">
      <ol id="ol_fqw_jwy_m2b">
        <li> From the <b>Couchbase Web Console</b> > <b>Eventing </b>page, click <b>ADD
          FUNCTION</b>,to add a new Function. <p><image href="images/functions_add.png" scale="50"
              id="image_nrl_5pl_n2b"/></p><p/></li>
        <li>In the <b>ADD FUNCTION</b> dialog, for individual Function elements, provide the below
          information: <p>
            <ul>
              <li>For the <b>Source Bucket</b> drop-down, select the <b><i>Users </i></b>that was
                created for this purpose.</li>
              <li>For the <b>Metadata Bucket</b> drop-down, select the <b>metadata</b> that was
                created for this purpose.</li>
              <li>Enter <b><i>delete_orphaned_txns </i></b>as the name of the Function you are
                creating in the <b>Function</b><b>Name</b> text-box.</li>
              <li>Enter <b>Delete Orphaned Transactions from the `transactions’ bucket when user_id
                  is less than 10 </b>in the<b> Description</b> text-box.</li>
              <li>For the <b>Settings</b> option, use the default values.</li>
              <li>For the <b>Bindings</b> option, specify <b>users</b> as the <b>name</b> of the
                bucket and specify <b>src</b>_<b>user</b> as the associated <b>value</b>. </li>
            </ul>
          </p></li>
        <li>After providing all the required information in the <b>ADD FUNCTION </b>dialog, click
            <b>Next</b>:<b> Add Code</b>. The <b><i>delete_orphaned_txns</i></b> dialog appears.
          <p/>The <b><i>delete_orphaned_txns</i></b> dialog initially contains a placeholder code
          block. You will substitute your actual <b><i>delete_orphaned_txns</i></b> code in this
              block.<p><image href="images/addfunctions.png" scale="70" id="image_e5d_xpl_n2b"
          /></p><p/></li>
        <li>Copy the following Function, and paste it in the placeholder code block of the
              <b><i>delete_orphaned_txns</i></b> screen:<table id="table_xnf_nwy_m2b">
            <tgroup cols="1">
              <colspec colnum="1" colname="col1"/>
              <tbody>
                <row>
                  <entry>
                    <p dir="ltr">function OnUpdate(doc, meta) {</p>
                    <p dir="ltr"> log('OnUpdate document:', meta.id);</p>
                    <p dir="ltr">}</p>
                    <p dir="ltr">function OnDelete(meta) {</p>
                    <p dir="ltr"> log('Document Deleted:', meta.id);</p>
                    <p dir="ltr"> if(meta.id &lt; 10)</p>
                    <p dir="ltr"> { </p>
                    <p dir="ltr"> try</p>
                    <p dir="ltr"> {</p>
                    <p dir="ltr"> var this_user_id = meta.id;</p>
                    <p dir="ltr"> var del = delete from `transactions` where user_id =
                      TONUMBER($this_user_id);</p>
                    <p dir="ltr"> del.execQuery();</p>
                    <p dir="ltr"> log('Deleted Orphaned Transactions for User:', this_user_id);</p>
                    <p dir="ltr"> }</p>
                    <p dir="ltr"> catch(e)</p>
                    <p dir="ltr"> {</p>
                    <p dir="ltr"> log('Exception:', e)</p>
                    <p dir="ltr"> }</p>
                    <p dir="ltr"> }</p>
                    <p dir="ltr">}</p>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </table><p dir="ltr">After pasting, the screen appears as displayed below:</p><p dir="ltr"
              ><image href="images/ondelete-functions.png" scale="60" id="image_rnr_kql_n2b"
          /></p><p/>The <b>OnDelete</b> handler is triggered for user delete transaction. The
          handler checks if the <b><i>user_id</i></b> is less than 10. When this condition is
          fulfilled, then an N1QL query is triggered to delete all user related information. The
          handler is then configured to record this delete operation in a Function specific
          application log file. . </li>
        <li>To return to the Eventing screen, click <b>Eventing</b>. The Function
              <b><i>delete_orphaned_txns</i></b> is listed as a defined Function. Currently, it is
          listed as <b>Undeployed</b> and <b>Paused</b>.</li>
        <li>Click <b>Deploy</b>.</li>
        <li>From the <b>Confirm Deploy Function</b> dialog, click <b>Deploy Function</b>. From this
          point, the defined Function is executed on all existing documents and on subsequent
          mutations. </li>
        <li>Navigate to the <b>Couchbase Web Console</b> > <b>Query </b>page. Before deleting a
          user, a snapshot of <b>Query Result </b>from the <b>users </b>bucket is displayed:
              <p><image href="images/queryresults_ondelerte.png" scale="70" id="image_ikq_zql_n2b"
            /></p><p/></li>
        <li>The <b>Query Results </b>display users with <b><i>user_id</i></b>s from 1 to 10.</li>
        <li>Navigate to the <b>Couchbase Web Console</b> > <b>Buckets </b>page. Delete two users
          from the <b><i>Users</i></b> bucket: <p>
            <ul>
              <li>Select <b>User4</b> from the list and click the <b><i>delete</i></b> icon. </li>
              <li>Select <b>User10</b> from the list and click the <b><i>delete</i></b> icon. </li>
            </ul>
          </p></li>
        <li>From the <b>Query Editor</b>, execute an N1QL query to check that all related records
          for the deleted users are removed from the cluster. <p/><b>N1QL Query</b>: <i>select
            user_id, count(1) from `Users` group by user_id order by user_id asc;</i><p/><p><image
              href="images/query-results-ondelete.png" scale="70" id="image_n3z_hrl_n2b"/></p>
        </li>
        <li>In the <b>Query Results</b> pane notice that user_ids, <b><i>user_id4</i></b> and
              <b><i>user_id 10</i></b> are removed as part of the cascade user delete operation.
        </li>
      </ol>
    </section>

  </body>
</topic>
