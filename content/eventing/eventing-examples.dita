<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="eventing_examples">
  
  <title>
    Examples
  </title>
  
  <shortdesc>
    Examples of how to use the Eventing framework.
  </shortdesc>
  
  <body>
    
    <section>
      
      <title id="eventing_examples_preparations">
        Preparations
      </title>
      
      <p>
        This page contains examples of how to use the Eventing framework, by means of the Couchbase Web Console. 
        The examples require the creation of three buckets, which are as follows:
      </p>
      
      <ul>
        <li>
          <i>Metadata bucket</i>: Each function run as part of the Functions Service depends on a <i>metadata</i> bucket, defined on
          the cluster. This bucket is used for the storage of artifacts and checkpoint information. You must
          create or reference such a bucket explicitly, per function. 
          Ideally, this bucket should not be used for storing information from any other 
          application, though the same metadata bucket may be used for multiple functions.
          
          <p>
            The examples on this page refer to a single metadata bucket, named <codeph>metadata</codeph>. Therefore, to 
            create such a bucket, proceed as follows:
            
            <ol>
              
              <li>
                Access the <b>Buckets</b> screen, by left-clickin on the <b>Buckets</b> tab, in the left-hand navigation panel.
                
                <p>
                  
                </p>
              </li>
              
              <li>
                On the <b>Buckets</b> screen, left-click on the <b>Add Bucket</b> tab, at the upper right.
                
                <p>
                  
                </p>
              </li>
              
              <li>
                When the <b>Add Data Bucket</b> dialog appears, specify <codeph>metdata</codeph> as the bucket-name, and
                specify an appropriate <b>Memory Quota</b> for the bucket. All other default settings can be applied. Then,
                left-click on the <uicontrol>Add Bucket</uicontrol> button.
                
                <p>
                  
                </p>
              </li>
            </ol>
            
            The <codeph>metadata</codeph> bucket now appears on the <b>Buckets</b> screen. For more information on creating
            buckets, see
            <xref href="../clustersetup/create-bucket.dita" scope="local" format="dita">Create a Bucket</xref>.
          </p>
          
          <p>
            
          </p>
        </li>
        
        <li>
          <i>Source bucket</i>: This is a bucket that will contain source-data. You must create both the bucket and
          the source-data. (For a detailed explanation of the <b>Buckets</b> and <b>Documents</b> screens, see the
          page
          <xref href="../getting-started/look-at-the-results.dita" scope="local" format="dita">Look at the Results</xref>,
          within the Couchbase Server <i>Getting Started</i> sequence.)
          
          <p>
            Proceed as follows:
          </p>
          
          <p>
          
          <ol>
            <li>
              Using the Couchbase Web Console, create a bucket named <codeph>source</codeph>, using the procedure described immediately
              above, for the <codeph>metadata</codeph> bucket. 
              
              <p>
                
              </p>
            </li>
            
            <li>
              When the <codeph>source</codeph> bucket appears in the <b>Buckets</b> screen, left-click on the
              <uicontrol>Documents</uicontrol> tab, towards the right-hand side of its row. This brings up the
              <b>Documents</b> screen. 
              
              <p>
                
              </p>
            </li>
            
            <li>
              When the <b>Add Document</b> dialog appears, specify the name <codeph>sampleDocument</codeph> for the new
              document. Then, left-click on the <uicontrol>Save</uicontrol> button. This brings up the
              <b>Edit Document</b> dialog.
              
              <p>
                
              </p>
            </li>
            
            <li>
              Within the edit panel of the <b>Edit Document</b> dialog, paste the following document:
              
              <p>
              </p>
              
              <codeblock outputclass="language-javascript">{
  "country": "AD",
  "ip_end": "5.62.60.9",
  "ip_start": "5.62.60.1"
}</codeblock>
              
              Left-click on the <uicontrol>Save</uicontrol> button.
              
            </li>
          </ol>
            
          </p>
            
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          Using the Couchbase Web Console, create a bucket named <codeph>target</codeph>, using the procedure described
          above, for the <codeph>metadata</codeph> bucket. No document need be added.
        </li>
        
      </ul>
      
    </section>
    
    <section>
      
      <title>
        Example 1
      </title>
      
      <p>
        <i>Problem</i>: A document contains attributes (for example IP addresses) whose form is 
        considered insufficiently
        supportive of search. 
        Ideally, on the document's creation
        or modification, these attributes would be converted to values (for example, numerals) whose form is more 
        supportive of search; and these values stored separately.
      </p>         
      
      <p>
        <i>Solution</i>: Create a JavaScript function that contains an <codeph>OnUpdate</codeph> handler.
        The handler listens for data-changes within a specified, source bucket. When any document 
        is created or mutated, the handler checks whether, in consequence, certain conditions have been met: if the
        conditions
        have been met, an appropriate routine is executed. In this case, the created or mutated document must contain two
        specifically named fields, each of which has an IP address as its value: the values correspond to the
        beginning and ending of an address-range. The handler-routine converts each IP address to a numeral. A new document is created
        in a specified, target bucket: this new document is identical to the old, except that it contains two additional
        fields, which respectively contain the numerals that correspond to the beginning and ending IP addresses. The
        original document, in the source bucket, is not changed.
      </p>
      
      <p>
        Proceed as follows:
      </p>
      
      <ol>
        <li>
          Access the <b>Eventing</b> screen, by left-clicking on the <uicontrol>Eventing</uicontrol> tab, in the navigation
          panel at the left-hand side of the Couchbase Web Console:
          
          <p>
            <image href="./images/eventingTab.png" id="eventing_tab" align="left" width="100"/>
          </p>
          
          <p>
            The <b>Eventing</b> screen now appears. This shows all currently defined functions, and so is
            initially empty. To add a function, left-click on the <uicontrol>Add Function</uicontrol> button,
            at the upper right:
          </p>
          
          <p>
            <image href="./images/addFunctionButton.png" id="add_function_button" align="left" width="164"/>
          </p>
          
          <p>
            This brings up the <b>Add Function</b> dialog:
          </p>
          
          <p>
            <image href="./images/addFunctionDialog.png" id="add_function_dialog" align="left" width="400"/>
          </p>
          
          <p>
            The elements within the dialog are as follows:
          </p>
          
          <ul>
            <li>
              <b>Source Bucket</b>: The name of a bucket currently defined on the cluster.
              The function you define listens to changes made to the contents of
              this bucket &#8212; such as the creation or mutation of a document. The
              bucket must be of type <i>Couchbase</i> or <i>Ephemeral</i>: buckets of
              type <i>Memcached</i> are not supported. Use the arrows control at the
              right-hand side of the field to select from currently defined buckets:
              
              <p>
                <image href="./images/selectSourceBucket.png" id="select_source_bucket" align="left" width="390"/>
              </p>
              
              <p>
                For the current example, select the bucket you already created for this purpose, <codeph>source</codeph>.
              </p>
              
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Metadata Bucket</b>: The name of a bucket currently defined on the cluster. This bucket
              will be used to store artefacts and checkpoint information. The
              bucket must be of type <i>Couchbase</i> or <i>Ephemeral</i>: buckets of
              type <i>Memcached</i> are not supported. Use the arrows control at the
              right-hand side of the field to select from currently defined buckets.
              
              <p>
                For this example, select the bucket you already created for this purpose, <codeph>metadata</codeph>.
              </p>
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Function Name</b>: A name, for the function you are creating. For the current example,
              use <codeph>enrich_ip_nums</codeph>.
              
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Description</b>: A description of the function you are creating. This is optional. For
              the current example, specify <codeph>Enrich a document, converts IP Strings to Integers
              that are stored in new attributes.</codeph>.
              
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Settings</b>: Left-click on the arrow control, to display the subpanel:
              
              <p>
                <image href="./images/settingsSubPanel.png" id="settings_sub_panel" align="left" width="390"/>
              </p>
              
              <p>
                The available settings are as follows. (For the current example, use the
                default values.)
              </p>
              
              <ul>
                <li>
                  <b>Log Level</b>: The granularity at which messages are logged. The options (available from the
                  arrows control at the right of the field) are <b>Info</b>, <b>Error</b>, <b>Warning</b>, <b>Debug</b>, 
                  and (the default) <b>Trace</b>.
                  <p>
                    
                  </p>
                </li>
                
                <li>
                  <b>Workers</b>: The number of worker threads to be allocated the function. The default is
                  <codeph>3</codeph>.
                  <p>
                    
                  </p>
                </li>
                
                <li>
                  <b>Script Timeout</b>: The number of seconds that should elapse before the script times
                  out. The default is <codeph>1</codeph>.
                  <p>
                    
                  </p>
                </li>
              </ul>
              
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Bindings</b>: One or more references to buckets, as will be made within the JavaScript
              code of your function. One <b>type</b> is currently available, which is <codeph>Alias</codeph>.
              This associates the <b>name</b> of a defined bucket (selected from the menu accessed from
              the arrow controls) with the string you enter into the <b>value</b> field. This string can
              be used as an alias for the named bucket, in your function.
              
              <p>
                To add multiple bindings, left-click on the <b>+</b> control, at the upper right of the
                panel. To remove a binding, left-click on the <b>-</b>.
              </p>
              
              <b>
                For the current example, specify <codeph>target</codeph> as the <b>name</b> of the
                bucket; and specify <codeph>tgt</codeph> as the associated <b>value</b>.
              </b>
              
              <p>
              </p>
            </li>
          </ul>
          
          <p>
            When you have finished entering information into the dialog, left-click on the 
            <b>Next: Add Code</b> button, at the lower-right: 
          </p>
          
          <p>
            <image href="./images/nextAddCodeButton.png" id="next_add_code_button" align="left" width="140"/>
          </p>
          
          <p>
            This brings up the <b>enrich_ip_nums</b> screen, which appears as follows:
          </p>
          
          <p>
            <image href="./images/addCodePage.png" id="add_code_page" align="left" width="680"/>
          </p>
          
          <p>
            The main panel of this page initially contains placeholder code. You will substitute
            your actual <codeph>enrich_ip_nums</codeph> code for this.
          </p>

        </li>

        
        <li>
          Copy the following function, and paste it over the placeholder function in the main
          panel of the <b>enrich_ip_nums</b> screen:
          
          <codeblock outputclass="language-javascript">function OnUpdate(doc, meta) {
  log('document', doc);
  doc["ip_num_start"] = get_numip_first_3_octets(doc["ip_start"]);
  doc["ip_num_end"]   = get_numip_first_3_octets(doc["ip_end"]);
  tgt[meta.id]=doc;
}

function get_numip_first_3_octets(ip)
{
  var return_val = 0;
  if (ip)
  {
    var parts = ip.split('.');

    //IP Number = A x (256*256*256) + B x (256*256) + C x 256 + D 
    return_val = (parts[0]*(256*256*256)) + (parts[1]*(256*256)) + (parts[2]*256) + parseInt(parts[3]);
    return return_val;
  }
}</codeblock>

          <p>
            After the paste, the screen appears as follows:
          </p>
          
          <p>
            <image href="./images/pastedFunction.png" id="pasted_function" align="left" width="560"/>
          </p>
          
          <p>
            The <codeph>OnUpdate</codeph> routine specifies that when a change occurs to data
            within the bucket, the routine <codeph>get_numip_first_3_octets</codeph> should
            be run on each document that contains one or both of <codeph>ip_start</codeph> and <codeph>ip_end</codeph>.
            The a new document should be created, whose data and metadata are identical to the document on which 
            <codeph>get_numip_first_3_octets</codeph> is; but with the addition of 
            <codeph>ip_num_start</codeph> and <codeph>ip_num_end</codeph> fields, which contain the numeric values
            returned by <codeph>get_numip_first_3_octets</codeph>.
          </p>
          
          <p>
            The <codeph>get_numip_first_3_octets</codeph> routine splits the IP address it finds, converts
            each to a numeral, and add the numerals to form a single return value.
          </p>
          
          <p>
            Left-click on the <b>Save</b> button, at the lower right, to save.
          </p>
          
          <p>
            
          </p>
        </li>

        <li>
          Return to the <b>Eventing</b> screen, by left-clicking on the
          <uicontrol>Eventing</uicontrol> tab, in the navigation bar at the left. This now
          appears as follows:
          
          <p>
            <image href="./images/functionAddedInitial.png" id="function_added_initial" align="left" width="500"/>
          </p>
          
          <p>
            The function <codeph>enrich_ip_nums</codeph> is now listed as a defined function.
          </p>
          
          <p>
            
          </p>
        </li>
        
        <li>
          Left-click on the row for <codeph>enrich_ip_nums</codeph>. Additional controls are now displayed:
          
          <p>
            <image href="./images/functionAddedWithControls.png" id="function_added_with_controls" align="left" width="500"/>
          </p>
          
          <p>
            The controls are:
          </p>
          
          <ul>
            <li>
              <b>Delete</b>: Deletes the function from the system.
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Export</b>: Exports the function as a JSON document. For sample output based on the
              <codeph>enrich_ip_nums</codeph> function, see
              <xref href="./eventing-function-export.dita" scope="local" format="dita">Eventing Function Export</xref>.
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Deploy</b>: Deploys the function, making it active across the cluster. Left-clicking on
              this button displays the 
              
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Edit JavaScript</b>: Allows edits to be made on the function.
              
              <p>
                
              </p>
            </li>
          </ul>
          
        </li>
          
        <li>
         Left-click on the <uicontrol>Deploy</uicontrol> button. This displays the <b>Confirm Deploy Function</b> dialog:
              
          <p>
            <image href="./images/confirmDeployFunctionDialog.png" id="confirm_deploy_function_dialog" align="left" width="420"/>
          </p>
          
          <p>
            The <b>Feed Boundary</b> determines whether documents previously in existence should be included in the
            function's activities: the options are <b>Everythin</b> and <b>From now</b>. For the current example,
            select <b>Everything</b>. A cleanup operation on existing artifacts can be executed by checking the
            <b>Cleanup artifacts?</b> checkbox. For the current example, leave this unchecked.
          </p>
          
          <p>
            Left-click on <b>Deploy Function</b>. This deploys the function, and returns you to the main <b>Eventing</b>
            screen, which now appears as follows:
          </p>
          
          <p>
            <image href="./images/confirmDeployFunctionDialogDeployed.png" id="confirm_deploy_function_dialog_deployed" align="left" width="420"/>
          </p>
          
          <p>
            The display indicates that the function is now <b>deployed</b> and <b>running</b>. Note also that the
            <b>Deploy</b> button has been changed to <b>Undeploy</b>.
          </p>

        </li>
        
        <li>
          Access the <b>Buckets</b> screen, by left-clicking on the <b>Buckets</b> tab, in the navigation panel
          at the left. Then, left-click on the <b>Documents</b> tab on the row for the <codeph>target</codeph>
          bucket. This displays the following:

          <p>
            <image href="./images/targetBucketAfterEvent.png" id="target_bucket_after_event" align="left" width="580"/>
          </p>
          
          <p>
            As this shows, a version of <codeph>SampleDocument</codeph> has been added to the <codeph>target</codeph> 
            bucket. It contains all the attributes of the original document, with the addition of <codeph>ip_num_start</codeph>
            and <codeph>ip_num_end</codeph>; which contain the numeric values that correspond to
            <codeph>ip_start</codeph> and <codeph>ip_end</codeph>, respectively.
          </p>

        </li>
          
  

      </ol>
      
    </section>
    
    <section>
      
      <title>
        Example 2
      </title>
      
      <p>
        <i>Problem</i>: When a document expires from a source bucket, archive the document’s 
        value in another target bucket.
      </p>
      
      <p>
        <i>Solution</i>: As the Function Service does not have an <codeph>OnExpiry</codeph> handler, 
        create a 
        timer that will execute a few minutes before expiry. We create a docTimer in the 
        <codeph>OnUpdate</codeph> handler. The docTimer will be executed two 
        minutes before expiry; and this callback, associated with the docTimer, will 
        retrieve the document’s value from the source bucket, and will store in the target bucket. 
        The original document in the source bucket is not changed. 
      </p>
      
      <p>
        A sample document with a TTL set for ten minutes from creation-time can be created 
        with the following python script:
      </p>
      
      <codeblock outputclass="language-python">from couchbase.cluster import Cluster
from couchbase.cluster import PasswordAuthenticator
import time
cluster = Cluster('couchbase://localhost:8091')
authenticator = PasswordAuthenticator('test', 'asdasd')
cluster.authenticate(authenticator)

cb = cluster.open_bucket('logs')
print("Lets insert a document")
cb.upsert('demo-key', 'demo-value')
print "Doc Value:", cb.get('demo-key').value
print "Document inserted. Lets set its TTL"
cb.touch('demo-key', ttl=10*60)</codeblock>
      
      <p>
        Proceed as follows:
      </p>
      
      <ol>
        <li>
          Click on ‘Add Function’.
          <p>
            
          </p>
        </li>
        
        <li>
          Choose the Source Bucket that contains the sample document.
          
          <p>
            
          </p>
        </li>
        
        <li>
          Specify a ‘metadata’ bucket; as mentioned above,
          in the <xref href="./eventing-examples.dita#eventing_examples/eventing_examples_prerequisites" scope="local" format="dita">Prerequisites</xref>
          section.
          
          
          <p>
            
          </p>
        </li>
        
        <li>
          Specify a function-name and a readable description. Function name should be
          <codeph>add_timer_before_expiry</codeph>. Function description should be
          <i>Create a timer two minutes before expiry of a document.</i>

          
          <p>
            
          </p>
        </li>
        
        <li>
          ‘Settings’ can contain the standard defaults.

          <p>
            
          </p>
        </li>
        
        <li>
          Bindings:
          
          <ol>
            <li>
              Create a binding for the source bucket as <codeph>src</codeph>. Choose the source
              bucket from the <b>name</b> dropdown, and type <codeph>src</codeph> in the <b>value</b>
              textbox.
              
              <p>
                
              </p>
            </li>
            
            <li>
              Create a binding for the target bucket as <codeph>tgt</codeph>. Choose the target
              bucket from the <b>name</b> dropdown, and type <codeph>tgt</codeph> in the <b>value</b>
              textbox.
              
              <p>
                
              </p>
            </li>
          </ol>
          
          <p>
            
          </p>
        </li>
        
        <li>
          Click ‘Next: Add Code’, and paste the code specified in the Sample Code Section, below.
          
          <p>
            
          </p>
        </li>
        
        <li>
          Click on ‘Eventing’ in the left navigation bar: this takes you to the Functions summary screen.
          
          <p>
            
          </p>
        </li>
        
        <li>
          Click on the ‘Deploy’ button for the <codeph>add_timer_before_expiry</codeph> function. Choose ‘Everything’ in the 
          Feed Boundary dropdown. The function should be ‘deployed’ and ‘running’ in a few seconds.

          <p>
            
          </p>
        </li>
        
        <li>
          Check the ‘target’ bucket for one inserted document. 
          
          <p>
            
          </p>
        </li>

      </ol>
      
      <p>
        Sample code:
      </p>
      
      <codeblock outputclass="language-javascript">function OnUpdate(doc, meta) {
  if (meta.expiration > 0 ) //do only for those documents that have a non-zero TTL
  {
    //have to x by 1000, as timestamp in secs; and for Date operations need in milli-secs
    var expiry = new Date(meta.expiration*1000); 
    // Compute 2 minutes from the TTL timestamp        
    var twoMinsPrior =  Math.round(expiry.setMinutes(expiry.getMinutes()-2)/1000); 
    docTimer(DocTimerCallback, meta.id, twoMinsPrior);  //create the docTimer
    log('Added Doc Timer to DocId:', meta.id);
  }
}

function DocTimerCallback(docid, expiry) {
  log('DocTimerCallback Executed for DocId:', String(docid));
  tgt[docid] = "To Be Expired Key's Value is:" + String(src[docid]) ;
  log('Doc Timer Executed for DocId', String(docid));
}</codeblock>

    </section>

  </body>
</topic>
