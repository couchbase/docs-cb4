<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="eventing_examples">
  
  <title>
    Examples
  </title>
  
  <shortdesc>
    Examples of how to use the Eventing Service.
  </shortdesc>
  
  <body>
    
    <section id="eventing_examples_preparations">
      
      <title>
        Preparations
      </title>
      
      <p>
        This page contains examples of how to use the Eventing Service, by means of the Couchbase Web Console. 
        The examples require the creation of three buckets.(Note that detailed 
        information on creating buckets, is provided in
        <xref href="../clustersetup/create-bucket.dita" scope="local" format="dita">Create a Bucket</xref>.)
      </p>
      
      <p>
        Proceed as follows:
      </p>
      
      <ol>
        <li>
          <p>
            Create a <i>Metadata bucket</i>: Each Eventing function requires  
            a <i>metadata</i> bucket to be defined on
            the cluster. This bucket is used for the storage of artifacts and checkpoint information,
            generated during the course of execution. You must
            create or reference such a bucket explicitly, for each Eventing function that you define. 
            Ideally, no metadata bucket should be used for storing information from any other 
            application, though a single metadata bucket may be used by multiple Eventing functions.
          </p>
          
          <p>
            The examples on this page refer to a metadata bucket named <codeph>metadata</codeph>. Therefore, to 
            create such a bucket:
          </p>
            
            <ol>
              
              <li>
                Access the <b>Buckets</b> screen, by left-clicking on the <b>Buckets</b> tab, 
                in the left-hand navigation panel.
                
                <p>
                  
                </p>
              </li>
              
              <li>
                On the <b>Buckets</b> screen, left-click on the <b>Add Bucket</b> tab, at the upper right.
                
                <p>
                  
                </p>
              </li>
              
              <li>
                When the <b>Add Data Bucket</b> dialog appears, specify <codeph>metdata</codeph> as the bucket-name, and
                specify an appropriate <b>Memory Quota</b> for the bucket. All other settings can be left with
                their default value. Then,
                left-click on the <uicontrol>Add Bucket</uicontrol> button.
                
                <p>
                  
                </p>
              </li>
            </ol>
          
          <p>
            The <codeph>metadata</codeph> bucket now appears on the <b>Buckets</b> screen. 
          </p>
          
          <p>
            
          </p>
        </li>
        
        <li>
          <p>
            Create a <i>Source bucket</i>: This is a bucket that will contain a source document, updates to which
            cause execution of the function you define. You must create both the bucket and
            the source document. (For a detailed explanation of the user-interface components
            on the <b>Buckets</b> and <b>Documents</b> screens, see the
            page
            <xref href="../getting-started/look-at-the-results.dita" scope="local" format="dita">Look at the Results</xref>,
            within the Couchbase Server <i>Getting Started</i> sequence.)
          </p>
          
          <p>
            Proceed as follows:
          </p>
          
          <p>
          
          <ol>
            <li>
              Using the procedure described immediately
              above for the <codeph>metadata</codeph> bucket, create a bucket named
              <codeph>source</codeph>.
              
              <p>
                
              </p>
            </li>
            
            <li>
              When the <codeph>source</codeph> bucket appears on the <b>Buckets</b> screen, left-click on the
              <uicontrol>Documents</uicontrol> tab, towards the right-hand side of the <codeph>source</codeph>
              bucket's row. This brings up the
              <b>Documents</b> screen. 
              
              <p>
                
              </p>
            </li>
            
            <li>
              When the <b>Add Document</b> dialog appears, specify the name <codeph>SampleDocument</codeph> for the new
              document. Then, left-click on the <uicontrol>Save</uicontrol> button. This brings up the
              <b>Edit Document</b> dialog.
              
              <p>
                
              </p>
            </li>
            
            <li>
              Within the edit panel of the <b>Edit Document</b> dialog, paste the following:
              
              <p>
              </p>
              
              <codeblock outputclass="language-javascript">{
  "country": "AD",
  "ip_end": "5.62.60.9",
  "ip_start": "5.62.60.1"
}</codeblock>
              
              Left-click on the <uicontrol>Save</uicontrol> button.
              
            </li>
          </ol>
            
          </p>
            
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          Create a <i>Target bucket</i>: This is a bucket that will contain a new document, created by a function
          you will add to the Eventing Service. 
          Using Couchbase Web Console, create a bucket named <codeph>target</codeph>, using the procedure described
          above for the <codeph>metadata</codeph> bucket. No document need explicitly be added to this bucket.
        </li>
        
      </ol>
      
      <p>
        This concludes all required preparations.
      </p>
      
    </section>
    
    <section id="example-1">
      
      <title>
        Example 1
      </title>
      
      <p>
        <i>Goal</i>: A document contains attributes whose form makes them difficult to search on. Therefore,
        on the document's creation or modification, a new attribute should be created to accompany each
        original attribute; this new attribute being instantiated with a value that directly corresponds to
        that of its associated, original attribute;
        but takes a different form, thereby becoming more supportive of search.
        Original attributes are subsequently retrievable based on successful searches performed on new.
      </p>         
      
      <p>
        <i>Implementation</i>: Create a JavaScript function that contains an <codeph>OnUpdate</codeph> handler.
        The handler listens for data-changes within a specified, source bucket. When any document within the bucket
        is created or mutated, the handler executes a user-defined routine. In this example, if the 
        created or mutated document contains two
        specifically named fields containing IP addresses (these respectively corresponding to the
        beginning and ending of an address-range), the handler-routine converts each IP address to an integer. A new 
        document is created
        in a specified, target bucket: this new document is identical to the old, except that it has two additional
        fields, which contain integers that correspond to the IP addresses. The
        original document, in the source bucket, is not changed.
      </p>
      
      <p>
        Proceed as follows:
      </p>
      
      <ol>
        <li>
          <p>
            Access the <b>Eventing</b> screen, by left-clicking on the <uicontrol>Eventing</uicontrol> tab, in the navigation
            panel at the left-hand side of the Couchbase Web Console:
          </p>
          
          <p>
            <image href="./images/eventingTab.png" id="eventing_tab" align="left" width="100"/>
          </p>
          
          <p>
            The <b>Eventing</b> screen now appears. This shows all currently defined functions, and so is
            initially empty. 
          </p>
          
          <p>
            <image href="./images/eventingScreenInitial.png" id="eventing_screen_initial" align="left" width="680"/>
          </p>
          
          <p>
          </p>
          
        </li>
        
        <li>
          <p>
            Elect to add a function, by left-clicking on the <uicontrol>Add Function</uicontrol> button,
            at the upper right:
          </p>
          
          <p>
            <image href="./images/addFunctionButton.png" id="add_function_button" align="left" width="164"/>
          </p>
          
          <p>
            This brings up the <b>Add Function</b> dialog:
          </p>
          
          <p>
            <image href="./images/addFunctionDialog.png" id="add_function_dialog" align="left" width="400"/>
          </p>
          
          <p>
            The elements within the dialog are as follows:
          </p>
          
          <ul>
            <li>
              <p>
                <b>Source Bucket</b>: The name of a bucket currently defined on the cluster.
                The function you define listens to changes made to the contents of
                this bucket &#8212; such as the creation or mutation of a document. The
                bucket must be of type <i>Couchbase</i> or <i>Ephemeral</i>: buckets of
                type <i>Memcached</i> are not supported. Use the arrows control at the
                right-hand side of the field to select from currently defined buckets:
              </p>
              
              <p>
                <image href="./images/selectSourceBucket.png" id="select_source_bucket" align="left" width="430"/>
              </p>
              
              <p>
                For the current example, select the bucket you already created for this purpose, <codeph>source</codeph>.
              </p>
              
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Metadata Bucket</b>: The name of a bucket currently defined on the cluster. This bucket
              will be used to store artifacts and checkpoint information. The
              bucket must be of type <i>Couchbase</i> or <i>Ephemeral</i>: buckets of
              type <i>Memcached</i> are not supported. Use the arrows control at the
              right-hand side of the field to select from currently defined buckets.
              
              <p>
                For this example, select the bucket you already created for this purpose, <codeph>metadata</codeph>.
              </p>
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Function Name</b>: A name, for the function you are creating. For the current example,
              use <codeph>enrich_ip_nums</codeph>.
              
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Description</b>: A description of the function you are creating. This is optional. For
              the current example, specify <codeph>Enrich a document, converts IP Strings to Integers
              that are stored in new attributes.</codeph>
              
              <p>
                
              </p>
            </li>
            
            <li>
              <p>
                <b>Settings</b>: Left-click on the arrow control, to display the subpanel:
              </p>
              
              <p>
                <image href="./images/settingsSubPanel.png" id="settings_sub_panel" align="left" width="390"/>
              </p>
              
              <p>
                The available settings are as follows. (For the current example, use the
                default values.)
              </p>
              
              <ul>
                <li>
                  <b>Log Level</b>: The granularity at which messages are logged. The options (available from the
                  arrows control at the right of the field) are <b>Info</b>, <b>Error</b>, <b>Warning</b>, <b>Debug</b>, 
                  and (the default) <b>Trace</b>.
                  <p>
                    
                  </p>
                </li>
                
                <li>
                  <b>Workers</b>: The number of worker threads to be allocated to the function. The default is
                  <codeph>3</codeph>.
                  <p>
                    
                  </p>
                </li>
                
                <li>
                  <b>Script Timeout</b>: The number of seconds that should elapse before the script times
                  out. The default is <codeph>1</codeph>.
                  <p>
                    
                  </p>
                </li>
              </ul>
              
              <p>
                
              </p>
            </li>
            
            <li>
              <p>
                <b>Bindings</b>: One or more strings, each of which will be used as a reference to 
                an existing bucket, from within the JavaScript
                code of your function. One binding-<b>type</b> is currently available, which is <codeph>Alias</codeph>.
                This associates the <b>name</b> of a defined bucket (selected from the menu accessed from
                the arrow controls) with the string you enter into the <b>value</b> field. This string can
                be used as an alias for the named bucket, in your function.
              </p>
              
              <p>
                To add multiple bindings, left-click on the <b>+</b> control, at the upper right of the
                panel. To remove a binding, left-click on the <b>-</b> control.
              </p>
              
              <p>
                For the current example, specify <codeph>target</codeph> as the <b>name</b> of the
                bucket; and specify <codeph>tgt</codeph> as the associated <b>value</b>.
              </p>
              
              <p>
              </p>
            </li>
          </ul>
          
        </li>
        
        <li>
          <p>
            When all the appropriate fields of the <b>Add Function</b> dialog have
            been completed, left-click on the <b>Next: Add Code</b> button, at the lower-right: 
          </p>

          <p>
            <image href="./images/nextAddCodeButton.png" id="next_add_code_button" align="left" width="140"/>
          </p>
          
          <p>
            This brings up the <b>enrich_ip_nums</b> screen, which appears as follows:
          </p>
          
          <p>
            <image href="./images/addCodePage.png" id="add_code_page" align="left" width="680"/>
          </p>
          
          <p>
            The main panel of this page initially contains place-holder code. You will substitute
            your actual <codeph>enrich_ip_nums</codeph> code for this.
          </p>

        </li>

        
        <li>
          <p>
            Copy the following function, and paste it over the place-holder function in the main
            panel of the <b>enrich_ip_nums</b> screen:
          </p>
          
          <codeblock outputclass="language-javascript">function OnUpdate(doc, meta) {
  log('document', doc);
  doc["ip_num_start"] = get_numip_first_3_octets(doc["ip_start"]);
  doc["ip_num_end"]   = get_numip_first_3_octets(doc["ip_end"]);
  tgt[meta.id]=doc;
}

function get_numip_first_3_octets(ip)
{
  var return_val = 0;
  if (ip)
  {
    var parts = ip.split('.');

    //IP Number = A x (256*256*256) + B x (256*256) + C x 256 + D 
    return_val = (parts[0]*(256*256*256)) + (parts[1]*(256*256)) + (parts[2]*256) + parseInt(parts[3]);
    return return_val;
  }
}</codeblock>

          <p>
            After the paste, the screen appears approximately as follows:
          </p>
          
          <p>
            <image href="./images/pastedFunction.png" id="pasted_function" align="left" width="660"/>
          </p>
          
          <p>
            The <codeph>OnUpdate</codeph> routine specifies that when a change occurs to data
            within the bucket, the routine <codeph>get_numip_first_3_octets</codeph> is
            run on each document that contains <codeph>ip_start</codeph> and <codeph>ip_end</codeph>.
            A new document is created whose data and metadata are based on those of the document on which 
            <codeph>get_numip_first_3_octets</codeph> is run; but with the addition of 
            <codeph>ip_num_start</codeph> and <codeph>ip_num_end</codeph> data-fields, which contain the numeric values
            returned by <codeph>get_numip_first_3_octets</codeph>.
          </p>
          
          <p>
            The <codeph>get_numip_first_3_octets</codeph> routine splits the IP address it finds, converts
            each fragment to a numeral, and adds the numerals together, to form a single value; which
            it returns.
          </p>
          
          <p>
            Left-click on the <b>Save</b> button, at the lower right, to save.
          </p>
          
          <p>
            
          </p>
        </li>

        <li>
          <p>
            Return to the <b>Eventing</b> screen, by left-clicking on the
            <uicontrol>Eventing</uicontrol> tab, in the navigation bar at the left. The main panel now
            appears as follows:
          </p>
          
          <p>
            <image href="./images/functionAddedInitial.png" id="function_added_initial" align="left" width="600"/>
          </p>
          
          <p>
            The function <codeph>enrich_ip_nums</codeph> is now listed as a defined function. As yet, it is listed
            as <b>undeployed</b> and <b>paused</b>.
          </p>
          
          <p>
            
          </p>
        </li>
        
        <li>
          <p>
            Left-click on the row for <codeph>enrich_ip_nums</codeph>. Additional controls are now displayed:
          </p>
          
          <p>
            <image href="./images/functionAddedWithControls.png" id="function_added_with_controls" align="left" width="600"/>
          </p>
          
          <p>
            The controls are:
          </p>
          
          <ul>
            <li>
              <b>Delete</b>: Deletes the function from the system.
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Export</b>: Exports the function as a JSON document. For sample output based on the
              <codeph>enrich_ip_nums</codeph> function, see
              <xref href="./eventing-function-export.dita" scope="local" format="dita">Eventing Function Export</xref>.
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Deploy</b>: Deploys the function, making it active across the cluster. 
              
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Edit JavaScript</b>: Allows edits to be made on the function, in an edit dialog.
              
              <p>
                
              </p>
            </li>
          </ul>
          
        </li>
          
        <li>
          <p>
            Left-click on the <uicontrol>Deploy</uicontrol> button. This displays the <b>Confirm Deploy Function</b> dialog:
          </p>
              
          <p>
            <image href="./images/confirmDeployFunctionDialog.png" id="confirm_deploy_function_dialog" align="left" width="320"/>
          </p>
          
          <p>
            The <b>Feed Boundary</b> determines whether documents previously in existence should be included in the
            function's activities: the options are <b>Everything</b> and <b>From now</b>. For the current example,
            select <b>Everything</b>. A cleanup operation on existing artifacts can be executed by checking the
            <b>Cleanup artifacts?</b> checkbox. For the current example, leave this unchecked.
          </p>
          
        </li>
          
        <li>
          <p>
            Left-click on <b>Deploy Function</b>. This deploys the function, and returns you to the main <b>Eventing</b>
            screen, which now appears as follows:
          </p>

          <p>
            <image href="./images/confirmDeployFunctionDialogDeployed.png" id="confirm_deploy_function_dialog_deployed" align="left" width="720"/>
          </p>
          
          <p>
            The display indicates that the function is now <b>deployed</b> and <b>running</b>. Note also that the
            <b>Deploy</b> button has been changed to <b>Undeploy</b>.
          </p>
          
          <p>
            From this point, your defined function will run, first, on all existing documents; and subsequently, 
            whenever a creation or mutation occurs.
          </p>

        </li>
        
        <li>
          <p>
            To check the effects of deploying the function, 
            access the <b>Buckets</b> screen, by left-clicking on the <b>Buckets</b> tab, in the navigation panel
            at the left. Then, left-click on the <b>Documents</b> tab on the row for the <codeph>target</codeph>
            bucket. This displays the following:
          </p>

          <p>
            <image href="./images/targetBucketAfterEvent.png" id="target_bucket_after_event" align="left" width="880"/>
          </p>
          
          <p>
            As this shows, a version of <codeph>SampleDocument</codeph> has been added to the <codeph>target</codeph> 
            bucket. It contains all the attributes of the original document, with the addition of <codeph>ip_num_start</codeph>
            and <codeph>ip_num_end</codeph>; which contain the numeric values that correspond to
            <codeph>ip_start</codeph> and <codeph>ip_end</codeph>, respectively.
          </p>
          
          <p>
            Additional documents added to the <codeph>source</codeph> bucket, which share the <codeph>ip_start</codeph>
            and <codeph>ip_end</codeph> attributes, will be similarly handled by the defined function: creating
            such a document, and changing any attribute in such a document both cause the function's execution.
          </p>

        </li>

      </ol>
      
    </section>
    
    <section id="example_2">
      
      <title>
        Example 2
      </title>
      
      <p>
        <i>Goal</i>: When a document in an existing bucket is about to expire, ideally,
        one or more of its attributes become archived, in a newly created bucket. 
      </p>
        
      <p>
        (For information on bucket expiration, see
        the <i>Item Deletion</i> section of 
        <xref href="../understanding-couchbase/buckets-memory-and-storage/expiration.dita" scope="local" format="dita">Expiration</xref>.)
      </p>
      
      <p>
        <i>Implementation</i>: Write an <codeph>OnUpdate</codeph> handler, which runs whenever a document is
        created or mutated. The handler calls a <codeph>docTimer</codeph> routine, which itself executes
        a callback function, two minutes prior to any document's established expiration: this function
        retrieves a specified value from the document, and stores it in a document of the same name, in
        a specified target bucket. The original document in the source bucket is not changed. 
      </p>
      <p>
        <note type="important">
          <p>The Timers construct is still in development and may have some rough edges and bugs,
            and may change significantly before the final GA release. </p>
        </note>
      </p>
      
      <p>
        For this example, Example 2, the buckets used in the previous example, Example 1, are reused: <codeph>source</codeph>,
        <codeph>target</codeph>, and <codeph>metadata</codeph>. A new document is created within
        the <codeph>source</codeph> bucket: this document has its expiration 
        &#8212; or <i>Time To Live</i> (<i>TTL</i>) &#8212; set to occur <i>ten minutes after the
        document's creation</i>. Note that a document's expiration cannot be established 
        by means of the Couchbase Web Console: the standard procedure for establishing or modifying
        document-expiration is provided by the Couchbase SDK. The following Python script, based on the
        Couchbase SDK Python client, illustrates this; and will be used in this example:
      </p>
      
      <codeblock outputclass="language-python">from couchbase.cluster import Cluster
from couchbase.cluster import PasswordAuthenticator
import time
cluster = Cluster('couchbase://localhost:8091')
authenticator = PasswordAuthenticator('Administrator', 'password')
cluster.authenticate(authenticator)

cb = cluster.open_bucket('source')
cb.upsert('SampleDocument2', {'a_key': 'a_value'})
cb.touch('SampleDocument2', ttl=10*60)</codeblock>
      
      <p>
        This script imports a Couchbase <codeph>cluster</codeph> object, and authenticates
        against it, using (for demonstration purposes) the Full Administrator username and
        password (the cluster is assumed to be accessible on <codeph>localhost</codeph>).
        The script then opens the existing <codeph>source</codeph> bucket, and inserts a new
        document, named <codeph>SampleDocument2</codeph>, whose body is <codeph>{'a_key': 'a_value'}</codeph>.
      </p>
      
      <p>
        Information on installing the Couchbase Python SDK can be found in
        <xref href="../sdk/python/start-using-sdk.dita" scope="local" format="dita">Start Using the SDK</xref>.
        Information on using the Couchbase Python SDK to establish bucket-expiration can be found in 
        <xref href="../sdk/python/document-operations.dita" scope="local" format="dita">Document Operations</xref>.
      </p>
      
      <p>
        Proceed as follows:
      </p>
      
      <ol>
        
        <li>
          <p>
            Install the Couchbase SDK Python client, and, from the appropriate folder, start Python.
          </p>
          
          <codeblock outputclass="language-bourne">./python</codeblock>
          
          <p>
            
          </p>
        </li>
        
        <li>
          <p>
            At the Python prompt, enter the code given above. The session should appear as follows:
          </p>
          
          <codeblock outputclass="language-bourne">>>> from couchbase.cluster import Cluster
>>> from couchbase.cluster import PasswordAuthenticator
>>> import time
>>> cluster = Cluster('couchbase://localhost:8091')
>>> authenticator = PasswordAuthenticator('Administrator', 'password')
>>> cluster.authenticate(authenticator)
>>> cb = cluster.open_bucket('source')
>>> cb.upsert('SampleDocument2', {'a_key': 'a_value'})
OperationResult&lt;rc=0x0, key='SampleDocument2', cas=0x1519ec8cdee90000&gt;
>>> cb.touch('SampleDocument2', ttl=10*60)
OperationResult&lt;rc=0x0, key='SampleDocument2', cas=0x1519ec8e686c0000&gt;
>>></codeblock> 
          
          <p>
            
          </p>
              
        </li>
        
        <li>
          <p>
            As a further check that the document has been created,
            access the <b>Buckets</b> screen of Couchbase Web Console, and left-click on the <b>Document</b>
            tab of the <codeph>source</codeph> bucket. This should appear as follows, with the new document
            displayed:
          </p>
          
          <p>
            <image href="./images/ex2sourceBucketSubsequent.png" id="ex2_source_bucket_subsequent" align="left" width="880"/>
          </p>
          
          <p>
            Note that by left-clicking on a document's <b>id</b>, its metadata is displayed:
          </p>
          
          <p>
            <image href="./images/ex2metaDataDisplay.png" id="ex2_meta_data_display" align="left" width="300"/>
          </p>
          
          <p>
            This pop-up confirms the established document expiration-time.
          </p>
          
          <p>
            
          </p>
        </li>
        
        <li>
          <p>
           Access the <b>Eventing</b> screen, by left-clicking on the <uicontrol>Eventing</uicontrol> tab, in the
           left-hand navigation panel.
           Then, when the <b>Eventing</b> screen is displayed, 
           click on the <uicontrol>Add Function</uicontrol> tab, at the upper right. 
          </p>
          
          <p>  
            When the <b>Add Function</b>
            dialog appears, specify <codeph>source</codeph> as the <b>Source Bucket</b>, and <codeph>metadata</codeph> as
            the <b>Metadata Bucket</b>. Then, specify <codeph>add_timer_before_expiry</codeph> as the function-name. Optionally,
            add a function-description. Leave the <b>Settings</b> at default, for all values. In <b>Bindings</b>, specify
            <codeph>tgt</codeph> as the <b>value</b> for the <b>name</b> <codeph>target</codeph>, and specify
            <codeph>src</codeph> as the <b>value</b> for the <b>name</b> <codeph>source</codeph>. The completed dialog should appear
            approximately as follows: 
          </p>
          
          <p>
            <image href="./images/ex2AddFunctionDialogComplete.png" id="ex2add_function_dialog_complete.png" align="left" width="440"/>
          </p>
          
          <p>
            
          </p>

        </li>
        
        <li>
          <p>
            Left-click on the <uicontrol>Next: Add Code</uicontrol> button, at the lower right of the <b>Add Function</b> dialog. The
            dialog disappears, and the <b>add_timer_before_expiry</b> screen is displayed. 
            Copy the following JavaScript routine, and paste it over the place-holder code that
            appears in the main, interactive panel:
          </p>
          
          <codeblock outputclass="language-javascript">function OnUpdate(doc, meta) {
  if (meta.expiration > 0 ) //do only for those documents that have a non-zero TTL
  {
    //have to x by 1000, as timestamp in secs; and for Date operations need in milli-secs
    var expiry = new Date(meta.expiration*1000); 
    // Compute 2 minutes from the TTL timestamp        
    var twoMinsPrior =  Math.round(expiry.setMinutes(expiry.getMinutes()-2)/1000); 
    docTimer(DocTimerCallback, meta.id, twoMinsPrior);  //create the docTimer
    log('Added Doc Timer to DocId:', meta.id);
  }
}

function DocTimerCallback(docid, expiry) {
  log('DocTimerCallback Executed for DocId:', String(docid));
  tgt[docid] = "To Be Expired Key's Value is:" + JSON.stringify(src[docid]);
  log('Doc Timer Executed for DocId', String(docid));
}</codeblock>
 
        
        <p>
          The interactive panel now appears as follows:
        </p>
          
          <p>
            <image href="./images/addTimerBeforeExpiryCode.png" id="ex2add_timer_before_expiry_code.png" align="left" width="660"/>
          </p>
          
          <p>
            The <codeph>OnUpdate</codeph> routine, for each document with a non-zero expiration-time, computes
            a <codeph>docTimer</codeph> execution-time that is two minutes prior to the document expiration-time. The
            callback for the <codeph>docTimer</codeph> creates a new document in the <codeph>tgt</codeph> bucket,
            with the same <codeph>docid</codeph> as the original document; and makes the value of the new document
            a modified version of the original.
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          Left-click on the <uicontrol>Save</uicontrol> button, at the lower right. Then, return to the <b>Eventing</b> screen:
          when it
          reappears, left-click
          on the <uicontrol>Deploy</uicontrol> button for the <codeph>add_timer_before_expiry</codeph> function. When the 
          <b>Confirm Deploy Function</b> dialog appears, select <codeph>Everything</codeph> from the
          <b>Feed boundary</b> menu, and leave <uicontrol>Cleanup artifacts?</uicontrol> unchecked. Then,
          left-click on the <uicontrol>Deploy Function</uicontrol> button. The function should be 
          confirmed as <b>deployed</b> and <b>running</b> within a few seconds.

          <p>
            
          </p>
        </li>
        
        <li>
          <p>
            The new document will be created two minutes before the expiration-time of the original. Therefore, when sufficient
            time has elapsed, access the <b>Buckets</b> screen, and examine the documents currently within the <codeph>target</codeph>
            bucket. Eventually, the display will be as follows:
          </p>
          
          <p>
            <image href="./images/ex2targetBucketSubsequent.png" id="ex2target_bucket_subsequent.png" align="left" width="880"/>
          </p>
          
          <p>
            This indicates that the new document &#8212; like the original, named
            <codeph>SourceDocument2</codeph> &#8212; has been created, with a value based on that of the original. 
            
            After ten minutes
            have elapsed, check the documents within the <codeph>source</codeph> bucket: the original <codeph>SourceDocument2</codeph>
            is no longer visible, having been removed at its defined expiration-time.
          </p>
          
          
          <p>
            
          </p>
        </li>

      </ol>

    </section>

  </body>
</topic>
