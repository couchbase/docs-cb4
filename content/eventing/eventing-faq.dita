<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="eventing_faq">
  
  <title>
    Frequently Asked Questions
  </title>
  
  <shortdesc>
    Some questions, frequently asked about the Eventing framework and Functions Service.
  </shortdesc>
  
  <body>
    
    <section>
      
      <title>
        Frequently Asked Questions
      </title>
      
      <ul>
        <li>
          <p>
            <b>Can a function listen to all changes across Couchbase Server?</b>
            
          </p>
          
          <p>
            A defined function listens only to changes that are exposed using the DCP for the buckets 
            (Couchbase and Ephemeral) in the data-nodes. Memcached buckets are not supported. The function cannot 
            listen to changes happening in other Couchbase components, such as FTS, Views, or GSI; nor can it listen 
            to system events.
          </p>
          
          <p>
          </p>
          
        </li>
        
        <li>
          <p>
            <b>Can there be more than one function listening to changes to a bucket?</b>
            
          </p>
          
          <p>
            Yes. More than one function can be defined for the same bucket. This lets you 
            process the change according to the business logic that you enforce. But there 
            is no ordering enforced; for example if bucket 'wine' has three different functions, 
            which are FunctionA, FunctionB, and FunctionC, you cannot enforce the order in 
            which these functions are executed. 
            
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>Is it similar to a Database Trigger?</b>
            
          </p>
          
          <p>
            In a rough sense, it is similar to the Post-Triggers of the database world. But with functions, 
            the action is already completed at the data-layer, and the event handler just gives an 
            interface by which developers can key in the logic of what needs to happen ‘after’ the 
            action is done. What a function sees is the actual event of the change, and hence it 
            does not directly correlate with Database Triggers.
          </p>
          
          <p>
            Also, database triggers suffered from scalability and diagnosability issues. The 
            Functions Service offers multiple diagnosability solutions, and is highly 
            scalable and performant. 
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>Is it similar to a Rules Engine?</b>
            
          </p>
          
          <p>
            Not exactly. A Rules Engine enforces ordering and other semantics that are not possible out of 
            the box with the Functions Service. However, the Functions Service can be used to implement 1-even 
            Rules Engine; i.e, the function in its purest form offers a rule to implemented closer to the data, but 
            cannot trigger another function directly.
            
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>Is it similar to a Stored Procedure?</b>
            
            
          </p>
          
          <p>
            Stored Procedures enforce a request-response model. A stored procedure will not be invoked 
            automatically; it has to be invoked by a calling method. Functions are based on the idea of events. 
            Changes to the data are events. These events trigger functions, and hence this is not a request-response model 
            in its purest sense.
            
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>Is it an MDS-enabled service?</b>
            
          </p>
          
          <p>
            Yes. MDS enables workload isolation 
            in a Couchbase cluster. Eventing nodes can be added as more functions are added, 
            or if the mutation rates are high.
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>What kind of node do I run my Eventing Service on?</b>
            
          </p>
          
          <p>
            Eventing leverages the latest trends in multi-core CPUs; therefore nodes selected for Eventing should optimally 
            have a higher number of cores than those for indexing. If the use-case demands the creation of many timers, then 
            systems with more RAM are recommended. 
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>What languages are supported?</b>
            
            
          </p>
          
          <p>
            Javascript is the language to be used while creating the function. Node modules cannot be 
            Imported:  only simple Javascript can be used.
            
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>Do I need a separate middleware to consume the Functions Service? How do I consume changes in my middleware/application?</b>
            
            
          </p>
          
          <p>
            Database changes are consumed using the function defined: there is no other programmatic way of accessing the changes (such as 
            by using an SDK, or some other form of middleware). REST endpoints are exposed, to perform many administrative operations. 
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>Is the ordering of document mutations enforced?</b>
          </p>
          
          <p>
            All changes from a document are always processed in order. Timers are not ordered. 
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>Does a rebalance have any effect on the firing of events?</b>
          </p>
          
          <p>
            No. The Functions Service does not lose any mutations when rebalance operations 
            occur - i.e, when the Data Service undergoes a rebalance, or when Eventing nodes are 
            added or removed. 
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>What is the metadata bucket? Do I need to create a separate bucket?</b>
          </p>
          
          <p>
            To provide better restartability semantics when eventing nodes goes down, 
            some metadata needs to be stored: a Couchbase bucket solves this problem. 
            Setting up the metadata bucket is a one-time activity that is done cluster-wide. 
            It is 
            recommended that the metadata bucket not be used for any other data-storage 
            (which is to say, it should not be accessed by any other application).
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>Are functions supported for both KV and Document storage?</b>
          </p>
          
          <p>
            Eventing listens to changes that appear in the DCP. DCP is valid for the 
            Data Service; and functions operate on documents that are either in key-value or in 
            document (JSON) format.
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>Is it supported for both text and binary formats of the documents?</b>
          </p>
          
          <p>
            The value or the document must always be text. Neither binary values nor binary documents are supported.
            
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>Can we determine what has changed on the document?</b>
          </p>
          
          <p>
            No. But customers can implement versioning as part of the application logic. If versioning is important, 
            include it as part of the data architecture.
            
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>Can I import my own JS libraries or Node Modules?</b>
          </p>
          
          <p>
            No. We do not allow import of node modules or external JS libraries for now.
            
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>Why can’t I create global variables?</b>
          </p>
          
          <p>
            We restrict the language model in such a way that chances of going wrong are minimized. As functions are 
            stateless compute entities, global variables do not have a good use-case, and therefore, they are not 
            supported. Though you can define Javascript functions 
            inside a function (outside the scope of OnUpdate and OnDelete) that can be invoked any number of times 
            from either of the event handlers.
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>How do I get notified on or before a document expires?</b>
          </p>
          
          <p>
            There is currently no OnExpiry handler in the Function Service. The only way to get notified is via timers associated with 
            a document. Creating a timer for a document a few minutes before expiry generally solves this.
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>Can I get the document’s value when it is deleted or expired?</b>
          </p>
          
          <p>
            As of now, it is not possible to get the document's value when it is expired or deleted. DCP does not 
            contain this information. MB-17466 
            tracks this. The workaround for this is to create a timer before the expiry, and attempt to 
            look up the document's value in the bucket.
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>What is in the "meta" function parameter (OnUpdate, OnDelete)? Is this the metadata we currently write in 
              order to figure out what actually changed in the document?</b>
            
          </p>
          
          <p>
            These are the meta fields associated with the document. 
            
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>How can the deployed function be debugged?</b>
          </p>
          
          <p>
            The online-realtime debugger is an extremely useful feature of the Functions Service.
            
          </p>
          
          <p>
            Only a function that is deployed can be debugged. If a function is not deployed, it cannot be debugged. 
            Click on the ‘Debug’ button and wait for a mutation. Once the debugger thread receives a mutation, it 
            displays the debugger URL that needs to be copy-pasted into a different Chrome window.
            
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>What happens when a function is debugged?</b>
            
          </p>
          
          <p>
            We block one of the mutations alone, and hand it over to the debugger session. The rest of the mutations 
            continue to be serviced by the event handler.
            
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>Will all the updates to a document be seen in DCP?</b>
          </p>
          
          <p>
            When a document is updated multiple times in a small time-window, not all updates are seen in DCP. This 
            means that the event handlers see only those deduplicated events that are published in DCP.  Refer to MB-26908.
            
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>Is it possible to get additional state during function execution, e.g. can you read from the data service in a 
            function to fetch related data? For example, can we enrich the updated document with data from another document 
            (using a document id)?</b>
            
          </p>
          
          <p>
            Yes. You can read from any other bucket, or even from a REST endpoint, and enrich the document.
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>Can I get old and new values of the document inside the function?</b>
          </p>
          
          <p>
            No. We do not support versioning of documents; therefore, this feature is not available out of the box. 
            Though customers can have another ‘Mother’ bucket that stores 
            documents that could be looked up, in order to determine the difference between the current 
            document and the last modified.
          </p>
          
          <p>
            
          </p>
          
        </li>
        
        <li>
          <p>
            <b>How does the Functions Service compare with the Couchbase’s Kafka Connector?</b>
          </p>
          
          <p>
            The Function Service is about server-side processing or compute; it does not require any middleware to be deployed or managed. 
            Couchbase’s Kafka connector is an SDK component that needs an application container or middleware to run.
          </p>
          
          <p>
            
          </p>
          
        </li>
        
      </ul>
      
     </section>
    
    <section>
      
      <title>
        Known Limitations
      </title>
      
      <table frame="all" rowsep="1" colsep="1" id="known_limitations_functions">
        
        <title>
          Known Limitations Related to Couchbase Functions
        </title>
        
        
        <tgroup cols="2" align="left">
          <colspec colname="c1" colnum="1" colwidth="0.6*"/>
          <colspec colname="c2" colnum="2" colwidth="2.2*"/>

          <thead>
            <row>
              <entry>Ticket</entry>
              <entry>Description</entry>

            </row>
          </thead>
          
          <tbody>
            
            <row>
              
              <entry>
                MB-27268, MB-26939 
              </entry>
              
              <entry>
                Not possible to update the source bucket from with a Function
              </entry>
              
            </row>
            
            <row>
              
              <entry>
                MB-27338
              </entry>
              
              <entry>
                Unable to deploy if handler has N1QL query with ( for Union clause
              </entry>
              
            </row>
            
            <row>
              
              <entry>
                MB-28317
              </entry>
              
              <entry>
                No logs appended to Application log during Debug
              </entry>
              
            </row>
            
            <row>
              
              <entry>
                MB-27267
              </entry>
              
              <entry>
                Ability to Set Expiry from the Function
              </entry>
              
            </row>
            
            <row>
              
              <entry>
                MB-28315
              </entry>
              
              <entry>
                Redeployment truncates log
              </entry>
              
            </row>
            
          </tbody>
        </tgroup>
      </table>
      
      <table frame="all" rowsep="1" colsep="1" id="known_limitations_dcp">
        
        <title>
          Known Limitations Related to DCP
        </title>
        
        
        <tgroup cols="2" align="left">
          <colspec colname="c1" colnum="1" colwidth="0.6*"/>
          <colspec colname="c2" colnum="2" colwidth="2.2*"/>
          
          <thead>
            <row>
              <entry>Ticket</entry>
              <entry>Description</entry>
              
            </row>
          </thead>
          
          <tbody>
            
            <row>
              
              <entry>
                MB-26907 
              </entry>
              
              <entry>
                Differentiate Between Delete and Expiry Operations using OpCodes
              </entry>
              
            </row>
            
            <row>
              
              <entry>
                MB-26905
              </entry>
              
              <entry>
                Differentiate Between Create and Update Operations using OpCodes
                
              </entry>
              
            </row>
            
            <row>
              
              <entry>
                MB-26908
              </entry>
              
              <entry>
                Disallow Dedup to capture All Updates
                
              </entry>
              
            </row>
            
            <row>
              
              <entry>
                MB-17466
              </entry>
              
              <entry>
                DCP should allow configuring delete/expiry sending the value in addition to key/metadata
              </entry>
              
            </row>
            
            
          </tbody>
        </tgroup>
      </table>
      
    </section>
   
  </body>
</topic>
