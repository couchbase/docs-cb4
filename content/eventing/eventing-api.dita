<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="eventing_api">
  
  <title>
    Functions Service API
  </title>
  
  <shortdesc>
    Methods made available by the Functions Service.
  </shortdesc>
  
  <body>
    
    <section>
      
      <title>
        Create a Function
      </title>
      
      <codeblock outputclass="language-bourne">POST /api/v1/functions/<i>&lt;name&gt;</i></codeblock>
      
      <p>
        The function <i>name</i> in the body must match that on the URL. Function definition includes
        current settings.
      </p>
      
      <p>
        Multiple functions cannot have the same name. An error is reported in such cases.
      </p>

     </section>
    
    <section>
      
      <title>
        Create Multiple Functions
      </title>
      
      <codeblock outputclass="language-bourne">POST /api/v1/functions/</codeblock>
      
      <p>
        Multiple functions cannot have the same name. An error is reported in such cases.
      </p>
    
    </section>
    
    <section>
      
      <title>
        Get a Function
      </title>
      
      <codeblock outputclass="language-bourne">GET /api/v1/functions/<i>&lt;name&gt;</i></codeblock>
      
      <p>
        Function definition includes its settings.
      </p>
      
    </section>
    
    <section>
      
      <title>
        Get All Functions
      </title>
      
      <codeblock outputclass="language-bourne">GET /api/v1/functions</codeblock>
      
    </section>
    
    <section>
      
      <title>
        Delete a Function
      </title>
      
      <codeblock outputclass="language-bourne">DELETE /api/v1/functions/<i>&lt;name&gt;</i></codeblock>
      
    </section>
    
    <section>
      
      <title>
        Delete All Functions
      </title>
      
      <codeblock outputclass="language-bourne">DELETE /api/v1/functions</codeblock>
      
    </section>
    
    <section>
      
      <title>
        Manipulate a Function's Settings
      </title>
      
      <codeblock outputclass="language-bourne">GET /api/v1/functions/<i>&lt;name&gt;</i>/settings</codeblock>
      
    </section>
    
    <section>
      
      <title>
        Modify a Function's Settings
      </title>
      
      <codeblock outputclass="language-bourne">POST /api/v1/functions/<i>&lt;name&gt;</i>/settings</codeblock>
      
      <p>
        Settings provided are merged, and so unspecified elements retain their prior values.
      </p>
      
    </section>
    
    <section>
    
    <title>
      Get the Eventing Global Configuration
    </title>
    
      <codeblock outputclass="language-bourne">GET /api/v1/config</codeblock>
    
    </section>
    
    <section>
      
      <title>
        Manipulate the Eventing Global Configuration
      </title>
      
      <codeblock outputclass="language-bourne">POST /api/v1/config</codeblock>
      
      <p>
        Configuration provided is merged, and so unspecified elements retain their prior values.
      </p>
      
      <p>
        The response indicates whether the Eventing process must be restarted for the submitted
        changes to take effect.
      </p>
      
      <p>
        All available settings, with the default and a description for each, are provided
        in the table below.
      </p>
      
      <table frame="all" rowsep="1" colsep="1" id="eventing_settings">
        
        <title>
          Settings
        </title>
      
      
      <tgroup cols="3" align="left">
        <colspec colname="c1" colnum="1" colwidth="0.6*"/>
        <colspec colname="c2" colnum="2" colwidth="1.2*"/>
        <colspec colname="c3" colnum="3" colwidth="0.4*"/>
        <thead>
          <row>
            <entry>Setting Name</entry>
            <entry>Description</entry>
            <entry>Default</entry>
          </row>
        </thead>
        
        <tbody>
          
          <row>
            
            <entry>
              app_log_max_files
            </entry>
            
            <entry>
              
              Number of rotated application log files to keep
              
            </entry>
            
            <entry>
              10
            </entry>
            
          </row>
          
          
          <row>
            
            <entry>
              app_log_max_size
            </entry>
            
            <entry>
              Size after which application log file is archived (in bytes)
            </entry>
            
            <entry>
              10485760
            </entry>
            
          </row>
          
          
          <row>
            
            <entry>
              breakpad_on
            </entry>
            
            <entry>
              If true, generates minidumps on worker crash
            </entry>
            
            <entry>
              true
            </entry>
            
          </row>
          
          
          <row>
            
            <entry>
              checkpoint_interval
            </entry>
            
            <entry>
              Interval for updating event processing status in metadata bucket (in milliseconds)
            </entry>
            
            <entry>
              10000
            </entry>
            
          </row>
          
          
          <row>
            
            <entry>
              cleanup_timers
            </entry>
            
            <entry>
              Flag to signify if artifacts (timers) need to be cleared up
            </entry>
            
            <entry>
              false
            </entry>
            
          </row>
          
          
          <row>
            
            <entry>
              cpp_worker_thread_count
            </entry>
            
            <entry>
              Number of threads that each worker should spawn
            </entry>
            
            <entry>
              2
            </entry>
            
          </row>
          
          
          <row>
            
            <entry>
              curl_timeout
            </entry>
            
            <entry>
              Timeout for curl calls (in milliseconds)
            </entry>
            
            <entry>
              500
            </entry>
            
          </row>
          
          
          <row>
            
            <entry>
              
              dcp_stream_boundary
              
            </entry>
              
            <entry>
              Specifies from where the mutations should be processed (possible values : everything, from_now)
            </entry>
            
            <entry>
              everything
            </entry>
            
          </row>
          
          <row>
            
            <entry>
              deadline_timeout
            </entry>
            
            <entry>
              Timeout for socket operations from eventing-producer to eventing-consumer. eventing-consumer 
              will be respawned if it doesnâ€™t respond within this timeout. This must be greater than 
              execution_timeout (in seconds)
            </entry>
            
            <entry>
              3
            </entry>
            
          </row>
          
          <row>
            
            <entry>
              deployment_status
            </entry>
            
            <entry>
              Controls deploy/undeploy of function
            </entry>
            
            <entry>
              false
            </entry>
            
          </row>
          
          <row>
            
            <entry>
              description
            </entry>
            
            <entry>
              Description of function
            </entry>
            
            <entry>
              
            </entry>
            
          </row>
          
          <row>
            
            <entry>
              enable_recursive_mutation
            </entry>
            
            <entry>
              Flag to either allow/disallow recursive mutation when handler does bucket operation
            </entry>
            
            <entry>
              false
            </entry>
            
          </row>
          
          <row>
            
            <entry>
              execution_timeout
            </entry>
            
            <entry>
              Time for which the handler code will run, for each mutation (in seconds)
            </entry>
            
            <entry>
              1
            </entry>
            
          </row>
          
          <row>
            
            <entry>
              fuzz_offset
            </entry>
            
            <entry>
              For cron timer creation, the worker will add a 
              random number between [0, fuzz_offset] to the time at which it was set to kick 
              off the cron timer callback.
            </entry>
            
            <entry>
              0
            </entry>
            
          </row>
          
          <row>
            
            <entry>
              lcb_inst_capacity
            </entry>
            
            <entry>
              Specifies whether function should process mutation or not, while it is deployed
            </entry>
            
            <entry>
              false
            </entry>
            
          </row>
          
          <row>
            
            <entry>
              log_level
            </entry>
            
            <entry>
              Applies for system logs. Possible fields are - INFO, ERROR, WARNING, DEBUG, TRACE
            </entry>
            
            <entry>
              TRACE
            </entry>
            
          </row>
          
          <row>
            
            <entry>
              processing_status
            </entry>
            
            <entry>
              Specifies whether function should process mutation or not, while it is deployed
            </entry>
            
            <entry>
              false
            </entry>
            
          </row>
          
          <row>
            
            <entry>
              skip_timer_threshold
            </entry>
            
            <entry>
              Interval specified to skip firing of timer events if their execution is delayed (in seconds)
            </entry>
            
            <entry>
              86400
            </entry>
            
          </row>
          
          <row>
            
            <entry>
              sock_batch_size
            </entry>
            
            <entry>
              Batch size of events that eventing-producer sends to eventing-consumer in one socket write
            </entry>
            
            <entry>
              100
            </entry>
            
          </row>
          
          <row>
            
            <entry>
              tick_duration
            </entry>
            
            <entry>
              Interval after which some of internal stats are written in eventing.log (in milliseconds)
            </entry>
            
            <entry>
              60000
            </entry>
            
          </row>
          
          <row>
            
            <entry>
              timer_processing_tick_interval
            </entry>
            
            <entry>
              Tick interval for timer processing routines to catch up with backlog of pending timer execution (in milliseconds)
            </entry>
            
            <entry>
              500
            </entry>
            
          </row>
          
          <row>
            
            <entry>
              vb_ownership_giveup_routine_count
            </entry>
            
            <entry>
              Number of vbuckets given up simultaneously by each eventing worker during rebalance
            </entry>
            
            <entry>
              3
            </entry>
            
          </row>
          
          <row>
            
            <entry>
              vb_ownership_takeover_routine_count
            </entry>
            
            <entry>
              Number of vbuckets whose ownership is taken up simultaneously by each eventing worker during rebalance
            </entry>
            
            <entry>
              3
            </entry>
            
          </row>
          
          <row>
            
            <entry>
              worker_count
            </entry>
            
            <entry>
              Number of workers to spawn for a function
            </entry>
            
            <entry>
              3
            </entry>
            
          </row>
          
          <row>
            
            <entry>
              worker_queue_cap
            </entry>
            
            <entry>
              Number of pending events to keep in queue on eventing-consumer before starting to backoff receiving any more events
            </entry>
            
            <entry>
              100000
            </entry>
            
          </row>
          
          <row>
            
            <entry>
              xattr_doc_timer_entry_prune_threshold
            </entry>
            
            <entry>
              Number of stale timer records per KV doc-id before, they are garbage collected
            </entry>
            
            <entry>
              100
            </entry>
            
          </row>
          
          
        </tbody>
      </tgroup>
      </table>
      
      
      
    </section>
 
   
  </body>
</topic>
