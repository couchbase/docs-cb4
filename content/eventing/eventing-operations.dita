<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="eventing_operations">
  
  <title>
    Operations
  </title>
  
  <shortdesc>
    Eventing operations are exposed through the Couchbase Web Console, and by means of the
    Couchbase CLI.
  </shortdesc>
  
  <body>
    <section>
      <title> Deploy </title>
      <p> This operation activates a function. Source validations are performed, and only valid
        functions can be deployed. Deployment transpiles the code and creates the executable v8
        artifacts. The source code of an activated (deployed) function cannot be edited. Unless a
        function is in deployed state, it will not receive or process any events. Deployment creates
        necessary metadata, spawns worker processes, calculates initial partitions, and initiates
        checkpointing of processed stream data. </p>
      <ul>
        <li>
          <i>DCP Feed Boundaries</i>: Deployment can be effected on a DCP provider in three
          variations: <ul>
            <li>
              <i>From Beginning</i>: Currently affects only the DCP observer. Causes a DCP stream to
              start from sequence number 0. Therefore, the DCP data observer causes the function to
              visit each document at least once. </li>
            <li>
              <i>From Now</i>: Currently affects only the DCP observer. Causes functions to start
              observing mutations from the current sequence number of the master of each vBucket.
              Therefore, this causes functions to visit documents modified after it is deployed. </li>
            <li>
              <i>From Prior Deployment</i>: Currently affects only the DCP observer. This option
              runs to the point where the prior function left off. In other words, documents that
              are mutated during the time-period that starts when the prior version of the function
              becomes undeployed, and ends when the new version becomes deployed, will be visited by
              the new function. <p> Note that this is not present in the Developer Preview build.
              </p></li>
          </ul></li>
        <li>
          <i>Timer Semantics</i>: Timers are referred to as artifacts, as they reside outside the
          scope of a function. Deployment can be affected by timers, which are provided in two
          variants: <ul>
            <li>
              <i>Retain Timers</i>: Cause all queued timers from prior versions of the function to
              fire on the latest version of the deployed function, when it is activated. Note that
              the system will define an upper bound on the maximum number of timers that can be
              accumulated in this manner. </li>
            <li>
              <i>Cleanup Timers</i>: Cause all timers created by prior function-versions to be
              deleted: only timers created after deployment of the current function-version will be
              honored.</li>
          </ul></li>
      </ul>
    </section>
    <section id="section_rjd_5pc_ndb">
      <title> Undeploy </title>
      <p> This operation causes the function to stop processing events of all types, and shuts down
        the worker-processes associated with the function. It releases any runtime resources
        acquired by the function. Functions in undeployed state allow code to be edited. An
        undeployed function retains memory of its prior deployment where necessary. Newly created
        handlers start in undeployed state. </p>
    </section>
    <section id="section_epk_5xc_ndb">
      <title> Delete</title>
      <p>When a function is deleted, the source code implementing the function, all timers, all
        processing checkpoints, and other artifacts in the metadata provider are purged. When
        successively deployed functions are identically named, the subsequent, deployed function has
        no relation to the prior, deleted function. Only undeployed functions can be deleted. </p>
    </section>
    <section id="section_wsy_wxc_ndb">
      <title> Debug</title>
      <p> Debug is a special flag on a function: it causes the next event-instance received by the
        function to be trapped and sent to a separate v8 worker with debugging enabled. The debug
        worker pauses the trapped event-processing, opens an ephemeral TCP port, and generates a
        Chrome devtools URL, with a session cookie that can be used to control the debug worker. All
        other events except the trapped event-instance continue unencumbered. If the debugged
        event-instance completes execution, no further event-instance is trapped for debugging until
        the user elects to ‘Stop Debugging’; and opens a new debugging session, by clicking on the
        ‘Debug’ button. Note that debugging is a convenience-feature intended to help during
        function-development: it is not designed to be used on production environments. Moreover,
        the Couchbase Server 5.5 integration of the v8 debugger is a Developer Preview feature only:
        it does not provide correctness or functionality guarantees. </p>
    </section>
  </body>
</topic>
