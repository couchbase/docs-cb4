<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="eventing_function_export">
  
  <title>
    Function Export
  </title>
  
  <shortdesc>
    An Eventing <i>function</i> can be exported, as a JSON document.
  </shortdesc>
  
  <body>
    
    <section>
      
      <title id="eventing_function_export">
        How to Export a Function
      </title>
      
      <p>
        An Eventing function can be exported, as a JSON document. This is achieved with the <uicontrol>Export</uicontrol>
        button, provided on the row for the defined function, on the <b>Eventing</b> screen. For example:
      </p>
      
      <p>
        <image href="./images/functionAddedWithControls.png" id="function_added_with_controls_two" align="left" width="500"/>
      </p>
      
    </section>
    
    <section>
      
      <title>
        Sample Export Appearance
      </title>
      
      <p>
        When the button is left-clicked on, the function is downloaded to the current user's system. The function
        <codeph>enrich_ip_nums</codeph> is defined and demonstrated in
        <xref href="./eventing-examples.dita" scope="local" format="dita">Examples</xref>. The downloaded JSON
        file appears as follows:
      </p>
      
      <codeblock outputclass="language-javascript">{
  "appname":"enrich_ip_nums",
  "id":0,
  "depcfg":{
    "buckets":[
      {
        "alias":"tgt",
        "bucket_name":"target"
      }
    ],
    "metadata_bucket":"metadata",
    "source_bucket":"source"
  },
  "appcode":"function OnUpdate(doc, meta) {\n  log('document', doc);\n  doc[\"ip_num_start\"] = get_numip_first_3_octets(doc[\"ip_start\"]);\n  doc[\"ip_num_end\"]   = get_numip_first_3_octets(doc[\"ip_end\"]);\n  tgt[meta.id]=doc;\n}\n\nfunction get_numip_first_3_octets(ip)\n{\n  \n  var return_val = 0;\n  if (ip)\n  {\n    var parts = ip.split('.');\n\n    //IP Number = A x (256*256*256) + B x (256*256) + C x 256 + D \n    return_val = (parts[0]*(256*256*256)) + (parts[1]*(256*256)) + (parts[2]*256) + parseInt(parts[3]);\n    return return_val;\n  }\n}\n\n",
  "settings":{
    "app_log_max_files":10,
    "app_log_max_size":10485760,
    "breakpad_on":true,
    "checkpoint_interval":10000,
    "cleanup_timers":false,
    "cpp_worker_thread_count":2,
    "curl_timeout":500,
    "dcp_stream_boundary":"everything",
    "deadline_timeout":3,
    "deployment_status":false,
    "description":"Enrich a document, converts IP Strings to Integers that are stored in new attributes.",
    "enable_recursive_mutation":false,
    "execution_timeout":1,
    "fuzz_offset":0,
    "lcb_inst_capacity":5,
    "log_level":"TRACE",
    "processing_status":false,
    "skip_timer_threshold":86400,
    "sock_batch_size":100,
    "tick_duration":60000,
    "timer_processing_tick_interval":500,
    "vb_ownership_giveup_routine_count":3,
    "vb_ownership_takeover_routine_count":3,
    "worker_count":3,
    "worker_queue_cap":100000,
    "xattr_doc_timer_entry_prune_threshold":100
  }
}</codeblock>

    </section>

  </body>
</topic>
