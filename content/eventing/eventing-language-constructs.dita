<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="eventing_language_constructs">
  
  <title>
    Language Constructs
  </title>
  
  <shortdesc> The Eventing service is implemented in JavaScript. Some constructs have been removed,
    others added. </shortdesc>
  
  <body>
    
    <section>
      
      <title>
        Language Constructs Overview
      </title>
      
      <p> The Eventing service is implemented in JavaScript. In general, functions inherit support
        for most ECMAScript constructs by using Google v8 as the execution container. However, to
        support the ability to shard and scale function-execution automatically, some capabilities
        have been removed. Additionally, to optimize language-utilization of the server environment,
        some new constructs have been added. </p>
      
    </section>
    
    <section>
      
      <title>
        Removed Language Features
      </title>
      
      <p>
        The following JavaScript features have been removed.
      </p>
      
      <ul>
        
        <li>
          <p>
            <i>Global State</i>: Functions do not allow global variables. All state must be saved and 
            retrieved from persistence providers. In Couchbase Server 5.5, the only available persistence 
            provider is the KV provider: therefore, all global state is contained in the KV bucket(s) made 
            available to the function via bindings. This restriction is necessary in order to enable 
            function-logic to remain agnostic of rebalance.
          </p>
          
          <codeblock outputclass="language-javascript">var count = 0;                         // Not allowed - global variable.
function OnUpdate(doc, meta) {
  count++;
}</codeblock>
        </li>
        
        <li>
          <p>
            <i>Asynchrony</i>: Asynchrony &#8212; and in particular, 
            asynchronous callback  &#8212; can and often must retain access to 
            parent scope to be useful. This forms a node-specific, long-running 
            state that prevents the capture of entire long-running state in 
            persistence providers. Therefore, function handlers are restricted to 
            running as short-running, straight-line code, without sleeps and wakeups. 
            Limited asynchrony is added back via time observers (these are designed, 
            however, not to make the state node-specific).
          </p>
          
          <codeblock outputclass="language-javascript">function OnUpdate(doc, meta) {
  setTimeout(function(){}, 300);     // Not allowed - asynchronous flow.
}</codeblock>
          
        </li>
        
        <li>
          <p>
            <i>Browser and other Extensions</i>: As functions do not execute in context 
            of a browser, the extensions browsers add to the core language, such as 
            window methods and DOM events, are not available. A limited subset is added 
            back (such as Function Timers in lieu of setTimeout, and curl calls instead 
            of XHR).
          </p>
          
          <codeblock outputclass="language-javascript">function OnUpdate(doc, meta) {
  var rpc = window.XMLHttpRequest();  // Not allowed - browser extension.
}</codeblock>
        </li>
       
      </ul>
    </section>
    
    <section>
      
      <title>
        Added Language Features
      </title>
      
      <p>
        The following constructs have been added.
      </p>
      
      <ul>
          <li>
            <p>
              <i>Bucket Accessors</i>: Couchbase buckets, when bound to a function, appear
              as a global JavaScript map. Map get, set and delete are mapped to KV get, set,
              and delete respectively. Other advanced KV operations are available as member 
              functions on the map object.
              
            </p>
            
            <codeblock outputclass="language-javascript">function OnUpdate(doc, meta) {
  // Assuming 'dest' is a bucket alias binding
  var val = dest[meta.id];         // this is a bucket GET operation.
  dest[meta.id] = {"status":3};    // this is a bucket SET operation.
  delete dest[meta.id];            // this is a bucket DEL operation.
}</codeblock>
          </li>
        
          <li>
            <p>
              <i>N1QL</i>: Top level N1QL keywords, such as <codeph>SELECT</codeph>, 
              <codeph>UPDATE</codeph>, and 
              <codeph>INSERT</codeph>, are 
              available as keywords in functions. Operations that return values are 
              accessible through a special iterator on which the 
              <codeph>for (var &lt;row&gt; of &lt;iterator&gt;)</codeph>
              looping-construct has been defined. This restricted looping-construct allows 
              support of query-result streaming, and automatic query-cancellation when the 
              iterator goes out of scope. Any variable that is reachable from the scope of 
              the N1QL query can be referred to using 
              <codeph>$&lt;variable&gt;</codeph> syntax in the N1QL 
              statement, where parameters will be substituted according to the rules 
              of named-parameter substitution in the N1QL grammar specification.
            </p>
            
            <p>
              The iterator is an input iterator (elements are read-only). The keyword 
              <codeph>this</codeph> cannot be used in the body of the iterator. The variables created 
              inside the iterator are local to the iterator.
            </p>
            
            <codeblock outputclass="language-javascript">function OnUpdate(doc, meta) {
  var strong = 70;
  var stmt =
    SELECT *                  // N1QL queries are embedded directly.
    FROM `beer-samples`       // Token escaping is standard N1QL style.
    WHERE abv > $strong;      // Local variable reference using $ syntax.
  for (var beer of stmt) {  // Stream results using 'for' iterator.
    break;                   // Cancel streaming query by breaking out.
  }
}</codeblock>
          
          </li>
        
        
          <li>
            <p>
              <i>Timers</i>: Functions can register to observe wall-clock time-events. Such 
              events can occur either standalone, or in reference to a specific document. 
              Timers are sharded across eventing nodes, and so are scalable. For this 
              reason, there is no guarantee either that a timer will fire on the same 
              node on which it was registered, or that ordering between any two timers will 
              be maintained. Timers only guarantee to fire at or after the specified time. 
              Timers allow an opaque value to be provided, which is made available to the 
              callback when the timer fires. Opaque values are serialized and deserialized, and 
              hence are passed by value, and must be smaller than system-defined limits.
            </p>
            
            <ul>
              <li>
                <p>
                  <i>Cron Timers</i>: Cron timers allow a function-handler to be called 
                  at a specific time. The opaque value stored when the timer is created 
                  forms the context for the timer-callback.
                </p>
                
                <codeblock outputclass="language-javascript">function checkProblems(ctx) {
  var stmt = SELECT * from inventory WHERE type = $ctx.type;
  for (var item of stmt) {
    if (item.stock &lt; 0) {
      log("Invalid stock status for " + item);
  }
}

function OnUpdate(item, meta) {
  if (item.stock &lt; 0) {
    cronTimer(checkProblems, {"type": item.type}, "1m");
  }
}</codeblock>
                
              </li>
              
              <li>                
                <p>
                  <i>Doc Timers</i>: A doc timer is similar to a cron timer, except that the 
                  timer is associated with a document. Hence, doc timers follow the 
                  lifecycle of the document, including rollbacks. Doc timer callbacks 
                  receive the document key and also the opaque value setup during timer 
                  creation.
                </p>
                
                <codeblock outputclass="language-javascript">function monitorRefill(key) {
  var item = orders[key];
  if (item.stock === 0) {
    log("Possible refill problem for " + item)
  }
}

function OnUpdate(doc, meta) {
  if (doc.stock === 0) {
    docTimer(monitorRefill, meta.id, "24h");
  }
}</codeblock>
                
              </li>

            </ul>
          </li>

      </ul>
      
      
    </section>
    
    <section>
      
      <title>
        Handler Signatures
      </title>
      
      <p> The Eventing service makes the following event-handlers available. </p>
      
      <ul>
        
        <li>
          <i>Insert/Update Handler</i>: Gets called when a document is created or modified. The
          following limitations exist: <ul>
            <li> If a document is modified several times in a short duration, the calls may be
              coalesced into a single event, due to deduplication. </li>
            <li> It is not possible to distinguish Create from Update
              operations.</li>
          </ul><codeblock outputclass="language-javascript">function OnUpdate(doc, meta) {

  if (doc.type === 'order' &amp;&amp; doc.value > 5000) {

    //‘phonverify’ is a bucket alias that is specified as a binding.

    phoneverify[meta.id] = doc.customer;
  }
}</codeblock></li>
        
        <li>
          <i>Delete Handler</i>: Gets called when a document is deleted. The following limitations
          exist: <ul>
            <li> It is not possible to distinguish Expiration from Delete operations. </li>
            <li> It is not possible to get the value of the document that either was just deleted or
              expired. </li>
          </ul><codeblock outputclass="language-javascript">function OnDelete(meta) {
  var stmt = SELECT id from orders WHERE shipaddr = $meta.id;
    for (var id of stmt) {
      log("Address invalidated for pending order: " + id);
  }
  }</codeblock>
        </li>

        
      </ul>
    </section>
   
  </body>
</topic>
