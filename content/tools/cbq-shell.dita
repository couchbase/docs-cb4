<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_bzd_zwr_w5">
  <title>Advanced Command Line Query Tool - cbq</title>
  <shortdesc><codeph>cbq</codeph> is a comprehensive command line shell for N1QL that enables you to develop and execute queries. It supports scripting and encryption for client-server communication, and provides connection, query, and session management.</shortdesc>
  <body><p>The set of shell commands can be grouped into the following categories: <xref
        href="#topic_bzd_zwr_w5/cbq-connection-mgmt" format="dita">Connection Management</xref>,
        <xref href="#topic_bzd_zwr_w5/cbq-session-mgmt" format="dita">Security Management</xref>,
        <xref href="#topic_bzd_zwr_w5/cbq-session-mgmt" format="dita">Session Management</xref>,
        <xref href="#topic_bzd_zwr_w5/cbq-query-mgmt" format="dita">Query Management</xref>, <xref
        href="#topic_bzd_zwr_w5/cbq-server-shell-info" format="dita">Shell and Server
        Information</xref>, and <xref href="#topic_bzd_zwr_w5/cbq-scripting-support" format="dita"
        >Scripting Support</xref>.</p>
    <section id="cbq-connection-mgmt"><title>Connection Management</title>
      <p>These commands help manage the connection between the cbq shell and the query service or Couchbase cluster endpoint. </p><dl>
        <dlentry>
          <dt>Managing Connections to the Cluster or Query Node</dt>
          <dd>You can connect the cbq shell to Couchbase Server either through the query service or through the cluster endpoint. There are two ways to establish a connection: <ul>
            <li>Using an option on startup: <codeblock>-e &lt;<varname>url to query engine or Couchbase cluster</varname>&gt;
              --engine=&lt;<varname>url to query engine or Couchbase cluster</varname>&gt;</codeblock></li>
            <li>Using a shell command: <codeblock>cbq> \CONNECT &lt;<varname>url</varname>&gt;</codeblock></li>
          </ul>
            <p>The &lt;<varname>url</varname>&gt; is made up of two components: the URL and a port number. The URL can be any valid IP address or URL. The URL is optional and if it is not specified, the default URL <codeph>http://localhost:8091</codeph> is used. An error is thrown if the URL is invalid. </p> <p>When connecting to the query service, use the query port 8093.<draft-comment author="amarantha"> Is the port 9499 exposed to the users? </draft-comment> When connecting to the cluster endpoint, use the admin port 8091 or 9000 depending on whether you are using a Couchbase Server build or a cluster run instance. </p>
            <p>When using the shell command, if the shell is already connected to an endpoint, it is disconnected from that endpoint and connected to the specified endpoint. </p><p>You can close the connection with an existing node or cluster without exiting the shell at any given time during the session using the <cmdname>\DISCONNECT;</cmdname> command. If the shell is not connected to any endpoint, an error with a message that the shell is not connected to any instance is thrown. </p> <codeblock spectitle="Examples"></codeblock></dd>
        </dlentry> 
        <dlentry>
          <dt>Bringing Up an Unconnected Instance</dt>
          <dd></dd>
        </dlentry>
        <dlentry>
          <dt>Exiting the cbq Shell</dt>
          <dd></dd>
        </dlentry>
      </dl>
    </section>
    <section id="cbq-session-mgmt"><title>Session Management</title>
      
    </section>
    
    <section id="cbq-query-mgmt"><title>Query Management</title>
      
    </section>
    <section id="cbq-server-shell-info"><title>Server and Shell Information</title>
      <p>Cbq provides commands that convey information about the shell or cluster endpoints. </p>
      <dl>
        <dlentry>
          <dt>Version</dt>
          <dd>You can find the version of the client (shell) by using either the command line option to display the current version of the shell and exit, or as a shell command to print the version of the shell during the shell session. <codeblock spectitle="Example Using the Command-line Option">./cbq -v
SHELL VERSION : 1.0           
$ ./cbq --version
SHELL VERSION : 1.0
</codeblock>
<codeblock spectitle="Example Using the Shell Command">
  cbq> \VERSION;
  SHELL VERSION : 1.0 </codeblock>
<p>To display the version of the query service, use the N1QL commands <codeph>SELECT version();</codeph> and <codeph>SELECT min_version();</codeph>. </p></dd>
        </dlentry>
        <dlentry>
          <dt>Help</dt>
          <dd>Help displays the help information for the shell commands and for the general usage of cbq. Use the help option when bringing up the shell to display the information for all available options: <codeblock>$ ./cbq -h
          $ ./cbq --help</codeblock>
Use the \HELP shell command during a session to display information for specific shell commands. If you specify one or more commands, the shell displays the usage information for the commands.<codeblock>cbq> \HELP <varname>command-name</varname></codeblock> If you do not specify a command, the cbq shell lists all the commands for which syntax help is available. <codeblock>cbq> \HELP;</codeblock> </dd>
        </dlentry>
        <dlentry>
          <dt>Copyright</dt>
          <dd>You can view the copyright, attributions, and distribution terms of the command line query tool using the <codeph>\COPYRIGHT;</codeph> command. </dd>
        </dlentry>
        <dlentry>
          <dt>Shortcut Keys Used in the cbq Shell</dt>
          <dd>The following table lists the shortcut keys used in the cbq shell. <table frame="all"
              rowsep="1" colsep="1" id="table_qty_jhf_5v">
              <title>Shortcut Keys for cbq Shell</title>
              <tgroup cols="2" align="left">
                <colspec colname="c1" colnum="1" colwidth="1*"/>
                <colspec colname="c2" colnum="2" colwidth="1.97*"/>
                <thead>
                  <row>
                    <entry>Keystroke</entry>
                    <entry>Action</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>Ctrl-A, Home</entry>
                    <entry>Move cursor to beginning of line</entry>
                  </row>
                  <row>
                    <entry>Ctrl-E, End  </entry>
                    <entry>Move cursor to end of line</entry>
                  </row>
                  <row>
                    <entry>Ctrl-B, Left</entry>
                    <entry> Move cursor one character left </entry>
                  </row>
                  <row>
                    <entry>Ctrl-F, Right </entry>
                    <entry>Move cursor one character right </entry>
                  </row>
                  <row>
                    <entry>Ctrl-Left </entry>
                    <entry>Move cursor to previous word </entry>
                  </row>
                  <row>
                    <entry>Ctrl-Right </entry>
                    <entry>Move cursor to next word </entry>
                  </row>
                  <row>
                    <entry>Ctrl-D, Del     </entry>
                    <entry>(if line is not empty) Delete character under cursor </entry>
                  </row>
                  <row>
                    <entry>Ctrl-D</entry>
                    <entry>(if line is empty) End of File - usually quits application </entry>
                  </row>
                  <row>
                    <entry>Ctrl-C</entry>
                    <entry>Reset input (create new empty prompt) </entry>
                  </row>
                  <row>
                    <entry>Ctrl-L</entry>
                    <entry>Clear screen (line is unmodified) </entry>
                  </row>
                  <row>
                    <entry>Ctrl-T</entry>
                    <entry>Transpose previous character with current character</entry>
                  </row>
                  <row>
                    <entry>Ctrl-H, BackSpace   </entry>
                    <entry>Delete character before cursor </entry>
                  </row>
                  <row>
                    <entry>Ctrl-W </entry>
                    <entry>Delete word leading up to cursor</entry>
                  </row>
                  <row>
                    <entry>Ctrl-K</entry>
                    <entry>Delete from cursor to end of line </entry>
                  </row>
                  <row>
                    <entry>Ctrl-U </entry>
                    <entry>Delete from start of line to cursor</entry>
                  </row>
                  <row>
                    <entry> Ctrl-P, Up</entry>
                    <entry>Previous match from history</entry>
                  </row>
                  <row>
                    <entry>Ctrl-N, Down</entry>
                    <entry>Next match from history</entry>
                  </row>
                  <row>
                    <entry> Ctrl-R     </entry>
                    <entry>Reverse Search history (Ctrl-S forward, Ctrl-G cancel)</entry>
                  </row>
                  <row>
                    <entry>Ctrl-Y</entry>
                    <entry>Paste from Yank buffer (Alt-Y to paste next yank instead) </entry>
                  </row>
                  <row>
                    <entry>Tab </entry>
                    <entry>Next completion </entry>
                  </row>
                  <row>
                    <entry>Shift-Tab</entry>
                    <entry>(after Tab) Previous completion</entry>
                  </row>
                </tbody>
              </tgroup>
            </table></dd>
        </dlentry>
      </dl>
      
    </section>
    <section id="cbq-scripting-support"><title>Support for Scripting</title>
      <p>Cbq can interpret and run single and multiple shell and N1QL commands. </p>
<dl>
  <dlentry>
    <dt>Word wrap</dt>
    <dd>By default, the shell is set to multi-line mode. You can choose to disable it.
              <draft-comment author="amarantha">Using /SET multiline false?? </draft-comment></dd>
  </dlentry>
  <dlentry>
    <dt>Single Command Mode</dt>
    <dd>You can use the --script option to execute a single N1QL query and exit the shell: <codeblock>./cbq --script="select * from `travel-sample` LIMIT 1"</codeblock>
      <codeblock spectitle="Results">Connected to : http://localhost:8091/. Type Ctrl-D to exit.
        Path to stored history for the shell : /Users/amarantha/.cbq_history 
        {
        ...
        }</codeblock></dd>
  </dlentry>
  <dlentry>
    <dt>Multi-line Input</dt>
    <dd>You can enter N1QL statements and shell commands that spans multiple lines. The command prompt ">" indicates that the shell is in multiline mode. End the command by specifying the ";" at the end. <codeblock>cbq> select *
      > from `travel-sample`
      > LIMIT 1;</codeblock></dd>  
  </dlentry>
  <dlentry>
    <dt>Run Commands by Redirection and Piping</dt>
    <dd>You can use redirection and piping to run commands on the cbq shell. <codeblock>$ echo "select * from \`beer-sample\` limit 10;" | ./cbq
      …..
      $ cat file.txt | ./cbq
      …..
      $ ./cbq &lt; file.txt
      ….</codeblock></dd>
  </dlentry>
  <dlentry>
    <dt>Exit on Error</dt>
    <dd>When you specify the argument <codeph>--exit-on-error</codeph>, the cbq shell checks the result returned after executing the query for any error keys. If error keys are present, then it prompts you to decide whether to stop execution and exit, or continue after the first error is encountered. </dd>
  </dlentry>
  <dlentry>
    <dt>File Based Operations</dt>
    <dd>Using the file based commands and options, the cbq shell can execute N1QL and shell commands
            contained in files. There are two ways to accomplish this: <ul>
              <li>Using an option on startup: <codeblock>-f=<varname>input-file</varname>
        --file=<varname>input-file</varname></codeblock>
                <p>The cbq shell executes the commands present in the input file, prints them to
                  stdout (or to a file if using redirects), and exits.</p>
              </li>
              <li>Using a shell command: <codeblock>\SOURCE <varname>input-file</varname>;</codeblock>
                <p>Runs the commands present in the input file and prints the result to stdout.
                </p></li>
            </ul><p>Consider the input file, sample.txt, containing the following commands:
              <codeblock>CREATE PRIMARY INDEX on `beer-sample` USING GSI;
          SELECT * from `beer-sample` LIMIT 2;
          SELECT abv from `beer-sample` LIMIT 3;
          \HELP; </codeblock></p>
            <p>To execute the commands contained in sample.txt using the -f option, run
                <codeph>$./cbq -f=sample.txt</codeph>
              <codeblock spectitle="Results">
            Connected to : http://localhost:8091/. Type Ctrl-D to exit.
            Path to stored history for the shell : /Users/couchbase/.cbq_history 
            CREATE PRIMARY INDEX on `beer-sample` USING GSI;
            { ...
              "results": [ ],
              ...
            }
            SELECT * from `beer-sample` LIMIT 2;
            { ...
              "results": [ ],
              ...
            }
            SELECT abv from `beer-sample` LIMIT 3;
            { ...
              "results": [ ],
              ...
            }
            
            \HELP;
            Help Information for all Shell Commands
            …. 
            $</codeblock></p>
            <p>To execute the commands contained in sample.txt using the shell command, run
                <codeph>cbq> \SOURCE sample.txt;</codeph>
              <codeblock spectitle="Results">
        CREATE PRIMARY INDEX on `beer-sample` USING GSI;
        { ...
        "results": [ ],
        ...
        }
        SELECT * from `beer-sample` LIMIT 2;
        { ...
        "results": [ ],
        ...
        }
        SELECT abv from `beer-sample` LIMIT 3;
        { ...
        "results": [ ],
        ...
        }
        
        \HELP;
        Help Information for all Shell Commands
        …. 
        cbq> </codeblock></p>
            <p><b>Redirecting Results to a File</b></p>
            <p>You can redirect all the output for a session or part of a session to a specified
              file by using the following option: <codeph>-o <varname>filename</varname></codeph> or
                  <codeph>--output=<varname>filename</varname></codeph></p>
            <p>To redirect a specific set of commands during a session, you must specify the
              commands between \REDIRECT and \REDIRECT OFF as shown:
              <codeblock>cbq> \REDIRECT filename;
    command-1; command-2;, ..., command-n;
    \REDIRECT OFF;</codeblock>
              All the commands specified after <codeph>\REDIRECT</codeph> and before
                <codeph>\REDIRECT OFF</codeph> are saved into the specified output file. If the file
              doesn't exist then it is created.
              <codeblock spectitle="Example">
      cbq> \REDIRECT temp_output.txt;
      > CREATE PRIMARY INDEX on `beer-sample` USING GSI;
      > SELECT * from `beer-sample` LIMIT 1;
      > \HELP;
      > \REDIRECT OFF;
    </codeblock></p>
            You can specify multiple <codeph>\REDIRECT</codeph> filename commands. When you do so,
            the output file changes to the specified files and switches back to stdout only when you
            specify <codeph>\REDIRECT OFF</codeph>;.</dd>
  </dlentry></dl></section>
  </body>
  
</topic>
