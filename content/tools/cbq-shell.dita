<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_bzd_zwr_w5">
  <title>cbq: The Command Line Shell for N1QL</title>
  <shortdesc><cmdname>cbq</cmdname> is a comprehensive new command line shell for N1QL. It is a
    powerful, developer friendly tool that enables you to query and update data from Couchbase
    Server. The cbq shell enables you to perform all the operations that are supported by the Query
    REST API and more, such as additional scripting functionality. </shortdesc>
  <body>
    <p>The cbq shell executable, <cmdname>cbq</cmdname>, is available in your applications
      directory. For example on Mac OS, <filepath>/Applications/Couchbase
        Server.app/Contents/Resources/couchbase-core/bin</filepath>. </p>
    <p>The cbq shell interface accepts both shell commands as well as N1QL commands. All the cbq
      shell commands start with a back-slash (\). If the command does not start with a back-slash
      (\), the cbq shell interprets the command as a N1QL command. </p>
    <p>When starting the cbq shell you can provide a set of command line options. If no options are
      present then it assumes default values for expected options. <note>The cbq shell commands are
        case insensitive. However, the command line option are case sensitive. </note></p>
    <p>For the complete list of command line options and shell commands, see tables <xref
        href="#topic_bzd_zwr_w5/table_a3h_rhz_dw" format="dita"/> and <xref
        href="#topic_bzd_zwr_w5/table_htk_hgc_fw" format="dita"/>. </p>
    <p>The cbq shell enables you to manipulate parameters based on the REST API. See <xref
        href="#topic_bzd_zwr_w5/cbq-parameter-manipulation" format="dita"/> for details.</p>
    <p><b>Executing a Single Command</b></p>
    <p>You can use the <parmname>--script</parmname> option to execute a single N1QL query and exit
      the shell:
      <codeblock>./cbq --script="select \* from \`travel-sample\` LIMIT 1"</codeblock><codeblock spectitle="Results">Connected to : http://localhost:8091/. Type Ctrl-D to exit.
{
    ...
}</codeblock></p>
    <p><b>Support for Multi-line Queries</b></p>
    <p>The cbq shell supports multi-line queries by default, enabling you to enter a query over
      multiple lines. When entering a query, you can hit Enter without specifying a semi-colon (;)
      at the end of the line to move the cursor to the next line. The prompt ">" indicates that the
      shell is in multi-line mode. For example:
      <codeblock>cbq> select * 
> from `travel-sample` 
> LIMIT 1;</codeblock> When you're done, use
      a semi-colon ";" to indicate the end of the query, and then Enter key to execute the
      query.</p>
    <p><b>Handling Comments</b></p>
    <p>You can add comments in your query by preceding the comment with a '#' or '--'. The cbq shell
      interprets a line that starts with '#' or '--' as a comment, logs the line into history, and
      returns a new prompt. No other action is taken.</p>
    <codeblock>cbq> select *
 > #This is the first comment
 > from `travel-sample`
 > --This is the second comment
 > LIMIT 1; </codeblock>
    <p>However, if a comment exists within a statement, it is considered as part of the N1QL
      command. If the cbq shell encounters a block comment (enclosed between /* ... */) within a
      statement, it sends the block comment to the query service.
      <codeblock>cbq> select * from `travel-sample` /* This statement includes a block comment */ LIMIT 1;</codeblock></p>
    <p><b>File Based Operations</b></p>
    <p>The cbq shell can execute N1QL and shell commands contained in files using file-based
      commands and options. See <xref href="#topic_bzd_zwr_w5/cbq-file-based-ops" format="dita"/>
      for more information.</p>
    <p><b>History</b></p>
    <p>The <cmdname>cbq</cmdname> shell stores the history for every session. All the
      commands executed in a session are stored in history. By default, history is stored in
      <filepath>~/.cbq_history</filepath>. You can change the name of the file using the SET
      command to set the predefined parameter <varname>HISTFILE</varname>.
      <codeblock>\SET HISTFILE <varname>filename</varname>;</codeblock> By default, all the
      commands are stored in the specified file. You can scroll through history and retrieve
      the commands from history using the scrolling arrow keys. Once the query is on the
      command prompt, you can edit it before executing the updated query. </p>
    <p><b>Exit Status</b></p>
    <p>The cbq shell returns the exit status 0 for successful exit with no errors and 1 if an
      error was encountered before exiting.</p>
    <p><b>Exit On Error</b></p>
    <p>When you specify the argument <codeph>--exit-on-error</codeph>, the cbq shell checks the
      result returned after executing the query for any error and exits when the first error is
      encountered.</p>
    <p><b>Help</b></p>
    <p>Help displays the help information for the shell commands and for the general usage of cbq.
      Use the help option when bringing up the shell to display the information for all available
      options: <codeblock>$ ./cbq -h
$ ./cbq --help</codeblock> Use the <cmdname>\HELP</cmdname>
      shell command during a session to display information for specific shell commands. If you
      specify one or more commands, the shell displays the usage information for the specified
      commands.<codeblock>cbq> \HELP <varname>command-name</varname>;</codeblock> If you do not
      specify a command, the cbq shell lists all the commands for which syntax help is available.
      <codeblock>cbq> \HELP;</codeblock></p> 
    <section><title>Available Command Line Options and Shell Commands</title>
    <table frame="all" rowsep="1" colsep="1" id="table_a3h_rhz_dw">
        <title>Command Line Options for cbq Shell</title>
        <tgroup cols="4" align="left">
          <colspec colname="c1" colnum="1" colwidth="1*"/>
          <colspec colname="c2" colnum="2" colwidth="1*"/>
          <colspec colname="c3" colnum="3" colwidth="1*"/>
          <colspec colname="c4" colnum="4" colwidth="5*"/>
          <thead>
            <row>
              <entry>Option</entry>
              <entry>Arguments</entry>
              <entry>Default Value</entry>
              <entry>Description and Examples</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><codeph>-e</codeph><p><codeph>--engine</codeph></p></entry>
              <entry>&lt;<varname>url</varname>></entry>
              <entry>
                <codeph>http://localhost:8091</codeph>
              </entry>
              <entry>The connection string consists of a protocol scheme followed by a host,
                including a port number to connect to the query service (8093) or the Couchbase
                cluster (8091).<p>The cbq shell supports <filepath>http://</filepath>,
                    <filepath>https://</filepath>, <filepath>couchbase://</filepath> and
                    <filepath>couchbases://</filepath> protocol schemes. When using the
                    <filepath>couchbase://</filepath> or <filepath>couchbases://</filepath> protocol
                  schemes, you need not specify the port when connecting to the Couchbase cluster.
                  </p><p>The cbq shell supports both IPV4 and IPV6 addresses.</p><p>Shell command:
                    <xref href="#topic_bzd_zwr_w5/cbq-connect" format="dita"
                    >\CONNECT</xref></p><p><b>Examples</b></p><codeblock>$ ./cbq -e couchbase://localhost</codeblock><p>
                  <codeblock>$ ./cbq --engine http://localhost:8091</codeblock>
                  <codeblock>$ ./cbq -e http://localhost:8091</codeblock>
                  <codeblock>$ ./cbq -e http://[fd63:6f75:6368:1075:816:3c1d:789b:bc4]:8091</codeblock>
                  <codeblock spectitle="Result">Connected to : http://localhost:8091/. Type Ctrl-D or \QUIT to exit.
Path to history file for the shell : /Users/myuser1/.cbq_history 
cbq> </codeblock>
                </p></entry>
            </row>
            <row>
              <entry><codeph>-ne</codeph><p><codeph>--no-engine</codeph></p></entry>
              <entry>None</entry>
              <entry>false</entry>
              <entry>The cbq shell does not connect to any query service. You must explicitly
                connect to a query service using the <cmdname>\CONNECT</cmdname> shell
                    command.<p><b>Examples</b></p><codeblock>$ ./cbq --no-engine</codeblock></entry>
            </row>
            <row>
              <entry><codeph>-q</codeph><p><codeph>--quiet</codeph></p></entry>
              <entry>None</entry>
              <entry>false</entry>
              <entry>Enables or disables the startup connection message for the cbq
                    shell.<p><b>Examples</b></p><codeblock>$ ./cbq -q -e http://localhost:8091</codeblock>
                <codeblock spectitle="Result"> cbq> </codeblock>
              </entry>
            </row>
            <row>
              <entry><codeph>-b</codeph><p><codeph>--batch</codeph></p></entry>
              <entry>None</entry>
              <entry>None</entry>
              <entry>This option is available only with Analytics service. When invoked with the
                batch option, cbq sends the queries to server only when you hit EOF or \ to indicate
                the end of the batch input. <codeblock>$ ./cbq --batch</codeblock><p>You can also
                  set the batch mode in the interactive session using the following commands:
                  <codeblock>\set batch on 
\set batch off</codeblock></p></entry>
            </row>
            <row>
              <entry><codeph>-t</codeph><p><codeph>--timeout</codeph></p></entry>
              <entry><varname>value</varname></entry>
              <entry>None</entry>
              <entry>Sets the query timeout
                parameter.<p><b>Examples</b></p><codeblock>$ ./cbq -e http://localhost:8091 --timeout="1s"</codeblock>
              </entry>
            </row>
            <row>
              <entry><codeph>-u</codeph><p><codeph>--user</codeph></p></entry>
              <entry><varname>username</varname></entry>
              <entry>None</entry>
              <entry>Specifies a single user name to log in to Couchbase. When used by itself,
                without the -p option to specify the password, you will be prompted for the
                password. <p>This option requires administration credentials and you cannot switch
                  the credentials during a session.</p><p>Couchbase recommends using the
                    <codeph>-u</codeph> and <codeph>-p</codeph> option if your password contains
                  special characters such as #, $, %, &amp;, (,), or '.
                </p><p><b>Examples</b></p><codeblock>$ ./cbq -e http://localhost:8091 -u=Administrator
                    Enter Password: </codeblock></entry>
            </row>
            <row>
              <entry><codeph>-p</codeph><p><codeph>--password</codeph></p></entry>
              <entry><varname>password</varname></entry>
              <entry>None</entry>
              <entry>Specifies the password for the given user name. You cannot use this option by
                itself. It must be used with the -u option to specify the user name. <p>This option
                  requires administration credentials and you cannot switch the credentials during a
                  session.</p><p>Couchbase recommends using the <codeph>-u</codeph> and
                    <codeph>-p</codeph> option if your password contains special characters such as
                  #, $, %, &amp;, (,), or '.
                </p><p><b>Examples</b></p><codeblock>$ ./cbq -e http://localhost:8091 -u=Administrator -p=password</codeblock></entry>
            </row>
            <row>
              <entry><codeph>-c</codeph><p><codeph>--credentials</codeph></p></entry>
              <entry><varname>list of credentials</varname></entry>
              <entry>None</entry>
              <entry>Specify the login credentials in the form of
                  <varname>username</varname>:<varname>password</varname>. You can specify
                credentials for different buckets by separating them with a comma.<p>Shell command:
                    <xref href="#topic_bzd_zwr_w5/cbq-set" format="dita">\SET</xref>
                  <codeph>-creds</codeph>
                </p><p>REST API: <codeph>-creds</codeph>
                parameter</p><p><b>Examples</b></p><codeblock>$ ./cbq -e http://localhost:8091 -c=beer-sample:password,Administrator:password</codeblock></entry>
            </row>
            <row>
              <entry><codeph>-v</codeph>
                <p><codeph> --version</codeph></p></entry>
              <entry>None</entry>
              <entry>false</entry>
              <entry>Provides the version of the cbq shell. To display the query engine version of
                Couchbase Server (this is not the same as the version of Couchbase Server itself),
                use one of the following N1QL queries:
                    <codeblock>select version();</codeblock><codeblock>select min_version();</codeblock><p><b>Examples</b></p><codeblock>$ ./cbq --version</codeblock>
                <codeblock spectitle="Result"> SHELL VERSION  : 1.5
                
                Use N1QL queries select version(); 
                or select min_version(); to display server version.</codeblock></entry>
            </row>
            <row>
              <entry><codeph>-h</codeph><p><codeph>--help</codeph></p></entry>
              <entry>None </entry>
              <entry>None</entry>
              <entry>Provides help for the command line options.<p>Shell command: <xref
                    href="#topic_bzd_zwr_w5/cbq-help" format="dita"
                    >\HELP</xref></p><p><b>Examples</b></p><codeblock>$ ./cbq --help</codeblock></entry>
            </row>
            <row>
              <entry><codeph>-s</codeph><p><codeph>-script</codeph></p></entry>
              <entry><varname>query</varname></entry>
              <entry>None</entry>
              <entry>Provides a single command mode to execute a query from the command line. <p>You
                  can also use multiple "-s" options on the command line.  If one of the commands is
                  incorrect, an error is displayed for that command and cbq continues to execute the
                  remaining commands.
                </p><p><b>Examples</b></p><codeblock>$ ./cbq -s="select * from \`travel-sample\` limit 1"

$ ./cbq  -s="\SET v 1" -s="\SET b 2" -s="\PUSH b3" -s="\SET b 5" -s="\SET"  -ne
 Path to history file for the shell : /Users/isha/.cbq_history 
 \PUSH b3
 ERROR 139 : Too few input arguments to command. 
 Query Parameters : 
 Named Parameters : 
 User Defined Session Parameters : 
 Predefined Session Parameters : 
 Parameter name : v
 Value : [1]
 Parameter name : b
 Value : [5]
 Parameter name : histfile
 Value : [".cbq_history"]
 Parameter name : batch
 Value : ["off"]</codeblock></entry>
            </row>
            <row>
              <entry><codeph>-f</codeph><p><codeph>--file</codeph></p></entry>
              <entry><varname>input-file</varname></entry>
              <entry>None</entry>
              <entry>Provides an input file which contains all the commands to be run. <p>Shell
                  command: <xref href="#topic_bzd_zwr_w5/cbq-source" format="dita"
                  >\SOURCE</xref></p><codeblock>$ ./cbq --file="sample.txt"</codeblock></entry>
            </row>
            <row>
              <entry><codeph>-o</codeph><p><codeph>--output</codeph></p></entry>
              <entry><varname>output-file</varname></entry>
              <entry>None</entry>
              <entry>Specifies an output file where the commands and their results are to be
                  written.<p>Shell command: <xref href="#topic_bzd_zwr_w5/cbq-redirect"
                    format="dita"
                >\REDIRECT</xref></p><p><b>Examples</b></p><codeblock>$ ./cbq -o="results.txt" -s="select * from `travel-sample` limit 1"</codeblock></entry>
            </row>
            <row>
              <entry><codeph>--exit-on-error</codeph></entry>
              <entry>None</entry>
              <entry>false</entry>
              <entry>Specifies that the cbq shell must exit when it encounters the first
                    error.<p><b>Examples</b></p><codeblock>$ ./cbq --exit-on-error -f="sample.txt"</codeblock></entry>
            </row>
            <row>
              <entry><codeph>--no-ssl-verify</codeph> or<p><codeph>-skip-verify</codeph></p></entry>
              <entry>None</entry>
              <entry>false</entry>
              <entry>Specifies that cbq shell can skip the verification of certificates. <p>The
                  default ports are 18091 and 18093. You need not specify the port when connecting
                  to the
                cluster.</p><p><b>Examples</b></p><codeblock>$ ./cbq --no-ssl-verify -f="sample.txt"
$ ./cbq -skip-verify https://127.0.0.1:18091</codeblock></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    <table frame="all" rowsep="1" colsep="1" id="table_htk_hgc_fw">
      <title>cbq Shell Commands</title>
        <tgroup cols="3" align="left">
          <colspec colname="c1" colnum="1" colwidth="1.0*"/>
          <colspec colname="c2" colnum="2" colwidth="2.0*"/>
          <colspec colname="c3" colnum="3" colwidth="4*"/>
          <thead>
            <row>
              <entry>Shell Command</entry>
              <entry>Arguments</entry>
              <entry>Description and Examples</entry>
            </row>
          </thead>
          <tbody>
            <row id="cbq-connect">
              <entry><cmdname>\CONNECT</cmdname></entry>
              <entry><varname>url</varname></entry>
              <entry>Connects cbq shell to the specified query engine or Couchbase cluster. <p>The
                  connection string consists of a protocol scheme followed by a host, including a
                  port number to connect to the query service (8093) or the Couchbase cluster
                  (8091).</p><p>The cbq shell supports <filepath>http://</filepath>,
                    <filepath>https://</filepath>, <filepath>couchbase://</filepath> and
                    <filepath>couchbases://</filepath> protocol schemes. When using the
                    <filepath>couchbase://</filepath> or <filepath>couchbases://</filepath> protocol
                  schemes, you need not specify the port when connecting to the Couchbase cluster.
                  </p><p>The cbq shell supports both IPV4 and IPV6 addresses.</p><p>Command Line
                  Option: <codeph>-e</codeph> or
                <codeph>--engine</codeph></p><p><b>Examples</b></p><codeblock>cbq> \CONNECT http://localhost:8093;</codeblock><codeblock>cbq> \CONNECT http://[fd63:6f75:6368:1075:816:3c1d:789b:bc4]:8091</codeblock></entry>
            </row>
            <row id="cbq-disconnect">
              <entry><cmdname>\DISCONNECT</cmdname></entry>
              <entry>None</entry>
              <entry>Disconnects the cbq shell from the query service or cluster endpoint.
                    <p><b>Example</b></p><codeblock>cbq> \DISCONNECT;

 Couchbase query shell not connected to any endpoint. 
 Use \CONNECT command to connect.</codeblock></entry>
            </row>
            <row id="cbq-exit">
              <entry><cmdname>\EXIT</cmdname><p><cmdname>\QUIT</cmdname></p></entry>
              <entry>None</entry>
              <entry>Exits cbq
                shell.<p><b>Examples</b></p><codeblock>cbq> \EXIT;</codeblock><codeblock>cbq> \QUIT;</codeblock></entry>
            </row>
            <row id="cbq-set">
              <entry><cmdname>\SET</cmdname></entry>
              <entry><varname>parameter</varname>
                <varname>value</varname><p><varname>parameter</varname>=<varname>prefix</varname>:<varname>variable
                    name</varname></p></entry>
              <entry>Sets the top most value of the stack for the given variable with the specified
                  value.<p>Variables can be of the following types: <ul id="ul_crw_cjc_fw">
                    <li>Query parameters</li>
                    <li>Session variables</li>
                    <li>User-defined</li>
                    <li>Pre-defined and named parameters.</li>
                  </ul></p><p>When the <cmdname>\SET</cmdname> command is used without any
                  arguments, it displays the values for all the parameters of the current
                  session.</p><p><b>Examples</b></p><codeblock>cbq> \SET -args [5, "12-14-1987"];</codeblock><codeblock>cbq> \SET -args [6,7];</codeblock></entry>
            </row>
            <row id="cbq-push">
              <entry><cmdname>\PUSH</cmdname></entry>
              <entry><varname>parameter value</varname></entry>
              <entry>Pushes the specified value on to the given parameter stack. <p>When the
                    <cmdname>\PUSH</cmdname> command is used without any arguments, it copies the
                  top element of every variable's stack, and then pushes that copy to the top of the
                  respective variable's stack. </p><p>While each variable stack grows by 1, the
                  previous values are preserved.
                </p><p><b>Examples</b></p><codeblock>cbq> \PUSH -args  [8];</codeblock><codeblock>cbq> \PUSH;</codeblock><codeblock spectitle="Resulting variable stack">cbq> \SET;
 Query Parameters : 
 Parameter name : args
 Value : [[6,7] [8] [8]]
...
cbq></codeblock>
              </entry>
            </row>
            <row id="cbq-unset">
              <entry><cmdname>\UNSET</cmdname></entry>
              <entry><varname>parameter</varname></entry>
              <entry>Deletes or resets the entire stack for the specified parameter.
                    <p><b>Examples</b></p><codeblock>cbq> \UNSET -args;</codeblock><codeblock>cbq> \SET;
 Query Parameters : 
 ...
cbq></codeblock></entry>
            </row>
            <row id="cbq-pop">
              <entry><cmdname>\POP</cmdname></entry>
              <entry><varname>parameter</varname></entry>
              <entry>Pops the top most value from the specified parameter's stack.<p>When the
                    <cmdname>\POP</cmdname> command is used without any arguments, it pops the top
                  most value of every variable's
                stack.</p><p><b>Examples</b></p><codeblock>\POP -args;</codeblock><codeblock>cbq> \SET;
 Query Parameters : 
 Parameter name : args
 Value : [[6,7] [8]]</codeblock></entry>
            </row>
            <row id="cbq-alias">
              <entry><cmdname>\ALIAS</cmdname></entry>
              <entry><varname>shell-command</varname> or <varname>n1ql-statement</varname></entry>
              <entry>Creates a command alias for the specified cbq shell command or N1QL statement.
                You can then execute the alias using
                  <codeph>\\<varname>alias-name</varname>;</codeph>.<p>When the
                    <cmdname>\ALIAS</cmdname> command is used without any arguments, it lists all
                  the available
                aliases.</p><p><b>Examples</b></p><codeblock>cbq> \ALIAS travel-limit1 select * from `travel-sample` limit 1;</codeblock><codeblock>cbq> \ALIAS;
serverversion  select version()
travel-limit1  select * from `travel-sample` limit 1
cbq></codeblock><codeblock>cbq> \\serverversion;
{
    "requestID": "21b0efdb-b1ec-44bc-adab-071831792c03",
    "signature": {
        "$1": "string"
    },
    "results": [
        {
            "$1": "1.5.0"
        }
    ],
    "status": "success",
    "metrics": {
        "elapsedTime": "4.03243ms",
        "executionTime": "4.001382ms",
        "resultCount": 1,
        "resultSize": 37
    }
}</codeblock></entry>
            </row>
            <row id="cbq-unalias">
              <entry><cmdname>\UNALIAS</cmdname></entry>
              <entry><varname>alias-name</varname></entry>
              <entry>Deletes the specified alias.
                <p><b>Examples</b></p><codeblock>cbq> \UNALIAS travel-limit1;</codeblock><codeblock>cbq> \ALIAS;
serverversion  select version()
cbq></codeblock></entry>
            </row>
            <row id="cbq-echo">
              <entry><cmdname>\ECHO</cmdname></entry>
              <entry><varname>args</varname><p>where <varname>args</varname> can be parameters,
                  aliases, or any input.</p></entry>
              <entry>If the input is a parameter, this command echoes (displays) the value of the
                parameter. The parameter must be prefixed according to it's type. See <xref
                  href="#topic_bzd_zwr_w5/table_ltk_c5s_5v" format="dita"/> for details.<p>If the
                  input is not a parameter, the command echoes the statement as is. </p><p>If the
                  input is an alias, the command displays the value of an alias command.
                    </p><p><b>Examples</b></p><codeblock>cbq> \ECHO -$r;</codeblock><codeblock>cbq> \ECHO \\serverversion;
select version() </codeblock></entry>
            </row>
            <row id="cbq-version">
              <entry><cmdname>\VERSION</cmdname></entry>
              <entry>None</entry>
              <entry>Displays the version of the client
                shell.<p><b>Example</b></p><codeblock>cbq> \VERSION;
 SHELL VERSION  : 1.5</codeblock></entry>
            </row>
            <row id="cbq-help">
              <entry><cmdname>\HELP</cmdname></entry>
              <entry><varname>command</varname></entry>
              <entry>Displays the help information for the specified command. When used without any
                arguments, it lists all the commands supported by the cbq
                  shell.<p><b>Example</b></p><codeblock>cbq> \HELP ECHO;
\ECHO args ...
Echo the input value. args can be a name (a prefixed-parameter), an alias (command alias) or 
a value (any input statement).
Example : 
\ECHO -$r ;
\ECHO \\tempalias;</codeblock></entry>
            </row>
            <row id="cbq-copyright">
              <entry><cmdname>\COPYRIGHT</cmdname></entry>
              <entry>None</entry>
              <entry>Displays the copyright, attributions, and distribution
                  terms.<p><b>Example</b></p><codeblock>cbq> \COPYRIGHT;</codeblock></entry>
            </row>
            <row id="cbq-source">
              <entry><cmdname>\SOURCE</cmdname></entry>
              <entry><varname>input-file</varname></entry>
              <entry>Reads and executes the commands from a file. Multiple commands in the input
                file must be separated by "; <varname>&lt;newline></varname>" <p>For example,
                  sample.txt contains the following commands:
                  <codeblock>select * from `travel-sample` limit 1;
\\ECHO this;
#This is a comment;
EOF</codeblock></p><p><b>Example</b></p><codeblock>cbq> \SOURCE sample.txt;</codeblock></entry>
            </row>
            <row id="cbq-redirect">
              <entry><cmdname>\REDIRECT</cmdname></entry>
              <entry><varname>filename</varname></entry>
              <entry>Redirects the output of all the commands to the specified file until the cbq
                shell receives the <cmdname>\REDIRECT OFF</cmdname> command. By default, the file is
                created in the <filepath>/Applications/Couchbase
                  Server.app/Contents/Resources/couchbase-core/bin</filepath> directory. You can
                specify a different location using relative
                paths.<p><b>Example</b></p><codeblock>cbq> \REDIRECT temp_out.txt;
cbq> select * from `travel-sample` limit 1;
cbq></codeblock></entry>
            </row>
            <row id="cbq-redirect-off">
              <entry><cmdname>\REDIRECT OFF</cmdname></entry>
              <entry>None</entry>
              <entry>Redirects the output of subsequent commands from a custom file to standard
                output
                (os.stdout).<p><b>Example</b></p><codeblock>cbq> \REDIRECT OFF;</codeblock></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section id="cbq-connect-to-cluster">
      <title>Connecting to the Cluster or Query Node</title>
      <p>You can connect the cbq shell to Couchbase Server either through the query service or
        through the cluster endpoint. There are two ways to establish a connection: <ul>
          <li>Using an option on startup:
            <codeblock>-e &lt;<varname>url to query engine or Couchbase cluster</varname>&gt;
--engine=&lt;<varname>url to query engine or Couchbase cluster</varname>&gt;</codeblock></li>
          <li>Using a shell command:
            <codeblock>cbq> \CONNECT <varname>url</varname>;</codeblock></li>
        </ul></p>
      <p>The <varname>url</varname> is made up of two components: the URL and a port number. The URL
        can be any valid IP address or URL. The URL is optional and if it is not specified, the
        default URL <codeph>http://localhost:8091</codeph> is used. An error is thrown if the URL is
        invalid. </p>
      <p>The port number to connect to the query service is 8093 and to the Couchbase cluster is
        8091. </p>
      <p>The cbq shell supports <filepath>http://</filepath>, <filepath>https://</filepath>,
          <filepath>couchbase://</filepath> and <filepath>couchbases://</filepath> protocol schemes.
        When using the <filepath>couchbase://</filepath> or <filepath>couchbases://</filepath>
        protocol schemes, you need not specify the port when connecting to the Couchbase cluster. </p>
      <p>When connecting to the query service, use the query port 8093. When connecting to the
        cluster, you don't need to specify the port as the connection uses round robin to find a
        query service to connect to. If you want to specify a port, use the admin port 8091. </p>
      <p>You can close the connection with an existing node or cluster without exiting the shell at
        any given time during the session using the <cmdname>\DISCONNECT;</cmdname> command. If the
        shell is not connected to any endpoint, an error with a message that the shell is not
        connected to any instance is thrown. </p>
      <codeblock spectitle="Examples">./cbq -e=http://localhost:8091;
Connected to : http://localhost:8091/. Type Ctrl-D to exit.
              
cbq> \DISCONNECT;
Couchbase query shell not connected to any endpoint. Use \CONNECT command to connect.                   
              
cbq> \CONNECT http://127.0.0.1:8091;
Connected to : http://127.0.0.1:8091 . Type Ctrl-D / \exit / \quit to exit.
              
cbq> \EXIT;
Exiting the shell.
              
$./cbq -e=http://127.0.0.1:8091;
Connected to : http://127.0.0.1:8091/. Type Ctrl-D to exit.
cbq></codeblock>
      <p><b>Bringing Up an Unconnected Instance</b></p>
      <p>You can bring up the shell without connecting to any query service or cluster endpoint by
        using the <option>-ne</option> or <option>--no-engine</option> option. After starting cbq
        without any service, you can connect to a specific endpoint using the
          <cmdname>CONNECT</cmdname> command.
        <codeblock spectitle="Example">$ ./cbq -ne
cbq> \CONNECT http://127.0.0.1:8091;
Connected to : http://127.0.0.1:8091 . Type Ctrl-D / \exit / \quit to exit.</codeblock></p>
      <p><b>Exiting the cbq Shell</b></p>
      <p>You can exit the cbq shell using one of the following commands:
        <codeblock>\EXIT; | \QUIT; | Ctrl-D </codeblock></p>
      <p>When you run the exit command, the cbq shell first saves the history, closes existing
        connections, saves the current session in a session file, resets all environment variables,
        and then closes the shell liner interface.</p>
      <codeblock spectitle="Example">$ ./cbq
 No Input Credentials. In order to connect to a server with authentication, please provide credentials.
 Connected to : http://localhost:8091/. Type Ctrl-D to exit.
                
cbq> select name from `travel-sample` WHERE type="airline"  LIMIT 1;
{
   "requestID":"3a86dcf2-3bb4-445c-b419-a5eabd327a1d",
   "signature":{
      "name":"json"
   },
   "results":[
      {
         "name":"40-Mile Air"
      }
   ],
   "status":"success",
   "metrics":{
      "elapsedTime":"20.564ms",
      "executionTime":"20.539035ms",
      "resultCount":1,
      "resultSize":45
   }
}
                
cbq> \EXIT;
Exiting the shell.
$</codeblock>
    </section>
    <section id="cbq-single-cred">
      <title>Providing Single User Credentials</title>
      <p> You can pass a single user name credential to the cbq shell on startup using the command
        line options:
        <codeblock>-u=<varname>username</varname>
--user=<varname>username</varname></codeblock>The
        shell then prompts you for a password. You can also provide a single password credential
        using the -p option. You cannot use this option by itself. It must be used with the
          <codeph>-u</codeph> option to specify the user name that the password is associated with.
        <codeblock>-p=<varname>password</varname>
--password=<varname>password</varname></codeblock><codeblock spectitle="Example">$ ./cbq -u=Administrator
Enter Password: 
Connected to : http://localhost:8091/. Type Ctrl-D to exit.

$ ./cbq -e http://localhost:8091 -u=Administrator -p=password
Connected to : http://localhost:8091/. Type Ctrl-D to exit.
cbq></codeblock></p>
      <p>For information on passing the user name and password credentials using other mechanisms,
        see <xref href="#topic_bzd_zwr_w5/pass-cred-shell-cmd" format="dita">Passing Credentials
          Using the SET Shell Command</xref> and <xref href="#topic_bzd_zwr_w5/pass-cred-rest-api"
          format="dita">Passing Credentials Using REST API</xref>.</p>
    </section>
    <section id="cbq-multiple-creds">
      <title>Providing Multiple Credentials for Authorization</title>
      <p>The cbq shell supports self-signed certificates for encrypting communication between
        clusters. </p>
      <p>Using the cbq shell, you can set the credentials for different users on startup or by using
        the SET shell commands to set the credentials query parameter. You can also use this to
        provide authentication credentials for multiple SASL buckets per session. Depending on the
        type of credential being set, there are multiple possible values for the credentials query
        parameter. </p>
      <p>To set the credentials for different users on startup, use one of the following options:
        <codeblock>-c=<varname>list-of-creds</varname>
--credentials=<varname>list-of-creds</varname></codeblock>
        The <varname>list-of-creds</varname> can take either one or multiple credentials. The
        credentials consist of an identity and a password separated by a colon ":". To specify
        multiple credentials, append all the user names and passwords to the same credentials array.
        For example: <codeblock>-c=travel-sample:pwd1,beer-sample:pwd2</codeblock></p>
      <p>For information on passing a single user name credential to the cbq shell, see <xref
          href="#topic_bzd_zwr_w5/cbq-single-cred" format="dita"/>.</p>
      <p id="pass-cred-shell-cmd"><b>Passing Credentials Using the SET Shell Command</b></p>
      <p>You can provide the credential types using the SET command. </p>
      <note>The credentials are set for the shell session and not on a per query basis. You can use
        the SET, PUSH, POP and UNSET commands to reset the credentials during a session.</note>
      <p>To pass authentication credentials per query, set the query parameter to a new value using
        the SET shell command before executing the query.</p>
      <p>You can also switch between users and change credentials during a session. To do so, set
        the <parmname>-creds</parmname> query parameter for the session using the following command:
        <codeblock>\SET -creds travel-sample:b1, session:s1;</codeblock></p>
      <p id="pass-cred-rest-api"><b>Passing Credentials Using Query REST API</b></p>
      <p>You can use query REST API to pass credentials from clients. </p>
      <p>For SASL buckets, you can pass the credentials
        as:<codeblock>[  {
     "user":"travel-sample",     
     "pass":"password"
   }  ]</codeblock></p>
      <p>If you are using the Administrator credentials:
        <codeblock>[  {
        "user":"Administrator",     
        "pass":"password"
   }  ]</codeblock></p>
      <p>For multiple SASL protected buckets, you can pass an array of authentication credentials:
        <codeblock>[  {
        "user":"beer-sample",     
        "pass":"password1"
        },
        {
        "user":"travel-sample",     
        "pass":"password2"
   }  ]</codeblock></p>
      <p><b>Displaying the Credentials</b></p>
      <p>You can display the credentials for the current session using the <xref
          href="#topic_bzd_zwr_w5/cbq-echo" format="dita">ECHO</xref> shell command. This command
        displays only the user names (and not the passwords).
        <codeblock>cbq> \ECHO -creds;
        
Administrator:*  </codeblock></p>
      <p>You can also display a full list of variables using the SET command specified without any
        arguments.
        <codeblock>cbq> \SET;
Query Parameters :: 
Parameter name : timeout Value  ["3ms" "4s"]

Named Parameters :: 
Parameter name : r Value  [9.5 9.5]

User Defined Session Parameters :: 

Predefined Session Parameters :: 
Parameter name : histfile Value  [".cbq_history"]</codeblock></p>
    </section>
    <section id="cbq-parameter-manipulation"><title>Parameter Manipulation </title>
      <p>The cbq shell categorizes parameters into the following types: <ul id="ul_vn5_hhj_fw">
          <li>Named Parameters</li>
          <li>REST API Parameters</li>
          <li>Session or Pre-defined Parameters</li>
          <li>User-defined Parameters</li>
        </ul></p><p><b>Parameter Configuration</b></p><p>When using parameters, you can set a stack
        of values for each parameter. You can either push a new value onto the stack using the PUSH
        command, or set the current value for a parameter using the SET command. The SET command
        always modifies the top of a variable's stack while the PUSH command adds to the stack. When
        you use PUSH with no arguments, it copies the top element of every parameter's (except the
        predefined parameters) stack and pushes that copy to the top of its respective stack. As a
        result, each stack grows by 1, but the values are preserved. You can then use the SET
        command to modify the top value. </p><p>To unset the values from a parameter's stack, you
        can use the UNSET command to remove all the values from the stack and delete the
        corresponding parameter stack. However, if you want to delete a single value from the
        settings, use the POP command. When you use the POP command with no arguments, it pops the
        one value from the top of each parameter's stack. </p><p><b>Setting Variable
      Values</b></p>Each variable has a separate stack associated with it and the
        <varname>prefix</varname>
      <varname>name</varname> argument helps distinguish between the stacks. <p>The SET command
        always modifies the top value of a variable. You can use the SET command to set different
        kinds of parameters: query parameter, predefined session variables, user-defined session
        variables and named parameters.
        <codeblock>\SET &lt;<varname>prefix</varname>>&lt;<varname>name</varname>> <varname>value</varname>;</codeblock></p><p>where
          <varname>name</varname> is the name of the parameter, <varname>value</varname> is the
        value to be set, and <varname>prefix</varname> is one of the following depending on the
        parameter type. The cbq shell uses the prefix to differentiate between the different types
        of parameters.</p><p>
        <table frame="all" rowsep="1" colsep="1" id="table_ltk_c5s_5v">
          <title>Prefixes for Parameters</title>
          <tgroup cols="2">
            <colspec colname="c1" colnum="1" colwidth="1.0*"/>
            <colspec colname="c2" colnum="2" colwidth="2.5*"/>
            <thead>
              <row>
                <entry>Prefix</entry>
                <entry>Parameter Type</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>- </entry>
                <entry>Query parameter</entry>
              </row>
              <row>
                <entry>-$</entry>
                <entry>Named parameters</entry>
              </row>
              <row>
                <entry>No prefix</entry>
                <entry>Predefined (built-in) session variable</entry>
              </row>
              <row>
                <entry>$</entry>
                <entry>User defined session variable</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </p><note>Positional parameters are set using the <parmname>-args</parmname> query
        parameter.</note> You can use the cbq shell to set all the REST API settings by specifying
      the settings as query parameters prefixed by '-'. As a best practice, we recommend that you
      save the initial set of basic parameters and their default values using the
        <cmdname>\PUSH</cmdname> command (with no arguments). <p>
        <codeblock spectitle="Examples">cbq> \SET -$airport "SJC";
cbq> \PUSH -args ["LAX", 6];
cbq> \SET;
Query Parameters :: 
Parameter name : args Value  [["LAX",6]]

Named Parameters :: 
Parameter name : airport Value  ["SJC"]

User Defined Session Parameters :: 

Predefined Session Parameters :: 
Parameter name : histfile Value  [".cbq_history"]

cbq> \PUSH -$airport "SFO";
cbq> \PUSH;
cbq> \SET;
Query Parameters :: 
Parameter name : args Value  [["LAX",6] ["LAX",6]]

Named Parameters :: 
Parameter name : airport Value  ["SJC" "SFO" "SFO"]

User Defined Session Parameters :: 

Predefined Session Parameters :: 
Parameter name : histfile Value  [".cbq_history"]

cbq> \SET -args ["SFO", 8];
cbq> \SET;
Query Parameters :: 
Parameter name : args Value  [["LAX",6] ["SFO",8]]

Named Parameters :: 
Parameter name : airport Value  ["SJC" "SFO" "SFO"]

User Defined Session Parameters :: 

Predefined Session Parameters :: 
Parameter name : histfile Value  [".cbq_history"]

cbq> \POP;
cbq> \SET;
Query Parameters :: 
Parameter name : args Value  [["LAX",6]]

Named Parameters :: 
Parameter name : airport Value  ["SJC" "SFO"]

User Defined Session Parameters :: 

Predefined Session Parameters :: 
Parameter name : histfile Value  [".cbq_history"]

cbq> \POP -$airport;
cbq> \SET;
Query Parameters :: 
Parameter name : args Value  [["LAX",6]]

Named Parameters :: 
Parameter name : airport Value  ["SJC"]

User Defined Session Parameters :: 

Predefined Session Parameters :: 
Parameter name : histfile Value  [".cbq_history"]

cbq> \UNSET -$airport;
cbq> \SET;
Query Parameters :: 
Parameter name : args Value  [["LAX",6]]

Named Parameters :: 

User Defined Session Parameters :: 

Predefined Session Parameters :: 
Parameter name : histfile Value  [".cbq_history"]</codeblock>
      </p><p>To display all the parameters defined in a session, use the SET command with no
        arguments.
        <codeblock>cbq> \SET;
Query Parameters :: 
Parameter name : timeout Value  ["100m"]

Named Parameters :: 
Parameter name : r Value  [9.5]

User Defined Session Parameters :: 

Predefined Session Parameters :: 
Parameter name : histfile Value  [".cbq_history"]</codeblock></p><p>The
        following table lists the available predefined session variables. <table frame="all"
          rowsep="1" colsep="1" id="table_p4d_pvs_5v">
          <title>Predefined Session Variables</title>
          <tgroup cols="3">
            <colspec colname="c1" colnum="1" colwidth="1.0*"/>
            <colspec colname="c2" colnum="2" colwidth="1.0*"/>
            <colspec colname="c3" colnum="3" colwidth="2.0*"/>
            <thead>
              <row>
                <entry>Variable Name</entry>
                <entry>Possible Values</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <!--<row>
                      <entry>WORDWRAP</entry>
                      <entry>True or False</entry>
                      <entry>Specifies whether to use multiline mode or not. <p>Default:
                        true</p></entry>
                    </row>-->
              <row>
                <entry>HISTFILE</entry>
                <entry>Valid file name</entry>
                <entry>Specifies the file name to store the command history. By default the file is
                  saved in the user's home
                    directory.<p>Default:<filepath>.cbq_history</filepath></p></entry>
              </row>
            </tbody>
          </tgroup>
        </table></p><p><b>Handling Named Parameters</b></p><p>Use the \SET command to define named
        parameters. For each named parameter, prefix the variable name with '-$'. The following
        example creates named parameters 'r' and 'date' with values 9.5 and "1-1-2016"
        respectively.<codeblock>\SET -$r 9.5;
\SET -$date "1-1-2016";</codeblock></p><p><b>Handling
          Positional Parameters</b></p><p>Use the SET shell command with the
          <parmname>-args</parmname> query parameter to define positional parameters:
        <codeblock>\SET -args <varname>value</varname>;</codeblock> The <varname>value</varname>
        contains the different values that correspond to positions within the query. For example,
        <codeblock>\SET -args [ 9.5, "1-1-2016"];</codeblock></p><p><b>Resetting Variable
        Values</b></p><p>You can reset the value of a variable by either popping it or deleting it
        altogether. To pop the top of a parameter's stack use:
        <codeblock>cbq>\POP &lt;<varname>prefix</varname>>&lt;<varname>name</varname>>;</codeblock>
        To pop the top of every parameter's stack once, use the POP command without any arguments:
        <codeblock>cbq>\POP;</codeblock></p><p>To pop all the values of a parameter's stack and then
        delete the parameter, use:
        <codeblock>cbq> \UNSET &lt;<varname>prefix</varname>>&lt;<varname>name</varname>>;</codeblock></p></section>
    <section id="cbq-shell-cmd-echo"><title>Using ECHO to Display Values of Parameters and More </title><p>The ECHO command
        displays the current values of the parameters set for a session. You can use it to display
        any input string or command aliases that have been created using the ALIAS shell command. To
        display parameters, you must include their prefixes. If not, the shell considers the
        parameters as generic statements and displays the parameter as
      is.</p><codeblock>\ECHO <varname>input</varname> ... ;</codeblock>where
        <varname>input</varname> can be a parameter with prefix
        (<varname>&lt;prefix>&lt;parameter-name></varname>), an alias
        (\\<varname>command-alias</varname>), a N1QL statement, or a string.
      <codeblock spectitle="Examples">cbq> \ECHO hello;
hello 

cbq> \ECHO \\travel-alias1;
SELECT * from `travel-sample` LIMIT 1 
            
cbq> \ECHO -$r;
9.5 </codeblock></section>
    <section id="cbq-shell-cmd-alias"><title>Command Alias</title><p>Using the ALIAS shell command,
        you can define and store aliases for commands. This is useful when you have lengthy queries
        that need to be executed often. Run the following command to define an
      alias:</p><codeblock>\ALIAS <varname>command-alias</varname> <varname>command</varname></codeblock><codeblock spectitle="Example">cbq> \ALIAS travel-alias1 SELECT * from `travel-sample` LIMIT 1;</codeblock>To
      run the command alias, use <codeph>\\<varname>command-alias</varname></codeph>.
      <codeblock spectitle="Example">cbq> \\travel-alias1;

{
    "requestID": "01f25f87-bd6c-4686-8852-ab81795290d1",
    "signature": {
        "*": "*"
    },
    "results": [
        {
            "travel-sample": {
                "callsign": "MILE-AIR",
                "country": "United States",
                "iata": "Q5",
                "icao": "MLA",
                "id": 10,
                "name": "40-Mile Air",
                "type": "airline"
            }
        }
    ],
    "status": "success",
    ...
}</codeblock>
      To list all the existing aliases, use:
        <codeblock>\ALIAS;</codeblock><codeblock spectitle="Example">cbq> \ALIAS;
serverversion  select version()
travel-alias1  SELECT * from `travel-sample` LIMIT 1</codeblock><p>You
        can delete a defined alias using the \UNLIAS
        command.<codeblock>\UNALIAS alias-name ... ;</codeblock><codeblock>cbq> \UNALIAS serverversion travel-alias1;

/* Check existing aliases */
cbq> \ALIAS;
 ERROR 141 : Alias does not exist :</codeblock>This
        command can take multiple arguments and deletes the defined alias for every input
      name.</p></section>
    <section id="cbq-prepared-stmts">
      <title>Executing Prepared Statements</title>
      <p>You can use the shell command to execute prepared statements. As a pre-requisite, you must
        first prepare a statement using the N1QL <xref
          href="../n1ql/n1ql-language-reference/prepare.dita#topic_11_4_2">PREPARE</xref> statement.
        To execute prepared statements, follow these steps: <ol>
          <li>Set the named and positional parameters that are present in the prepared statement. </li>
          <li>Prepare using the N1QL PREPARE statement. This can be either prepared statement or a
            named prepared statement. If you do not specify a name for the prepared statement
              (<codeph>PREPARE <varname>query</varname>;</codeph>), a unique name is assigned. You
            can use this auto-assigned name when executing the prepared statement. If you specify a
            name (PREPARE <varname>name</varname> FROM <varname>query</varname>;), you can use this
            name to run the prepared statement. </li>
          <li>Execute the prepared statement using the shell command:
            <codeblock>EXECUTE <varname>name-of-prepared-stmt</varname>;</codeblock></li>
        </ol></p>
      </section>
    <section><title>Canceling a Query</title>
      <p>You can cancel a running query by using the Ctrl+C keys.</p><p><b>Connection Timeout
        Parameter</b></p><p>You can use the timeout parameter to limit the running time of a
          query. This parameter specifies the time to wait before returning an error when
          executing a query.</p>
        <codeblock>--t=<varname>value</varname>
--timeout=<varname>value</varname></codeblock> <p>Timeout
            can be specified in the following units: "ns" for nanoseconds, "μs" for microseconds,
            "ms" for milliseconds, "s" for seconds, "m" for minutes, and "h" for hours. Examples
            of valid values include "0.5s", "10ms", or "1m".</p><p>You can also the SET shell command to set this parameter. An error is thrown if the timeout is
        invalid.
        <codeblock>$ ./cbq --timeout="2s"
                
$ ./cbq -q
cbq> \SET -TIMEOUT 1ms</codeblock></p>
    </section>
    <section id="cbq-file-based-ops">
      <title>File Based Operations</title>
      <p>Using the file based commands and options, the cbq shell can execute N1QL and shell
        commands contained in files. There are two ways to accomplish this: <ul>
          <li>Using an option on startup:
              <codeblock>-f=<varname>input-file</varname>
--file=<varname>input-file</varname></codeblock><p>The
              cbq shell executes the commands present in the input file, prints them to stdout (or
              to a file if using redirects), and exits.</p></li>
          <li>Using a shell command:
              <codeblock>\SOURCE <varname>input-file</varname>;</codeblock><p>Runs the commands
              present in the input file and prints the result to stdout. </p></li>
        </ul></p>
      <p>Consider the input file, <filepath>sample.txt</filepath>, containing the following
        commands:
        <codeblock>CREATE PRIMARY INDEX on `beer-sample` USING GSI;
SELECT * from `beer-sample` LIMIT 2;
SELECT abv from `beer-sample` LIMIT 3;
\HELP; </codeblock></p>
      <p>To execute the commands contained in <filepath>sample.txt</filepath> using the -f option,
        run <codeph>$./cbq -f=sample.txt</codeph>
        <codeblock spectitle="Results">Connected to : http://localhost:8091/. Type Ctrl-D to exit.
CREATE PRIMARY INDEX on `beer-sample` USING GSI;
{ ...
  "results": [ ],
  ...
}
SELECT * from `beer-sample` LIMIT 2;
{ ...
  "results": [ ],
  ...
}
SELECT abv from `beer-sample` LIMIT 3;
{ ...
  "results": [ ],
  ...
}
\HELP;
Help Information for all Shell Commands
… 
$</codeblock></p>
      <p>To execute the commands contained in <filepath>sample.txt</filepath> using the shell
        command, run <codeph>cbq> \SOURCE sample.txt;</codeph>
        <codeblock spectitle="Results">CREATE PRIMARY INDEX on `beer-sample` USING GSI;
{ ...
  "results": [ ],
 ...
}
SELECT * from `beer-sample` LIMIT 2;
{ ...
  "results": [ ],
  ...
}
SELECT abv from `beer-sample` LIMIT 3;
{ ...
  "results": [ ],
  ...
}
\HELP;
Help Information for all Shell Commands
… 
cbq> </codeblock></p>
      <p><b>Redirecting Results to a File</b></p>
      <p>You can redirect all the output for a session or part of a session to a specified file by
        using the following option:
        <codeblock>-o <varname>filename</varname>
--output=<varname>filename</varname></codeblock></p>
      <p>To redirect a specific set of commands during a session, you must specify the commands
        between REDIRECT and REDIRECT OFF as shown:
        <codeblock>cbq> \REDIRECT filename;
command-1; command-2;, ..., command-n;
\REDIRECT OFF;</codeblock>
        All the commands specified after <codeph>\REDIRECT</codeph> and before <codeph>\REDIRECT
          OFF</codeph> are saved into the specified output file. If the file doesn't exist then it
        is created.
        <codeblock spectitle="Example">cbq> \REDIRECT temp_output.txt;
> CREATE PRIMARY INDEX on `beer-sample` USING GSI;
> SELECT * from `beer-sample` LIMIT 1;
> \HELP;
> \REDIRECT OFF;</codeblock></p>
      <p>You can specify multiple <codeph>REDIRECT</codeph> commands. When you do so, the output
        file changes to the specified files and switches back to <systemoutput>stdout</systemoutput>
        only when you specify "<codeph>\REDIRECT OFF</codeph>;".</p>
    </section>
    <section id="cbq-server-shell-info">
      <title>Server and Shell Information</title>
      <p>The cbq shell provides commands that convey information about the shell or cluster
        endpoints. </p>
      <dl>
        <dlentry>
          <dt>Version</dt>
          <dd>You can find the version of the client (shell) by using either the command line option
            to display the current version of the shell and exit, or as a shell command to print the
            version of the shell during the shell session.
              <codeblock spectitle="Example Using the Command-line Option">./cbq -v
SHELL VERSION : 1.0 
              
$ ./cbq --version
SHELL VERSION : 1.0</codeblock><codeblock spectitle="Example Using the Shell Command">cbq> \VERSION;
SHELL VERSION : 1.0 </codeblock><p>To
              display the version of the query service, use the N1QL commands <codeph>SELECT
                version();</codeph> and <codeph>SELECT min_version();</codeph>. </p></dd>
        </dlentry>
        <dlentry>
          <dt>Copyright</dt>
          <dd>You can view the copyright, attributions, and distribution terms of the command line
            query tool using the <codeph>\COPYRIGHT;</codeph> command.
            <codeblock>cbq> \COPYRIGHT;
Copyright (c) 2015 Couchbase, Inc. Licensed under the Apache License, Version 2.0 (the "License"); 
you may not use this file except in compliance with the License. You may obtain a copy of the 
License at http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software distributed under the
License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
either express or implied. See the License for the specific language governing permissions
cbq></codeblock></dd>
        </dlentry>
      </dl>
    </section>
    <section><title>Shortcut Keys for cbq Shell</title> The following table lists the shortcut keys
      used by the <cmdname>cbq</cmdname> shell. <table frame="all" rowsep="1" colsep="1"
        id="table_qty_jhf_5v">
        <title>Shortcut Keys for cbq Shell</title>
        <tgroup cols="2" align="left">
          <colspec colname="c1" colnum="1" colwidth="1*"/>
          <colspec colname="c2" colnum="2" colwidth="1.97*"/>
          <thead>
            <row>
              <entry>Keystroke</entry>
              <entry>Action</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Ctrl-A, Home</entry>
              <entry>Move cursor to beginning of line</entry>
            </row>
            <row>
              <entry>Ctrl-E, End </entry>
              <entry>Move cursor to end of line</entry>
            </row>
            <row>
              <entry>Ctrl-B, Left</entry>
              <entry> Move cursor one character left </entry>
            </row>
            <row>
              <entry>Ctrl-F, Right </entry>
              <entry>Move cursor one character right </entry>
            </row>
            <row>
              <entry>Ctrl-Left </entry>
              <entry>Move cursor to previous word </entry>
            </row>
            <row>
              <entry>Ctrl-Right </entry>
              <entry>Move cursor to next word </entry>
            </row>
            <row>
              <entry>Ctrl-D, Del </entry>
              <entry>(if line is not empty) Delete character under cursor </entry>
            </row>
            <row>
              <entry>Ctrl-D</entry>
              <entry>(if line is empty) End of File - usually quits application </entry>
            </row>
            <row>
              <entry>Ctrl-C</entry>
              <entry>Reset input (create new empty prompt) </entry>
            </row>
            <row>
              <entry>Ctrl-L</entry>
              <entry>Clear screen (line is unmodified) </entry>
            </row>
            <row>
              <entry>Ctrl-T</entry>
              <entry>Transpose previous character with current character</entry>
            </row>
            <row>
              <entry>Ctrl-H, BackSpace </entry>
              <entry>Delete character before cursor </entry>
            </row>
            <row>
              <entry>Ctrl-W </entry>
              <entry>Delete word leading up to cursor</entry>
            </row>
            <row>
              <entry>Ctrl-K</entry>
              <entry>Delete from cursor to end of line </entry>
            </row>
            <row>
              <entry>Ctrl-U </entry>
              <entry>Delete from start of line to cursor</entry>
            </row>
            <row>
              <entry> Ctrl-P, Up</entry>
              <entry>Previous match from history</entry>
            </row>
            <row>
              <entry>Ctrl-N, Down</entry>
              <entry>Next match from history</entry>
            </row>
            <row>
              <entry> Ctrl-R </entry>
              <entry>Reverse Search history (Ctrl-S forward, Ctrl-G cancel)</entry>
            </row>
            <row>
              <entry>Ctrl-Y</entry>
              <entry>Paste from Yank buffer (Alt-Y to paste next yank instead) </entry>
            </row>
            <row>
              <entry>Tab </entry>
              <entry>Next completion </entry>
            </row>
            <row>
              <entry>Shift-Tab</entry>
              <entry>(after Tab) Previous completion</entry>
            </row>
          </tbody>
        </tgroup>
      </table> Source: <cite>https://github.com/peterh/liner</cite>
    </section>
  </body>
  <related-links><link href="https://github.com/couchbase/query/tree/master/shell/cbq/examples" scope="external"
      format="html">
      <linktext>More cbq Examples</linktext>
    </link></related-links>
</topic>
