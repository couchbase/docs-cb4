<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_jzr_ct2_gv">
  <title>Password-Based Authentication</title><shortdesc>In Couchbase clients can verify their identity by providing a secret predetermined value
    either by sending their password to the server through encrypted channels or by using a
    hash-based challenge-response method.</shortdesc>
  <body>
    <section><title>Authentication for Administrators </title>
     <p> Passwords for the Full Administrators are set up during the initial installation of
        Couchbase Server. See <xref href="../install/init-setup.dita#topic12527/setpass">Configure Server</xref> for details.</p><p>Check also the Security
        Best Practices for setting <xref href="security-passwords.dita#topic_iyx_5ps_lq">Couchbase
          passwords</xref>. </p><dl>
        <dlentry>
          <dt>Resetting the Administrative Password</dt>
          <dd>The administrative password can be reset using the password reset tool: <xref
              href="../cli/cbreset_password-tool.dita#cbreset_password_tool"/></dd>
        </dlentry>
      </dl></section> 
    <section id="standardport">
      <title>Authentication for Applications</title>
      <p>Applications authenticate themselves with buckets using the SASL password.</p>
      
      <p>Authentication at the bucket level takes place over the CRAM-MD5 protocol and involves a
        single challenge-and-response cycle initiated by Couchbase Server. </p>
      <p>In the challenge sequence, the server sends a string in the format of a Message ID (email
        header value including angle brackets). The Message ID includes an arbitrary string of random
        digits, a timestamp, and the server's fully qualified domain name. </p>
      <p>Access control is configured using the Couchbase Web Console at <menucascade>
        <uicontrol>Data Buckets</uicontrol>
        <uicontrol>Create New Data Bucket</uicontrol>
      </menucascade> and is set for two ports:</p>
      <p><image href="../images/admin-access-control.png" align="left"
        width="600"/></p>
      <p>
        <table frame="all" rowsep="1" colsep="1" id="table_otc_mr2_zx">
          <tgroup cols="2">
            <colspec colname="c1" colnum="1" colwidth="1.0*"/>
            <colspec colname="c2" colnum="2" colwidth="3.0*"/>
            <thead>
              <row>
                <entry>Setting</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>Standard port</entry>
                <entry>The standard port is the TCP port <codeph>11211</codeph>, which requires SASL
                  authentication. Enter the password that complies with the best practices
                  rules.</entry>
              </row>
              <row>
                <entry>Dedicated port</entry>
                <entry>The dedicated port supports ASCII protocol and doesn't need authentication.
                  You only need to enter the port number.<note>Server-side moxi proxy is deprecated
                    in Couchbase Server version 4.5. Start using Couchbase client SDKs or
                    client-side moxi in your applications.</note></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </p>
    </section>  
    <section><title>Password Authentication Methods</title>
      <p>For password authentication, Couchbase clients use a challenge-response protocol to negotiate with the server. 
        In these authentication methods, the server asks for a password and also the a predetermined secret 
        value the value that depends on the password through a hash function. </p>    
      <p>During an initial client-server negotiation, a password authentication protocol is chosen
        depending on the strongest common protocol supported by the server and client OS platform.
        For example, if a client supports only the PLAIN protocol, and the server supports both
        PLAIN and CRAM-MD5, then the PLAIN protocol is chosen and used during the client-server
        negotiation. </p>
      <p>A challenge-response method can be transmitted either through encrypted or unencrypted channels. 
        Hash-based challenge-response protocols typically only authenticate the authentication step and not 
        the rest of the session. Using hash-based challenge-response protocols along with TLS 
        will provide a secure session between the client and server.
      </p></section>
    
    <section><title>Challenge-Response Methods in Couchbase</title><p>Authentication requires that
        clients provide a proof of identity to access the database. Couchbase provides three types
        of authentication mechanisms based on challenge-response method:</p><dl>
        <dlentry>
          <dt>PLAIN authentication</dt>
          <dd>The most straightforward authentication mechanism is PLAIN, where the client simply
            sends the password unencrypted to the server. All clients support the PLAIN mechanism,
            however, when this method is used anyone listening on the network can steal the
            password. For that reason, and some others, other mechanisms have been implemented.</dd>
        </dlentry>
      </dl><dl>
        <dlentry>
          <dt>CRAM-MD5 authentication</dt>
          <dd>CRAM-MD5 is a password-based authentication mechanism, which utilizes an MD5
            cryptographic hash algorithm to protect the password during the authentication
            exchange.</dd>
        </dlentry>
      </dl><dl>
        <dlentry>
          <dt>SCRAM-SHA* authentication</dt>
          <dd>SCRAM is short for Salted Challenge Response Authentication Mechanism. This mechanism
            proves to the server that the user knows a secret derived from the user's password and
            proves to the client that the server knows a secret derived from the user's
            password.</dd>
        </dlentry>
      </dl>Couchbase offers the SHA-1 hash function for SCRAM in compliance with the SCRAM RFC.
      Since the SCRAM protocol requires that SHA1 be always supported, it is usually the weakest
      link compared to stronger SHA hashes such as SHA2. For example, on SuSe, the SCRAM protocol
      only supports SHA1 hash. As a security best practice, use SCRAM along with TLS to harden your
      client-server authentication. <p>You must upgrade all drivers used by applications that will
        connect to upgraded database to a version that supports SCRAM-SHA. The minimum driver
        versions that support SCRAM-SHA are: </p><p>
        <table frame="all" rowsep="1" colsep="1" id="table_bd2_w5f_qv">
          <title>Driver requirements for SCRAM-SHA authentication </title>
          <tgroup cols="3">
            <colspec colname="c1" colnum="1" colwidth="1.04*"/>
            <colspec colname="c2" colnum="2" colwidth="1*"/>
            <colspec colname="c3" colnum="3" colwidth="3.54*"/>
            <thead>
              <row>
                <entry>Couchbase Client</entry>
                <entry>Version</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>Java</entry>
                <entry>2.2.5 and higher</entry>
                <entry>Supports SCRAM without any code changes.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </p><p>SCRAM support for other clients will be announced in upcoming client release cycles.
      </p></section>
      
  
  <!--<section><title>Mechanisms for Implementing Challenge-response Authentication Methods</title>
    
    <p>The basic concept of challenge-response authentication methods is that the client and server
        never send enough information for a hacker to be able to decrypt a password. Instead, the
        protocol serves to generate a client proof that the server uses to determine authentication.  </p><p>After the client and server establish a connection, the server generates a question or a
          <term>challenge</term>. This challenge varies in every authentication so that only the
        legitimate client (who knows the password) can respond in a satisfactory way. </p>
    <p>Using the challenge-response option improves security since the password is not transmitted
        during the authentication. The assumption is that both the client and the server initially
        know the password that was shared during the registration. </p><p>The
        following diagram shows a generic authentication sequence.</p>
    <p><image
          href="../admin/picts/security-chall-response-protocol.png" id="image_u1p_xmf_gv"
          align="left" width="300"/></p>
      <dl>
        <dlentry>
          <dt>CRAM-MD5</dt>
          <dd>Challenge/Response Authentication Mechanism - MD5 (CRAM-MD5) is a password-based
            authentication mechanism, which utilizes a cryptographic hash algorithm to protect the
            password during the authentication exchange against eavesdropping.</dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>SCRAM</dt>
          <dd>Salted Challenge Response Authentication Mechanism (SCRAM) uses a cryptographic hash
            algorithm to provide mutual authentication. The mechanism proves to the server that the
            user knows a secret derived from the user's password and proves to the client that the
            server knows a secret derived from the user's password. Actual passwords are not sent,
            and the value is constructed so that the value cannot be used to impersonate the user. </dd>
          <dd>SCRAM does not provide a security layer and is intended to be used with TLS: 
            it is designed to allow for a mechanism-specific password hash to be stored.  </dd>
        </dlentry>
      </dl>  
      <dl>
        <dlentry>
          <dt>SCRAM-SHA-1</dt>
          <dd>In SCRAM-SHA-1, TLS use is not independent of the mechanism and is prone to the "click
            through" problems that open LDAP sessions to hijack attacks. </dd>
          <dd>The security of this hash is only as strong as the weakest digest used by it. Since
            the SCRAM protocol requires that SHA1 be always supported, it is usually the weakest
            link ( other digests, such as SHA2-256, are stronger). </dd>
        </dlentry>
      </dl>
   </section>-->
  </body>
</topic>
