<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_qbs_wpm_lq">
  
  <title>
    Encryption on the Wire
  </title>
  
  <shortdesc>
    Data <i>on the wire</i> needs to be protected from eavesdropping. Therefore,
    Couchbase Server uses <i>SSL/TLS</i> to encrypt data passed in each of the
    following ways: between clients and servers; between server-nodes within a
    cluster; and between data centers. 
  </shortdesc>
  
<body>
  
  <section id="securing-administrative-access">
    
    <title>
      Securing Administrator-Access
    </title>
    
      <p>
        Full Administrators can configure administrative access so that client-communications with
        Couchbase Server are encrypted, by means of SSL/TLS. This protocol is fully supported by the
        Couchbase client-libraries for both the Couchbase Web Console and the REST API.
      </p>
      
      <p>
        When securely initialized, Couchbase Server generates a self-signed certificate for the initial node, which
        is then propagated throughout all the nodes in the cluster. In terms of security-strength, this certificate is presumed 
        to be adequate for your pre-production activities: optionally, however, 
        you can switch 
        to an <i>X.509</i> certificate, before you deploy your application into production. See 
        <xref href="security-x509certsintro.dita#topic_cfk_mhn_xv/configuring-x.509"/>.
      </p>
    
    </section>
      
    <section id="conecting-securely-to-the-console">
      
      <title>
        Connecting Securely to the Console 
      </title>
      
      <p>
        The Couchbase Web Console can be accessed over HTTPS, on port <codeph>18091</codeph>. Since 
        it is protected by SSL/TLS, this connection is secure.
      </p>
      
      <p>
        For example, if you have established the Couchbase Web Console on <codeph>http://</codeph><i>servername</i><codeph>:8091</codeph>,
        you can access it securely on <codeph>https://</codeph><i>servername</i><codeph>:18091</codeph>.
      </p>
      
    </section>

    <section id="performing-certificate-verification">
      
      <title>
        Performing Certificate Verification 
      </title>
      
      <p>
        To verify which certificate your cluster is currently using, access the Couchbase Web Console, and left-click
        on the <uicontrol>Security</uicontrol> tab, in the navigation-bar at the left-hand side:
      </p>
      
      <p>
        <image href="./pict/accessSecurityTab.png" id="access_security_tab" align="left" width="100"/>
      </p>
      
      <p>
        This brings up the <uicontrol>Security</uicontrol> screen. When it appears, left-click on the
        <uicontrol>Root Certificate</uicontrol> tab, which is located on the horizontal control-bar,
        near the top (note that you must be in the role of <i>Full Administrator</i>, to see and
        access the Root Certificate):
      </p>
      
      <p>
        <image href="./pict/accessRootCertificateTab.png" id="access_root_certificate_tab" align="left" width="320"/>
      </p>
      
      <p>
        This displays the <uicontrol>Root Certificate View</uicontrol>, which features the self-signed root
        certificate, in a scrollable pane:
      </p>
 
      <p>
       <image href="pict/self-signed-certNewUI.png" id="self_signed_cert_NewUI" align="left" width="620"/>
      </p>
 
       <p>
         Note that the certificate can be regenerated or replaced, using the
         <xref href="../rest-api/rest-encryption.dita#topic_i45_xf2_gw"/>, or 
         <xref href="../cli/cbcli/couchbase-cli-ssl-manage.html" format="html">CLI </xref> commands
         for certificate-management.
       </p>
      
     </section> 
  
      <section id="handling-client-certificates">
        
        <title>
          Handling Client Certificates
        </title>
  
          <p>
            Couchbase Server supports authentication based on client-side certificates. An example of client-side certificate-generation is provided in
            <xref href="./security-x509certsintro.dita#topic_cfk_mhn_xv/cert_auth_for_java_client" scope="local" format="dita">Provide Certificate-Based Authentication
            for a Java Client</xref>; and an example of how such a certificate can be referenced by a client-program is provided in
            <xref href="../sdk/java/sdk-authentication-overview.dita#sdk_authentication/authenticating-a-java-client-by-certificate" scope="local" format="dita">Authenticating
            a Java Client by Certificate</xref>.
          </p>
          
          <p>
            Clients' use of certificates can be <i>enabled</i>, <i>disabled</i>, or made <i>mandatory</i> for the cluster; by
            means of the <b>Client Certificate</b> screen, which is accessible from the <b>Client Certificate</b> tab, near the top of
            the main <b>Security</b> screen of Couchbase Web Console. 
          </p>
        
          <p>
           <image href="pict/requireClientCertificatePanel.png" id="require-client-certificate-panel" align="left" width="620"/>
          </p>
        
          <p>
            Select <b>Disable</b> to disable certificate-based authentication: this means that authorization can only occur by means
            of username and password (for Couchbase-defined users) or username (for LDAP-defined users). Select <b>Enable</b> to make
            certificate-based authentication optional for clients. Select <b>Mandatory</b> to make certificate-based authentication a
            requirement for clients (except in the case of manual login, at the Couchbase Web Console).
          </p>
          
          <p>
            Appropriate <i>paths</i>, <i>prefixes</i>, and <i>delimiters</i>
            can be specified: for detailed information on certificate-identity extraction, see
            <xref href="./security-certs-auth.dita" scope="local" format="dita">Certificate-Based Authentication</xref>.
          </p>
        
      </section>
    
     <section id="disabling-non-secure-console-access">
     
      <title>
        Disabling Non-Secure Console Access
      </title>
     
        <p>
         If you wish to force Administrators to log into the UI over an encrypted channel, and
         so use port 18091, 
         you can disable Couchbase Web Console access on port 8091. This only affects console access, and 
         does not prevent REST requests from continuing to use 8091, non-securely.
        </p>
        
        <p>The following REST API method disables the Couchbase Web Console on port 8091:
 <codeblock>curl -u Administrator:password http://localhost:8091/settings/security -d disableUIOverHttp=true</codeblock>
        </p>
        
        <p>
          To re-enable Couchbase Web Console access on port 8091:
 <codeblock>curl -u Administrator:password http://localhost:8091/settings/security -d disableUIOverHttp=false</codeblock>
        </p>


        <p>
          The command line can also be used for this disabling step:
        </p>
       
            <codeblock>couchbase-cli setting-security -c <i>&lt;servername></i> -u Administrator \
   -p password --disable_ui_over_http</codeblock>


      </section> 
  
    <section id="working-with-supported-protocols">
      
      <title>
        Working with Supported Protocols
      </title>
      
        <p>
          Couchbase Server client-libraries support client-side encryption, using the Secure
          Sockets Layer (SSL) and Transport Layer Security (TLS). TLS versions 1.0 to 1.2
          are supported by default. The highest-supported version of TLS is recommended.
          Optionally, you can set the minimum version of TLS to be 1.2 or higher, using the following command:
        </p>
      
          <codeblock>curl -X POST -u Administrator:password http://127.0.0.1:8091/diag/eval -d "ns_config:set(ssl_minimum_protocol, 'tlsv1.2')"</codeblock>
      
        <p>
          This command should be executed per cluster; and requires Full
          Administrator privileges.
        </p>
      
        <!-- Question: Port 18092 is apparently used by CAPI HTTP, rather than 18091. Do we still support this, and what should we say
             about it? The following was the original text here:
             
              For changes to be affective on port 18092, cluster restart is needed. For changes to be affective
              lust on port 18091, no cluster restart is needed.
              
             Note that CAPI was not mentioned at the head of this page, just in the middle. Is it still relevant?
             
             I'm also uncertain as to the meaning of the following:
             
               <p>
                Encryption for data access is performed through client-server communication and view
                access.
               </p>
             **This one line** Added 2018/01/12 - let's remove this Question & commented out section. Objections?

          -->
      
    </section>
      
    <section id="enabling-client-security">
      
      <title>
        Securing Client-Application Access
      </title>
      
        <p>
          For an application to communicate securely with Couchbase Server, SSL/TLS must be enabled
          on the client side. To perform enablement, you must acquire a copy of the certificate used
          by Couchbase Server, and then follow the steps appropriate for your client. Access the
          certificate from the Couchbase Web Console, as shown above. Note that if, at some point, this certificate
          gets regenerated on the server-side, you must obtain a copy of the new
          version, and re-enable the client.
        </p>
     
        <p>
          When a TLS connection is established between a client application and Couchbase Server running
          on port 18091, a <i>handshake</i> occurs, as defined by the
          <i>TLS Handshake Protocol</i>. As part of this exchange, the client must send to the
          server a <i>cipher-suite list</i>; which indicates the cipher-suites
          that the client supports, in order of preference. The server replies with a notification of the cipher-suite
          it has duly selected from the list. Additionally, symmetric keys to be used by client and server are selected by means
          of the <i>RSA key-exchange</i> algorithm.
        </p>
      
    </section>
      
   <section id="securing-sdk-access">
     
     <title>
       Securing SDK Access 
     </title>
     
     <p>
       All the Couchbase SDKs support SSL/TLS encryption: Java, .NET, Node.js, PHP, Python, C, and Go.
       Each must use the Couchbase network port <codeph>11207</codeph>, for secure communication. 
     </p>
   
   </section>
    
    <section id="securing-view-access">
      
      <title>
        Securing View Access
      </title>
        
        <p>
          Port <codeph>18092</codeph> must be used for secure view access. Thus:
          <codeph>https://</codeph><i>servername</i><codeph>:18092</codeph>.
        </p>
    
    </section>
  
    <section id="securing-query-access">
      
      <title>
        Securing Query Access
      </title>
      
        <p>
          The <xref href="../n1ql/n1ql-rest-api/index.html" scope="local" format="html">
          REST endpoint</xref> for secure access to N1QL queries is: 
          <codeph>https://</codeph><i>servername</i><codeph>:18093/query/service</codeph>.
        </p>
      
    </section>
      
    <section id="securing-fts-access">
      
      <title>
        Securing FTS Access
      </title>
      
        <p>
          To use Full Text Search securely, port <codeph>18094</codeph> must be specified. For
          example:
        </p>
      
          <codeblock>curl -u Administrator:password https://localhost:18094/api/index/myFirstIndex/count</codeblock>
          
    </section>     

    <section id="securing-backups">
      
      <title>
        Securing Backups
      </title>
      
        <p>
          Both <xref href="../cli/cbbackup-tool.dita" scope="local" format="dita">
          cbbackup</xref> and <xref href="../backup-restore/cbbackupmgr.dita" scope="local" format="dita">
          cbbackupmgr</xref> can use the secure port: <codeph>https://</codeph><i>servername</i><codeph>:18091</codeph>.
        </p>
    </section>     
             
    <section id="overriding-supported-ciphers">
      
      <title>
        Overriding Supported Ciphers
      </title>
    
      <p>
        Couchbase Server uses ciphers that are accepted by default by OpenSSL.The default behavior 
        employs <i>high</i>-security ciphers, built into OpenSSL. 
      </p>
  
  
      <p>
        You can override this selection, by setting the <codeph>COUCHBASE_SSL_CIPHER_LIST</codeph> environment 
        variable &#8212; this must be performed <i>before</i> starting Couchbase Server. The environment
        variable can be set in either of the following ways:
      </p>
  
      <ul>
        
        <li>
          <p>
            Specify an explicit list of ciphers to be used. For example:
          </p>
          
          <codeblock>COUCHBASE_SSL_CIPHER_LIST="DHE-DSS-AES128-SHA,CAMELLIA128-SHA"</codeblock>
          
          <p>
            
          </p>
        </li>
        
        <li>
          <p>
            Specify ciphers by security-level. For example, to specify that all ciphers in both 
            <i>medium</i> and <i>high</i> categories be used, enter the following:
          </p>
          
          <codeblock>COUCHBASE_SSL_CIPHER_LIST="MEDIUM,HIGH"</codeblock>
          
          <p>
            
          </p>
        </li>
        
      </ul>
  
      <p>
        To display the ciphers available on your Linux platform for a particular security level, use
        the <codeph>openssl</codeph> command. For example, to display the <i>high</i>-level ciphers,
        enter the following:
      </p>
  
      <codeblock>openssl ciphers -v 'HIGH'</codeblock>
  
      <p>
        To check the current value of the <codeph>COUCHBASE_SSL_CIPHER_LIST</codeph> environment variable,
        type <codeph>printenv</codeph> at the Linux prompt: this returns a list of all currently set
        environment variables.
      </p>

    </section>
    
    <section id="moving-data-between-server-nodes">
      
      <title>
        Moving Data Between Server-Nodes
      </title>
      
        <p>
          Couchbase Server replicates data across a cluster, to ensure the data's high availability. 
          When you encrypt documents, replica copies are duly
          transmitted and stored in encrypted form. 
        </p>
      
        <p>
            For added security, 
            use IPSec on the network that connects the Couchbase Server-nodes.
            Note that IPSec has two modes: <i>tunnel</i> and <i>transport</i>. 
            Transport mode is recommended, as it is the easier of the two to set
            up,
            and does not require the creation of tunnels between all pairs of Couchbase nodes. 
        </p>
      
        <p>
          To learn more about setting up transport mode IPSec for Couchbase, see the blog 
          <xref href="http://blog.couchbase.com/2016/june/configuration-ipsec-for-a-couchbase-cluster" format="html" scope="external">Configuring 
          IPsec for a Couchbase Cluster</xref>.
        </p>
    
    </section>
    
    <section id="moving-data-between-data-centers">
      
      <title>
        Moving Data Between Data Centers
      </title>
      
        <p>
          To protect data transmitted between data centers, you can
          use TLS to encrypt your XDCR connection. When you enable TLS in XDCR, Couchbase Server uses
          TLS certificates. TLS versions 1.0 to 1.2 are supported. All traffic between source and destination-datacenters is
          encrypted. Note that the encryption causes a slight increase in the CPU load.
        </p>
        
        <p>
          You are recommended to rotate the XDCR
          certificates periodically, in accordance with your organization's security policy.
        </p>
      
      <p>
        For information on securing XDCR, see
        <xref href="../xdcr/xdcr-managing-security.dita" scope="local" format="dita">XDCR Data Security</xref>.
      </p>
      
    </section>
    
  </body>
  
</topic>
