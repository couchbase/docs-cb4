<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_hvz_4qc_bq">
 <title>User Input Validation</title>
 <shortdesc>To provide for security in applications, pay attention to actions representing NoSQL injection.</shortdesc>
 <conbody>
  
 
  <p>Injection attacks are not limited only to SQL databases. In NoSQL databases, they might consist
   of these actions: </p>
  <ul>
    <li>Injecting of arbitrary key-value pairs.</li>
    <li>Overriding of important document fields, such as the document type or password.</li>
   </ul>
  
  
  <section><title>Example</title><codeblock> {"user": "will","type":"Private", "password":"<varname>0asd21$1%</varname>", 
  "created":"2012-06-12", "password":"<varname>password</varname>"}T</codeblock>The
   application stores the hashed value of the password <codeph>oasd21$1%</codeph>. However, since
   the application developer used string concatenation, based on user input without proper
   application validation, the hash password could be overwritten by the plain-text password. If you
   try to save this document in Couchbase, you will override the first field value with the last
   supplied field value. <p>Be aware that an attacker might try to inject arbitrary key-value pairs,
    override a key-value pair, or change the document type (such as from <codeph>Private</codeph> to
     <codeph>Public</codeph>). You must, therefore, protect the input and ensure that field
    overrides are explicit so that they cannot be changed implicitly by attackers. </p><p>The best
    approach is to validate user input in your application and avoid string concatenation. You can
    also use strongly typed programming language constructs such as Java POJOs or .Net POCOs to
    mitigate the risk of an injection attack. </p>
  </section>
 </conbody>
</concept>
