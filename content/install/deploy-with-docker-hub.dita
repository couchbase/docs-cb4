<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_lbj_vt2_3w">
  <title>Deployment with Docker Hub</title>
  <shortdesc>Official Couchbase Server containers on Docker Hub are based on Ubuntu 16.04. </shortdesc>
  <body>
    <section><title>Container Requirements</title>
    <p>Before you can work with Couchbase Server with Docker containers ensure that Docker Engine is
      installed in your environment. For information about how to install Docker Engine, see the
        <xref href="https://docs.docker.com/engine/installation/" format="html" scope="external"
        >Docker Documentation</xref>.</p>
    <p><b>Docker Container Resource Requirements</b></p>
    <p>For minimum container requirements, follow the minimum hardware recommendations listed <xref
        href="pre-install.dita">here</xref> for development, test, and production environments. </p>
    </section>
    <section id="section_zb2_srf_42b">
      <title>Best Practices with Docker Containers</title>
      <p>Container technology is a popular way of achieving better utilization of hardware
        infrastructure combined with great portability of deployment. In this section, we describe
        some considerations when running Couchbase Server on a container platform. These
        considerations are common across any virtualized or container infrastructure, and are not
        specific to Couchbase Server.</p>
      <p><b>Avoid a Single Point of Failure</b></p>
      <p>Couchbase Server's resilience and high-availability are achieved through creating a cluster
        of independent nodes and replicating data between them so that any individual node failure
        doesn't lead to loss of access to your data. In a containerized environment, if you were to
        run multiple nodes on the same piece of physical hardware, you are inadvertently
        re-introducing a single point of failure. In environments where you control the VM
        placement, we recommend that each Couchbase Server node runs on a different piece of
        physical hardware.</p>
      <p><b>Sizing your Containers</b></p>
      <p>The performance characteristics of physical hardware are well understood. Even though
        containers insert a lightweight layer between Couchbase Server and the underlying OS, there
        is still a small overhead in running Couchbase Server in containers. For stability and
        better performance predictability, we recommended that you dedicate at least 2 cores to the
        container in development environments and 4 cores to the container rather than share them
        across multiple containers for Couchbase Server instances running in production.</p>
      <p>With an over-committed environment you can end up with containers competing with each other
        causing unpredictable performance and sometimes stability issues. </p>
      <p><b>Map Couchbase Node Specific Data to a Local Folder</b></p>
      <p>A Couchbase Server Docker container writes all persistent and node-specific data to the
        directory <filepath>/opt/couchbase/var</filepath> by default. It is recommended to map this
        directory to a directory on the host file system using the <codeph>-v</codeph>  option to
        get persistence and performance when using <codeph>docker run</codeph>.</p>
      <p>By mapping the directory <filepath>/opt/couchbase/var</filepath> to a directory outside the
        container with the <codeph>-v</codeph> option, you can delete the container and recreate it
        later without losing your data from Couchbase Server. You can even update to a container
        running a later release/version of Couchbase Server without losing your data.</p>
      <p>In a standard Docker environment using a union file system, leaving
          <filepath>/opt/couchbase/var</filepath> inside the container results in some amount of
        performance degradation.<note>If you have SELinux enabled, mounting the host volumes in a
          container requires an extra         step. Assuming you are mounting the
            <codeph>~/couchbase</codeph> directory on the host         file system, you need to run
          the following command once before running your first container         on that
          host:<codeblock>mkdir ~/couchbase &amp;amp;&amp;amp; chcon -Rt svirt_sandbox_file_t ~/couchbase</codeblock></note></p>
      <p>Increase ULIMIT in Production Deployments</p>
      <p>Couchbase Server normally expects the following changes to
        <codeph>ulimits</codeph>:<codeblock>ulimit -n 40960        # nofile: max number of open files
ulimit -c unlimited    # core: max core file size
ulimit -l unlimited    # memlock: maximum locked-in-memory address space</codeblock></p>
      <p>These &lt;parmname>ulimit&lt;/parmname> settings are necessary when running under heavy
        load. If you are just doing light testing and development, you can omit these settings, and
        everything will still work. To set the ulimits in your container, you need to run Couchbase
        Docker containers with the following additional &lt;codeph>-\-ulimit&lt;/codeph>
        flags:<codeblock>docker run -d -\-ulimit nofile=40960:40960 
-\-ulimit core=100000000:100000000 -\-ulimit memlock=100000000:100000000 
-\-name db -p 8091-8094:8091-8094 -p 11210:11210 couchbase</codeblock></p>
      <p>Since unlimited is not supported as a value, it sets the &lt;codeph>core&lt;/codeph> and
        &lt;codeph>memlock&lt;/codeph> values to 100 GB. If your system has more than 100 GB RAM,
        increase this value to match the available RAM on the system.The
        &lt;codeph>-\-ulimit&lt;/codeph> flags only work on Docker 1.6 or later.</p>
    </section>
    <!--
      <p><b>Map Couchbase Node Specific Data to a Local Folder</b></p>
      <p>A Couchbase Server Docker container writes all persistent and node-specific data to the directory <filepath>/opt/couchbase/var</filepath> by default. It is recommended to map this directory to a directory on the host file system using the <codeph>-v</codeph> option to get persistence and performance when using "docker run".</p>
      <p>By mapping the directory <filepath>/opt/couchbase/var</filepath> to a directory outside the container with the <codeph>-v</codeph> option, you can delete the container and recreate it later without losing your data from Couchbase Server. You can even update to a container running a later release/version of Couchbase Server without losing your data.</p>
      <p>In a standard Docker environment using a union file system, leaving <filepath>/opt/couchbase/var</filepath> inside the container results in some amount of performance degradation.</p>
      <note>If you have SELinux enabled, mounting the host volumes in a container requires an extra
        step. Assuming you are mounting the <filepath>~/couchbase</filepath> directory on the host
        file system, you need to run the following command once before running your first container
        on that host:
        <codeblock>mkdir ~/couchbase &amp;&amp; chcon -Rt svirt_sandbox_file_t ~/couchbase</codeblock></note>
      <p><b>Increase ULIMIT in Production Deployments</b></p>
      <p>Couchbase Server normally expects the following changes to <parmname>ulimits</parmname>:</p>
      <codeblock>ulimit -n 40960        # nofile: max number of open files
ulimit -c unlimited    # core: max core file size
ulimit -l unlimited    # memlock: maximum locked-in-memory address space</codeblock>
      <p>These <parmname>ulimit</parmname> settings are necessary when running under heavy load. If you are just doing light testing and development, you can omit these settings, and everything will still work. To set the ulimits in your container, you need to run Couchbase Docker containers with the following additional <codeph>-\-ulimit</codeph> flags: </p><codeblock>docker run -d -\-ulimit nofile=40960:40960 
-\-ulimit core=100000000:100000000 -\-ulimit memlock=100000000:100000000 
-\-name db -p 8091-8094:8091-8094 -p 11210:11210 couchbase</codeblock>
      <p>Since unlimited is not supported as a value, it sets the <codeph>core</codeph> and <codeph>memlock</codeph> values to 100 GB. If your system has more than 100 GB RAM, increase this value to match the available RAM on the system.</p><note>The <codeph>-\-ulimit</codeph> flags only work on Docker 1.6 or later.</note>
    </section>-->
  </body>
</topic>
