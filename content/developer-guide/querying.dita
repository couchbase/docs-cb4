<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="devguide-concept-querying">
 <title>Querying with N1QL</title>
 <shortdesc>You can use the N1QL query language to search and query documents from your
		applications.</shortdesc>
 <conbody>
        <section>
            <title>Prerequisites for querying</title>
            <p>To use N1QL queries, your cluster must have at least one node with the query and
                index services enabled.</p>
        </section>
        <section>
            <title>Executing queries</title>
            <p>Couchbase queries may be issued by one of the following mechanisms:<ul
                    id="ul_pn5_l3t_zs">
                    <li>Couchbase SDK.</li>
                    <li><i>cbq</i> shell.</li>
                    <li><xref href="cli-overview.dita#concept_lg3_dhm_zs">cbc</xref> command-line
                        (via <codeph>cbc n1ql</codeph>).</li>
                    <li>Query REST API.</li>
                <li><xref href="../tools/query-workbench.dita">Query workbench</xref> [Developer Preview]</li>
                </ul></p>
            <p>As a N1QL query is essentially a string parsed by the query server, and as the result
                for each query is essentially JSON, queries will function the same regardless of
                whether they are executed using the <cmdname>cbq</cmdname> shell, an SDK, or using
                the REST API directly. Nevertheless, the result format received using an SDK may be
                a bit different than that received using <cmdname>cbq</cmdname> or the REST API.</p>
            <p>To demonstrate the query language and functionality, we will be querying the
                    <codeph>travel-sample</codeph> bucket which can be installed during
                installation. If you didn’t install it during install-time, you can install it using
                the Couchbase Web Console. See <xref href="../settings/install-sample-buckets.dita"></xref> for details.</p>
            <p>When issuing N1QL queries using an SDK, ensure the SDK is connected to the bucket you
                are issuing queries against.</p>
        </section>
        <section>
            <title>Running cbq</title>
            <p><cmdname>cbq</cmdname> is an interactive shell for executing N1QL queries. It is
                shipped with Couchbase Server.</p>
            <p>It is not in the system-wide path by default. To run it, invoke the full path to cbq.
                Copy/paste the following into your terminal:<ul id="ul_gst_r3t_zs">
                    <li><b>Linux</b><codeblock>/opt/couchbase/bin/</codeblock></li>
                    <li><b>Mac OS
                        X</b><codeblock>"/Applications/Couchbase Server.app/Contents/Resources/couchbase-core/bin/cbq"</codeblock></li>
                    <li><b>Microsoft Windows</b>
                        <codeblock>C:\Program Files\Couchbase\Server\bin\cbq.exe</codeblock></li>
                </ul><note type="warning"> By default, <cmdname>cbq</cmdname> tries to connect to the query service running locally on the current node. If no query service is running on the current node, a connection refused error will be returned  whenever you attempt to execute a query.<p>If you are running cbq remotely from a node, you can specify the <parmname>--engine</parmname> parameter and point the <cmdname>cbq</cmdname> shell to connect to a node that has the query service. For example:<codeblock>cbq "--engine=http://<varname>URL_to_node_with_query_service</varname>:8093</codeblock></p></note></p>
        </section>
     <section>
         <title>Querying</title>
         
<note type="important">An index is required to satisfy the query. Everything falls back to the
                    <term>primary index</term> if no other indexes satisfy the query. </note>
         <note>The query service communicates with the indexing service and requires that the
             indexing service be active for a given bucket. In order to eliminate unnecessary
             indexing activity on buckets that are not queried via the query service, buckets are
             not indexed by default. </note>
         <p>Queries are issued in the SDK using the query or <apiname>n1qlQuery</apiname> API (in
                some SDKs this is just called <apiname>query</apiname>). This API accepts a string
                which is the statement to execute, and returns the rows (or an iterable object which
                returns rows) representing the query’s result. Here is the above query, executed in
                Python:<screen>>>> <b>for row in cb.n1ql_query('SELECT type FROM `travel-sample` LIMIT 4'):</b>
...   <b>print row</b>
... 
{u'type': u'airline'}
{u'type': u'airline'}
{u'type': u'airline'}
{u'type': u'airport'}
</screen></p>
         <p>The above query using
             <i>cbq</i>:<screen>cbq> <b>SELECT type FROM `travel-sample` LIMIT 4;</b>
{
    "requestID": "3693c61a-5126-4e28-a7a4-9b3a7f4ddbf3",
    "signature": {
        "type": "json"
    },
    "results": [
        {
            "type": "airport"
        },
        {
            "type": "airport"
        },
        {
            "type": "airport"
        },
        {
            "type": "airport"
        }
    ],
    "status": "success",
    "metrics": {
        "elapsedTime": "436.801261ms",
        "executionTime": "436.607057ms",
        "resultCount": 4,
        "resultSize": 164
    }
}
</screen></p>
         <p>The result is a JSON object. The important field within the object is the
             <codeph>results</codeph> property, which contains an array of results (a result
             set). Each item within the result set may be thought of as a “row”. In this case,
             since the entire document is selected, each result contains the entire content of
             the document.<note>Couchbase SDKs provide a row-based API which returns an object
                 which can be iterated over. Internally however, the response looks like the
                 <i>cbq</i> output above.</note></p>
         <p>To understand the execution plan for a query, you can use the <xref
                    href="../n1ql/n1ql-language-reference/explain.dita">EXPLAIN</xref> statement
                before the query. </p>
     </section>
        <section>
            <title>Creating the primary index</title>
            <note>The <codeph>travel-sample</codeph> bucket already comes with predefined indexes.
                As such, creating the primary index is not needed for the
                    <codeph>travel-sample</codeph> bucket.</note>
           
            <p>To create the primary index, issue the following
                query:<codeblock>CREATE PRIMARY INDEX ON `travel-sample`;</codeblock>Note the
                backticks (`) around the bucket name. Also note that the statement ends with a
                semicolon: all N1QL statements end with a semicolon, as is standard in SQL.</p>
            <p>You may also create the primary index using an SDK. Here is an example in Python:</p>
            <codeblock outputclass="language-python">cb.n1ql_query('CREATE PRIMARY INDEX ON `travel-sample`').execute()</codeblock>
            <note>Creating the primary index may fail if it already exists. This is OK for now. </note>
            <p>For more information about improving the performance of a query using indexes
                (non-primary), see <xref href="#devguide-concept-querying/covering-idx"
                    format="dita"/>.</p>
</section>
        <section>
            <title>Specifying query criteria</title>
            <p>Specifying criteria is done much in the same manner as in SQL: Using a
                    <codeph>WHERE</codeph> clause. Multiple conditions can be specified using the
                    <codeph>AND</codeph> or <codeph>OR</codeph>
                keywords:<screen>cbq> <b>SELECT airportname, city, country FROM `travel-sample` WHERE type="airport" AND city="Reno";</b>
{
    "requestID": "ef72fcdd-a4b8-4cb8-9a7b-a44aefb4f24d",
    "signature": {
        "airportname": "json",
        "city": "json",
        "country": "json"
    },
    "results": [
        {
            "airportname": "Reno Tahoe Intl",
            "city": "Reno",
            "country": "United States"
        }
    ],
    "status": "success",
    "metrics": {
        "elapsedTime": "9.903854596s",
        "executionTime": "9.903509441s",
        "resultCount": 1,
        "resultSize": 124
    }
}</screen>In
                the above query, we select all records that are of type <i>airport</i> and have a
                city of <i>Reno</i>.</p>
            <p>Here is an example of the above query in other SDKs:</p>
            <p><xref
                    href="https://github.com/couchbaselabs/devguide-examples/blob/master/c/query-criteria.cc"
                    format="html" scope="external">C</xref> | <xref
                    href="https://github.com/couchbaselabs/devguide-examples/blob/master/python/query-criteria.py"
                    format="html" scope="external">Python</xref> | <xref
                    href="https://github.com/couchbaselabs/devguide-examples/blob/master/java/src/main/java/com/couchbase/devguide/QueryCriteria.java"
                    format="html" scope="external">Java</xref> | .NET | <xref
                    href="https://github.com/couchbaselabs/devguide-examples/blob/master/go/query-criteria.go"
                    format="html" scope="external">Go</xref> | <xref
                    href="https://github.com/couchbaselabs/devguide-examples/blob/master/nodejs/query-criteria.js"
                    format="html" scope="external">node.js</xref></p>
        </section>
        <section>
            <title>Querying nested documents</title>
            <p>The above queries showed how to query top-level fields within a document. One of the
                main differences between JSON and flat rows is that JSON allows a nested structure
                where sub-documents can reside. N1QL contains extensions to deal with nested
                documents.</p>
            <screen>cbq> <b>SELECT airportname, city, country, geo.alt FROM `travel-sample` WHERE type="airport" AND geo.alt > 4000 AND country="United States" LIMIT 3;</b>
{
    "requestID": "0fe0bb33-987f-4095-acf3-220378344a85",
    "signature": {
        "airportname": "json",
        "alt": "json",
        "city": "json",
        "country": "json"
    },
    "results": [
        {
            "airportname": "Cheyenne Rgnl Jerry Olson Fld",
            "alt": 6156,
            "city": "Cheyenne",
            "country": "United States"
        },
        {
            "airportname": "Pueblo Memorial",
            "alt": 4726,
            "city": "Pueblo",
            "country": "United States"
        },
        {
            "airportname": "Cedar City Rgnl",
            "alt": 5622,
            "city": "Cedar City",
            "country": "United States"
        }
    ],
    "status": "success",
    "metrics": {
        "elapsedTime": "2.284177667s",
        "executionTime": "2.283990592s",
        "resultCount": 3,
        "resultSize": 473
    }
}</screen>
            <p>The above query selects airports in the United States which have an altitude of 4,000
                feet above sea level or greater.</p>
            <p>Note that the syntax <codeph>geo.alt</codeph> is used. In N1QL, this indicates that
                geo is a subdocument, and that its alt field (within the sub-document) is
                referenced. For comparison, the actual document looks like this (with the relevant
                field in
                bold):<screen>{
                "airportname": "Cedar City Rgnl",
                "city": "Cedar City",
                "country": "United States",
                "faa": "CDC",
                "<b>geo</b>": {
                    "<b>alt</b>": 5622,
                    "lat": 37.700967,
                    "lon": -113.098847
                },
                "icao": "KCDC",
                "id": 3824,
                "type": "airport",
                "tz": "America/Denver"
}</screen></p>
            <note>In SQL, the dot syntax is used to indicate a specific column from a specific
                table. This syntax may also be used in N1QL if the top level item (the first element
                of the field) refers to a bucket.</note>
        </section>
        <section>
            <title>Advanced subdocument access</title>
            <p>While N1QL allows you to select documents based on whether a given field has a given
                value, it can also perform powerful subdocument searching, allowing you to select
                documents based on more powerful criteria typically only available within
                full-featured programming languages.</p>
            <p>For example:<ul id="ul_onq_4kt_zs">
                    <li>A document contains any subdocument of which any (or every) child matches a
                        given criteria.</li>
                    <li>All of a document’s immediate children satisfy a given criteria.</li>
                    <li>Any child within a document (and any of its sub-documents) contains a given
                        value.</li>
                </ul>These searches can be performed using the <codeph>ANY</codeph>,
                    <codeph>EVERY</codeph>, and <codeph>WITHIN</codeph> operators.</p>
            <draft-comment>[TODO. FILL IN THIS SECTION. travel-sample doesn’t provide a good data
                set to demonstrate this sort of query….]</draft-comment>
        </section>
        <section>
            <title>Aggregate functions</title>
            <p>You can also run analysis on records within the bucket. The following query returns
                the number of types in the <i>travel-sample</i>
                bucket:<codeblock>>>> <b>for row in cb.n1ql_query("SELECT DISTINCT(type) FROM `travel-sample`"):</b>
...   <b>print row</b>
... 
{u'type': u'route'}
{u'type': u'airport'}
{u'type': u'airline'}
{u'type': u'landmark'}</codeblock></p>
        </section>
        <section id="devguide-named-placeholders"><title>Query placeholders (Dynamic
                parameters)</title><p>
                <note>This feature is only available in the SDK and REST API. <i>cbq</i> currently
                    does not support placeholders</note>
            </p><p>Query placeholders allow your application to securely use dynamic query
                parameters for your application.</p><p>Consider a function which returns all
                airports located within a given city (passed as input). The query may be divided
                into a <i>fixed</i> or <i>static</i> part (select all airports in a city) and a
                    <i>dynamic</i> part (the actual city to search, specified via user
                input).</p><p>A naive implementation of this function might look something like
                this:</p><codeblock>def airports_in_city(city):
  query_string = "SELECT airportname FROM `travel-sample` WHERE city="
  query_string += '"' + city + '"'
  return cb.n1ql_query(query_string)</codeblock>The
            approach above is both unwieldy and insecure (subject to SQL injection attacks).<p>N1QL
                allows the use of placeholders to declare dynamic query parameters. Here's a version
                of the above using
                placeholders:<codeblock>def airports_in_city(city):
  query_string = "SELECT airportname FROM `travel-sample` WHERE city=<b>$1</b>"
  query = N1QLQuery(query_string, city)
  return cb.n1ql_query(query)</codeblock>The
                    <codeph>$1</codeph> is a positional placeholder. When the query is constructed,
                it may receive arguments, with each argument being used as the placeholder value in
                the query. Thus, <codeph>$1</codeph> refers to the first
                    argument,<codeph>$2</codeph> to the second, and so on.</p><p>Placeholders may
                also be <i>named</i>. This is particularly useful when there are many query
                parameters and ensuring that they are all in the correct order may be cumbersome.
                Name query placeholders take the form of
            <codeph>$name</codeph>.</p><codeblock>query_string = (
"SELECT airportname FROM `travel-sample`"
"WHERE country=$country "
"AND geo.alt > $altitude "
"AND (geo.lat BETWEEN $min_lat AND $max_lat) "
"AND (geo.lon BETWEEN $min_lon AND $max_lon "
)</codeblock>Then
            to issue the actual
            query:<codeblock>query = N1QLQuery(
    query_string,
    country=”United States”,
    altitude=500, min_lat=-50, max_lat=50, min_lon=-180, max_lon=0)</codeblock>A
            similar approach can be used in other SDKs. The links below show using dynamic queries
            in our SDKs:<p><xref
                    href="https://github.com/couchbaselabs/devguide-examples/blob/master/c/query-placeholders.cc"
                    format="html" scope="external">C</xref> | <xref
                    href="https://github.com/couchbaselabs/devguide-examples/blob/master/python/query-placeholders.py"
                    format="html" scope="external">Python</xref> | <xref
                    href="https://github.com/couchbaselabs/devguide-examples/blob/master/java/src/main/java/com/couchbase/devguide/QueryPlaceholders.java"
                    format="html" scope="external">Java</xref> | .NET | <xref
                    href="https://github.com/couchbaselabs/devguide-examples/blob/master/go/query-placeholders.go"
                    format="html" scope="external">Go</xref> | <xref
                    href="https://github.com/couchbaselabs/devguide-examples/blob/master/nodejs/query-placeholders.js"
                    format="html" scope="external">node.js</xref></p></section>
        <section id="prepare-stmts"><title>Query optimization using prepared (optimized) statements</title>When a N1QL
            query string is sent to the server, the server will inspect the string and parse it,
            planning which indexes to query. Once this is done, it generates a <i>query plan</i>.
            The computation for the plan adds some additional processing time and overhead for the
                query.<p>Often-used queries can be <i>prepared</i> so that its <i>plan</i> is
                generated only once. Subsequent queries using the same query string will use the
                pre-generated <i>plan</i> instead, saving on the overhead and processing of the plan
                each time.</p><p>You can indicate to the SDK that a given query should be optimized
                in the above fashion. When an SDK sees that a query should be optimized, it will
                internally prepare the statement and store the plan in an internal cache. When
                issuing the query again, the SDK will check to see if a plan exists in its cache,
                and will send the plan to the server.</p><p>To indicate that an SDK should optimize
                a query, the <parmname>adhoc</parmname> parameter should be set to false. When a
                query is not <i>ad-hoc</i>, the SDK will fetch the plan (if it does not already have
                it). Do not turn off the <i>adhoc</i> flag for each query since only a finite number
                of query plans (currently 5000) can be stored in the SDK.</p><p>
                <codeblock>query = N1QLQuery("SELECT airportname FROM `travel-sample` WHERE country=$1", "USA")
q.adhoc = False</codeblock>
                <note>Parameterized queries are considered the same query for caching and planning
                    purposes, even if the supplied parameters are different.</note>
            </p><p>For more information on how to optimize queries using prepared statements, see
                    <xref href="../n1ql/n1ql-language-reference/prepare.dita">PREPARE</xref>
                statement in <cite>N1QL language reference</cite>.</p></section>
     <section id="covering-idx"><title>Query optimization using covering indexes</title> Indexes
            help improve the performance of a query. When an index includes the actual values of all
            the fields specified in the query, the index covers the query and eliminates the need to
            fetch the actual values from the Data Service. An index, in this case, is called a
            covering index and the query is called a covered query. For more information, see <xref
                href="../indexes/covering-indexes.dita"/>.</section>
    </conbody>
</concept>
