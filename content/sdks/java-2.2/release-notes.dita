<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_jc_rn_220">
	<title>Release notes</title>
	<shortdesc>Release notes for the 2.2 version of the Java SDK.</shortdesc>

		<conbody>
			<section>
				<title>Couchbase Java Client 2.2.8 GA (8 June 2016)</title>
				<p>Version 2.2.8 is the eighth bugfix release of the 2.2 series. It brings bug fixes and
				enhancements.</p>
			</section>

			<section id="ga228-features">
				<title>New features</title>
				<p>This release contains the following enhancements:</p>
				<ul>
					<li>For this release, the associated <codeph>core-io</codeph> version is also one patch version ahead with <codeph>1.2.9</codeph>.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-961" format="html"
						scope="external">JCBC-961</xref>: In <codeph>ViewQuery</codeph>,  the
						<codeph>isOrderRetained</codeph> getter is now public.</li>
				</ul>
			</section>

			<section id="ga228-fixes">
				<title>Fixed Issues</title>
				<p>This release fixes the following issues:</p>
				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-340" format="html"
						scope="external">JVMCBC-340</xref>: Fix the keep alive messages not being
					sent anymore. This issue was due to a 2.2.6 change in Netty usage, saving
					allocations on writes but not triggering the same kind of idle signals.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-339" format="html" scope="external">JVMCBC-339</xref>: Flush signals are only sent to non-null endpoints, guarding against potential NPEs.</li>
				</ul>
			</section>

			<section>
				<title>Couchbase Java Client 2.2.7 GA (6 May 2016)</title>
				<p>Version 2.2.7 is the seventh bugfix release of the 2.2 series. It brings bug fixes and enhancements.</p>
			</section>

			<section id="ga227-features">
				<title>New features</title>
				<p>This release contains the following enhancements:</p>
				<ul>
					<li>For this release, the associated <codeph>core-io</codeph> version is also one patch version ahead with <codeph>1.2.8</codeph>.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-325" format="html" scope="external">JVMCBC-325</xref>
					, <xref href="https://www.couchbase.com/issues/browse/JVMCBC-327" format="html" scope="external">JVMCBC-327</xref>:
					All outgoing HTTP requests now have a HOST header.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-952" format="html" scope="external">JCBC-952</xref>: The experimental Index Management API now has the "N1ql" word in all methods (like "<codeph>listN1qlIndexes()</codeph>") to allow future evolutions with different types of indexes. It can also create a secondary N1QL index with a WHERE clause.</li>
				</ul>
			</section>

			<section id="ga227-fixes">
				<title>Fixed Issues</title>
				<p>This release fixes the following issues:</p>
				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-326" format="html" scope="external">JVMCBC-326</xref>:
					N1QL and View parser fix for json strings ending with 2 backslashes.</li>
				</ul>
			</section>


			<section>
				<title>Couchbase Java Client 2.2.6 GA (5 April 2016)</title>
				<p>Version 2.2.6 is the sixth bugfix release of the 2.2 series. It brings bug fixes,
				enhancements, and correctness improvements.</p>
			</section>

			<section id="ga226-features">
				<title>New features and behavioral changes</title>
				<p>This release contains the following enhancements:</p>
				<ul>
					<li>For this release, the associated <codeph>couchbase-jvm-core</codeph> version is one patch version ahead with <codeph>1.2.7</codeph>.</li>
					<li>Dependencies: RxJava and Netty dependencies have been bumped to their latest bugfix releases (<codeph>1.0.17</codeph> and <codeph>4.0.35</codeph>).</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-928" format="html" scope="external">JCBC-928</xref>, <xref href="https://www.couchbase.com/issues/browse/JCBC-926" format="html" scope="external">JCBC-926</xref>, <xref href="https://www.couchbase.com/issues/browse/JCBC-936" format="html" scope="external">JCBC-936</xref>, <xref href="https://www.couchbase.com/issues/browse/JCBC-925" format="html" scope="external">JCBC-925</xref>: The Index Management API has been overhauled and improved. You can notably now manage primary indexes with custom names.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-944" format="html" scope="external">JCBC-944</xref>, <xref href="https://www.couchbase.com/issues/browse/JCBC-946" format="html" scope="external">JCBC-946</xref>, <xref href="https://www.couchbase.com/issues/browse/JCBC-948" format="html" scope="external">JCBC-948</xref>, <xref href="https://www.couchbase.com/issues/browse/JVMCBC-324" format="html" scope="external">JVMCBC-324</xref>: N1QL improvements. For the <codeph>adhoc(false)</codeph> category of N1QL queries, it is now possible to disable sending the prepared_plan with prepared statements to save bandwidth (use with care!), and internal prepared names are correctly escaped if used. N1QL helper to build updateFor clause. In the core, some N1QL requests can be made to target specific nodes.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-931" format="html" scope="external">JCBC-931</xref>, <xref href="https://www.couchbase.com/issues/browse/JCBC-938" format="html" scope="external">JCBC-938</xref>, <xref href="https://www.couchbase.com/issues/browse/JCBC-940" format="html" scope="external">JCBC-940</xref>: The experimental Subdocument API has been enhanced and slightly streamlined: some array-related methods have been renamed (eg. <codeph>pushFront</codeph> to <codeph>arrayPrepend</codeph>), array mutation methods now can accept several items to insert in one go, the <codeph>doLookup()</codeph> and <codeph>doMutate()</codeph> execution methods have both been renamed <codeph>execute()</codeph>.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-313" format="html" scope="external">JVMCBC-313</xref>: SCRAM-* is now enabled by default if the server supports it.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-317" format="html" scope="external">JVMCBC-317</xref>: It is now possible to use the Epoll netty transport for better IO performance on Linux. The library is embedded in the latest Netty distribution.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-875" format="html" scope="external">JCBC-875</xref>: The <codeph>Retrybuilder</codeph> now supports adding an advanced error predicate (allowing for example to only retry on exceptions with a certain message), as well as a <codeph>doOnRetry</codeph> hook that you can use to get notified of each retry attempt.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-943" format="html" scope="external">JCBC-943</xref>, <xref href="https://www.couchbase.com/issues/browse/JCBC-322" format="html" scope="external">JVMCBC-322</xref>: Version information about the SDK is now richer in <codeph>CoreEnvironment</codeph> and <codeph>CouchbaseEnvironment</codeph>. The former's <codeph>packageNameAndVersion</codeph> method (as well as the user agent) now displays the java-client version, with the core's version in the details. Getters have been added so you can get the version and build number (a more exact git reference) for both core and java-client.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-937" format="html" scope="external">JCBC-937</xref>: <codeph>JsonObject</codeph> and <codeph>JsonArray</codeph> now both accept a size hint at construction.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-298" format="html" scope="external">JVMCBC-298</xref>: Implement 0x97 DCP protocol command to get last closed checkpoint (<codeph>OP_GET_LAST_CHECKPOINT</codeph>).</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-300" format="html" scope="external">JVMCBC-300</xref>, <xref href="https://www.couchbase.com/issues/browse/JVMCBC-299" format="html" scope="external">JVMCBC-299</xref>, <xref href="https://www.couchbase.com/issues/browse/JVMCBC-301" format="html" scope="external">JVMCBC-301</xref>, <xref href="https://www.couchbase.com/issues/browse/JCBC-935" format="html" scope="external">JCBC-935</xref>, <xref href="https://www.couchbase.com/issues/browse/JVMCBC-310" format="html" scope="external">JVMCBC-310</xref>, <xref href="https://www.couchbase.com/issues/browse/JVMCBC-303" format="html" scope="external">JVMCBC-303</xref>, <xref href="https://www.couchbase.com/issues/browse/JVMCBC-308" format="html" scope="external">JVMCBC-308</xref>, <xref href="https://www.couchbase.com/issues/browse/JVMCBC-302" format="html" scope="external">JVMCBC-302</xref>, <xref href="https://www.couchbase.com/issues/browse/JVMCBC-306" format="html" scope="external">JVMCBC-306</xref>: Many small performance and GC enhancements: avoid unnecessary allocations, avoid redundant encoding of keys, optimize scheduling and selection strategies, better split classes... Allow optional Observable completion on the Event Loops.</li>
				</ul>
			</section>

			<section id="ga226-fixes">
				<title>Fixed Issues</title>
				<p>This release fixes the following issues:</p>
				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-309" format="html" scope="external">JVMCBC-309</xref>: Gracefully handle errors during metrics collection.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-323" format="html" scope="external">JVMCBC-323</xref>: Gracefully handle config completion errors during shutdown.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-312" format="html" scope="external">JVMCBC-312</xref>, <xref href="https://www.couchbase.com/issues/browse/JVMCBC-315" format="html" scope="external">JVMCBC-315</xref>, <xref href="https://www.couchbase.com/issues/browse/JVMCBC-305" format="html" scope="external">JVMCBC-305</xref>, <xref href="https://www.couchbase.com/issues/browse/JVMCBC-311" format="html" scope="external">JVMCBC-311</xref>: DCP related fixes: use the same logical connection for all DCP nodes, use double for ack threshold in Builder, allow DCP connectors to notify core about processing messages, do not release buffer without copying it.</li>
				</ul>
			</section>


			<section>
				<title>Couchbase Java Client 2.2.5 GA (1 March 2016)</title>
				<p>Version 2.2.5 is the fifth bugfix release of the 2.2 series. It brings bug fixes,
				enhancements, and correctness improvements.</p>
			</section>

			<section id="ga225-features">
				<title>New features and behavioral changes</title>
				<p>This release contains the following enhancements:</p>
				<ul>

					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-906" format="html" scope="external">JCBC-906</xref>: (experimental) The index management API on the <codeph>BucketManager</codeph> has been revised to match the desired functionality across SDKs.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-921" format="html" scope="external">JCBC-921</xref>: (experimental) The subdocument API has been rewritten completely to now use a builder-like API that unifies single and multi-path operations significantly. Note that you can only use it against Couchbase Server 4.5 or later.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-804" format="html"
						scope="external">JCBC-804</xref>: (experimental) Enhanced "Read Your Writes"
					capabilities have been added to N1QL queries. If <codeph>MutationTokens</codeph>
					are enabled on the environment, the result of a mutation can be passed in as a
					query option on a N1QL query, providing better performance in certain use cases.
					This is a pure optimization on <codeph>REQUEST_PLUS</codeph> and should only be
					considered if that one does not meet the requirements. Note that you can only
					use it against Couchbase Server 4.5 or later.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-910" format="html"
						scope="external">JCBC-910</xref>: Thanks to a community contribution by Kim
					Intae it is now possible to optionally specify a strict ordering on View queries
					when <codeph>includeDocs</codeph> is used. By default, the rows are returned as
					the documents arrive, but sometimes it is important to keep the ordering from
					the original row stream.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-280" format="html"
						scope="external">JVMCBC-280</xref>: Client side support for SCRAM-SHA1,
					SCRAM-SHA256 and SCRAM-SHA512 has been added, but is disabled by default (and
					can only be enabled through a to-be-removed-soon system property called
						<codeph>com.couchbase.scramEnabled</codeph>). Once the server provides full
					support (Couchbase Server 4.5 GA), it will be enabled by default.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-292" format="html" scope="external">JVMCBC-292</xref>: It is now possible to use different powers on the <codeph>ExponentialDelay</codeph> in addition to the default power of two. This gives more flexibility in how fast the delay should grow and what pattern it is using.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-294" format="html" scope="external">JVMCBC-294</xref>: The SDK now passes bucket-level credentials to the FTS service (similar to N1QL and Views).</li>
				</ul>
			</section>

			<section id="ga225-fixes">
				<title>Fixed Issues</title>
				<p>This release fixes the following issues:</p>
				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-293" format="html" scope="external">JVMCBC-293</xref>: A bug in the <codeph>ExponentialDelay</codeph> has been fixed which makes sure the overflow guard works against 64 bit and not 32 (since it is using a long field internally). This is expanding on earlier fixes in the exponential delay, avoiding it to wrap around and starting with the lowest value again.</li>
				</ul>
			</section>


			<section>
				<title>Couchbase Java Client 2.2.4 GA (3 February 2016)</title>
				<p>Version 2.2.4 is the fourth bugfix release of the 2.2 series. It brings bug fixes,
				enhancements, and correctness improvements.</p>
			</section>

			<section id="ga224-features">
				<title>New features and behavioral changes</title>
				<p>This release contains the following enhancements:</p>

				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-849" format="html"
						scope="external">JCBC-849</xref>: Experimental support for the
						<codeph>SubDocument</codeph> feature has been added. Subdocument allows you
					to transmit only the specific part of a JSON document that you want.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-850" format="html"
						scope="external">JCBC-850</xref>: Experimental support for <term>Full Text
						Search (FTS)</term>, a new type of index in Couchbase Server 4.5 that allows
					you to do, for example,  the fuzzy text search queries.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-869" format="html" scope="external">JCBC-869</xref>: N1QL row values can now be deserialized by a custom library since they expose the raw value as a <codeph>byte[]</codeph> through <codeph>byteValue()</codeph>. The <codeph>JsonObject</codeph> <codeph>value()</codeph> is deserialized lazily from this byte array, so never invoking it will completely avoid the overhead of JsonObject deserialization if you don't need it.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-279" format="html" scope="external">JVMCBC-279</xref>: The bucket's name has been added to the <codeph>MutationToken</codeph> produced when enhanced durability is activated.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-282" format="html" scope="external">JVMCBC-282</xref>: When a node is being reconnected, a notification is sent through the <codeph>EventBus</codeph>.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-281" format="html" scope="external">JVMCBC-281</xref>,
					<xref href="https://www.couchbase.com/issues/browse/JVMCBC-284" format="html" scope="external">JVMCBC-284</xref>,
					<xref href="https://www.couchbase.com/issues/browse/JVMCBC-285" format="html" scope="external">JVMCBC-285</xref>,
					<xref href="https://www.couchbase.com/issues/browse/JVMCBC-287" format="html" scope="external">JVMCBC-287</xref>:
					Various allocating and caching changes for performance improvements.</li>
				</ul>
			</section>

			<section id="ga224-fixes">
				<title>Fixed Issues</title>
				<p>This release fixes the following issues:</p>
				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-278" format="html" scope="external">JVMCBC-278</xref>: A socket timeout on a Netty endpoint would prevent any further attempt at reconnecting the client altogether. A message in the logs stating that "Socket connect took longer than specified timeout" would appear and the client wouldn't reconnect to the node when it would come back online.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-288" format="html"
						scope="external">JVMCBC-288</xref>: Various <codeph>Locators</codeph> now
					correctly only locate a <codeph>Node</codeph> that has the proper service
					enabled.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-903" format="html" scope="external">JCBC-903</xref>: Some <codeph>CouchbaseFeature</codeph> enums were referencing wrong Couchbase Server version.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-904" format="html" scope="external">JCBC-904</xref>: The <codeph>socketConnectTimeout</codeph> tuning can now properly be set on the <codeph>CouchbaseEnvironment</codeph>.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-277" format="html" scope="external">JVMCBC-277</xref>: Netty sources are now properly relocated in the source jar to match the shaded classes in the main jar (looking at sources and entering the Netty shaded classes should now work).</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-286" format="html"
						scope="external">JVMCBC-286</xref>: Build process now checks both in core
					and client that only classes and methods that are available in a Java 6 JRE/JDK
					are used.</li>
				</ul>
			</section>




			<section>
				<title>Couchbase Java Client 2.2.3 GA (5 January 2016)</title>

				<p>Version 2.2.3 is the third bug fix release of the 2.2 series. It brings bug fixes,
				enhancements, and correctness improvements.</p>

			</section>

			<section id="ga223-features">
				<title>New features and behavioral changes</title>
				<p>This release contains the following enhancements:</p>

				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-777" format="html" scope="external">JCBC-777</xref>: Experimental Index management on the <codeph>BucketManager</codeph> has been added, allowing to create, drop and list GSI indexes.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-883" format="html" scope="external">JCBC-883</xref>, <xref href="https://www.couchbase.com/issues/browse/JCBC-757" format="html" scope="external">JCBC-757</xref>: The Query Builder API has been greatly extended. <codeph>Select</codeph> now supports <codeph>fromCurrentBucket()</codeph>. Support for Insert, Upsert, Update, Remove and Merge has been added.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-273" format="html" scope="external">JVMCBC-273</xref>: Experimental core support for the <codeph>SubDocument API</codeph> has been added.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-269" format="html" scope="external">JVMCBC-269</xref>: DCP core implementation of Get Failover Logs (0x54) command.</li>
				</ul>
			</section>

			<section id="ga223-fixes">
				<title>Fixed Issues</title>
				<p>This release fixes the following issues:</p>
				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-895" format="html" scope="external">JCBC-895</xref>: A potential overflow when using MAX_VALUE on the <codeph>RetryBuilder</codeph> has been fixed.</li>


					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-894" format="html" scope="external">JCBC-894</xref>: Thanks to a community contribution, the <codeph>BucketManager</codeph> is now compatible with old Couchbase/Membase releases.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-267" format="html" scope="external">JVMCBC-267</xref>, <xref href="https://www.couchbase.com/issues/browse/JVMCBC-272" format="html" scope="external">JVMCBC-272</xref>,
					<xref href="https://www.couchbase.com/issues/browse/JVMCBC-270" format="html" scope="external">JVMCBC-270</xref>: DCP related fixes relative to seqno and flow control.</li>


					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-274" format="html"
						scope="external">JVMCBC-274</xref>: The <codeph>ExponentialDelay</codeph>
					grows so large by the 32th attempt that it overflows back to negative values,
					producing a cycle of short, bursty retries back every 32 attempts (especially if
					the lower bound and time unit are small). It is now staying at
						<codeph>Integer.MAX_VALUE</codeph> delay duration past the 32th
					attempt.</li>

				</ul>
			</section>

			<section>
				<title>Couchbase Java Client 2.2.2 GA (12 November 2015)</title>
				<p>Version 2.2.2 is the second bug fix release of the 2.2 series. It brings many
					bug fixes, stability improvements as well as smaller enhancements.</p>
			</section>

      		<section id="ga222-features">
				<title>New features and behavioral changes</title>
				<p>This release contains the following enhancements:</p>

				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-871" format="html"
						scope="external">JCBC-871</xref>: The <codeph>N1qlQueryResult</codeph> (and
					async variant) has been extended to now also expose the <codeph>Status</codeph>
					as a string, allowing for more fine-grained matching and reporting on potential
					errors.</li>


					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-256" format="html"
						scope="external">JVMCBC-256</xref>: In the next minor version, a blocking
					version of the <codeph>shutdown</codeph> method on the Environment will be
					introduced. To make the smaller impact, the current <codeph>shutdown</codeph>
					method on the <codeph>CouchbaseEnvironment</codeph> has been deprecated and
					explicitly refers to the new <codeph>shutdownAsync</codeph> method.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-863" format="html"
						scope="external">JCBC-863</xref>, <xref
						href="https://www.couchbase.com/issues/browse/JCBC-870" format="html"
						scope="external">JCBC-870</xref>: While it is still best practice and
					heavily encouraged to cache and reuse <codeph>Bucket</codeph> references, an
					effort has been made to reduce the impact of potential misuse. The client now
					caches open bucket instances and reuses them where possible if many subsequent
						<codeph>openBucket</codeph> calls are performed.</li>
				</ul>
			</section>

			<section id="ga222-fixes">
				<title>Fixed issues</title>
				<p>This release fixes the following issues:</p>

				<ul>
					<li>RxJava has been upgraded to 1.0.15 to address shutdown-cleanup related issues. In-depth discussion of this topic can be read <xref href="https://github.com/ReactiveX/RxJava/pull/3149" format="html" scope="external">here</xref>.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-864" format="html"
						scope="external">JCBC-864</xref>: The remove operation, when used with the
					durability requirements now properly honors the CAS when provided inside the
						<codeph>Document</codeph>. It now correctly throws
						<codeph>CASMismatchExceptions</codeph> when the CAS does not match with the
					server. Previously, the supplied CAS was ignored, and the remove operation
					performed without optimistic concurrency checks.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-263" format="html"
						scope="external">JVMCBC-263</xref>: A bug in the view query parser has been
					uncovered, which would make it hang particularly when the key  includes a
					closing <codeph>}</codeph>, but no opening <codeph>{</codeph> inside a
					string.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-262" format="html"
						scope="external">JVMCBC-262</xref>: The logic that performs the proactive
					load of new configurations through the "Carrier Publication" mechanism now only
					targets nodes where the KV-Service is enabled. Such targeting is important in
					MDS scenarios so that it doesn't ask nodes where only the query or indexing
					services are enabled.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-102" format="html" scope="external">JVMCBC-102</xref>: The initial bootstrap process has been made more resilient to individual node failures, fixing a bunch of bugs around initial bootstrapping. Especially the case where one of the nodes is not responding and opening a <codeph>memcached</codeph> type bucket now works correctly (this involves internally skipping over not responding nodes as well as falling back from carrier publication to the http bootstrapping approach).</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-257" format="html"
						scope="external">JVMCBC-257</xref>, <xref
						href="https://www.couchbase.com/issues/browse/JVMCBC-265" format="html"
						scope="external">JVMCBC-265</xref>: The configuration management logic has
					been improved in various places, making it more resilient to failed bucket open
					attempts (cleaning up the state properly) as well as optimizing the proactive
					config loading approach when no buckets are open or are currently being closed.
					In particular, one issue has been resolved where an asynchronous open bucket
					attempt with a fallback to a good one did not work previously.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-266" format="html"
						scope="external">JVMCBC-266</xref>: The client now proactively checks if the
					document ID is null, empty or too large where it can be directly passed in.
					Previously, the operation would fail with the server responding
						<codeph>INVALID_ARGUMENTS</codeph> where now it is very clear what the root
						cause of the issue is. The client now fails the <codeph>Observable</codeph> right away with an
						<codeph>IllegalArgumentException</codeph> explaining what the problem
					is.</li>

					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-865" format="html"
						scope="external">JCBC-865</xref>: In the N1QL builder API, the an invalid
					query was generated when multiple WHEN blocks are used in the CASE statement,
					leading to query errors. This issue has been fixed; the client now emits correct
					N1QL statements in those cases.</li>
				</ul>
			</section>

			<section>
				<title>Couchbase Java Client 2.2.1 GA (13 October 2015)</title>
				<p>Version 2.2.1 is the first bug fix release of the 2.2 series. It contains bug
					fixes and correctness improvements, especially during bootstrap, shutdown and when
					SSL is enabled.</p>
			</section>

			<section id="ga221-features">
				<title>New features and behavioral changes</title>
				<p>This release contains the following enhancements:</p>

				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-250" format="html"
						scope="external">JVMCBC-250</xref>: An explicit, lower (configurable) socket
					connect timeout is now always used when connections are established. This
					provides more reliable semantics during the socket open phase and allows for
					faster-retrying mechanisms inside the core layer.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-242" format="html"
						scope="external">JVMCBC-242</xref>, <xref
						href="https://www.couchbase.com/issues/browse/JVMCBC-247" format="html"
						scope="external">JVMCBC-247</xref>: The internal dependencies for Jackson
					and Netty have been bumped to their latest bugfix releases for increased
					stability.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-241" format="html"
						scope="external">JVMCBC-241</xref>, <xref
						href="https://www.couchbase.com/issues/browse/JVMCBC-253" format="html"
						scope="external">JVMCBC-253</xref>: Experimental Support for DCP has been
					improved. <codeph>ERANGE</codeph> and <codeph>ROLLBACK</codeph> during the
					stream open phase are now handled properly. Also, it is now possible to
					partially initialize streams (for example to only get the streams for a specific
					number of partitions).</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-246" format="html"
						scope="external">JVMCBC-246</xref>: The KeyValue <cmdname>STAT</cmdname>
					command is now implemented in the core layer, allowing for more flexibility in
					the future to grab key or cluster statistics. Note that STATS are not exposed to
					the <codeph>java-client </codeph>at this point, but might be in the future as
					encapsulated APIs.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-245" format="html"
							scope="external">JVMCBC-245</xref>: When latency metric events are emitted, the original time unit is now included, so later analysis does not need to reference back to the source code for the time unit used.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JCBC-854" format="html"
						scope="external">JCBC-854</xref>: Encoding for all string-based document
					types has been made faster by a factor of 2 and more, this also includes the
						<codeph>RawJsonDocument</codeph>.</li>
				</ul>
			</section>

			<section id="ga221-fixes">
				<title>Fixed issues</title>
				<p>This release fixes the following issues:</p>

				<ul>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-251" format="html"
						scope="external">JVMCBC-251</xref>: The full cleanup of SDK-owned threads
					during full shutdown has been improved across the board, allowing diagnostics
					through logs and fixing behavior especially when performing redeployments in an
					application container.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-248" format="html"
							scope="external">JVMCBC-248</xref>: SSL Handshake failures during the connect phase are now more explicitly handled
							and propagate the right error up the call stack.</li>
					<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-242" format="html"
							scope="external">JVMCBC-242</xref>: A TranscodingException when decoding JSON arrays has been fixed by upgrading the internal Jackson dependency to 2.6.2.</li>
				</ul>
			</section>

		<section>
			<title>Couchbase Java Client 2.2.0 GA (2 September 2015)</title>
			<p>Version 2.2.0 is the first release of the 2.2 series and brings compatibility with
				Couchbase Server 4.0 as well as lots of new features and enhancements. </p>

		</section>
		<section><title>Migration Notes</title>
			<p>While the 2.2 release does not bring any breaking changes to stable APIs over 2.1, some
				APIs have been modified and unstable APIs renamed. The following information provides
				guidelines on migrating from 2.1.x:</p>

			<ul>

				<li>The <codeph>counter(String id, long delta)</codeph> method and associated overloads (custom
					timeout or with durability requirements) have been modified so that it throws a
						<codeph>DocumentDoesNotExistException</codeph> if the document does not
					exist. Previously, the code automatically initialized the document with 0. The
					1.x SDK provided a similar feature, so we wanted to bring it back for more
					flexibility. The new code is simple—just use the overload with an initial value
					of 0: <codeblock outputclass="language-java"><![CDATA[// before
bucket.counter("id", 10);

// after
bucket.counter("id", 10, 0);]]></codeblock>
				</li>

				<li>If the CAS is set on the documents used in append/prepend operations and the server CAS does
					not match, previously a generic CouchbaseException was thrown. Now the code
					checks for this response status and returns a more correct
						<codeph>CASMismatchException</codeph>.<p>Because this exception extends the
							<codeph>CouchbaseException</codeph>, your code might still work although
						checking for this explicit exception type is recommended.</p></li>

				<li>If you have been using the asynchronous API, be aware that all the asynchronous API methods
					are now returning <codeph>cold</codeph> <codeph>Observables</codeph> instead of <codeph>hot</codeph> <codeph>Observables</codeph>. As a result, you
					don't need to call <codeph>Observable.defer()</codeph> around the bucket calls
					if you want proper retry semantics. If you are doing that already, you can
					remove the calls (but don't have to—it's just a little more overhead). Also, it
					has been always recommended, but make sure to subscribe to all of your
					<codeph>Observables</codeph>. Hot <codeph>Observables</codeph><codeph>Observable</codeph> might have been automatically executed, but cold
					<codeph>Observables</codeph> won't. Not subscribing, in general, goes against the RX
					contract.</li>

				<li><p>If you've been implementing your own Document type together with a custom transcoder, you
						now need to implement a new method if you want to use the document together
						with the new feature called enhanced durability. The specific change is that
						you need to add a simple factory method that allows you to pass in the new
							<codeph>MutationToken</codeph>. Your old code will keep working, but for
						future compatibility we recommend adding this new method.</p><p>As an
						example here is how the <codeph>JsonDocument</codeph> implements the new
						method. If you want, you can also make the older factory method just forward
						to the new one:</p><codeblock outputclass="language-java"><![CDATA[// Pre-2.2, can still be used
@Override
public JsonDocument newDocument(String id, int expiry, JsonObject content, long cas) {
    return JsonDocument.create(id, expiry, content, cas);
}

// New in 2.2
@Override
public JsonDocument newDocument(String id, int expiry, JsonObject content, long cas,
    MutationToken mutationToken) {
    return JsonDocument.create(id, expiry, content, cas, mutationToken);
}]]></codeblock><p>If your document extends from the AbstractDocument, make sure you call the new
						super method with the token instead of the old one:</p><codeblock outputclass="language-java"><![CDATA[private JsonDocument(String id, int expiry, JsonObject content, long cas, MutationToken mutationToken) {
    super(id, expiry, content, cas, mutationToken);
}]]></codeblock>Make note of the following:</li>

				<li>To make the N1QL queries more consistent with the View queries, all exposed N1QL
					classes have been prefixed with N1QL or been renamed in a slightly different manner
					to make the intent clear. We did rename Query, QueryResult, QueryRow, their
					asynchronous counterparts, concrete implementations and related tests by prefixing
						<codeph>Query</codeph> with <codeph>N1ql</codeph>. Also,
						<codeph>QueryMetrics</codeph> and <codeph>QueryParams</codeph> have been
					respectively renamed to <codeph>N1qlMetrics</codeph> and <codeph>N1qlParams</codeph>.
					Finally, the <codeph>QueryExecutor</codeph> has been renamed to
						<codeph>N1qlQueryExecutor</codeph>.</li>

				<li>Since we are stabilizing the API now, we also had to rename the
						<codeph>parametrized</codeph> query to <codeph>parameterized</codeph>. This is to
					ensure the best possible experience across SDKs and consistent documentation for
					client and server.</li>

			</ul>

		</section>

<section>
	<title>New features and behavioral changes</title>

			<p>This release brings the following features and enhancements:</p>


			<ul>

				<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-137" format="html"
						scope="external">JVMCBC-137</xref>, <xref
						href="https://www.couchbase.com/issues/browse/JVMCBC-222" format="html"
						scope="external">JVMCBC-222</xref>, <xref
						href="https://www.couchbase.com/issues/browse/JCBC-732" format="html"
						scope="external">JCBC-732</xref>, <xref
						href="https://www.couchbase.com/issues/browse/JCBC-761" format="html"
						scope="external">JCBC-761</xref> (and more): Official Couchbase Server 4.0
					Support. This includes mainly a stable and tested N1QL API, as well as support for
					MDS (Multi-Dimensional Scaling). Use 2.2.0 and later as your go-to release when
					working with CB Server 4.0 and up. </li>


				<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-60" format="html"
						scope="external">JVMCBC-60</xref>: System and Latency Metrics are now collected in
					an "always on" fashion and emitted to the event bus every hour by default. This is
					all configurable and tunable based on the applications needs. Please consult the
					documentation on metrics to get all the nitty gritty details. </li>

				<li><xref href="https://www.couchbase.com/issues/browse/JCBC-826" format="html"
						scope="external">JCBC-826</xref>, <xref
						href="https://www.couchbase.com/issues/browse/JVMCBC-190" format="html"
						scope="external">JVMCBC-190</xref>, <xref
						href="https://www.couchbase.com/issues/browse/JVMCBC-205" format="html"
						scope="external">JVMCBC-205</xref>: 4.0 also introduces a new feature called
					enhanced durability, which allows for more accurate durability requirements
					(PersistTo and ReplicateTo). All you need to do is enable the mutation tokens on the
					environment, but keep in mind that there is an increased byte overhead on every
					mutation. <codeblock outputclass="language-java"><![CDATA[// Enable enhanced durability
CouchbaseEnvironment environment = DefaultCouchbaseEnvironment.builder()
            .mutationTokensEnabled(true)
            .build();

// Perform an operation as before and benefit from it transparently
bucket.upsert(doc, PersistTo.MASTER, ReplicateTo.ONE);]]></codeblock>
				</li>

				<li><xref href="https://www.couchbase.com/issues/browse/JCBC-744" format="html"
						scope="external">JCBC-744</xref>: Experimental support for POJO mapping
					capabilities have been added in the form of a repository API. See this <xref
						href="http://blog.couchbase.com/javasdk-2.2-dp" format="html" scope="external"
						>blog post</xref> for more details. Here is a quick example. Right now you need a
					no-args constructor to recreate the object again, we'll make it more flexible with
					explicit constructors in the future so you can use final fields. <codeblock outputclass="language-java"><![CDATA[public static class User {

    @Id
    private String username;

    private String firstname;

    @Field("lname")
    private String lastname;

    public User(String username, String firstname, String lastname) {
        this.username = username;
        this.firstname = firstname;
        this.lastname = lastname;
    }

    public User() {}
}

Repository repository = bucket.repository();

User user = new User("daschl", "Michael", "N.");
repository.upsert(EntityDocument.create(user));

System.out.println(repository.get("daschl", User.class).content().firstname);]]></codeblock>
				</li>
				<li><xref href="https://www.couchbase.com/issues/browse/JCBC-805" format="html"
						scope="external">JCBC-805</xref>: The <codeph>getFromReplica()</codeph> method now
					has an overload that returns an <codeph>Iterator</codeph>, making it more flexible on
					the blocking API to only extract one or two results if needed (and don't wait for all
					responses). </li>
				<li><xref href="https://www.couchbase.com/issues/browse/JCBC-749" format="html"
						scope="external">JCBC-749</xref>: <codeph>includeDocs</codeph> on the ViewQuery
					has been re-added (it was there in 1.x) so that the blocking API can benefit from
					efficient bulk document loading in the background automatically. If you are using the
					asynchronous API only, you won't need this query option.</li>
				<li><xref href="https://www.couchbase.com/issues/browse/JCBC-784" format="html" scope="external"
						>JCBC-784</xref>: As mentioned in the migration notes above, the counter
					overload with no default value has been enhanced to throw an exception if the
					document does not exist. Previously, it was not possible to only use the counter
					method on documents that exist (they would always be initialized with a default
					value of 0 instead).</li>
				<li><xref href="https://www.couchbase.com/issues/browse/JCBC-836" format="html" scope="external"
						>JCBC-836</xref>: Durability Requirements for <codeph>append</codeph>,
						<codeph>prepend</codeph> and <codeph>counter</codeph> have been added to the
					Bucket API. This allows you to observe persistence and replication not only on
					insert, upsert, replace and remove, but also on append, prepend and counter. Of
					course, this all plays well with the new enhanced durability feature we've added
					if you work against Couchbase Server 4.0 or later.</li>
				<li><xref href="https://www.couchbase.com/issues/browse/JCBC-782" format="html"
						scope="external">JCBC-782</xref>: All asynchronous API calls are now "cold", which
					means they are not eagerly run until subscribed by the caller. This won't affect
					basic usage, but makes it easier when doing asynchronous retry logic or branching to
					fallback calls.</li>
				<li><xref href="https://www.couchbase.com/issues/browse/JCBC-652" format="html" scope="external"
						>JCBC-652</xref>: When creating or replacing a
						<codeph>DesignDocument</codeph>, you can now specify different options that
					are configurable on a per design document basis. Please see the documentation
					for a list of those options.</li>
				<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-237" format="html"
						scope="external">JVMCBC-237</xref>: To detect cluster changes in MDS setup more
					reliably, the SDK now polls for a new configuration every 10 seconds. This is
					completely transparent, but can be seen when dumping the network traffic. Note that
					the NOOP heartbeat polling is still in place, only the piggybacked configuration
					reloading has been superseded with this more general approach.</li>
			</ul>

		</section>

<section>
			<title>Fixed issues</title>
			<p>This release fixes the following issues:</p>

			<ul>
				<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-231" format="html"
						scope="external">JVMCBC-231</xref>: A race condition has been fixed during
					shutdown (internal reconfigure), when all nodes are removed.</li>
				<li><xref href="https://www.couchbase.com/issues/browse/JCBC-834" format="html"
						scope="external">JCBC-834</xref>: The blocking API for spatial queries was using
					the default timeout for N1QL queries instead of views. They are set to the same value
					by default, but can be changed on the environment separately, probably leading to
					weird behavior if not taken into account.</li>
				<li><xref href="https://www.couchbase.com/issues/browse/JCBC-815" format="html"
						scope="external">JCBC-815</xref>: Do not let the
						<codeph>CouchbaseEnvironment.Builder</codeph> implement the
						<codeph>CouchbaseEnvironment</codeph>. This has lead to confusion during
					development and is not necessary.</li>
			</ul>

		</section>

		<section>
			<title>Known issues</title>
			<p>This release contains the following known issues to be addressed in subsequent releases:</p>

			<ul>
				<li><xref href="https://www.couchbase.com/issues/browse/JVMCBC-242" format="html"
					scope="external">JVMCBC-242</xref>: A TranscodingException is thrown when decoding long arrays (for details see the ticket). This has been addressed in 2.2.1.</li>
			</ul>

		</section>



	</conbody>
</concept>
