<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_dbz_51b_4t">
 <title>Using Check and Set (CAS)</title>
 <shortdesc>CAS is acronym for "Check and Set" and is useful for ensuring that a mutation of a
  document by one user or thread does not override another near simultaneous mutation by another
  user or thread. The CAS value is returned by the server with the result when you perform a read on
  a document using Get or when you perform a mutation on a document using Insert, Upsert, Replace or
  Remove.</shortdesc>
 <conbody>
  <section><title>Example: Enforcing optimistic concurrency with CAS</title>
   <p>In certain situations you may want to ensure that you are not overwriting another users
    changes when you perform a mutation operation on a document. For this you have two choices:
    optimistic concurrency or pessimistic concurrency (locking). Optimistic concurrency tends to
    provide better performance than pessimistic concurrency, because no actual locks are held on the
    data.The pattern for optimistic concurrency is simple:</p>
   <ol>
    <li>Perform a Get on a document to retrieve it</li>
    <li>Edit the document as desired</li>
    <li>Perform a mutation on the document and pass the CAS as an argument</li>
    <li>If the mutation fails and the key exists, get the latest revision and apply mutation and
     then submit it again</li>
    <li>Repeat until success</li>
   </ol>
   <p>Here is an example:</p>
   <codeblock outputclass="language-csharp">
    static async Task&lt;bool&gt; UpdatePostWithCasAsync(Post post)
   {
       var bucket = ClusterHelper.GetBucket("default");
       const int maxAttempts = 10;
       var attempts = 0;
   
       do
       {
           //get the original document - if it doesn't exist fail
           var result = await bucket.GetAsync&lt;Post&gt;(post.PostId);
           if (result.Status == ResponseStatus.KeyNotFound)
           {
               return false;
           }
   
           //update the original documents fields
           var original = result.Value;
           original.Content = post.Content;
           original.Author = post.Author;
           original.Views = original.Views++;
   
           //perform the mutation passing in the CAS value
           result = await bucket.UpsertAsync(original.PostId, original, result.Cas);
           if (result.Success)
           {
               return true;
           }
   
           //failed so try again up until maxAttempts
       } while (attempts++ &lt; maxAttempts);
   
       //we failed within maxAttemps
       return false;
   }
  </codeblock>
   <p>If the document doesn't exist, the GetAsync call will return false. If it exists, then it's
    fields will be updated with this latest values passed in the method call. Then an UpsertAsync
    will be attempted and if it succeeds, true will be returned. If not the attempts counter will be
    incremented and the entire sequence will be tried again. Not that logic here can vary quite a
    bit depending upon your use-case, but the pattern itself will pretty much be the same: get the
    latest, make changes, try to update, if it fails try again until successful or until some
    arbitrary limit is reached. </p>
  </section>
 </conbody>
</concept>
